[
    {
        "content": "<p>After asking a bunch of questions, I convinced myself that if a category is freely generated by a graph of computable arrows, whose compositions were also computable, then the generated category itself is computable.</p>\n<p>Although I may have messed something up in that line of thought, it clarified I had a more general question.</p>\n<p>In general how do we show a given category is \"computable\"? I'm vaguely aware that there are certain Toposes that are built specifically to be computable foundations of mathematics, but I'm also curious - can we explore computability in more modest categories?</p>",
        "id": 507042054,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742493452
    },
    {
        "content": "<p>What does it mean for an arrow to be \"computable\"? What does it mean for a category to be \"computable\"?</p>",
        "id": 507047968,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1742495367
    },
    {
        "content": "<p>One may ask if a finite presentation of a category, considered as an equational theory, is decidable.    Turns out presentations without equations, which denote free categories, are decidable.  One may also ask if various constructions on categories are computable, for example, checking if two presentations are equivalent (turns out this one isn't computable in general).  There's a lot of related work on computability for finitely presented groups that transfers to finitely presented categories.  Check out \"the word problem for groups\" for more.  The CQL software (<a href=\"http://categoricaldata.net\">categoricaldata.net</a>) creates decision procedures for finite presentations of categories internally to do pretty much anything interesting with categories.</p>",
        "id": 507049475,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1742495830
    },
    {
        "content": "<p>Thank you! Maybe this follow up question is too broad, can you ask similar questions about categories that you know aren't finitely presentable?</p>\n<p>It just occured to me that \"computable\" = \"constructable\" in my intuition, that's probably a really bad error.</p>\n<p>Aren't certain Topos models of constructive mathematics? Is such a Topos necessarily finitely presentable?</p>",
        "id": 507050679,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742496216
    },
    {
        "content": "<p>Gosh I just found this in the article <a href=\"https://ncatlab.org/nlab/show/topos\">[[Topos]]</a></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Any result in ordinary mathematics whose proof is finitist and constructive automatically holds in any topos. If one removes the restriction that the proof be finitist, then the result holds in any topos with a natural numbers object.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>I guess my follow up question is does this mean you can always represent a Topos on a computer, or am I conflating constructability with computability?</p>",
        "id": 507051878,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742496628
    },
    {
        "content": "<p>(where constructable just means the usual we're not allowed to use the law of the excluded middle etc.)</p>",
        "id": 507052394,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742496793
    },
    {
        "content": "<p>Most categories are infinite - have infinitely many morphisms, infinitely many objects, etc - so to represent them on a computer you need some kind of encoding.  Use of \"presentations\" is one encoding, but there are others (\"Godel numbering\" for example).  I usually think of an elementary topos as the same thing as a Henkin model of higher order logic, so to me that claim you cite is saying that finitist constructive proofs will tend to be expressible in higher order logics, which is true - there are many proof assistants for higher order logic in which you can formalize most math, constructive or otherwise.</p>",
        "id": 507053581,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1742497143
    },
    {
        "content": "<p>Take a look at the \"effective topos\" and \"realizability topos\" for topoi that are built from computable functions, rather than arbitrary functions; these make great models of various programming languages</p>",
        "id": 507053847,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1742497220
    },
    {
        "content": "<p>Thank you, this is a great answer.</p>\n<p>You partially answered this already, but do you have references for learning various ways to encode simple abstract categories, or do you think it's a good idea to invest more/most energy in understanding finitely presentable categories?</p>",
        "id": 507054930,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742497547
    },
    {
        "content": "<p>I'm actually only aware of three ways to encode infinite algebraic structures on a computer: Godel numbering (to be avoided if possible, it's very low level), deep embeddings (corresponding to the presentation approach), and shallow embeddings, where you might for example represent a specific cartesian closed category using another one such as the simply typed lambda calculus.  CQL (or any computer algebra system, such as Mathematica) is a good representative of the deep approach; the category theory library in Haskell or Coq would be an example of the shallow approach.  Certainly, if your goal is to do computational category theory, you should think carefully about the three approaches, as they have different trade-offs, but I'm not aware of say a survey paper about the topic... I'll look for one.  There's stuff like this: <a href=\"https://decomposition.al/blog/2015/06/02/embedding-deep-and-shallow/\">https://decomposition.al/blog/2015/06/02/embedding-deep-and-shallow/</a> and <a href=\"https://proofassistants.stackexchange.com/questions/2499/what-is-a-deep-embedding-vs-a-shallow-embedding-with-examples\">https://proofassistants.stackexchange.com/questions/2499/what-is-a-deep-embedding-vs-a-shallow-embedding-with-examples</a></p>",
        "id": 507056196,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1742497959
    },
    {
        "content": "<p>Wonderful answer thank you! You've clarified for me that I've been trying to understand that I'm thinking about finite presentations for months now <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>\n<p>I really appreciate your answers thank you!</p>",
        "id": 507057370,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742498383
    },
    {
        "content": "<p>(I will, of course, take all of these representations seriously)</p>",
        "id": 507057482,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1742498416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277352\">Alex Kreitzberg</span> has marked this topic as resolved.</p>",
        "id": 507059703,
        "sender_full_name": "Notification Bot",
        "timestamp": 1742499216
    }
]