[
    {
        "content": "<p>Hi everyone, I'm new to this community. Apologies if the following is too big of a spiel.</p>\n<p>I'm on a (very serious) quest to develop a programming system that can make software development more accessible and more scalable. I have a computer science background, but a keen interest in mathematics, and I'm looking for intuitions about how modern mathematics can inform the design of radically-new programming models. Unfortunately though, I'm a category theory noob, so to save me spending 2 years studying category theory in an attempt to answer the question myself, I'm looking for encouragements or warnings about how category theory can or can't help me (and which parts of it).</p>\n<p>It's important that I spend a moment to clarify my perspective on programming, since a lot of the \"popular\" connections between category theory and programming relate to <strong>type theory</strong> and <strong>functional programming</strong>, and these connections aren't of obvious use to me.</p>\n<p>Firstly: I definitely understand the value of type theory and formal verification of program properties, however my primary focus is on exploring wholly new programming <strong>paradigms</strong> (new kinds of languages) that allow humans to better harness the power of computers to achieve their goals. I don't see a means by which type theory can inform me about new programming paradigms.</p>\n<p>Secondly: I'm not interested in new approaches to \"functional programming\", per se. This is a consequence of some of the guiding principles that are driving my quest:</p>\n<ol>\n<li>Avoid hierarchical structure at all costs. The primitives of a programming language should <strong>not</strong> compose in strictly hierarchical ways; instead, they should compose in a manner that captures the \"essence\" of the computation at hand. Functional programming is built on two forms of hierarchy: \"algebraic datatypes\", where data is constructed and processed \"one layer at a time\", and <strong>hierarchical syntax</strong> (ASTs), where every program is specified as a tree of definitions/contexts, and the programmer specifies computations as communication up and down the tree (via arguments and return values).</li>\n<li>Focus on high-level operations over datasets, not \"value-at-a-time\" computation. This is inspired by basic programming patterns like mapping and aggregation, but also linear algebra and geometry, where it's clear that sometimes what we care about is operations over whole \"bundles\" of data, e.g. vectors or vector spaces. And indeed, sometimes we don't even want to describe operations, but just <strong>relationships</strong> between data, and then query some aspect of those relationships. This is the idea behind logic/relational programming and constraint programming: separating the <em>specification</em> of data/code from the \"orientation\" in which it is evaluated. However, the software community hasn't yet developed logic/relational/constraint languages that are suitable for general-purpose use-cases.</li>\n</ol>\n<p>Now, to return to my question <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Does anyone have a feel for how category theory can inform novel programming paradigms, specifically paradigms where data isn't forced into hierarchical structures (\"trees\"), yet data can still be operated upon \"in bulk\"? Can <strong>order</strong> be an emergent or \"dynamic\" property of computation rather than an imposed one?</p>\n<p>Are there concepts in category theory which can help me answer this question? Concepts which can ultimately be applied in practice? I'm very willing to learn whatever I need to!</p>",
        "id": 234807324,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618557864
    },
    {
        "content": "<p>Can you give an example of what you mean by a \"constraint language\"? I feel like computing via fixed points could fit the bill since it has this general feeling of being implicit (and somewhat mysterious), but I'm just pattern-matching here</p>",
        "id": 234829478,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1618568782
    },
    {
        "content": "<p>Hm I don’t think ASTs are unique to functional programming per se, certainly any C++ compiler will also need an AST to represent the text it is parsing, but maybe it seems less hierarchical/stratified because it’s more boring (everything’s a statement). So most textual languages have an AST. But if you want to step away from textual languages, CT has invested a lot of research in graphical languages like string diagrams, making them more rigorous (as tools for mathematical reasoning, not necessarily computation). The flip side is that, since they are more freely structured, they are harder to implement cleanly in computers. But it’s certainly possible, if you want to put in the work.</p>\n<p>Type theory is an incredible tool for studying languages in general. I know that FP works a lot with one particular family of type theories, but there’s no reason it has to be limited to that. Type theories are great for studying properties and structure of computer programs and other types of languages, establishing what you know and why you know it. Safety and meaning really come from type theory, in my personal view. But I think there’s actually a wider variety of type theories than you realize, and I wouldn’t discard using it as a tool for what you’re studying: you can be as creative as you want. I was just reading about the lambda-bar-mu-mu-tilde calculus, and they used types to ensure properties like well-formedness and termination. This particular calculus models a kind of producer/consumer duality that isn’t found in lambda calculi, but it also has deep ties to proof theory, and probably CT as well. These subjects tend to go together!</p>",
        "id": 234841599,
        "sender_full_name": "Verity Scheel",
        "timestamp": 1618575000
    },
    {
        "content": "<p>It's likely that <em>coalgebra</em> is something you'd be interested in looking into</p>",
        "id": 234842023,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1618575189
    },
    {
        "content": "<p>In general, coalgebra is used to give category-theoretic foundations to \"dynamic\" things like computational processes that don't run input-to-output, but instead are ongoing and reactive</p>",
        "id": 234842162,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1618575250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276060\">Javier Prieto</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/What.20can.20CT.20tell.20us.20about.20alternative.20programming.20paradigms.3F/near/234829478\">said</a>:</p>\n<blockquote>\n<p>Can you give an example of what you mean by a \"constraint language\"?</p>\n</blockquote>\n<p>I don't know what a \"constraint language\" is, but <a href=\"https://choco-solver.org/\">Choco</a> is a package for doing <a href=\"https://en.wikipedia.org/wiki/Constraint_programming\">constraint programming</a>:</p>\n<blockquote>\n<p>Choco is a Free Open-Source Java library dedicated to Constraint Programming.  The user models its problem in a declarative way by stating the set of constraints that need to be satisfied in every solution.  Then, the problem is solved by alternating constraint filtering algorithms with a search mechanism.</p>\n</blockquote>",
        "id": 234854329,
        "sender_full_name": "John Baez",
        "timestamp": 1618580355
    },
    {
        "content": "<p>What the heck, I'll quote Wikipedia.  This may be just a digression from the original question:</p>\n<blockquote>\n<p>Constraint programming (CP)is a paradigm for solving combinatorial problems that draws on a wide range of techniques from artificial intelligence, computer science, and operations research. In constraint programming, users declaratively state the constraints on the feasible solutions for a set of decision variables. Constraints differ from the common primitives of imperative programming languages in that they do not specify a step or sequence of steps to execute, but rather the properties of a solution to be found. In addition to constraints, users also need to specify a method to solve these constraints. This typically draws upon standard methods like chronological backtracking and constraint propagation, but may use customized code like a problem specific branching heuristic.</p>\n<p>Constraint programming takes its root from and can be expressed in the form of constraint logic programming, which embeds constraints into a logic program. This variant of logic programming is due to Jaffar and Lassez, who extended in 1987 a specific class of constraints that were introduced in Prolog II. The first implementations of constraint logic programming were Prolog III, CLP(R), and CHIP.</p>\n<p>Instead of logic programming, constraints can be mixed with functional programming, term rewriting, and imperative languages. Programming languages with built-in support for constraints include Oz (functional programming) and Kaleidoscope (imperative programming). Mostly, constraints are implemented in imperative languages via constraint solving toolkits, which are separate libraries for an existing imperative language. </p>\n</blockquote>",
        "id": 234854646,
        "sender_full_name": "John Baez",
        "timestamp": 1618580474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"405946\">@Nick Smith</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/What.20can.20CT.20tell.20us.20about.20alternative.20programming.20paradigms.3F/near/234807324\">said</a>:</p>\n<blockquote>\n<p>my primary focus is on exploring wholly new programming <strong>paradigms</strong> (new kinds of languages) that allow humans to better harness the power of computers to achieve their goals. I don't see a means by which type theory can inform me about new programming paradigms.</p>\n</blockquote>\n<p>I'd be hesitant to identify a search for new paradigms with a search for new languages. Particularly if your goal is accessibility, \"language\" seems too low-level a concept. I would be looking harder at user interface (a la <a href=\"http://worrydream.com\">Bret Victor</a>).</p>\n<p>I also happen to think that UI/UX design is (i) the lowest-hanging fruit and (ii) the biggest barrier to entry for ACT, so I might be biased.</p>",
        "id": 234878765,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1618588700
    },
    {
        "content": "<p>It's not UI but it is about visualization which is closely related <a href=\"https://ieeexplore.ieee.org/abstract/document/6311404?casa_token=SVgxrOUIo90AAAAA:QoEgxZGQ24POQ-MmiMLJGr9hepW47bSOpQ42cO5Lfa8OiugcvVWBMF8znqntv0BJZC6OV4OahP8\">https://ieeexplore.ieee.org/abstract/document/6311404?casa_token=SVgxrOUIo90AAAAA:QoEgxZGQ24POQ-MmiMLJGr9hepW47bSOpQ42cO5Lfa8OiugcvVWBMF8znqntv0BJZC6OV4OahP8</a></p>",
        "id": 234889473,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1618592923
    },
    {
        "content": "<p>You might be interested.</p>",
        "id": 234889477,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1618592927
    },
    {
        "content": "<p>I think modeling and synthesis of code from visual or textual models might also fit this question but I'll have to think about it more.</p>",
        "id": 234889752,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1618593064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276060\">@Javier Prieto</span> John's Wikipedia excerpt summarises \"constraint programming\" in broad terms. Regarding constraint <em>languages</em>, these aren't as popular (sadly, IMO), but <a href=\"https://www.minizinc.org/\">MiniZinc</a> is probably the canonical example.</p>\n<p><span class=\"user-mention\" data-user-id=\"276057\">@Nick Scheel</span> Sorry, I didn't mean to imply that ASTs were related to functional programming in particular. Yes, <strong>all</strong> textual programming languages (that I know of) are based on ASTs, due to the limitations of textual syntax. Regarding string diagrams et al, you're right that they're probably closer to what I want, and I appreciate their lack of hierarchy! But there seem to be <strong>many kinds</strong> of string diagrams/categories. They're an interesting syntax, but don't give any hints about new semantic possibilities, right?</p>\n<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> Awesome thanks, I'll pay attention to coalgebras. Regarding modelling dynamic processes, I've also noticed <span class=\"user-mention\" data-user-id=\"276049\">@David Spivak</span> has been really excited about <a href=\"https://ncatlab.org/nlab/show/polynomial+functor\">polynomial functors</a> (\"Poly\") for that purpose, though I have no idea how they work. Any idea about those?</p>\n<p><span class=\"user-mention\" data-user-id=\"278008\">@Spencer Breiner</span> You're right, there's more to accessibility than languages, and I admire Bret Victor's philosophy greatly. In my project, I'm focusing on all of semantics, syntax, tools (the UI), and environments (the OS). However, I think this community might have the most knowledge about the first two <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, and I believe they are the biggest challenge. Languages are the foundation upon which \"higher layers\" like tools and environments are built, and I think the state of languages is pretty dismal. All of the programming paradigms we use today have been in wide use for decades, and all we seem to know how to do is \"remix\" them. Meanwhile, it's still incredibly hard to develop high-quality software, for novices and experts alike. That's why I wholeheartedly believe we need <strong>new</strong> paradigms.</p>\n<p><span class=\"user-mention\" data-user-id=\"275902\">@Georgios Bakirtzis</span> Thanks, that looks like an interesting paper! I'll have a read.</p>",
        "id": 234938671,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618618539
    },
    {
        "content": "<p>I've actually found <a href=\"https://ieeexplore.ieee.org/abstract/document/8134650/\">a paper on \"coalgebraic logic programming\"</a>. Definitely on my reading list now!</p>",
        "id": 234968079,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618643376
    },
    {
        "content": "<p>A bit of self shilling: <a href=\"http://statebox.org\">statebox.org</a> tries exactly to implement a different programming paradigm using category theory. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234974007,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1618650378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"405946\">Nick Smith</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/What.20can.20CT.20tell.20us.20about.20alternative.20programming.20paradigms.3F/near/234938671\">said</a>:</p>\n<blockquote>\n<p>Regarding constraint <em>languages</em>, these aren't as popular (sadly, IMO), but <a href=\"https://www.minizinc.org/\">MiniZinc</a> is probably the canonical example.</p>\n</blockquote>\n<p>Doesn't Prolog count? That's the only one I know from the wikipedia page on constraint programming, so I guess it's kinda famous</p>",
        "id": 234975207,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1618651746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276438\">@Fabrizio Genovese</span> I've stumbled onto that before. Guess I should revisit it! But can it run Tetris? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 234979389,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618656250
    },
    {
        "content": "<p>Yes, it can</p>",
        "id": 234979418,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1618656295
    },
    {
        "content": "<p><span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 234979420,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1618656298
    },
    {
        "content": "<p>Show me how <span aria-label=\"hushed\" class=\"emoji emoji-1f62f\" role=\"img\" title=\"hushed\">:hushed:</span>. Where do I find the Tetris tutorial?</p>",
        "id": 234979455,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618656341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276060\">@Javier Prieto</span> Prolog (and other logic languages) <em>barely</em> count. They can express a very limited form of constraints, and Prolog is mired in imperative features that limit its declarativeness.</p>",
        "id": 234979806,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618656684
    },
    {
        "content": "<p>There are some research languages that do constraints \"better\", but I think MiniZinc is the purest example out there.</p>",
        "id": 234979900,
        "sender_full_name": "Nick Smith",
        "timestamp": 1618656785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"405946\">Nick Smith</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/What.20can.20CT.20tell.20us.20about.20alternative.20programming.20paradigms.3F/near/234979455\">said</a>:</p>\n<blockquote>\n<p>Show me how <span aria-label=\"hushed\" class=\"emoji emoji-1f62f\" role=\"img\" title=\"hushed\">:hushed:</span>. Where do I find the Tetris tutorial?</p>\n</blockquote>\n<p>It means that it has the capabilities of doing so, exactly as you can play tetris in Excel. It doesn't mean that someone worked it out yet</p>",
        "id": 234983671,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1618660843
    },
    {
        "content": "<p>We'll start opening up the software to an invited audience soon <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234983697,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1618660860
    }
]