[
    {
        "content": "<p>So I'm somewhat interested in understanding functional programming, primarily because I'm interested in category theory. In other words, a lot of the benefits of functional programming that one can read about online don't really blow my mind (mostly because I literally don't know what the words mean, and I don't spend time writing code and having desires about ways to write code). I have this book called \"Learn You a Haskell for a Great Good!\" and I've read a bit of it, but again, I have a hard time getting motivated to learn all of this language. If you wanted to motivate someone who knew a lot of math, and had some basic programming skills, to get into functional programming, is there some kind of basic project you would encourage them to try to write up using Haskell or some other language? Are there fun math things that can be done with this type of programming language?</p>",
        "id": 192075543,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585340955
    },
    {
        "content": "<p>Hmmm, for a person with a background as strong as yours (I see online that your interests include  Algebraic Topology, Category Theory, Homotopy Theory, Non-Commutative Geometry, Operads. That means you should already know at least <em>some</em> dependent type theory), I'm sorry but in terms of insights or a-ha moments I struggle to find good reasons for you to get into functional programming. Unless you want to program! Is programming fun? Idk, is football or basketball fun? I guess you should try it to find out ;).</p>\n<p>The one important reason you might want to try a functional language is theorem proving (like Agda). If I could, I would do all my CT in Agda but it's not quite there yet (maybe <span class=\"user-mention\" data-user-id=\"276059\">@Reed Mullanix</span>  disagrees). Machine-checked proofs force you to be precise, to be economic in your definitions and give you a safety net that the paper can't. Which is worth it, if you're willing to spend the time for it.</p>",
        "id": 192077592,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585342045
    },
    {
        "content": "<p>So I mean, there are things I think might be fun to do, like construct an operad \"type\" in functional programming, or a simplcial set \"type.\" Maybe some of this stuff has already been done. I think it'd also be interesting to use some kind of \"lazy evaluation\" to potentially compute low level things about infinite things (like operads or infinite simplicial sets).</p>",
        "id": 192078335,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585342378
    },
    {
        "content": "<p>Maybe write code to compute (parts of) the Koszul dual of an operad. Or maybe try to compute something like (parts of) homotopy pushouts and pullbacks of simplicial sets.</p>",
        "id": 192078412,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585342418
    },
    {
        "content": "<p>One very simple exercise that might grab you is coding up something like the quadratic sieve. You could also start exploring doing simple computer algebra, like writing a library for manipulating polynomials, or given a concrete description of a structure, checking if it satisfies the axioms of a ring, etc.</p>",
        "id": 192078883,
        "sender_full_name": "Gershom",
        "timestamp": 1585342536
    },
    {
        "content": "<p>I seem to recall there being some kind of book or library written up about programming and operads, but I don't know what/where it is/was.</p>",
        "id": 192079075,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585342625
    },
    {
        "content": "<p>I think you ought to take a look at Cubical Agda :) (<a href=\"https://agda.readthedocs.io/en/v2.6.1/language/cubical.html\" title=\"https://agda.readthedocs.io/en/v2.6.1/language/cubical.html\">https://agda.readthedocs.io/en/v2.6.1/language/cubical.html</a>, <a href=\"https://github.com/agda/cubical\" title=\"https://github.com/agda/cubical\">https://github.com/agda/cubical</a>) or HoTT-Agda (<a href=\"https://github.com/HoTT/HoTT-Agda\" title=\"https://github.com/HoTT/HoTT-Agda\">https://github.com/HoTT/HoTT-Agda</a>). There are similar attempts in other theorem provers.</p>",
        "id": 192079080,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585342629
    },
    {
        "content": "<p>hey!</p>",
        "id": 192079278,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585342728
    },
    {
        "content": "<p>HEY</p>",
        "id": 192079290,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585342740
    },
    {
        "content": "<p>do you have any interest in programming language theory per se? or mostly just picking up the pragmatic skill of being able to get computers to do stuff</p>",
        "id": 192079310,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585342749
    },
    {
        "content": "<p>Both I think. But as always, I basically don't have time to do anything these days unless I can turn it into something of the form \"This would be cool to figure out and play with.\"</p>",
        "id": 192079382,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585342786
    },
    {
        "content": "<p>wait a sec, is this</p>",
        "id": 192079470,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585342810
    },
    {
        "content": "<p>oh lmao i didnt recognize you</p>",
        "id": 192079500,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585342827
    },
    {
        "content": "<p>yes. it is I.</p>",
        "id": 192079513,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585342835
    },
    {
        "content": "<p>hmm, completely random thought, you might enjoy trying out the <code>diagrams</code> library for haskell</p>",
        "id": 192079928,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343014
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/0oaq4ipTOboC9J1bB8Tb77Au/image.png\" title=\"image.png\">image.png</a><br>\n<a href=\"/user_uploads/21317/YXnIPuhhBzluvGT6TwtAUQaw/image.png\" title=\"image.png\">image.png</a><br>\nyou can use it to make drawings like this</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/0oaq4ipTOboC9J1bB8Tb77Au/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/0oaq4ipTOboC9J1bB8Tb77Au/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/21317/YXnIPuhhBzluvGT6TwtAUQaw/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/YXnIPuhhBzluvGT6TwtAUQaw/image.png\"></a></div>",
        "id": 192080209,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343156
    },
    {
        "content": "<p>except that unlike tikz or whatever, it's actually great</p>",
        "id": 192080272,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343170
    },
    {
        "content": "<p>O those are pretty.</p>",
        "id": 192080273,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585343170
    },
    {
        "content": "<p>(those are from brent yorgey(the library creator)'s dissertation (on combinatorial species))</p>",
        "id": 192080350,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343214
    },
    {
        "content": "<p>it's built on a whole set of Actually Thought-Out Abstractions instead of commands for moving shapes around or whatever</p>",
        "id": 192080476,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343280
    },
    {
        "content": "<p>like, the kinds of objects (\"objects\" in more of a \"mathematical object\" sense than an \"object oriented programming\" sense) that you manipulate have sensible geometric behavior and are nicely compositional in many ways</p>",
        "id": 192080620,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343338
    },
    {
        "content": "<p>and there are very smart distinctions drawn, like having a type for a path vs. a type for a path <em>associated with a particular origin in space</em></p>",
        "id": 192080908,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343443
    },
    {
        "content": "<p>which have the same inhabitants, but different instances for overloaded operations like \"translation\"</p>",
        "id": 192080954,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343466
    },
    {
        "content": "<p>also, vitally, <em>diagrams are actual values</em></p>",
        "id": 192081092,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343538
    },
    {
        "content": "<p>it's not some kind of window onto a drawing API that lets you say \"draw a circle here, then a square there\"</p>",
        "id": 192081119,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343554
    },
    {
        "content": "<p>oh that seems nice.</p>",
        "id": 192081170,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585343587
    },
    {
        "content": "<p>rather, \"a diagram comprising a square\" is a value you can carry around, and \"a diagram comprising a circle\" is another, and then you can put them next to each other to make a bigger diagram if you want, and then write a function which builds a big one</p>",
        "id": 192081212,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343612
    },
    {
        "content": "<p>yeah, it occurred to me to mention it because i was thinking about what kinda stuff you might want to try writing by thinking back thru what projects <em>ive</em> done, and i remembered one where i built up a bunch of machinery for talking about compact closed category gadgetry, and part of it was drawing stuff using <code>diagrams</code></p>",
        "id": 192081392,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343709
    },
    {
        "content": "<p>so like, guessing from the fact that you're a geometer that there's probably slightly better than even odds that you like pretty pictures, maybe youd find it handy to be able to programmatically build up this kind of illustration</p>",
        "id": 192081615,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343824
    },
    {
        "content": "<p>yeah, i dunno if i'm a geometer, but sure. might be good motivation for learning the basics of haskell.</p>",
        "id": 192081718,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585343883
    },
    {
        "content": "<p>really i think i just wanna make a data type called \"operad\"</p>",
        "id": 192081752,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585343896
    },
    {
        "content": "<p>hmm, homotopy theory is surely geometry</p>",
        "id": 192081776,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343917
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/WY5GBcgP9jm1UvZE1SCe_2Ar/image.png\" title=\"image.png\">image.png</a><br>\n(here's the kind of thing i was using <code>diagrams</code> for in that compact closed category project)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/WY5GBcgP9jm1UvZE1SCe_2Ar/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/WY5GBcgP9jm1UvZE1SCe_2Ar/image.png\"></a></div>",
        "id": 192081806,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585343938
    },
    {
        "content": "<p>well, whether or not homotopy theory is geometry is a conversation for another thread i think ;-)</p>",
        "id": 192081970,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585344025
    },
    {
        "content": "<p>anyway, here's a little <code>diagrams</code> poem for u <a href=\"https://gist.github.com/sarahzrf/08ddbe732965dc4b97691843500f5d8d\" title=\"https://gist.github.com/sarahzrf/08ddbe732965dc4b97691843500f5d8d\">https://gist.github.com/sarahzrf/08ddbe732965dc4b97691843500f5d8d</a></p>",
        "id": 192082442,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585344339
    },
    {
        "content": "<p>let us ponder the mystery of the catalan numbers <span aria-label=\"ghost\" class=\"emoji emoji-1f47b\" role=\"img\" title=\"ghost\">:ghost:</span></p>",
        "id": 192082698,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585344492
    },
    {
        "content": "<p>oh hmm i had an idea <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 192083091,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585344738
    },
    {
        "content": "<p>after a bunch of false starts, here is my idea <a href=\"https://gist.github.com/sarahzrf/a65917c4b6826e85753662e1145750e8\" title=\"https://gist.github.com/sarahzrf/a65917c4b6826e85753662e1145750e8\">https://gist.github.com/sarahzrf/a65917c4b6826e85753662e1145750e8</a></p>",
        "id": 192090436,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585350127
    },
    {
        "content": "<p>What is this idea. I can't read code.</p>",
        "id": 192094097,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585353458
    },
    {
        "content": "<p>just look at the picture</p>",
        "id": 192094905,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585354317
    },
    {
        "content": "<p>it is the little discs operad, as far as i understand it</p>",
        "id": 192095061,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585354423
    },
    {
        "content": "<p>or, well, a very very loose approximation</p>",
        "id": 192095117,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585354446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192090436\" title=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192090436\">said</a>:</p>\n<blockquote>\n<p>after a bunch of false starts, here is my idea <a href=\"https://gist.github.com/sarahzrf/a65917c4b6826e85753662e1145750e8\" title=\"https://gist.github.com/sarahzrf/a65917c4b6826e85753662e1145750e8\">https://gist.github.com/sarahzrf/a65917c4b6826e85753662e1145750e8</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> how are you running an ipynb with haskell??? I miss the clarity of thought afforded by those from my emacs terminal!</p>",
        "id": 192096872,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585356876
    },
    {
        "content": "<p>it's \"ihaskell\"</p>",
        "id": 192096882,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585356895
    },
    {
        "content": "<p>a haskell kernel for jupyter</p>",
        "id": 192096897,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585356910
    },
    {
        "content": "<p>absolutely killer way to use diagrams</p>",
        "id": 192096902,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585356928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276679\">Jonathan Beardsley</span> <a href=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192081752\" title=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192081752\">said</a>:</p>\n<blockquote>\n<p>really i think i just wanna make a data type called \"operad\"</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"275991\">@Bartosz Milewski</span> has a very patient blogpost about building decision trees over a tic-tac-toe algebra. There's a monadic implementation linked in the intro that I found an easier example to get started with than the co-monadic one used in the post.</p>\n<p><a href=\"https://bartoszmilewski.com/2015/10/07/operads-type-level-nats-and-tic-tac-toe/\" title=\"https://bartoszmilewski.com/2015/10/07/operads-type-level-nats-and-tic-tac-toe/\">https://bartoszmilewski.com/2015/10/07/operads-type-level-nats-and-tic-tac-toe/</a></p>",
        "id": 192097039,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585357092
    },
    {
        "content": "<p>Diagrams looks awesome. Do you run the kernel against ghci or is there a docker image? I've had trouble setting it up for one reason or the other in the past</p>",
        "id": 192097418,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585357611
    },
    {
        "content": "<p>i'm not sure what you mean by \"run the kernel against ghci\"</p>",
        "id": 192097846,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585358104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192097846\" title=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192097846\">said</a>:</p>\n<blockquote>\n<p>i'm not sure what you mean by \"run the kernel against ghci\"</p>\n</blockquote>\n<p>Sorry I mean does ghci do what an ipython kernel usually does in python terms?</p>",
        "id": 192097930,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585358187
    },
    {
        "content": "<p>ihaskell is what does that</p>",
        "id": 192097944,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585358213
    },
    {
        "content": "<p>you're familiar with jupyter or only ipython?</p>",
        "id": 192097953,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585358231
    },
    {
        "content": "<p>Both, I once tried living in jupyterlab which was nice but strangely unproductive.</p>",
        "id": 192097971,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585358274
    },
    {
        "content": "<p>ihaskell is a haskell kernel for jupyter</p>",
        "id": 192098016,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585358293
    },
    {
        "content": "<p>ghci by itself cannot talk to jupyter afaik</p>",
        "id": 192098028,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585358303
    },
    {
        "content": "<p>Ah yes you'd need a layer in the middle wouldn't you.</p>",
        "id": 192098067,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585358391
    },
    {
        "content": "<p>Also this (from <a href=\"http://www.github.com/conal/concat\" title=\"http://www.github.com/conal/concat\">www.github.com/conal/concat</a>) is generated from a very similar thing to what you are doing extended to affine transformations and their derivatives!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192081806\" title=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192081806\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/21317/WY5GBcgP9jm1UvZE1SCe_2Ar/image.png\" title=\"image.png\">image.png</a><br>\n(here's the kind of thing i was using <code>diagrams</code> for in that compact closed category project)</p>\n</blockquote>\n<p><a href=\"/user_uploads/21317/Iu8X-QaA-rZl8OA47-kL-YG3/affRelu.png\" title=\"affRelu.png\">affRelu.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Iu8X-QaA-rZl8OA47-kL-YG3/affRelu.png\" title=\"affRelu.png\"><img src=\"/user_uploads/21317/Iu8X-QaA-rZl8OA47-kL-YG3/affRelu.png\"></a></div>",
        "id": 192098443,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585358959
    },
    {
        "content": "<p>\"extended to\"?</p>",
        "id": 192098829,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359473
    },
    {
        "content": "<p>also actually i have some thoughts on compiling to categories :-)</p>",
        "id": 192098898,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359523
    },
    {
        "content": "<p>but compact closed categories are orthogonal to cartesian closed ones</p>",
        "id": 192098900,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359538
    },
    {
        "content": "<p>i don't think i'd call it \"extended\" so much as just different</p>",
        "id": 192098906,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359556
    },
    {
        "content": "<p>although the graphics look a lot more working!</p>",
        "id": 192098910,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359569
    },
    {
        "content": "<p>Uh I am generally very ignorant about categorical abstraction but there's support for compact closed categories too I think if you define enough instances. Would a Braided Monoidal Product Category be compact closed?</p>",
        "id": 192098980,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585359677
    },
    {
        "content": "<p>and Symmetric</p>",
        "id": 192098983,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585359697
    },
    {
        "content": "<p>a compact closed category is a symmetric monoidal category where every object has a dual</p>",
        "id": 192099041,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359772
    },
    {
        "content": "<p>\"dual\" in a sense which generalizes that of the dual of a finite dimensional vector space</p>",
        "id": 192099050,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359792
    },
    {
        "content": "<p>a <em>ton</em> of the characteristic features of FinVect can be derived from it being compact closed</p>",
        "id": 192099114,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359844
    },
    {
        "content": "<p>another category that's compact closed is Rel</p>",
        "id": 192099117,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585359857
    },
    {
        "content": "<p>Yes so what I loved about concat was that you can work with vector spaces and even build neural networks with all their interesting compositions of linear maps and relus and have everything be translated from a category which just has to fulfill HasRep and HasV instances and you get all the properties you need for Rel or Aff or AffLagRel</p>",
        "id": 192100291,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1585361650
    },
    {
        "content": "<p>anyway <span class=\"user-mention\" data-user-id=\"276679\">@Jonathan Beardsley</span> <span class=\"user-mention\" data-user-id=\"277630\">@Faez Shakil</span> check out the diagrams tutorial <a href=\"https://archives.haskell.org/projects.haskell.org/diagrams/doc/quickstart.html\" title=\"https://archives.haskell.org/projects.haskell.org/diagrams/doc/quickstart.html\">https://archives.haskell.org/projects.haskell.org/diagrams/doc/quickstart.html</a> and/or manual <a href=\"https://archives.haskell.org/projects.haskell.org/diagrams/doc/manual.html\" title=\"https://archives.haskell.org/projects.haskell.org/diagrams/doc/manual.html\">https://archives.haskell.org/projects.haskell.org/diagrams/doc/manual.html</a></p>",
        "id": 192103045,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585365975
    },
    {
        "content": "<p>it's just excellent software with great documentation</p>",
        "id": 192103048,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585365994
    },
    {
        "content": "<p>it makes me happy inside knowing documentation like diagrams's exists</p>",
        "id": 192103052,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585366013
    },
    {
        "content": "<p>setting up ihaskell can be a bit irritating, but you can run it in the browser, free using <a href=\"https://cocalc.com/\" title=\"https://cocalc.com/\">https://cocalc.com/</a></p>",
        "id": 192104787,
        "sender_full_name": "Gershom",
        "timestamp": 1585369421
    },
    {
        "content": "<p>\"a bit irritating\" 🩸</p>",
        "id": 192104862,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585369518
    },
    {
        "content": "<p>Earlier, <span class=\"user-mention\" data-user-id=\"276679\">@Jonathan Beardsley</span> asked how to represent simplicial sets in functional programming. I have an old blog post I dug out and revived where I gave one (nice, categorical) approach in Haskell that people may find of interest: <a href=\"https://gist.github.com/gbaz/ff92e63968d32e0ae92ecbb44f0677b8\" title=\"https://gist.github.com/gbaz/ff92e63968d32e0ae92ecbb44f0677b8\">https://gist.github.com/gbaz/ff92e63968d32e0ae92ecbb44f0677b8</a></p>\n<p>One could also take a purely combinatorial approach, which would be less elegant, but perhaps lend itself more to doing some actual work with these things. Mainly, when I look at libraries for computational homology I've seen simplicial complexes, or even just flag complexes which are much more straightforward to represent in their \"raw\" form.</p>",
        "id": 192200020,
        "sender_full_name": "Gershom",
        "timestamp": 1585525512
    }
]