[
    {
        "content": "<p>I am working through the formal type rules for Topos Type Theory in <span class=\"user-mention\" data-user-id=\"354163\">@Maietti Maria Emilia</span>  ,  The Type Theory of Categorical Universes. I haven't found any rules in the system for introducing the dependent type family (although many rules presuppose that we have such a family). It's possible I've just missed this somewhere in the text.  For example, on page 41 in the Indexed Sum Formation rule you require a type C(x) that depends on the variable x:B in the context. However, I'm failing to understand how C(x) could be constructed to be other than a constant function, since we can't express it as a lambda term of type B -&gt; Type.  Any help would be most welcome. <a href=\"/user_uploads/21317/ZO1oF7kYwjxJ0waNZbQB53AD/Screen-Shot-2021-02-15-at-8.10.56-PM.png\">Screen-Shot-2021-02-15-at-8.10.56-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/ZO1oF7kYwjxJ0waNZbQB53AD/Screen-Shot-2021-02-15-at-8.10.56-PM.png\" title=\"Screen-Shot-2021-02-15-at-8.10.56-PM.png\"><img src=\"/user_uploads/21317/ZO1oF7kYwjxJ0waNZbQB53AD/Screen-Shot-2021-02-15-at-8.10.56-PM.png\"></a></div>",
        "id": 226461291,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1613438263
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> here stands for a metavariable parameterised by a single variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">x : B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. It's not part of the syntax itself: you can replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> with any type containing a free variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">x : B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</p>",
        "id": 226461726,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1613438762
    },
    {
        "content": "<p>Thank you that helps somewhat. But I'm still unclear how the type itself can contain a free variable x:B.</p>\n<p>Which type formation rule allows us to introduce arbitrary free variables into a type expression?</p>",
        "id": 226464280,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1613441960
    },
    {
        "content": "<p>The rule for introducing the equality type (combined with the var rule) does this</p>",
        "id": 226465067,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1613443135
    },
    {
        "content": "<p>Another rule that leads to types dependent on variables is that for elements of a universe, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi>U</mi><mo>⊢</mo><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mrow><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">y</mi><mi mathvariant=\"sans-serif\">p</mi><mi mathvariant=\"sans-serif\">e</mi></mrow></mrow><annotation encoding=\"application/x-tex\">x:U \\vdash \\mathsf{el}(x) \\; \\mathsf{type}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">l</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">y</span><span class=\"mord mathsf\">p</span><span class=\"mord mathsf\">e</span></span></span></span></span>.  I don't have the paper you refer to so I don't know if it has this rule.</p>",
        "id": 226471930,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1613451284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312048\">Avi Craimer</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Dependent.20Type.20Families.20in.20Topos.20Type.20Theory/near/226464280\">said</a>:</p>\n<blockquote>\n<p>Thank you that helps somewhat. But I'm still unclear how the type itself can contain a free variable x:B.</p>\n<p>Which type formation rule allows us to introduce arbitrary free variables into a type expression?</p>\n</blockquote>\n<p>I don't have the paper at hand, but I've been taught TT by Milly so I assume it's the same ruleset. I remember that she puts a lot of emphasis on contexts, so that all introduction rules for types are under a context <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span>.<br>\nHence to introduce a type over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> you first build a context <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo stretchy=\"false\">[</mo><mi>x</mi><mo>∈</mo><mi>B</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">- [ x \\in B]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">]</span></span></span></span> and then you introduce the type you need  under that context.</p>",
        "id": 226486148,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1613465174
    },
    {
        "content": "<p>The paper I'm working from is:</p>\n<p><a href=\"/user_uploads/21317/WPVn3M64OYZVtJJki6ruXtqc/tesi.pdf\">tesi.pdf</a> <br>\nIt is available publicly in source code here (<a href=\"https://www.math.unipd.it/~maietti/papers/Maietti.ps.gz\">https://www.math.unipd.it/~maietti/papers/Maietti.ps.gz</a>)</p>\n<p>Dylan, thanks, I will have to think about how to apply equality rules to make types with free variables. </p>\n<p>Matteo, thank you I understand how to build up contexts. </p>\n<p>Mike,  thank you. Do universes exist as types in the T-top theory (T-top is what the author calls the topos type theory in another paper), I thought this theory didn't have an explicit type universe?</p>\n<p>An example would help. Suppose I wanted to use T-top to represent a pullback type. I guess I'd start by defining functions f :A-&gt;X and g:B-&gt;X. Then add variables of a:A and b:B to the context. Then introduce an equality type f(a) = g(b) : X. After that I'm a bit stuck.</p>",
        "id": 226523754,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1613487839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312048\">Avi Craimer</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Dependent.20Type.20Families.20in.20Topos.20Type.20Theory/near/226523754\">said</a>:</p>\n<blockquote>\n<p>Dylan, thanks, I will have to think about how to apply equality rules to make types with free variables. </p>\n</blockquote>\n<p>To clarify, I wasn't referring to the judgemental equality rules, but rather the type introduced by the \"F-Eq\" rule in that paper. This is an actual type, depending on two values (which can be free variables), which logically corresponds to the proposition of equality of the two terms on which it depends.</p>",
        "id": 226527178,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1613489371
    },
    {
        "content": "<p>Thanks Dylan for the clarification. So can you introduce an equality type Eq(X, f(a), g(b)) [a:A,b:B]  ?</p>",
        "id": 226530096,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1613490651
    },
    {
        "content": "<p>Yeah exactly. As long as you can derive <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>X</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mi>B</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f(a) \\in X [a \\in A, b \\in B]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>X</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mi>B</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g(b) \\in X [a \\in A, b \\in B]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 226533600,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1613491671
    },
    {
        "content": "<p>So then Eq(X, f(a), g(b)) [a:A, b:B, f:A-&gt;X, g:B-&gt;X] would be the general form of a pullback set for A, B, and X?</p>",
        "id": 226534603,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1613492018
    },
    {
        "content": "<p>I haven't looked at how the paper sets up the semantics for this language, but I think typically you want to abstract over the a and b with sigma types to get the pullback</p>",
        "id": 226537982,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1613493305
    },
    {
        "content": "<p>Yep, see proposition 4.4.3</p>",
        "id": 226538430,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1613493456
    },
    {
        "content": "<p>Ah yes! Thank you that's great.</p>",
        "id": 226540137,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1613494088
    }
]