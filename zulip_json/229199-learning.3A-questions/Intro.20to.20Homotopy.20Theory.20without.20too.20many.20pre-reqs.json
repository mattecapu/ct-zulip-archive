[
    {
        "content": "<p>I have started learning Dependent Type Theory and would like to learn Homotopy Type Theory. Is there a good introductory text to Homotopy Theory that does not require prior mastery of traditional topology. I have some basic category theory under my belt, so an introduction that uses the language of categories and functors to explain homotopy would be most helpful. </p>\n<p>Related, I've seen a lot of references to the idea of infinity groupoids as the categorical way to make sense of homotopy. Is there an introduction to the concept of infinity groupoids that does not pre-suppose knowledge of higher category theory (maybe building up to it starting from ordinary category theory)?</p>\n<p>Perhaps the answer is that the HoTT book is the best such introduction, in which case it would be great to have confirmation of that.</p>",
        "id": 211672035,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1601407638
    },
    {
        "content": "<p>The HoTT book is very nicely written and begins quite gently, so I would definitely recommend taking a look if you haven't done yet.</p>",
        "id": 211673211,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1601408194
    },
    {
        "content": "<p>I, at least, have no formal training in homotopy theory, and have just gleaned things from fiddling around with HoTT, and reading parts of the book. But I knew a lot about type theory before that.</p>",
        "id": 211673378,
        "sender_full_name": "Dan Doel",
        "timestamp": 1601408284
    },
    {
        "content": "<p>I found this video quite helpful as an introduction: <a href=\"https://youtu.be/E3steS2Hr1Y\">https://youtu.be/E3steS2Hr1Y</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"E3steS2Hr1Y\" href=\"https://youtu.be/E3steS2Hr1Y\"><img src=\"https://i.ytimg.com/vi/E3steS2Hr1Y/default.jpg\"></a></div>",
        "id": 211675311,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1601409201
    },
    {
        "content": "<p>I think Egbert Rijke's notes (soon to become a book) are easier going than the HoTT book. You can find it at: <a href=\"https://github.com/EgbertRijke/HoTT-Intro\">https://github.com/EgbertRijke/HoTT-Intro</a>. Also, the first two chapters of Michael Warren's PhD are quite clear.</p>",
        "id": 211682967,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1601412995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341237\">Fawzi Hreiki</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Intro.20to.20Homotopy.20Theory.20without.20too.20many.20pre-reqs/near/211682967\">said</a>:</p>\n<blockquote>\n<p>Also, the first two chapters of Michael Warren's PhD are quite clear.</p>\n</blockquote>\n<p>Thanks, I found the thesis: <a href=\"http://mawarren.net/papers/phd.pdf\">http://mawarren.net/papers/phd.pdf</a></p>\n<p>I look forward to trying to read this.</p>",
        "id": 211688224,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1601415618
    },
    {
        "content": "<p>I thought the Voevodsky talk was going to mention this, but I think it actually didn't. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoids are basically a way of organizing all those <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">π_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> things into a single structure.</p>",
        "id": 211694269,
        "sender_full_name": "Dan Doel",
        "timestamp": 1601419407
    },
    {
        "content": "<p>So instead of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-th homotopy group of a space at a point, you have the homotopy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoid of the whole space. And you arrange it (I think) so that you can imagine that the 0-th level is \"all the points\" (because there are homotopy groups using every point as a \"base\"), or you can imagine that the 0-th level is just the connected pieces (like he does in the talk; because it doesn't matter which point you pick in a connected part), or anywhere in between, and doing so will give you 'the same' <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoid.</p>",
        "id": 211695029,
        "sender_full_name": "Dan Doel",
        "timestamp": 1601419998
    },
    {
        "content": "<p>And similarly at each of the higher levels.</p>",
        "id": 211695180,
        "sender_full_name": "Dan Doel",
        "timestamp": 1601420107
    },
    {
        "content": "<p>The HoTT book is indeed great.  I was able to read the first few chapters 5 years ago, knowing nearly nothing about Category Theory, though I did have programming experience in Scala, ie. with a (path dependent) typed language. But I think the book could even be a great introduction to programming with (dependent) types. Indeed I learn a lot about Scala that I had not understood before reading the book.<br>\n(Note: you can compile the latest version from github, but I think there are precompiled pdfs of the latest version available somewhere). There are also a couple of philosophical papers on HoTT that can help with interpretations, if needed. From a practical programming point of view it is worth skimming at the first few pages of <a href=\"https://dl.acm.org/doi/10.1145/3341691\">Cubical Agda: a dependently typed programming language with univalence and higher inductive types</a>. I don't find that easy to read, but the example is very interesting. The point is made that proof assistants such as say <a href=\"http://leanprover-community.github.io/\">Lean</a> work with Peano numbers (Ie numbers defined with 0 and the successor relation), since these are very easy to build proofs with and give a standard normal form. But of course this is completely unwieldy for making  operations of large numbers - a computer would soon run out of memory. So for efficiency Lean also provides a different binary machine encoding, but when programming that way the mathematical guarantees of the proofs are lost. So you either have mathematical certainty or you have efficiency.<br>\nBy proving that binary numbers are equivalent to Peano numbers all the proofs can be transported from Peano to the binary representation. This opens the promise that future compilers would be able to compile proofs transporting them to the best computer representation to execute them. (Perhaps Cubical Agda can already do some of that, I don't know).</p>",
        "id": 211724573,
        "sender_full_name": "Henry Story",
        "timestamp": 1601451202
    },
    {
        "content": "<p>I've been going through the Rijke notes and they are very helpful. I found the Warren thesis a bit too advanced for now. <br>\n<a href=\"https://github.com/EgbertRijke/HoTT-Intro/blob/master/pdfs/2019-summer-school.pdf\">https://github.com/EgbertRijke/HoTT-Intro/blob/master/pdfs/2019-summer-school.pdf</a></p>",
        "id": 211777797,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1601479776
    },
    {
        "content": "<p>On this note, what is the best document (intro) to read on cubical HoTT?</p>",
        "id": 211780120,
        "sender_full_name": "Henry Story",
        "timestamp": 1601480731
    },
    {
        "content": "<p>I found this quite understandable: <a href=\"https://arxiv.org/abs/1911.05844v1\">https://arxiv.org/abs/1911.05844v1</a></p>",
        "id": 211849558,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1601505980
    }
]