[
    {
        "content": "<p>I've recently realized (by looking at what people are doing) that the ultimate system for doing mathematics on a computer would be to combine the technologies of computer algebra systems with those of proof assistants, in order to be able to do formal computations and manipulate mathematical theories at the same time resulting in a system able to help you explore mathematical theories, write proofs, compute automatically, generate textbooks etc... </p>\n<p>Many people are working on doing something like this but it looks like a massive work. There is notably the project MathScheme of <span class=\"user-mention\" data-user-id=\"296322\">@Jacques Carette</span> and cie. and the project Theorema of Bruno Buchberger (the guy who discovered Gr√∂bner basis) and cie. Sadly the second one is a package for Mathematica, software which requires to pay a license. As to the first, is there a way to download something and launch it? Are there other systems which are somehow functional, that we can download and try?</p>\n<p>My feeling is that these projects are great but it is so much work to create both the theory and the software that there is nothing completely functional today.</p>",
        "id": 396176849,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1697065537
    },
    {
        "content": "<p>You are correct that there is nothing completely functional today. MathScheme the project did result in things being implemented, but most of these were experiments to validate technologies \"along the way\" to such a full-fledged system. I could point you to all sorts of stuff, but you'd be disappointed because none of it is what you're actually looking for.</p>\n<p>As it turns out, I'm just back from a week at Dagstuhl where the people who are aiming for such an ultimate system were meeting. We're working on \"tetrapodal\" systems (see <a href=\"https://arxiv.org/abs/1904.10405\">Big Math and the One-Brain Barrier A Position Paper and Architecture Proposal</a> with the actual paper in <a href=\"https://link.springer.com/article/10.1007/s00283-020-10006-0\">The Mathematical Intelligencer</a>) that combine computation, deduction, narration, concretization (and organization).</p>\n<p>Progress is happening, albeit quite slowly. Many of the same people will be at the HIM Trimester <a href=\"https://www.him.uni-bonn.de/programs/future-programs/future-trimester-programs/prospects-of-formal-mathematics/description/\">Prospects of Formal Mathematics</a> happening May-August 2024 in Bonn. Applications to attend (fully-funded by HIM) are <a href=\"https://www.him.uni-bonn.de/programs/future-programs/future-trimester-programs/prospects-of-formal-mathematics/app-prospects/\">still open</a>. The list of people who have confirmed they will be there for some period of time is quite impressive.</p>",
        "id": 396178816,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1697066868
    },
    {
        "content": "<p>Thank you. I was hesitating to apply to the semester but I think I'm going do it...</p>",
        "id": 396179328,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1697067222
    },
    {
        "content": "<p>Assia Mahboubi at Inria is a researcher who works on Coq.<br>\nShe got a 5 year grant for a project called FRESCO - \"Fast and Reliable Symbolic Computation\"<br>\n<a href=\"https://fresco.gitlabpages.inria.fr/\">https://fresco.gitlabpages.inria.fr/</a> on joining Coq with computer algebra systems.<br>\nI have not really heard anything interesting yet come out of this project so far but I am hoping for cool stuff.</p>",
        "id": 396192407,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697075345
    },
    {
        "content": "<p>For \"generating textbooks\", there is a plugin for Coq called Alectryon which helps you to embed Coq into mathematical papers.<br>\nIt has been used here - <a href=\"https://github.com/coq-community/hydra-battles\">https://github.com/coq-community/hydra-battles</a><br>\nto create a book based around a Coq library on proof theory (ordinal analysis of Peano arithmetic and similar theories) and discuss/illustrate formal mathematics in TeX.<br>\nThe book is a living document and is continuously edited as new versions of Coq are released to showcase new features of the language and continuously evolving best practices. Definitely a cool idea.</p>\n<p>Michael Kohlhase and Dennis Mueller work on \"Semantic TeX\" or \"sTeX\"<br>\n<a href=\"https://github.com/slatex/sTeX\">https://github.com/slatex/sTeX</a><br>\nwhich is a LaTeX package for marking up documents with semantic content/meaning.<br>\nThey are currently researching adding a type system to LaTeX for variables, so you can check the well formedness of mathematical expressions. They are planning to add a theorem prover soon, which should be interesting.</p>",
        "id": 396193607,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697076090
    },
    {
        "content": "<p>Thanks, these projects look very interesting!</p>\n<p>I hope that people are going to unite themselves to create some universally accepted software. Something like LaTex that we will all use. Definitely we're not working as math or CS people in a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi>X</mi><msup><mi>I</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">XXI^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">XX</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> century way.</p>\n<p>But there are definitely problems in the academic system to achieve this goal. Like, lot of small teams which work seperately, writing software is not valued on CVs, only published papers and lack of a super funding for the big project. We would need a kind of Manhattan project for creating the tools for doing math in the modern times haha, or if we were Google or Apple, we would have enough money and people which don't care about publications to survive and can work on this. Seriously, for instance, I've already thought to trying to write software but it would have no value on a CV so I don't want to do it.</p>\n<p>The trimester looks like a great way to put all the energy together :)</p>",
        "id": 396195324,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1697076983
    },
    {
        "content": "<p>Personally I have recently been interested in theorem provers which don't just support one core logic like Coq or Lean but which support multiple logics which can all talk to each other - as long as you can interpret one logic in another or one theory in another, you can translate theorems between logics within the theorem prover. For example you could prove theorems in a weak simple first-order theory using a powerful automated theorem prover and then interpret FOL within set theory to get those theorems about set-theoretic models of the theories.<br>\nNow, theorem provers supporting multiple logics have been around for a while. For example, Isabelle supports multiple logics but they don't talk to each other, they're isolated. For this reason most Isabelle users seem to have converged on one single logic (higher order logic) and the other logics supported by Isabelle (ZF, for example) are more neglected. <br>\nWhat I am talking about is natively supporting many different intertranslatable logics, by having a built in notion of what it means to interpret one theory in another or one logic in another. This seems like a more recent and exciting research direction. Here I am thinking of MMT <a href=\"https://uniformal.github.io/doc/philosophy/articles/mmt.pdf\">https://uniformal.github.io/doc/philosophy/articles/mmt.pdf</a><br>\nand Dedukti <a href=\"http://www.lsv.fr/~dowek/Publi/expressing.pdf\">http://www.lsv.fr/~dowek/Publi/expressing.pdf</a></p>",
        "id": 396196317,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697077414
    },
    {
        "content": "<p>Florian Rabe, the researcher behind MMT, has pointed out several times that you're never going to get mathematicians to universally rally around a single <em>logic</em>. So if you want them to use one universally accepted technology, it has to support multiple logics.<br>\nIt will be easier for everyone to get behind one theorem prover like MMT if they can use any logic they want.</p>",
        "id": 396196619,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697077521
    },
    {
        "content": "<p>Ok, the paper of Carette and co. agrees with you :) </p>\n<p>You should read it. They take a very global view of how computers are used to do mathematics including proving theorems, computing, publishing papers, creating libraries of examples on the internet like OEIS and writing books and how to put everything together. Something like this, they have listed 5 categories which are not very far from this, I don' t rememember exactly.  I haven't thought before to all the aspects of math+computer at the same time, just to proving + computing. It' really inspiring :)</p>",
        "id": 396199279,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1697078532
    },
    {
        "content": "<p>I would want to encode everything in linear logic. Everything linear at least. But I agree, I should be more open-minded. People want to do linear stuff using set theory and first order logic... as they have always been doing. They should be authorized to do so. </p>\n<p>More seriously, translations between different logics is also a great subject from the theoretical point of view and will be illuminating on this side too.</p>",
        "id": 396200086,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1697078851
    },
    {
        "content": "<p>People tend not to realize that logic has always been a place where theoretical progress and practical progress are linked together and so it's good for everybody: people who want beautiful theories for the pleasure of human beings and people who just want to encode everything on computers and don't care about human beings. I say this because of the ones who seem scared by computers who would replace them <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 396200880,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1697079156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Software.20for.20doing.20mathematics/near/396196619\">said</a>:</p>\n<blockquote>\n<p>Florian Rabe, the researcher behind MMT, has pointed out several times that you're never going to get mathematicians to universally rally around a single <em>logic</em>. So if you want them to use one universally accepted technology, it has to support multiple logics.<br>\nIt will be easier for everyone to get behind one theorem prover like MMT if they can use any logic they want.</p>\n</blockquote>\n<p>This is true, but \"easier\" doesn't necessarily mean \"easy\".  One could just as well say \"if you want programmers to use one universally accepted compiler, it has to support multiple programming languages\", which is probably true but still unlikely to happen, and arguably not even desirable.  I think a better way forward would be to develop translation protocols so that different proof assistants using different logics can interface with each other.</p>",
        "id": 396204114,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1697080568
    },
    {
        "content": "<p>The \"Hets\" toolkit also serves these goals, being a weak meta-system with which to connect stronger systems <a href=\"http://hets.eu\">http://hets.eu</a></p>",
        "id": 396209229,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1697083264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> </p>\n<blockquote>\n<p>Florian Rabe, the researcher behind MMT, has pointed out several times that you're never going to get mathematicians to universally rally around a single <em>logic</em>. So if you want them to use one universally accepted technology, it has to support multiple logics.<br>\nIt will be easier for everyone to get behind one theorem prover like MMT if they can use any logic they want.</p>\n<p>This is true, but \"easier\" doesn't necessarily mean \"easy\".  One could just as well say \"if you want programmers to use one universally accepted compiler, it has to support multiple programming languages\", which is probably true but still unlikely to happen, and arguably not even desirable.  I think a better way forward would be to develop translation protocols so that different proof assistants using different logics can interface with each other.</p>\n</blockquote>\n<p>Yes, I definitely do agree with you that \"easier\" does not mean \"easy.\" I see that the tone of my post may have undersold the scale of the work and effort needed to do this, there are a lot of unlikely assumptions necessary to make this happen.</p>",
        "id": 396296984,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697119869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428716\">Jean-Baptiste Vienney</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Software.20for.20doing.20mathematics/near/396200880\">said</a>:</p>\n<blockquote>\n<p>I say this because of the ones who seem scared by computers who would replace them <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>This is a bit off topic but my impulse is to interpret this in the context of recent progress in large language models. I apologize for the diversion.<br>\nI find it unlikely that a large language model could do many parts of my job as well as I could. However, \"as well as I could\" may be irrelevant.<br>\nI find it increasingly plausible that firms and universities will accept a drastic reduction in the quality of work in exchange for the reduced cost of using AI instead of doing it right.<br>\nThere is a lot of polarization in the AI discussion, I include myself here. It is a minefield. I see grifters making overzealous and hyperbolic claims about the capabilities and accuracy of LLM's. Certainly the companies pushing it have incentive to lie. Some ML researchers are overstating their claims for publicity. On the other hand the ones warning about the dangers of AI are often using equally ridiculous hyperbole, such as insisting that AI will be able to design its own deadly biochemical weapons.</p>\n<p>In discussions with people who are more moderate and see both pros and cons of the LLM's, I still get very concerned and taken aback when they minimize and dismiss the harm of ChatGPT-assisted writing and programming, in the style of \"Write me a python script that does this\" and then testing it on a couple of inputs to see whether it behaves in the expected way. I really don't think this is a good idea and I am very worried about a collective shift in standards from \"You should put forth your best effort to think through your code\" to \"If it generates correct code 70% of the time, this is enough.\"<br>\nSimilarly the dangers to education of students getting explanations of mathematical concepts from ChatGPT and recommending it to others as a learning resource. I don't think ChatGPT can reliably explain mathematical concepts correctly as well as I can, but I do think that universities and tutoring centers will distort that fact and offer ChatGPT assisted learning software.</p>",
        "id": 396302724,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697121574
    },
    {
        "content": "<p>I have a kind of view of society where there is a chain of trust for knowledge. You either know something yourself directly or you trust another individual who claims that it's true. Perhaps they are repeating a claim by someone else they trust and so on. In any case there is an expectation that if you follow this back to the source you have someone who directly has knowledge and evidence for the claim. When there is a breakdown, everyone in the chain up to that point suffers. If we are accepting ChatGPT generated code when we are essentially saying that programmers are no longer responsible or culpable for the correctness or incorrectness of the software, instead this is now left up to chance. Here I do not mean that programmers should verify their code but that they should be responsible for the correctness of their code in the same way that mathematicians are held responsible for the truth of the theorems that they claim and the proofs of the theorems that they claim are correct.</p>",
        "id": 396303516,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1697121833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Software.20for.20doing.20mathematics/near/396193607\">said</a>:</p>\n<blockquote>\n<p>Michael Kohlhase and Dennis Mueller work on \"Semantic TeX\" or \"sTeX\"<br>\n<a href=\"https://github.com/slatex/sTeX\">https://github.com/slatex/sTeX</a><br>\nwhich is a LaTeX package for marking up documents with semantic content/meaning.<br>\nThey are currently researching adding a type system to LaTeX for variables, so you can check the well formedness of mathematical expressions. They are planning to add a theorem prover soon, which should be interesting.</p>\n</blockquote>\n<p>Should obviously be called SemanTeX</p>",
        "id": 396386090,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1697156078
    },
    {
        "content": "<p>Some projects just aren't as advanced on the pun front as we are.</p>",
        "id": 396387048,
        "sender_full_name": "Kevin Arlin",
        "timestamp": 1697156603
    },
    {
        "content": "<p>I still think tex.stackexchange should have been called OverfullHbox.</p>",
        "id": 396389117,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1697157589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Software.20for.20doing.20mathematics/near/396204114\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Software.20for.20doing.20mathematics/near/396196619\">said</a>:</p>\n<blockquote>\n<p>Florian Rabe, the researcher behind MMT, has pointed out several times that you're never going to get mathematicians to universally rally around a single <em>logic</em>. So if you want them to use one universally accepted technology, it has to support multiple logics.<br>\nIt will be easier for everyone to get behind one theorem prover like MMT if they can use any logic they want.</p>\n</blockquote>\n<p>This is true, but \"easier\" doesn't necessarily mean \"easy\".  One could just as well say \"if you want programmers to use one universally accepted compiler, it has to support multiple programming languages\", which is probably true but still unlikely to happen, and arguably not even desirable.  I think a better way forward would be to develop translation protocols so that different proof assistants using different logics can interface with each other.</p>\n</blockquote>\n<p>Kind of something like LLVM, if you squint a bit?<br>\n\"LLVM is a set of compiler and toolchain technologies that can be used to develop a frontend for any programming language and a backend for any instruction set architecture. LLVM is designed around a language-independent intermediate representation (IR) that serves as a portable, high-level assembly language that can be optimized with a variety of transformations over multiple passes.\"<br>\n<a href=\"https://en.wikipedia.org/wiki/LLVM\">https://en.wikipedia.org/wiki/LLVM</a></p>",
        "id": 396674797,
        "sender_full_name": "Viljami Virolainen",
        "timestamp": 1697313990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281326\">Ryan Wisnesky</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Software.20for.20doing.20mathematics/near/396209229\">said</a>:</p>\n<blockquote>\n<p>The \"Hets\" toolkit also serves these goals, being a weak meta-system with which to connect stronger systems <a href=\"http://hets.eu\">http://hets.eu</a></p>\n</blockquote>\n<p>Wow, looks pretty impressive!<br>\n<a href=\"/user_uploads/21317/-ORpUKUnQrJiYabZSIafdpnF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/-ORpUKUnQrJiYabZSIafdpnF/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/-ORpUKUnQrJiYabZSIafdpnF/image.png\"></a></div>",
        "id": 396675202,
        "sender_full_name": "Viljami Virolainen",
        "timestamp": 1697314486
    }
]