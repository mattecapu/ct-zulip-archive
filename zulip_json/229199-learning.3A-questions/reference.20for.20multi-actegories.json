[
    {
        "content": "<p>I'm looking for a reference for the generalisation of <a href=\"https://ncatlab.org/nlab/show/actegories\">[[actegories]]</a> from <a href=\"https://ncatlab.org/nlab/show/monoidal%20categories\">[[monoidal categories]]</a> to <a href=\"https://ncatlab.org/nlab/show/multicategories\">[[multicategories]]</a>. Such a structure should comprise a collection of objects, and a collection of multimaps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>m</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><mi>a</mi><mo>→</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">m_1, \\ldots, m_n, a \\to a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> satisfying evident axioms. Does anyone know if these have been defined in the literature before?</p>",
        "id": 294912685,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661275094
    },
    {
        "content": "<p>Like CBPV basically? Following Mike Shulman's terminology (<a href=\"https://arxiv.org/abs/2106.15042\">https://arxiv.org/abs/2106.15042</a>) these would be linearly unary, linearly co-unary LNL polycategories, and they can be defined as a slice of the category of LNL polycategories.</p>",
        "id": 294940894,
        "sender_full_name": "Max New",
        "timestamp": 1661286229
    },
    {
        "content": "<p>Yes, the previous literature on these things seems to have neglected the multicategorical case in favor of assuming the acting object, at least, is a monoidal category.  My understanding is that CBPV also usually includes morphisms of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>m</mi><mi>n</mi></msub><mo>→</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">m_1,\\dots,m_n \\to a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, which corresponds to linearly <em>subunary</em> and co-unary LNL polycategories.</p>",
        "id": 294945411,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661288296
    },
    {
        "content": "<p>Yes, I just call a \"linearly subunary and co-unary LNL polycategories\" a \"CBPV multicategory\"</p>",
        "id": 294948275,
        "sender_full_name": "Max New",
        "timestamp": 1661289652
    },
    {
        "content": "<p>Here you're taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>m</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">m_1, \\ldots, m_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be nonlinear objects and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">a, a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to be linear objects? Wouldn't this require that the multicategory be cartesian? In any case, I don't think LNL-polycategories are quite what I'm looking for. I can believe it may be possible to encode the structure I'm interested in in that formalism, but I'm more interested in finding in the literature the perspective of actions of multicategories. Furthermore, using LNL-polycategories, I expect that I would be able to capture the concept of \"multicategory equipped with a multi-actegory\", whereas really I would prefer a notion of multi-actegory for a given (i.e. fixed) multicategory. While this may also be possible by slicing appropriately, I think defining the structure directly is clearer conceptually.</p>",
        "id": 294948319,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661289681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276642\">Max New</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/reference.20for.20multi-actegories/near/294948275\">said</a>:</p>\n<blockquote>\n<p>Yes, I just call a \"linearly subunary and co-unary LNL polycategories\" a \"CBPV multicategory\"</p>\n</blockquote>\n<p>Of intermediate verbosity is \"linearly subunary LNL multicategory\".</p>",
        "id": 294948367,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661289713
    },
    {
        "content": "<p>If the NL part is just a multicategory, not cartesian, then I don't know a name for it, though if you included the $m_1,\\ldots \\to a'$ morphisms I would probably just call it a \"linear CBPV multicategory\"</p>",
        "id": 294948583,
        "sender_full_name": "Max New",
        "timestamp": 1661289835
    },
    {
        "content": "<p>but no I don't know of any extant names for what you're defining</p>",
        "id": 294948682,
        "sender_full_name": "Max New",
        "timestamp": 1661289883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/reference.20for.20multi-actegories/near/294948319\">said</a>:</p>\n<blockquote>\n<p>Here you're taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>m</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">m_1, \\ldots, m_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be nonlinear objects and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">a, a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to be linear objects? Wouldn't this require that the multicategory be cartesian?</p>\n</blockquote>\n<p>Yes.  But you can deal with the noncartesian case by just using linear objects, which means you can just work with ordinary multicategories.  Specifically, there is a symmetric multicategory ACT, with two objects M and A, and such that there is a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> if either (1) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">X=M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> consists entirely of Ms, or (2) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">X=A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> has exactly one A in it.  Then a symmetric multicategory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span> with a functor to ACT is precisely a symmetric multicategory (the preimage of M) that \"acts\" on the objects in the preimage of A.  You can do a non-symmetric version too.</p>",
        "id": 294948794,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661289955
    },
    {
        "content": "<p>can you do affine/relevant this way?</p>",
        "id": 294949087,
        "sender_full_name": "Max New",
        "timestamp": 1661290095
    },
    {
        "content": "<p>How about just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>-actegory, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is the acting multicategory?</p>",
        "id": 294949476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661290295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276480\">Reid Barton</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/reference.20for.20multi-actegories/near/294949476\">said</a>:</p>\n<blockquote>\n<p>How about just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>-actegory, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is the acting multicategory?</p>\n</blockquote>\n<p>Do you know any references for this term?</p>",
        "id": 294950439,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661290848
    },
    {
        "content": "<p>No</p>",
        "id": 294950470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661290864
    },
    {
        "content": "<p>I don't really like calling this any kind of \"actegory\", since there isn't actually any \"acting\" going on.  (Actually I don't like the \"word\" \"actegory\" in the first place, but that's neither here nor there.)</p>",
        "id": 294955447,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661293895
    },
    {
        "content": "<p>Maybe multiactegory is better? (Though I am not a fan of \"actegory\" either)</p>",
        "id": 294955526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661293927
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>-module?</p>",
        "id": 294955555,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661293949
    },
    {
        "content": "<p>I definitely think this notion deserves a more transparent name than \"linearly subunary and co-unary LNL polycategories\" or \"CBPV multicategory\"</p>",
        "id": 294955561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661293956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276642\">Max New</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/reference.20for.20multi-actegories/near/294949087\">said</a>:</p>\n<blockquote>\n<p>can you do affine/relevant this way?</p>\n</blockquote>\n<p>I haven't been able to think of a way to encode affine or relevant structures in terms of cartesian or symmetric ones.  You could formulate analogues of LNL polycategories in which the nonlinear objects are affine or relevant instead of cartesian.  You could even formulate one \"omnibus\" version in which there are four classes of objects, cartesian, affine, relevant, and linear.  At one point I spent a little while thinking about whether an \"entries-only\" like formulation could make that tractable, where say each object comes along with the information about the structural rules that it admits.</p>",
        "id": 294955739,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661294077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/reference.20for.20multi-actegories/near/294955447\">said</a>:</p>\n<blockquote>\n<p>I don't really like calling this any kind of \"actegory\", since there isn't actually any \"acting\" going on.  (Actually I don't like the \"word\" \"actegory\" in the first place, but that's neither here nor there.)</p>\n</blockquote>\n<p>Calling it an actegory is consistent with the existing terminology for monoidal categories: it's the appropriate generalisation for multicategories. It may not be an action in a formal sense, but I think the terminology \"actegory\" is merely reminiscent of the structure, which is \"action-like\".</p>",
        "id": 294956289,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661294427
    },
    {
        "content": "<p>Though I think \"multiactegory\" is better, since this allows one to disambiguate between the two kinds of \"actegory\" for representable multicategories.</p>",
        "id": 294956348,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661294483
    },
    {
        "content": "<p>I'm not saying I like the terminology \"actegory\"; I'm only trying to find the most consistent terminology.</p>",
        "id": 294956378,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661294509
    },
    {
        "content": "<p>I dunno, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a multicategory, I would kind of expect an \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>-actegory\" to be something that reduces to an ordinary actegory when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a monoidal category.  But this doesn't, not until you impose an extra representability condition.  What about something like \"lax actegory\" or \"pro-actegory\"?</p>",
        "id": 294957018,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661294926
    },
    {
        "content": "<p>That's exactly the reason I was advocating multiactegory rather than just actegory.</p>",
        "id": 294957077,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1661294966
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 294957279,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661295122
    }
]