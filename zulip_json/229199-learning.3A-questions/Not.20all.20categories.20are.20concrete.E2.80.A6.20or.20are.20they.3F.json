[
    {
        "content": "<p>Hello! I have a soft question.</p>\n<p>I recently came across a blog post that gives an example of a category which is not concrete: <a href=\"https://amathew.wordpress.com/2012/01/26/homotopy-is-not-concrete/\">Homotopy is not concrete</a>.</p>\n<p>This surprised me a little, since apparently the Yoneda lemma provides a general way to make any category concrete, namely by replacing each object with the set of morphisms into it. (Indeed, this construction is also cited at the beginning of the blog post).<br>\nThe seeming cotradiction here is resolved by the fact that the above construction doesn’t <em>quite</em> work, because the “set of all arrows into an object” might actually be too big to be a set.</p>\n<p>Now, the problem is that I can’t make up my mind about whether this is some fundamentally deep fact, or is “just a size issue”. What are your thoughts about this?</p>",
        "id": 444536423,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718304447
    },
    {
        "content": "<p>To start off the conversation, I may give my current opinion:</p>\n<p>At the moment I tend to see this as “just a size issue”, for the following reason: <br>\nAssume we have a countable hierarchy of Grothendieck universes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub><msub><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\{\\mathcal{U}_i\\}_{i \\in \\mathbb{N}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathbb mtight\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span></span></span></span>; then, we can define locally <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-small categories in the obvious way, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-concrete categories as  categories  equipped with a faithful functor to the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-small sets; now, given any locally <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-small category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, we have that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a fortiori a locally <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_{i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span>-small category, and with the construction from before we can make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_{i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span>-concrete category.<br>\nTherefore, any category can be considered concrete, if we see it in a large enough universe.</p>\n<p>From a more philosophical point of view, it seems to me that the Yoneda lemma <em>does</em> tell us that any category could be seen as concrete; but morphisms in a category can capture so much information that, to see them as plain functions, we are forced to consider really big sets in general, and perhaps even proper classes.</p>",
        "id": 444536866,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718304571
    },
    {
        "content": "<p>I'd say this is a real issue, not the kind you just wave away by muttering \"Grothendieck\" three times in a darkened room.</p>",
        "id": 444539080,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718305251
    },
    {
        "content": "<p>The thing is that, by definition, a <em>locally small</em> category is concrete if it has a faithful functor into the category of <em>small</em> sets. It's the same occurrence of \"small\" on both sides of the \"is\" there!</p>",
        "id": 444539232,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718305293
    },
    {
        "content": "<p>In many cases, size issues become interesting when there's a definition that involves <em>the same</em> universe occurring twice. For instance, my favorite example of a \"real\" size issue is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><mo stretchy=\"false\">[</mo><msup><mi>X</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X\\mapsto [X^{\\mathrm{op}},\\mathbf{Set}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Set</span></span><span class=\"mclose\">]</span></span></span></span> is almost a free cocompletion monad, except that the presheaf category is only the free cocompletion if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is small, while the presheaf category itself is almost never small. So this isn't an endofunctor! This leads to real actual math, where you realize the free cocompletion monad is the mapping of <em>locally small</em> categories sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to the category of <em>small</em> presheaves on it. There's no way to produce this result just by muttering about Grothendieck universes.</p>",
        "id": 444539697,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718305432
    },
    {
        "content": "<p>Similarly, the category of (small!) groups is <em>not cototal</em>. This is a real actual theorem: there's a real actual continuous functor from groups to (small) sets which is really actually not representable by any group. It's representable by a <em>large</em> group, one which maps onto every small simple group in an essentially unique way (I think I'm remembering that construction right.)</p>",
        "id": 444540046,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718305546
    },
    {
        "content": "<p>Getting back to concreteness: the theorem is that there are categories with a <em>small</em> number of maps between any two objects that can't be represented faithfully by <em>small</em> sets. Once again, that's \"small\" on both sides. That's a real theorem! It depends on knowing a lot about homology groups! It's also a theorem that every category can be faithfully represented by sufficiently large sets, but it's more like formal nonsense.</p>",
        "id": 444540455,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718305676
    },
    {
        "content": "<p>A related and very interesting fact is that <em>every</em> locally small category does admit a <em>conservative</em> functor into (small) sets. This is another theorem where you have to actually come up with specific mathematical ideas; and it's good to know! If you're used to homotopy groups of pointed connected topological spaces, and then you realize there is no similar <em>representable</em> family of conservative functors on <em>all</em> topological spaces, you might throw up your hands and wonder if there's any conservative functor to small sets at all--but there always is one. It's somehow never of any real mathematical interest to know some functor sort of exists, but only if you upgrade the universe level.</p>",
        "id": 444541037,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718305851
    },
    {
        "content": "<p>It's fine to say \"it's just a size issue\", only so long as you also accept the consequences: our intuition about many things goes out the window.  In particular <a href=\"https://ncatlab.org/nlab/show/function%20extensionality\">[[function extensionality]]</a> is no longer assured... That's a <em>pretty big</em> loss!</p>",
        "id": 444541910,
        "sender_full_name": "Eric M Downes",
        "timestamp": 1718306141
    },
    {
        "content": "<p>Wait, what's the connection of size to function extensionality?</p>",
        "id": 444542567,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718306342
    },
    {
        "content": "<p>My understanding is that in the set-theoretic sense (functions agreeing on arguments are equal) depends upon the category being concrete. (Freyd?  Can't remember; can find it.)... In Topos theory you recover this by expressing it in the internal language about subobjects, but the logic is weakened so it may not \"mean the same thing\" in the external logic... honestly ask a topos theorist about that! I'd love to understand it better, but am only a student of it.   But in general, all the theorems I know of to ensure it works depend on something topos-like or concreteness, and I think it doesn't hold in general.</p>\n<p>It would be really nice to develop an example using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">H</mi><mi mathvariant=\"sans-serif\">o</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"sans-serif\">T</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sf Ho(Top)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Ho</span><span class=\"mopen\">(</span><span class=\"mord mathsf\">Top</span><span class=\"mclose\">)</span></span></span></span></span> as a quotient, and show how somehow morphisms agreeing on inputs can now have different content, maybe they are the same up to a certain kind of equivalence.  Sadly I don't have a sharp example; wish I did!</p>",
        "id": 444545477,
        "sender_full_name": "Eric M Downes",
        "timestamp": 1718306931
    },
    {
        "content": "<p>Well, I think you have to specify a proposed concreteness functor before you can even ask about function extensionality in this sense; it doesn't seem to be a property of the abstract category (what are \"the inputs\", if not the points of the underlying set of the domain?) So if you had a large-concrete category you could still import the function extensionality of large sets and use it in much the same way. If you're using the Yoneda embedding as your large-concreteness functor, this reduces to the fact that morphisms which send all <em>generalized</em> elements to the same place are equal, i.e. the faithfulness of the Yoneda embedding itself.</p>",
        "id": 444545762,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718307018
    },
    {
        "content": "<p>Yeah agreed insofar as I understand it.</p>\n<p>Okaay <a href=\"https://github.com/HoTT/book/pull/617\">here is a good discussion thread on the HoTT book</a>; its homotopy so it comes down to what we mean by \"equal\"... but these subtleties also cannot be waved away by saying Grothedieck and lighting a candle.</p>",
        "id": 444546164,
        "sender_full_name": "Eric M Downes",
        "timestamp": 1718307157
    },
    {
        "content": "<p>We should ask <span class=\"user-mention\" data-user-id=\"277574\">@Conor McBride</span> !</p>",
        "id": 444546658,
        "sender_full_name": "Eric M Downes",
        "timestamp": 1718307345
    },
    {
        "content": "<p>Okay, my neanderthal-brain attempt to explain what is a deep notion, a sense in which function extensionality could fail when you only use <em>intensional types</em>, is that identity types in HoTT are path-like, and of course you can have unequal paths which are <em>equivalent on their boundaries</em>.  And the \"assignment of values\" concept we use for function extensionality (wether on generalized objects or like, points) is really a property of the behavior of assignments on the <em>boundary</em>.</p>\n<p>And I guess I had stretched that this comes into play not just in HoTT (e.g. the axioms needed for a computer to reason intensionally about and manipulate <em>inequivalent</em> proofs of the same theorem) but also in like, \"actual mathematical homotopy\", and this is supported to by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">H</mi><mi mathvariant=\"sans-serif\">o</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"sans-serif\">T</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sf Ho(Top)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Ho</span><span class=\"mopen\">(</span><span class=\"mord mathsf\">Top</span><span class=\"mclose\">)</span></span></span></span></span> being not-concrete.  The two concepts may actually be different, and there are experts here who can tell us if I am wrong (as I am wont to be), and such concepts should not be thought of as the same thing.  But for now that's what I can say semi-intelligently.</p>",
        "id": 444552798,
        "sender_full_name": "Eric M Downes",
        "timestamp": 1718309588
    },
    {
        "content": "<p>\"Function extensionality\" usually refers to a property of type theory, which could be the internal type theory of some category.  It's very different from the question of whether two morphisms that act the same on all global elements are necessarily equal; that's the notion of a <a href=\"https://ncatlab.org/nlab/show/well-pointed%20category\">[[well-pointed category]]</a>.  Well-pointedness is an extremely strong property and very few categories satisfy it (e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>×</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Set}\\times \\mathrm{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span></span></span></span> doesn't); whereas categorically speaking, function extensionality is really just part of the definition of cartesian closure.</p>",
        "id": 444575402,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1718317934
    },
    {
        "content": "<p>Concretizability is of course much weaker than well-pointedness, but its connection to extensionality is also much more tenuous.  I suppose you're thinking that if there's a faithful functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>:</mo><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">U:C\\to \\mathrm{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span></span></span></span> then you can think of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U(c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span> as the \"set of elements\" of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> and faithfulness as saying that \"if two morphisms act the same on all elements then they are equal\".  But that notion of \"element\" could be completely bizarre and cooked up for the purpose -- and a given category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> could admit many different such -- so I'm dubious that it's useful to think of concreteness as a sort of extensionality principle.</p>\n<p>In particular, while function extensionality is an essential aspect of much mathematics that no one would want to do without, and well-pointedness is a strong property that has many powerful consequences when it holds, it's hard to think of any real applications of concreteness.</p>",
        "id": 444576014,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1718318322
    },
    {
        "content": "<p>May I humbly point to <a href=\"https://thehighergeometer.wordpress.com/2022/11/18/slides-for-colloque-benabou/\">https://thehighergeometer.wordpress.com/2022/11/18/slides-for-colloque-benabou/</a> which is related but perhaps not entirely what the original post is after. I draw attention to Isbell's condition mentioned later in the slides, which precisely delimits which large but locally small categories are concrete and which are not. It is not purely a matter of size, but an algebraic condition.</p>",
        "id": 444583508,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718322676
    },
    {
        "content": "<p>Using universes like this, you can even make the simpler claim than \"all categories are concretisable\": </p>\n<p>Theorem: Every class is a set</p>\n<p>Proof: Interpret \"class\" as being a set that is possibly large relative to the current universe. Then it is an element of a bigger universe, and hence a set. QED.</p>\n<p>Or even: </p>\n<p>Theorem: There is a set of all sets.</p>\n<p>Proof: consider all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span>-sets for the current universe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span>. This universe is itself a set. QED.</p>\n<p>This is obviously very tongue in cheek, but it feels to me more or less the same as being able to go up a universe and use Yoneda. If you genuinely have a large category, one that doesn't sit inside any universe (for instance the colimit of all the categories of sets relative to all the universes), then you can't wave the universe wand at it.</p>",
        "id": 444583923,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718323020
    },
    {
        "content": "<p>Thanks everyone for the very thoughtful answers!</p>\n<p>I think that the reason why I did not consider the size aspect to be central is that indeed I was looking for a formal-nonsense argument: I tend to see the proof of the concreteness via Yoneda as an analog (indeed, a direct generalization) of Cayley’s theorem for groups, which I consider more  “morally important” than “mathematically useful” as far as theorems go.<br>\n<span class=\"user-mention\" data-user-id=\"609515\">@Kevin Carlson</span> I liked your point about “smallness on both sides of the is”, and I want to make sure I understand correctly your cocompletion example: if we define the “free large-cocompletion” of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> as the universal large category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> equipped with a cocontinuos functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">C \\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, can we say that the presehaf category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><msup><mi>C</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup></msup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Set}^{C^{\\mathrm{op}}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9532em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9532em;\"><span style=\"top:-3.1362em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> is the “free large-cocompletion” of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? Then, the point of your example is that altough this “free large-cocompletion” exists, it is much less interesting/mathematically useful than the usual free cocompletion (in particular, because it doesn’t yield a monad), right?</p>\n<p>There is also the fact that I tend to be very loose with size when I think about categories, which may be the reason why I missed the subtlelty here. For instance, when I wish to construct a category I tend to think of it informally first, then convince myself that there is some universe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that it could be formalized as a locally <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-small category (so as to stay safe from paradoxes), and then do my thing. But at that point, I may just as well take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that the category is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-small, and then it is a theorem that the category is also concrete.<br>\n(It didn’t occur to me, as <span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span> suggested, that there could be an essential problem with “categories that don’t sit in any universe”: that is perhaps due to the fact that I tend to think of formal issues within the framework of type theory, and I have no idea how one could define a category which doesn’t sit in any type universe).</p>\n<p>About the thought-provoking examples by <span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span>, for some reason I “morally” agree with the first statement, but not the second:<br>\n1) Every class is a “set”: the tautulogical universe level argument, to me, simply suggests that collections behave in much the same way at all universe levels; morally they are all just “sets”, but importantly they ave different “sizes” (or rather, they are “stratified” so as to avoid impredicative paradoxes).<br>\n2) There is a “set” of all “sets”: that argument feels wrong, since if we understand “set” as in the above point then we can’t just consider a “current universe” which fits them all.<br>\nThese are just “gut feelings” of course, but I wonder if they come from some mathematical misconception deep inside my head.</p>",
        "id": 444661215,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718358333
    },
    {
        "content": "<p>So here's the link: consider the class of all sets. If you believe the first theorem, you have to believe the second theorem</p>",
        "id": 444681648,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718365227
    },
    {
        "content": "<p>Well, the thing is that to make sense of the first claim I understood “set” as “any set-like object” (in the sense that it behaves just like a set, except for stratification/size differences); but then I can’t “consider the class of all “sets””.<br>\nThis is somewhat analogous to a finitist that can consider “natural numbers”, has an intuitive understanding of the fact that natural numbers of any size behave the same way, but nonetheless will not accept the “class of all natural numbers”.</p>",
        "id": 444685997,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718366809
    },
    {
        "content": "<p>Proper classes don't behave like sets, though. If you can tell me formally what you mean by \"set-like object\" then there is something precise to say. I mean a 'set' as something that satisfies a system of axioms for sets (ZF(C), NBG(C), ETCS, ...), not some vague \"set-like\" notion. And one can definitely work with the category of all sets as a model of the theory of categories.</p>",
        "id": 444689723,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718368162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span> to say that a “set” is something which (belongs to a universe that) satisfies the axioms of e.g. ZFC seems very reasonable to me. But then I don’t see why proper classes would not be “sets”: if we assume a hierarchy of universes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub><msub><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\{\\mathcal{U}_i\\}_{i \\in \\mathbb{N}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathbb mtight\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span></span></span></span>, doesn’t each universe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> give a model of ZFC? (Forgive my naivety if I’m horribly wrong here.)</p>\n<p>Also, if you use the above definition of “set”, I still can’t see how you can “consider the class of all sets”; the axioms of ZFC do not imply the existence of a class of all sets, do they?</p>",
        "id": 444693872,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718369547
    },
    {
        "content": "<p>The axioms of ZFC do not talk about classes at all, but you can still define what a class is: a first-order formula p in the language of ZFC with a free variable, giving something like { x | p(x) }. The class of all sets is then { x | x=x }. You can even define the category of classes of ZFC as the syntactic category of that theory, so you can know what operations are possible on classes: finite limits, quotients (using eg Scott's trick), and a few other things. They cannot do all the things that sets do. Any by \"all sets\" I mean that. Not \"all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span>-sets\". It is perfectly legitimate to take the colimit of the categories of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-sets. So an object consists of a set from any universe. And I'm assuming there is some kind of inclusion mapping of one universe into another, so it makes sense to talk about functions between sets that come from different universes. By \"all sets\" I could mean \"an element of an arbitrary universe\".</p>\n<p>If ZFC only being able to access classes indirectly bothers you, try NBG instead. There you really do get a class of all sets as an object of the theory.</p>",
        "id": 444695963,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718370135
    },
    {
        "content": "<blockquote>\n<p>Also, if you use the above definition of “set”, I still can’t see how you can “consider the class of all sets”; the axioms of ZFC do not imply the existence of a class of all sets, do they?</p>\n</blockquote>\n<p>That is correct: \"class\" is not part of the object language of ZFC. There are extensions of ZFC like <a href=\"https://en.wikipedia.org/wiki/Von_Neumann%E2%80%93Bernays%E2%80%93G%C3%B6del_set_theory\">NBG</a> in which both \"class\" and \"set\" are part of the formal language. </p>\n<p>So relative to ZFC itself, \"class\" belongs to the meta-language. I pretty much identify \"class\" here with first-order formula in the language of set theory, as in the class of sets satisfying some formula you can write down. You can manipulate classes as you do formulas, but operations like taking the power class of a class is out of bounds here.</p>",
        "id": 444696667,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1718370369
    },
    {
        "content": "<p>(David beat me to it by a few minutes while I was typing.)</p>",
        "id": 444696764,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1718370403
    },
    {
        "content": "<p>I really like this paper for thinking about classes in ZF(C): \"What is the real category of sets?\" <a href=\"https://arxiv.org/abs/1212.3107\">https://arxiv.org/abs/1212.3107</a> by <span class=\"user-mention\" data-user-id=\"309271\">@Samuele Maschio</span> The published version toned down the title, but I prefer this one. The objects being literally syntactic objects in the language of ZF set theory mean by definition ... you have everything. The <em>properties</em> of this category might be not determined (eg you can't prove or disprove the continuum hypothesis about this category, for instance, it's just not determined from the ZF axioms - and this isn't about having a <em>model</em>), but you can't suddenly go: \"ah, but secretly it's just some countable transitive model in some ZFC metatheory\", and think about other models.</p>",
        "id": 444697434,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718370616
    },
    {
        "content": "<p>Ok, I think I’m suffering from a lack of background in formal logic and set theory which prevents me from fully understanding your last comments.</p>\n<p>One foundation that I think I may understand formally well enough is type theory (as laid out in the HoTT book), but in that context I can’t see how to do something analogous to what <span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span> is saying.<br>\nFor instance, I don’t see how one can meaningfully “take the colimit of the categories of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-types”, at least from <em>within the language</em>. I can see how one could move out to a <em>meta-language</em> and define something that effectively behaves like a “universe of all types”, but this introduces a separation between stuff which exists at the level of the meta-language as opposed to within the language, which I think creates a further “meta-stratification” of universes: if we take the perspective of the meta-language, then we can meaningfully talk about both the types internal to the language and the “universe of all types”, but the “universe of all types” is defined purely in terms of the types within the language (it’s actually “the universe of all types <em>internal to the language</em>”), and hence will not “include” all the universes that exists at the level of the meta-language (e.g. itself).</p>\n<p>(I assume the situation is similar in NBG, which internalizes “the class of all sets” <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, but then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is not “the class of all classes”.)</p>\n<p>Perhaps I should revisit this issue with a better background. For now, I will thank you all for the precious answers.</p>",
        "id": 444705290,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718373110
    },
    {
        "content": "<p>Note that I've not said anything about the class of all classes :-)</p>\n<p>Also, if you'll look at the slides linked in my first comment here, one point of the project is to divorce Freyd's theorem about concretisability of locally small categories from ZFC (well, in fact NBGGC), and make the theorems hold for algebraic set theory + some rank axiom about stratifying \"all the sets\". This theory allows one to talk about classes directly, but even the syntactic category of ZF is a model of AST, so I don't feel like it's importing a metatheory: everything is implemented in AST, of which any number of other foundations are merely examples.</p>",
        "id": 444708707,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718374083
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span>, I got a bit off a tangent with the “class of classes” thing.<br>\nWhat I wanted to say is that even if we define the “class of all sets” at the level of the metalanguage, I am not convinced by the “consider the class of all sets; … it is a set” argument, because:</p>\n<ul>\n<li>If by “set” we mean something that exists at the level of the language, and (*): then the “class of all sets” as defined before is not a “set”, because it belongs to the meta-language.</li>\n<li>If by “set” we mean something which exists at the level of the meta-language (or within the language), and (*): then the “class of all sets” as defined before does not contain all “sets”, because there are also “sets” that exist at the meta-level (this assumes that the meta-theory is strong enough to produce a model of ZFC distinct from that within the theory, but when at some point you’ve argued that the “class of all sets” is a set, you have implied that the “class of all sets” belongs to some model of ZFC in the meta-language, so these indeed exist).</li>\n</ul>\n<p>(*): … belongs to some universe which satisfies the axioms of ZFC.</p>\n<p>(I think that in NBG we also have a problem, but a different one: though the “class of all sets” exists, I think one can’t show that it is a “set” in the sense that (*), because operations on proper classes are severely limited in NBG.)</p>\n<p>By the way, I will gladly take a look at the slides you linked, but not before I get back to a screen larger than that of my phone <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>",
        "id": 444716745,
        "sender_full_name": "Lorenzo Lipparini",
        "timestamp": 1718376656
    },
    {
        "content": "<p>I don't mean to take the two theorems seriously. Rather, I'm saying that your claims about all categories being concrete feels to me like it seems those theorems do to you, though perhaps for different reasons.</p>\n<p>You should remember that even talking about large categories requires one to have a framework for discussing non-sets. If every category is secretly small, then of course they are all concrete. But I posit that people really do sometimes care about all the things, and explicitly state they are working in a foundation where theses issues arise. Scholze, for instance said he didn't want to use universes in setting up the machinery of condensed sets, unlike the pyknotic sets approach.</p>",
        "id": 444721286,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1718377890
    },
    {
        "content": "<p>Your attempt to explain my point about the free cocompletion monad isn’t quite right, but I definitely wasn’t clear to begin with! By a “cocomplete” category I mean one with all <em>small</em> colimits. The “large cocompletion” you describe would be the category of presheaves valued in <em>large</em> sets, ie sets the next universe up! The category of all presheaves of <em>small</em> sets on a locally small category has no universal property at all. The free (small) cocompletion of a locally small category is its full subcategory on those presheaves that are small colimits of representables. So there are several different possible presheaf categories flying around! The one valued in large sets, though, is of no mathematical interest.</p>",
        "id": 444754039,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718386547
    },
    {
        "content": "<p>Another interesting “size matters” theorem, while we’re on this: a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>-small category cocomplete for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>-small colimits is almost impossible—it must be a preorder! That’s one reason why the “large cocompletion” isn’t interesting. Its universal property involves maps into large-cocomplete categories, but in an extremely strong sense there are absolutely no examples of those in normal mathematical practice, since ordinary categories are themselves small for the second universe. Much in contrast to small-cocomplete ones, of course.</p>",
        "id": 444755498,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1718386994
    }
]