[
    {
        "content": "<p>I know that every object in Set gives rise to a unique comonoid. Are comonoids in the category of sets and <em>partial</em> functions (with the (1, ×) monoidal structure) similarly trivial? My intuition is that the comultiplication still has to be duplicate (from the unit laws), and because the comultiplication determines the counit, those comonoids are unique.</p>",
        "id": 241545066,
        "sender_full_name": "James Wood",
        "timestamp": 1622817569
    },
    {
        "content": "<p>Furthermore, duplicate and delete exist for any object (with delete being the total function mapping each element to * ∈ 1).</p>",
        "id": 241546250,
        "sender_full_name": "James Wood",
        "timestamp": 1622818079
    },
    {
        "content": "<p>Wouldn't the restriction of the standard comonoid on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to a subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">S\\subseteq X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> give a different comonoid structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>? Its comultiplication is given by the partial function (in relational form) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>∈</mo><mi>S</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{(x,(x,x)) | x \\in S\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">}</span></span></span></span> with counit the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> itself?</p>",
        "id": 241546512,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1622818164
    },
    {
        "content": "<p>The general fact here is that comonoids in a cartesian monoidal category are trivial.</p>",
        "id": 241546526,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1622818172
    },
    {
        "content": "<p>Similarly, monoids in a cocartesian monoidal category are trivial.</p>",
        "id": 241546563,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1622818188
    },
    {
        "content": "<p>So the question now is whether times is the cartesian product in the category of partial functions.</p>",
        "id": 241546691,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1622818221
    },
    {
        "content": "<p>Partial functions with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo></mrow><annotation encoding=\"application/x-tex\">\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">×</span></span></span></span> as monoidal product are not Cartesian</p>",
        "id": 241546719,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1622818234
    },
    {
        "content": "<p>Great, then there's a chance for non-trivial examples.</p>",
        "id": 241546994,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1622818362
    },
    {
        "content": "<p>One way to see it is that it's equivalent to the category of pointed sets.</p>",
        "id": 241547032,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1622818376
    },
    {
        "content": "<p>It has natural diagonals but not natural projections.</p>",
        "id": 241547115,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1622818405
    },
    {
        "content": "<p>Right. I like your example. You're saying that you can take a (trivial) comonoid in Set and just restrict to any subset, and that should define a partial comonoid on X?</p>",
        "id": 241547178,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1622818431
    },
    {
        "content": "<p>I wonder if there are any examples that don't fall into this description. In other words: Is there a partial comonoid which does not extend to a well-defined (and thus trivial) comonoid?</p>",
        "id": 241547349,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1622818489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277342\">Robin Piedeleu</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Comonoids.20in.20partial.20functions/near/241546512\">said</a>:</p>\n<blockquote>\n<p>Wouldn't the restriction of the standard comonoid on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to a subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">S\\subseteq X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> give a different comonoid structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>? Its comultiplication is given by the partial function (in relational form) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>∈</mo><mi>S</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{(x,(x,x)) | x \\in S\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">}</span></span></span></span> with counit the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> itself?</p>\n</blockquote>\n<p>For relations, one of the unit laws is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>y</mi><mi mathvariant=\"normal\">.</mi><mtext> </mtext><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>∧</mo><mi>η</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exists y.~\\mu(x,(y,x&#x27;)) \\wedge \\eta(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">.</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x = x&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>. Letting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and reading from right to left, there must be a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> in the counit such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(x,(y,x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span>. Symmetrically, there must be some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> in the counit such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(x,(x,z))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span></span></span></span>. But if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> is deterministic, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> must both be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, so I think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> has to be total (and particularly the total diagonal).</p>\n<p>The direct counterexample to the quoted construction would be to take some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. Then, there must be a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> in the counit such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(x) = (y, x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>. In particular, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> cannot be undefined.</p>",
        "id": 241550201,
        "sender_full_name": "James Wood",
        "timestamp": 1622819600
    },
    {
        "content": "<p>Good point! My counterexample is not one because it does not satisfy the counit law. It's only a co-associative binary operation.</p>",
        "id": 241550858,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1622819899
    },
    {
        "content": "<p>The unit laws feel quite strong in this setting.</p>",
        "id": 241551219,
        "sender_full_name": "James Wood",
        "timestamp": 1622820087
    },
    {
        "content": "<p>And yeah, I've convinced myself that neither is 1 terminal (0 is) nor is × the limit-defined product (there is no pairing for partial functions that disagree on definèdness on any element of their domain). Maybe there is a product for partial functions, at least assuming excluded middle, but I don't think I want to use it. So I don't get to reuse the nice theorem about Cartesian monoidal structure.</p>",
        "id": 241553385,
        "sender_full_name": "James Wood",
        "timestamp": 1622821055
    },
    {
        "content": "<p>With string diagrams drawn from bottom to top, the category of sets and partial functions is such that the canonical comultiplications are natural, in that the following equation holds for every partial function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>:<br>\n<a href=\"/user_uploads/21317/3G2tpZM6iIR4j50B70U9WNaZ/det.png\">det.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/3G2tpZM6iIR4j50B70U9WNaZ/det.png\" title=\"det.png\"><img src=\"/user_uploads/21317/3G2tpZM6iIR4j50B70U9WNaZ/det.png\"></a></div>",
        "id": 241558019,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1622823025
    },
    {
        "content": "<p>On the other hand, the counits are <em>not</em> natural: the following equation holds if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a total function:<br>\n<a href=\"/user_uploads/21317/nbkpQPvDAJh61BtkDOlPuvWl/counit.png\">counit.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/nbkpQPvDAJh61BtkDOlPuvWl/counit.png\" title=\"counit.png\"><img src=\"/user_uploads/21317/nbkpQPvDAJh61BtkDOlPuvWl/counit.png\"></a></div>",
        "id": 241558091,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1622823063
    },
    {
        "content": "<p>If the comonoid structure on every object is indeed still unique, then it <em>may</em> be possible to prove this using reasoning similar to the Remarks 10.18 and 11.29 in <a href=\"https://arxiv.org/abs/1908.07021\">this paper</a>. Note that this is a setting in which the naturality equation for the counit is assumed to hold for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, while the one for the comultiplication need not. So the context is exactly opposite to yours and those arguments will not apply in the same form. But perhaps this can still inspire a proof in terms of string diagrams. In particular, I think that the category of sets and partial functions still satisfies the positivity axiom introduced in Definition 11.22, and this may be helpful.</p>\n<p>EDIT: I forgot to mention that the positivity axiom holds with the word \"deterministic\" replaced by \"total\".</p>",
        "id": 241558562,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1622823306
    },
    {
        "content": "<p>Sets and partial functions form a <em>cartesian restriction category</em>, which is equivalently a symmetric monoidal category in which every object is equipped with a commutative comonoid, satisfying the usual coherence conditions, in which the comultiplication is natural. (As Tobias explains above).</p>",
        "id": 241560290,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622824079
    },
    {
        "content": "<p>In fact, sets and partial functions are a <em>discrete</em> cartesian restriction category, which from this perspective means that there is a \"multiplication\" map as well, and that the multiplication and comultiplication together satisfy the special frobenius axioms. This appears in our <a href=\"https://arxiv.org/pdf/2011.06644.pdf\">POPL paper</a>, although it doesn't look like the version on arxiv has the proof (it's not too hard).</p>",
        "id": 241560565,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622824185
    },
    {
        "content": "<p>I also gave a talk about this at <a href=\"http://events.cs.bham.ac.uk/syco/strings3-syco5/\">SYCO5/STRINGS3</a> (there's a video/slides)</p>",
        "id": 241560769,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622824255
    },
    {
        "content": "<p>Notice that as a consequence of all this, the partial functions that are natural with respect to the counits (i.e., that delete properly) are precisely the total functions.</p>",
        "id": 241561083,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622824402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281583\">James Wood</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Comonoids.20in.20partial.20functions/near/241553385\">said</a>:</p>\n<blockquote>\n<p>And yeah, I've convinced myself that neither is 1 terminal (0 is) nor is × the limit-defined product (there is no pairing for partial functions that disagree on definèdness on any element of their domain). Maybe there is a product for partial functions, at least assuming excluded middle, but I don't think I want to use it. So I don't get to reuse the nice theorem about Cartesian monoidal structure.</p>\n</blockquote>\n<p>It turns out that the kind of product and terminal object (called \"restriction products\" and \"restriction terminal object\") that exist in sets and partial functions <em>are</em> limits, after a fashion. Specifically they arise as formal limits in the 2-category of restriction categories, restriction semifunctors, and lax transformations thereof. The discrete cartesian restriction categories are the ones with all limits in this sense.</p>",
        "id": 241562488,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622825055
    },
    {
        "content": "<p>The reference is <a href=\"https://mysite.science.uottawa.ca/phofstra/ranges2.pdf\">this</a>, although frankly the literature on this is scattered and relatively inaccessible.</p>",
        "id": 241562589,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622825110
    },
    {
        "content": "<blockquote>\n<p>The discrete cartesian restriction categories are the ones with all limits in this sense.</p>\n</blockquote>\n<p>All limits, or just the discrete limits (in both senses of the word \"discrete\")?</p>",
        "id": 241563292,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1622825431
    },
    {
        "content": "<p>All limits.</p>",
        "id": 241564069,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622825791
    },
    {
        "content": "<p>Ahh sorry. All <em>finite</em> limits. My mistake.</p>",
        "id": 241564211,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622825879
    },
    {
        "content": "<p>I guess the cartesian restriction categories (not necessarily discrete) would be the ones with all finite discrete limits... which is confusing.</p>",
        "id": 241564740,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826030
    },
    {
        "content": "<p>Why do discrete cartesian restriction categories have restriction pullbacks?</p>",
        "id": 241564896,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1622826071
    },
    {
        "content": "<p>It's easier to explain why they have a kind of equalizer. Essentially the codiagonal map (\"multiplication\") is a kind of partial equality test -- defined iff its inputs are equal.</p>",
        "id": 241565201,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826223
    },
    {
        "content": "<p>In the literature these are called \"latent equalizers\", with \"latent limits\" being the sort of limits I'm talking about. Splitting restriction idempotents moves us to another 2-category (all the 0-cells have split restriction idempotents, and the 1-cells are restriction functors instead of restriction semifunctors). Limits in this other 2-category are called \"restriction limits\", and if we restrict to the 0-cells that happen to be discrete cartesian restriction categories (with split restriction idempotents), then this is equivalent to the 2-category of categories with finite limits, finite limit preserving functors, and natural transformations.</p>",
        "id": 241565644,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826398
    },
    {
        "content": "<p>More concretely: If I have a discrete cartesian restriction category with split idempotents, then the category of total maps has finite limits. Conversely, the category of partial maps (spans with monic left leg) in any category with finite limits is a discrete cartesian restriction category with split restriction idempotents.</p>",
        "id": 241565797,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826472
    },
    {
        "content": "<p>If we drop the \"with split restriction idempotents\" part then we have to work with the \"latent\" limits, and in the weird 2-category, to obtain that discrete cartesian restriction categories are the ones with all finite (formal) limits.</p>",
        "id": 241565983,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826551
    },
    {
        "content": "<p>... but you can do it!</p>",
        "id": 241565987,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826554
    },
    {
        "content": "<p>Oh, so a discrete cartesian restriction category has all finite latent limits, and if it is split, it additionally has all finite restriction limits (essentially by definition)?</p>",
        "id": 241566015,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1622826570
    },
    {
        "content": "<p>Yes.</p>",
        "id": 241566032,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276114\">Chad Nester</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Comonoids.20in.20partial.20functions/near/241565983\">said</a>:</p>\n<blockquote>\n<p>If we drop the \"with split restriction idempotents\" part then we have to work with the \"latent\" limits, and in the weird 2-category, to obtain that discrete cartesian restriction categories are the ones with all finite (formal) limits.</p>\n</blockquote>\n<p>Right, got it, thanks!</p>",
        "id": 241566041,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1622826584
    },
    {
        "content": "<p>There are lots of interesting subtleties with restriction categories.</p>",
        "id": 241566122,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1622826609
    },
    {
        "content": "<p>Everything gets harder when you don't want to insist on split restriction idempotents <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 241566227,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622826685
    },
    {
        "content": "<p>By any chance, is there a well behaved notion of rig object in a Cartesian restriction category (given that I secretly care about partial rigs and whether they're interesting)? I think the naïve definition of partial rig is ill behaved because partial modules over such a partial rig have no 0 object, or something like that.</p>",
        "id": 241621723,
        "sender_full_name": "James Wood",
        "timestamp": 1622877977
    },
    {
        "content": "<p>I guess the obvious notions of partial rig are where the multiplication is a partial function, the addition is a partial function, or both are partial functions. I think you get a sensible category of partial rigs in all three cases, although I don’t know about the modules. Has anyone studied this? (I’d be interested to know!)</p>",
        "id": 241683657,
        "sender_full_name": "Chad Nester",
        "timestamp": 1622973209
    },
    {
        "content": "<p>I am new to zulip if I wish to discuss algebraic geometry argument which channel do I use?</p>",
        "id": 281514244,
        "sender_full_name": "Karem",
        "timestamp": 1651891076
    },
    {
        "content": "<p>Hi!  Go to <a class=\"stream\" data-stream-id=\"231112\" href=\"/#narrow/stream/231112-theory.3A-algebraic-geometry\">#theory: algebraic geometry</a></p>",
        "id": 281518543,
        "sender_full_name": "John Baez",
        "timestamp": 1651898045
    },
    {
        "content": "<p>Thanks! Zulip is pretty cool!</p>",
        "id": 281519688,
        "sender_full_name": "Karem",
        "timestamp": 1651899709
    }
]