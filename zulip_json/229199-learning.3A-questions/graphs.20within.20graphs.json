[
    {
        "content": "<p>what type of mathematical structure allows one to express this type of structure: a labelled directed graph where nodes can themselves be graphs and arrows can be related (for example to say that <code>loves</code> is a subrelation of <code>knows</code>) <br>\nCan one express that in <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>'s Bicategory of Relations too?<br>\n(I also want to link to a node within another graph too)<br>\n<a href=\"/user_uploads/21317/hskCELWkQB4KjP3W0WFrXIQz/UseCaseDiagrams.png\">Laura Lane believes what Clark Kent tells her about Superman</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/hskCELWkQB4KjP3W0WFrXIQz/UseCaseDiagrams.png\" title=\"Laura Lane believes what Clark Kent tells her about Superman\"><img src=\"/user_uploads/21317/hskCELWkQB4KjP3W0WFrXIQz/UseCaseDiagrams.png\"></a></div>",
        "id": 372298643,
        "sender_full_name": "Henry Story",
        "timestamp": 1688475229
    },
    {
        "content": "<p>Well, seeing as a graph can be modeled as a set, I would think that a graph of graphs would just itself be a graph.</p>\n<p>That being said, the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>r</mi><mi>a</mi><mi>p</mi><mi>h</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Graphs</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">s</span></span></span></span> is a topos, and the above could also be seen as an \"over-graph\" in the overcategory/overtopos <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>r</mi><mi>a</mi><mi>p</mi><mi>h</mi><mi>s</mi><mi mathvariant=\"normal\">/</mi><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">Graphs/G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">G</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is the graph corresponding to the \"outer\" graph with four edges and four nodes containing the \"inner\" graphs in the example you've given.</p>",
        "id": 372459852,
        "sender_full_name": "Keith Elliott Peterson",
        "timestamp": 1688531032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> you probably need to be a bit more specific about what you want. The following gives something that might be useful, but it doesn't quite match the picture you've drawn, so I don't know.</p>\n<p>Define a <a href=\"https://ncatlab.org/nlab/show/reflexive%20graph\">[[reflexive graph]]</a> as a graph with a distinguished edge from each node to itself. These are sort of like the identity morphisms in a category, so I'll call them identities, but they don't have to obey any special conditions like identity morphisms do, they just exist. A morphism of reflexive graphs is the same as a morphism of graphs except that it also has to map identities to identities.</p>\n<p>Then a morphism of reflexive graphs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G&#x27;\\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> defines a kind of \"graph of graphs\". The point is that for each node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">x\\in G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> there is associated a subgraph of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">G&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, whose nodes are all the nodes that map to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and whose edges are all the edges that map to the identity morphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>. (This is why we needed to consider reflexive graphs.) Given a node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> above <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> (i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>∈</mo><msup><mi>G</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;\\in G&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.791em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> maps to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">x\\in G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>) and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> above <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> you can have an arrow from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, but only if there is an arrow from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. (The arrow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>→</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;\\to y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> must map to some arrow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\to y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>.) I don't know if that constraint is something you want, but maybe it is, since you talked about sub-relations.</p>\n<p>However, in your picture you have an arrow from the \"CK\" node to the big circle at the top, and that isn't something you can have in this construction. So maybe it's not what you want.</p>",
        "id": 372484630,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1688540694
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"389450\">@Keith Elliott Peterson</span> and <span class=\"user-mention\" data-user-id=\"276071\">@Nathaniel Virgo</span>. The structures you present both involve mapping one graph to another one.<br>\nInterestingly David Cornfield explains how modalities arise out of adjunctions between slice categories, and structurally we need these graphs in the nodes of graphs to allow the basic modality of  \"S says P\" which is the core of BAN Logic (Burrows-Abadi-Needham) for decentralised access control. So that is very interesting.</p>\n<p>I am not sure if the arrow  <code>CK</code> to the big box is needed, as one could place a copy of the graph in the big top circle in the lower right circle. But I think if one can name these graphs, then then that link can be made. </p>\n<p>Programmatically I think this is should be definable recursively. An RGraph could be defines as having nodes that can be literals (Strings, ints, ...), named or blank nodes, or RGraphs. There are some good example and pictures of this in this 2016 blog post <a href=\"https://blog.higher-order.com/blog/2016/04/02/a-comonad-of-graph-decompositions/\">A Comonad of Graph Decompositions</a>.</p>\n<p>Where such named directed labelled multi-edge graphs are used by the semantic web stack (RDF) to describe positive statements of facts  (regular logic) which <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>'s  looks at in the first part of <a href=\"https://arxiv.org/abs/1706.00526\">Knowledge Representation in the Bicategories of relations</a>, allowing graphs in the nodes of graphs should give one full first order logic, i.e. what is known as geometric or coherent logic and which Evan looks at in chapter 9.</p>\n<p>This at least is the bet of the <a href=\"https://arxiv.org/pdf/2305.08476.pdf\">RDF Surfaces: Computer Says No⋆</a> paper which explains some of the motivations of the W3C Community work described with illustrations in the <a href=\"https://w3c-cg.github.io/rdfsurfaces/#Introduction\">RDF Surfaces Primer</a> which is inspired by Peirce's work.  In \"computer says no\" they define an H-graph recursively too.</p>\n<blockquote>\n<p>an H-graph as the combination of a (typed) surface 𝑆, graffiti 𝐺𝑟, and a graph 𝐻 which is again an H-graph.</p>\n</blockquote>\n<p>But it is still early work. <br>\nIt is a puzzling still how the bicategory of relations, the graphs slice categories and the recurive definitions are related.</p>\n<p>(btw. the above reasoning suggests that \"isTrue\" and \"isFalse\" are basic modal notions. Perhaps the simplest ones)</p>",
        "id": 372528626,
        "sender_full_name": "Henry Story",
        "timestamp": 1688550796
    },
    {
        "content": "<p>This is a relatively trivial comment, but coherent logic, geometric logic, and full first-order logic are all different things. Neither coherent logic nor geometric logic allow negation or universal quantification in general; first-order logic certainly does but does not allow the infinite disjunctions in geometric logic.</p>",
        "id": 372672424,
        "sender_full_name": "Kevin Arlin",
        "timestamp": 1688579210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609515\">Kevin Arlin</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/graphs.20within.20graphs/near/372672424\">said</a>:</p>\n<blockquote>\n<p>This is a relatively trivial comment, but coherent logic, geometric logic, and full first-order logic are all different things. Neither coherent logic nor geometric logic allow negation or universal quantification in general; first-order logic certainly does but does not allow the infinite disjunctions in geometric logic.</p>\n</blockquote>\n<p>In \"Knowledge Representation in the Bicategories of relations\" Evan Patterson writes on p. 47</p>\n<blockquote>\n<p>Coherent logic is nonetheless as expressive as first-order logic, in the sense that any first-order theory can be translated into an equivalent coherent theory called its Morleyization.</p>\n</blockquote>",
        "id": 372674848,
        "sender_full_name": "Henry Story",
        "timestamp": 1688579820
    },
    {
        "content": "<p>It is true that every first-order theory can be <em>expressed</em> as a coherent theory, but that is by no means the same thing as saying that first order logic is the same as coherent logic. People do use universal quantifiers in practice, after all! I see upon checking that some people apparently do say \"geometric\" for \"coherent\" and vice versa; when I said they aren't the same, I was using \"geometric\" for the logic allowing infinitary disjunctions and \"coherent\" for the logic allowing only finite ones.</p>",
        "id": 372681345,
        "sender_full_name": "Kevin Arlin",
        "timestamp": 1688581484
    },
    {
        "content": "<p>So universal quantifiers appear on the RDF-Surfaces approach as <a href=\"https://w3c-cg.github.io/rdfsurfaces/#NegativeSurface\">blank nodes on a negative surface</a>. So here a top plain graph is always a positive surface, where blank nodes are existential quantifiers. <br>\nGraphs inside nodes can be inside a negative node or a positive node. If inside a negative node, blank nodes are interpreted as universal quantifiers. <br>\nThey have some good diagrams in the <a href=\"https://w3c-cg.github.io/rdfsurfaces/\">RDF Surfaces doc</a>. (the negative surfaces are those surrounded by red dotted lines in the diagrams)</p>",
        "id": 372687898,
        "sender_full_name": "Henry Story",
        "timestamp": 1688583260
    },
    {
        "content": "<p>Ok, I think I have found that this goes back to at least 1990 with the paper <a href=\"https://ieeexplore.ieee.org/abstract/document/128324\">The hypernode model and its associated query language</a> whose abstract says:</p>\n<blockquote>\n<p>A data model called the hypernode model, whose single data structure is the hypernode, is introduced. Hypernodes are graphs whose node set can contain graphs in addition to primitive nodes. Hypernodes can be used to represent arbitrarily complex objects and can support the encapsulation of information, to any level. A declarative logic-based language for the hypernode model is introduced and shown to be query complete. It is then shown that hypernodes can represent extensional functions, nested relations, and composite objects. Thus, the model is at least as expressive as the functional and nested relational database models. It is demonstrated that the hypernode model can be regarded as an object-oriented one.</p>\n</blockquote>\n<p>I found this via a number of routes, but most interestingly is a 2007 technical report <a href=\"https://www.researchgate.net/profile/Claudio-Gutierrez/publication/267195818_An_Abstract_Data_Model_for_the_Tabulator_Data_Browser/links/551be1ee0cf2909047b97370/An-Abstract-Data-Model-for-the-Tabulator-Data-Browser.pdf\">An Abstract Data Model for the Tabulator Data Browser</a>, where the Tabulator is Tim Berners-Lee's project for a generic RDF User Interface.</p>",
        "id": 372827763,
        "sender_full_name": "Henry Story",
        "timestamp": 1688635890
    },
    {
        "content": "<p>I suppose the textbook answer here is that in the same way you can encode graphs using relations and query them with relational algebra, you can encode nested graphs using nested relations and query them using nested relational algebra (and this is why implementations of nested relations have names such as \"GraphQL\").  Anyway there's a theorem that says for queries of fixed depth, the two approaches have the same expressive power; that you can always \"shred\" a nested graph into a flat one plus extra structure specifying the hierarchy.  Many modern RDBMSs do indeed shred nested structures into flat ones for processing</p>",
        "id": 372991748,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1688669029
    },
    {
        "content": "<p>So I guess that is the case with RDF too, <span class=\"user-mention\" data-user-id=\"281326\">@Ryan Wisnesky</span> , since RDF was defined in 1999 as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi>R</mi><mo>×</mo><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">S \\times R \\times O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span> triple, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span> can be a plain node or a literal such as an integer, string, language string or XML. But the XML string could be an RDF/XML string, which has a graph interpretation, and which could itself have nodes which were RDF XML literals.  But that tends to make me think that the notion of a recursive graph data structure was already there at the beginning. it would be interesting to see if it is in <a href=\"https://en.wikipedia.org/wiki/Ramanathan_V._Guha\">Guha</a> 1995 phd thesis  <a href=\"https://www.filosoficas.unam.mx/~morado/TextosAjenos/guha-thesis.pdf\">Contexts  A Formalization and Some Applications</a> as Guha was one of the earliest people who worked on RDF.</p>\n<p>But it is true that that can be shredded into the <a href=\"https://www.w3.org/TR/n-quads/\">N-Quads</a> structure  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>⊆</mo><mi>S</mi><mo>×</mo><mi>R</mi><mo>×</mo><mi>O</mi><mo>×</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">Q \\subseteq S \\times R \\times O \\times G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> are identifiers for graphs. All <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∃</mi><mi>g</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>Q</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ (s ,r, o) |  \\exists g, (s,r,o,g) \\in Q \\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mclose\">)</span><span class=\"mord\">∣∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">}</span></span></span></span> triples that have the same g form a graph which can be thought to be at the node of any triple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(s, r, g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>. So yes, we  seem to recover the graphs within graph nodes. (I wonder if one every needs quints?) </p>\n<p>One advantage of the hypernode view may just be that it helps to visualise graphs within graphs that way.</p>\n<p><a href=\"https://www.w3.org/TR/2013/REC-sparql11-query-20130321/#namedGraphs\">Sparql</a> allows one to query such named graphs.</p>",
        "id": 373017653,
        "sender_full_name": "Henry Story",
        "timestamp": 1688676565
    },
    {
        "content": "<p>Btw. I was looking at this because I want to implement a pure Scala RDF library. There are many ways to do this. But one option would be to use a construct known as an inductive graph a concept that comes from a 2001 Haskell paper (see <a href=\"https://github.com/scala-graph/scala-graph/discussions/280\">links in discussion</a>) and which was also implemented in Scala. <br>\nDoes anyone have feedback on using an inductive graph structure?<br>\nIt is <a href=\"/user_uploads/21317/vYsZAyUwD7gzc_b-vFEpxC8B/image.png\">pictures like this</a> from an excellent 2016 blog post <a href=\"https://blog.higher-order.com/blog/2016/04/02/a-comonad-of-graph-decompositions/\">A Comonad of Graph Decompositions</a> by Rúnar Bjarnason that got me very interested.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/vYsZAyUwD7gzc_b-vFEpxC8B/image.png\" title=\"pictures like this\"><img src=\"/user_uploads/21317/vYsZAyUwD7gzc_b-vFEpxC8B/image.png\"></a></div>",
        "id": 373019819,
        "sender_full_name": "Henry Story",
        "timestamp": 1688677298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/graphs.20within.20graphs/near/372298643\">said</a>:</p>\n<blockquote>\n<p>what type of mathematical structure allows one to express this type of structure: a labelled directed graph where nodes can themselves be graphs and arrows can be related (for example to say that <code>loves</code> is a subrelation of <code>knows</code>) </p>\n</blockquote>\n<p>The paradigmatic example in <em><a href=\"https://link.springer.com/book/10.1007/978-3-319-11713-3\">Set Operads in Combinatorics and Computer Science</a></em> by Miguel Méndez, is an operad of graphs whose composition is defined by flattening graphs of graphs (defined more or less as you've described). I did not follow this whole thread and am not sure why you need this structure, but you might want to find a copy of the book and check it out.</p>",
        "id": 373108643,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1688715509
    },
    {
        "content": "<p>There's a whole lot of fascinating theory associated with this operad, closely related to the <a href=\"https://en.wikipedia.org/wiki/Modular_decomposition\">modular decomposition</a> of graphs btw.</p>",
        "id": 373109034,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1688715618
    },
    {
        "content": "<p>This discussion reminds me of <a href=\"https://arxiv.org/abs/2210.09950\">Tape diagrams</a>.</p>",
        "id": 373133812,
        "sender_full_name": "Simon Burton",
        "timestamp": 1688721056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277342\">Robin Piedeleu</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/graphs.20within.20graphs/near/373108643\">said</a>:</p>\n<blockquote>\n<p>... I did not follow this whole thread and am not sure why you need this structure, but you might want to find a copy of the book and check it out.</p>\n</blockquote>\n<p>One very good presentation of RDF in terms of Category Theory from a Graph Theoretician is Benjamin Braatz's  <a href=\"https://api-depositonce.tu-berlin.de/server/api/core/bitstreams/5f0c5a05-9ef1-455c-8198-88d95e08071a/content\">\"Formal Modelling and Application of Graph Transformations in the Resource Description Framework\"</a>. Graphs there are used as descriptions of the world, with various implication relations between graphs forming a category. But the graphs there are  plain labelled directed multigraphs. </p>\n<p>So we are missing the graphs within graph nodes allowed by RDF. That would also come then with some rules such as if a graph is declared to be True then it implies a graph with only the contents. </p>\n<div class=\"codehilite\" data-code-language=\"Turtle\"><pre><span></span><code><span class=\"p\">{</span> <span class=\"p\">:</span><span class=\"nt\">snow</span> <span class=\"err\">is</span> <span class=\"p\">:</span><span class=\"nt\">White</span> <span class=\"p\">}</span> <span class=\"kt\">a</span> <span class=\"nn\">log</span><span class=\"p\">:</span><span class=\"nt\">Truth</span> <span class=\"p\">.</span>\n</code></pre></div>\n<p>implies </p>\n<div class=\"codehilite\" data-code-language=\"Turtle\"><pre><span></span><code><span class=\"p\">:</span><span class=\"nt\">snow</span> <span class=\"p\">:</span><span class=\"nt\">is</span> <span class=\"p\">:</span><span class=\"nt\">White</span>\n</code></pre></div>\n<p>Thanks for the pointers. to Miguel Mendez's book on Set Operads. I found the notion of a product of two species <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">.</mi><mi>G</mi><mo stretchy=\"false\">[</mo><mi>V</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">G.G[V]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">]</span></span></span></span>  very interesting.<br>\nAnd the definition of substitution on p17. (I think they are the same thing?). But for RDF one would need  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">[</mo><mi>V</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>G</mi><mi mathvariant=\"normal\">.</mi><mi>G</mi><mo stretchy=\"false\">[</mo><mi>V</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>G</mi><mi mathvariant=\"normal\">.</mi><mi>G</mi><mi mathvariant=\"normal\">.</mi><mi>G</mi><mo stretchy=\"false\">[</mo><mi>V</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">G[V] + G.G[V] + G.G.G[V] + .... </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">G</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.1056em;\"></span><span class=\"mord\">....</span></span></span></span><br>\nBut that structure may require the nesting of graphs at each node to be the same, whereas in RDF some nodes can be named, others can contain literals like numbers or strings, and other nodes can contain graphs, others graphs of graphs, etc....</p>\n<p>That feels like something like labelled directed simplicial sets (if those exist), where the head of a pyramid connects the graphs below.  <span class=\"user-mention\" data-user-id=\"390165\">@Eric Neumann</span> had some more elaborated thoughts on that.</p>\n<p>As for the nu operator defined on page 24 as  </p>\n<blockquote>\n<p>η : G+(G+) → G+ </p>\n</blockquote>\n<p>that seems more like what is usually called the flatten or <code>mu</code> natural transformation,  of a monad, right?<br>\nI don't see that as being that useful for RDF. The flattening of graphs within graphs does not seem to have that interesting an interpretation in a declarative logic.</p>\n<p>The main interest for graphs within nodes is that it allows contexts for who said what or where information came from to be kept, which is essential when dealing with data on the web.</p>",
        "id": 373531633,
        "sender_full_name": "Henry Story",
        "timestamp": 1688836467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277342\">@Robin Piedeleu</span>, The interest of these graphs with context is that they allow us to understand the different points of view various agents can have on a subject.  For example we can express that<br>\n<a href=\"/user_uploads/21317/I8nk7UkT1MasMcIT4BbK4Z7l/UseCaseDiagrams.png\">Laura Lane Believes what Clark Kent says, namely that Superman loves Superwoman</a>. But perhaps that is not true. Perhaps Clark Kent just wants Laura Lane to take an interest in him and forget about the already taken Superman.  But if Clark Kent is Superman then does Laura Lane believe that Clark Kent is a Flying Being? No, because she does not know that equality.  Ie these are contexts which are not substitutable <a href=\"https://en.wikipedia.org/wiki/Salva_veritate\">salva veritate</a>. These are topics that come up in undergraduate courses in Philosophy, at least they were when I was studying in the late 1980s.<br>\nWe end up straight into modal epistemic and doxastic logic here, which is what is needed if we want to be able to discuss ideas with other people on the internet. Namely we have to be able to consider their point of view (not in geometric terms as the angle from which they see one single reality which I also see from a different angle with different photons touching our respective retinas), but in the more general sense of us having collected different relations about the way we believe the world to be, which are up for questioning (this is deeply explored by Robert Brandom's work in Analytic Pragmatism).</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/I8nk7UkT1MasMcIT4BbK4Z7l/UseCaseDiagrams.png\" title=\"Laura Lane Believes what Clark Kent says, namely that Superman loves Superwoman\"><img src=\"/user_uploads/21317/I8nk7UkT1MasMcIT4BbK4Z7l/UseCaseDiagrams.png\"></a></div><p>(That is also what makes me think that these are higher-dimensional graphs, as per <span class=\"user-mention\" data-user-id=\"276049\">@David Spivak</span>'s 2009 paper <a href=\"https://arxiv.org/abs/0909.4314\">Higher-dimensional models of networks</a>.</p>",
        "id": 373646229,
        "sender_full_name": "Henry Story",
        "timestamp": 1688893342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277321\">Simon Burton</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/graphs.20within.20graphs/near/373133812\">said</a>:</p>\n<blockquote>\n<p>This discussion reminds me of <a href=\"https://arxiv.org/abs/2210.09950\">Tape diagrams</a>.</p>\n</blockquote>\n<p>Very interesting. From my reading of the first 7 pages it looks like that 2022 paper \"Deconstructing the Calculus of Relations with Tape Diagrams\" by <span class=\"user-mention\" data-user-id=\"279009\">@Filippo Bonchi</span>, <span class=\"user-mention\" data-user-id=\"618051\">@Alessandro Di Giorgio</span> and Alessio Santamaria,  could be a chapter in a book that follows  <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>'s  2017 paper <a href=\"https://arxiv.org/abs/1706.00526\">Knowledge Representation in Bicategories of Relations</a>. I think Patterson did indeed point out that there was not at the time a coherent diagramatic way to bring together regular logic and its dual. This paper answers that problem.</p>\n<p>It is indeed interesting that the <a href=\"https://w3c-cg.github.io/rdfsurfaces/\">RDF surfaces</a> spec needed this concept graphs on surfaces to get that duality to work together and give us first order logic.  (also see <a href=\"https://arxiv.org/pdf/2305.08476.pdf\">RDF Surfaces - computer says no!</a>.</p>\n<p>I wonder how string diagrammaticians would get us to index modal logics such as ABN-logic of saying that, or other modal logical relations such as S knows P which Abadi somewhere links to indexed strong monads (perhaps here: <a href=\"https://dl.acm.org/doi/abs/10.1145/1159803.1159839\">Access control in a core calculus of dependency</a>). I think I can work those rules quite well into morphisms between graphs with potentially graphs in their nodes, which looks like they correspond to the hypergraph models).</p>",
        "id": 373679716,
        "sender_full_name": "Henry Story",
        "timestamp": 1688902289
    },
    {
        "content": "<p>Just to be precise: in our paper we don’t fully capture regular logic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∃</mi><mo separator=\"true\">,</mo><mo>∧</mo><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊤</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\exists, \\wedge, \\top)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∃</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∧</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⊤</span><span class=\"mclose\">)</span></span></span></span> and it’s dual <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∀</mi><mo separator=\"true\">,</mo><mo>∨</mo><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊥</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\forall, \\vee, \\bot)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∀</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∨</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⊥</span><span class=\"mclose\">)</span></span></span></span>. The outer monoidal product and its associated (co)monoids allow you to express <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\vee</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∨</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊥</span></span></span></span> but one still misses a way to express <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∀</span></span></span></span>.</p>\n<p>I think the closest string diagrammatic treatment to your RDF diagrams is in <a href=\"https://www.ioc.ee/~pawel/papers/peirce.pdf\">Compositional Diagrammatic First-Order Logic</a> also inspired by Peirce’s EGs.</p>\n<p>Regarding modal logic, Pierce extended his EGs with another operation drawn as a dashed circle around the diagrams, intuitively representing a modality. In your RDF diagrams it would mean to have one other notion of surface in addition to the positive and negative ones.</p>",
        "id": 373691178,
        "sender_full_name": "Alessandro Di Giorgio",
        "timestamp": 1688905727
    },
    {
        "content": "<p>The  1965 film <a href=\"https://en.wikipedia.org/wiki/The_Manuscript_Found_in_Saragossa\">The Saragosa Manuscripts</a> was a favourite of Grateful Dead lead singer  Jerry Garcia, and it contains 7 levels of stories within stories. So in our graph within graph model we would have graphs within graphs seven lvels deep. <br>\n<a href=\"https://www.youtube.com/watch?v=PXPhTAYB1rc\">https://www.youtube.com/watch?v=PXPhTAYB1rc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"PXPhTAYB1rc\" href=\"https://www.youtube.com/watch?v=PXPhTAYB1rc\"><img src=\"https://uploads.zulipusercontent.net/5be8e48352bd4146c857706c79e7c37b9cfc2169/68747470733a2f2f692e7974696d672e636f6d2f76692f50585068544159423172632f64656661756c742e6a7067\"></a></div>",
        "id": 377426072,
        "sender_full_name": "Henry Story",
        "timestamp": 1689972921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618051\">Alessandro Di Giorgio</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/graphs.20within.20graphs/near/373691178\">said</a>:</p>\n<blockquote>\n<p>I think the closest string diagrammatic treatment to your RDF diagrams is in <a href=\"https://www.ioc.ee/~pawel/papers/peirce.pdf\">Compositional Diagrammatic First-Order Logic</a> also inspired by Peirce’s EGs.</p>\n<p>Regarding modal logic, Pierce extended his EGs with another operation drawn as a dashed circle around the diagrams, intuitively representing a modality. In your RDF diagrams it would mean to have one other notion of surface in addition to the positive and negative ones.</p>\n</blockquote>\n<p>I read the paper \"Compositional Diagrammatic FO Logic\" which you pointed me to, and it does seem to perfectly match the work the <a href=\"https://w3c-cg.github.io/rdfsurfaces/\">RDF Surfaces</a> group are doing. No wonder: they are also inspired by Peirce! <br>\n(I found the reasoning on p13 a bit confusing, and I even got the feeling that variables were mislabelled there)<br>\nBut now this opens a very interesting possibility to introduce all RDF developers as they move to N3 to Category Theory on a path where they get the basics for understanding for Quantum String Diagrams as per the recent book by Bob Coeke <a href=\"https://primal.net/e/note1x67ut62jlsj774apth8rpjfpm30d7694e3uy6lmedgxpksjr3uls3wc4ds\">Quantum in Pictures</a>.</p>",
        "id": 389150442,
        "sender_full_name": "Henry Story",
        "timestamp": 1693908021
    }
]