[
    {
        "content": "<p>Hello, friends. I'm trying to interpret Category Theory within Julia language. One common construction we have is that of a struct. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">F</span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"w\">  </span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">String</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I was previously interpreting such structs as a Functor once I've defined an <code>fmap</code> function and overloaded the constructor to send types to the <code>F</code> type, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Is there other interpretation for what these struct are within Category Theory? I haven't figured out what is the equivalent of a struct in Haskell, perhaps this would clear somethings.</p>",
        "id": 340837194,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1678448614
    },
    {
        "content": "<p>Maybe a product?</p>",
        "id": 340838450,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1678449002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284005\">Ralph Sarkis</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/What.20are.20.22structs.22.20in.20Category.20Theory.3F/near/340838450\">said</a>:</p>\n<blockquote>\n<p>Maybe a product?</p>\n</blockquote>\n<p>Makes sense... Although it is encapsulating the product within another type (object), which is necessary to dispatch functions. What about the fact that fields are named? Do you see any technicallities on that?</p>",
        "id": 340840643,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1678449627
    },
    {
        "content": "<p>I think F is the object which is the product of Int and String.</p>\n<p>I don't what to do about names. If you define F' with different names, then F and F' will be the same product, but they are different in the way you use it. Maybe if the possible tokens (a and b are what I call tokens) are described in your category in some way, then you could try something.</p>",
        "id": 340842786,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1678450177
    },
    {
        "content": "<p>You can index the product by the set of field names, though this is equivalent to simply indexing by natural numbers.</p>",
        "id": 340882923,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1678459904
    },
    {
        "content": "<p>Via the Curry Howard Lambek Correspondence, <a href=\"https://en.wikipedia.org/wiki/Curry–Howard_correspondence#Curry–Howard–Lambek_correspondence\">https://en.wikipedia.org/wiki/Curry–Howard_correspondence#Curry–Howard–Lambek_correspondence</a>, structs/projections become products, tagged unions/case statements become co-products, lambdas and application become exponentials, and recursive/co-recursive types (typically) become the initial algebras/final co-algebras for polynomial endofunctors.  As usual, for products/coproducts you can have binary ones, or use a set of labels to index the field names.</p>",
        "id": 340913458,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1678466960
    },
    {
        "content": "<p><a href=\"https://www.hedonisticlearning.com/posts/you-know-more-about-presheaves-than-you-think.html\">\"Structs\" aka record types, are (co)presheaves.</a></p>",
        "id": 341083285,
        "sender_full_name": "Keith Elliott Peterson",
        "timestamp": 1678528321
    },
    {
        "content": "<p>I'd probably set that a set of values on the same struct defines a co-presheaf out of a category with products (the struct/type itself).</p>",
        "id": 341170697,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1678559620
    }
]