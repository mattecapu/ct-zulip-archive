[
    {
        "content": "<p>The classic Segal condition, as well as the ones for strict n-categories as presheaves over a <a href=\"https://ncatlab.org/nlab/show/Theta%20category\">[[Theta category]]</a>, are expressed by saying certain cones are limiting.  But the \"general Segal condition\" for a <a href=\"https://ncatlab.org/nlab/show/monad%20with%20arities\">[[monad with arities]]</a> is represented by saying a presheaf lies in the essential image of a functor, which is much less useful in applications.  In the full generality where the arities are given by an arbitrary dense functor it doesn't seem like it's possible to do better than this, but are there some nice conditions on the arities under which you end up with a Segal condition that can be expressed more like the classic ones?</p>",
        "id": 421911180,
        "sender_full_name": "James Deikun",
        "timestamp": 1708106272
    },
    {
        "content": "<p>Are characterisations like Lemma 3.6 of <a href=\"https://arxiv.org/abs/1101.3064\">Monads with arities and their associated theories</a> or Theorem 36 of <a href=\"https://arxiv.org/abs/1805.04346\">Monads and theories</a> the sort of thing you're looking for?</p>",
        "id": 421919062,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1708109299
    },
    {
        "content": "<p>Those are in fact the sort of things I'm looking for.  I actually rechecked both articles but missed them because they were in the portions dealing with theories (which I'm less familiar with to begin with) rather than in the portions dealing with monads.  <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 421920993,
        "sender_full_name": "James Deikun",
        "timestamp": 1708110067
    },
    {
        "content": "<p>(And while they're not as general as I would ideally like, they do capture the cases of primary interest.)</p>",
        "id": 421922254,
        "sender_full_name": "James Deikun",
        "timestamp": 1708110606
    }
]