[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> be a set of exactness properties (properties of a category saying that certain types of limits or colimits exist, possibly together with some rules these limits and colimits have to satisfy, like \"filtered colimits commute with finite limits\" or \"coproducts are stable under pullback\"): <a href=\"https://ncatlab.org/nlab/show/exactness+property\">https://ncatlab.org/nlab/show/exactness+property</a>. I guess with a bit of work one could give a precise definition of \"exactness property\", although it's probably always open to dispute whether such a precise definition covers all aspects of the informal notion of \"exactness property\".</p>\n<p>Now, consider the 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Cat}_\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Cat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> of all categories having these exactness properties, all functors preserving the types of limits and colimits postulated to exist in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>, and all natural transformations.</p>\n<p>My question is: does the forgetful 2-functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><msub><mrow><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><mi mathvariant=\"normal\">Σ</mi></msub><mo>→</mo><mrow><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">U\\colon \\mathbf{Cat}_\\Sigma\\to\\mathbf{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Cat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Cat</span></span></span></span></span> always have a left adjoint?</p>\n<p>For instance, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> is \"(small) colimits exist\", then the left inverse is the 2-functor sending a category to the category of presheaves on it. Also, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> is \"(small) filtered colimits exist\", then the left adjoint is the ind-completion.</p>\n<p>But is there something like \"the elementary topos generated by an arbitrary category\"?</p>\n<p>How to construct the left adjoint? Why does it turn out that if one wants to freely add colimits, this amounts precisely to considering presheaves? (That's a bit mysterious.)</p>",
        "id": 251580745,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1630510791
    },
    {
        "content": "<p>Hard to answer the first question when you're expressly asking about a vague definition, but there are a bunch of cases where that adjoint does exist, cf Kelly's <em>On property-like structures</em> and related papers.</p>\n<p>Regarding the free elementary topos construction, I believe Freyd and Scedrov work up to this via Allegories in <em>Categories, Allegories</em>, but I can't remember the details of how that construction interacts with the existing features of the category. </p>\n<p>Regarding presheaves, certainly this fact is a non-trivial result! It has been proved in various ways by various authors; hopefully someone other than me can point you to an explicit proof, at least.</p>",
        "id": 251584144,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1630512102
    },
    {
        "content": "<p>I think the paper <a href=\"https://arxiv.org/abs/1107.0778\">Lex colimits</a> by Garner and Lack is very relevant to your question. You can consider KZ doctrines on 2-categories of categories with some class of limits, and these express exactness properties in some sense.</p>",
        "id": 251584753,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1630512339
    },
    {
        "content": "<p>The fact that presheaves correspond to free cocompletion is mysterious indeed. Some work in that direction that I think is somewhat enlightening (but not the full story) is <a href=\"https://arxiv.org/abs/1901.01594\">On the unicity of formal category theories</a> by <span class=\"user-mention\" data-user-id=\"277318\">@Ivan Di Liberti</span> and <span class=\"user-mention\" data-user-id=\"282822\">@fosco</span>.</p>",
        "id": 251585007,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1630512436
    },
    {
        "content": "<p>The 2-category of categories with any sort of limits and colimits and any sort of commutation laws between them is always pseudo 2-monadic over Cat.  This can be proven by giving a presentation of the 2-monad by generators and relations.  There's an informal sketch of the case of a terminal object in Lack's <a href=\"https://arxiv.org/abs/math/0702535\">2-categories companion</a>, and some references to the literature.</p>",
        "id": 251588122,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1630513559
    },
    {
        "content": "<p>Thanks all!</p>",
        "id": 251916415,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1630690529
    },
    {
        "content": "<p>Are there some other opinions about why freely adding colimits precisely amounts to considering presheaves?</p>",
        "id": 252090712,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1630863775
    },
    {
        "content": "<p>Opinions?  It's a categorification of how the free commutative monoid on a set S is the set of finitely supported functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">f: S \\to \\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>.   <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> is the free commutative monoid on one generator, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> is the free category with colimits on one generator.</p>",
        "id": 252090919,
        "sender_full_name": "John Baez",
        "timestamp": 1630864003
    },
    {
        "content": "<p>Colimits are the really nice categorification of sums.    The obvious categorification is finite coproducts, or arbitrary coproducts, but while sets are discrete, categories are not, so we get more.</p>",
        "id": 252091027,
        "sender_full_name": "John Baez",
        "timestamp": 1630864142
    },
    {
        "content": "<p>Thanks for that analogy! Can one prove a general theorem stating something like that the free object on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is the object of (some kind of) functions from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to the free object on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>? How can one see immediately that \"<em>functor</em> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi><mo>→</mo><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathcal C\\to\\mathbf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Set</span></span></span></span></span>\" is what corresponds to \"<em>finitely supported function</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">S\\to\\mathbb N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>\"? (Has this something to do with the fact that left adjoints preserve colimits?)</p>",
        "id": 252092361,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1630865564
    },
    {
        "content": "<p>There must be general theorems along these lines, and yes, if I wanted to prove one I'd try to use the fact that left adjoints preserve colimits.   In the case of \"the free commutative monoid on a set\", I bet it's really important that every set is a colimit of copies of 1.   In the case of \"the free category with colimits on a category\", maybe we should use an Cat-enriched version of this idea (like every category is a weighted colimit of copies of 1) or a more explicitly \"categorifed\" version of this idea (like every category is a pseudocolimit of copies of 1).   But I don't have the energy to push this through - especially since there are people here who could do it much more easily.</p>",
        "id": 252092698,
        "sender_full_name": "John Baez",
        "timestamp": 1630865904
    },
    {
        "content": "<p>In case this isn't obvious, the reason you have to use finitely supported functions rather than arbitrary ones is that in a commutative monoid you can only add up a finite number of things.  Whereas in a category with colimits we include infinite colimits.  If you want to freely cocomplete a category under <em>finite</em> colimits then you'll see something more like \"finitely supported\" functors, although the technical term is \"finitely presentable\".</p>",
        "id": 252106803,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1630881655
    },
    {
        "content": "<p>Right!     It's actually mildly interesting, when thinking about these things, to consider a generalization of commutative monoids where you get to add up infinitely many terms, e.g. any cardinal's worth if you want to push your luck and fight with size issues.</p>\n<p>The best-behaved of these are the <a href=\"https://ncatlab.org/nlab/show/suplattice\">suplattices</a>, and if you impose that extra condition you don't suffer from size issues: the free suplattice on a set is just its power set.</p>",
        "id": 252107316,
        "sender_full_name": "John Baez",
        "timestamp": 1630882281
    },
    {
        "content": "<p>Thus, the suplattice example fits in nicely with the other examples we've been talking about: the free suplattice on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> consists of all functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">f: X \\to 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>.</p>",
        "id": 252107401,
        "sender_full_name": "John Baez",
        "timestamp": 1630882390
    },
    {
        "content": "<p>Thanks!<br>\nJohn Baez:</p>\n<blockquote>\n<p>But I don't have the energy to push this through - especially since there are people here who could do it much more easily.</p>\n</blockquote>\n<p>I'm waiting for them. :-)</p>",
        "id": 252340976,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1631035633
    }
]