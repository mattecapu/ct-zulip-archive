[
    {
        "content": "<p>So, I've been trying to program so of the Category Theory programming concepts taught by Bartosz, but using Julia. One construction got me puzzled. In Haskell, we define functors by defining things like:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">Maybe</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kt\">Just</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"nf\">fmap</span><span class=\"o\">...</span>\n</code></pre></div>\n<p>By defining the fmap we get <code>Maybe</code> to be a functor. The thing is, the <code>Maybe</code> functor takes a type <code>T</code> to a type<br>\n<code>Maybe T</code>. Now, in Julia, we can construct this <code>Maybe</code> functor with a parametric struct:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Just</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"k\">end</span>\n<span class=\"k\">struct</span> <span class=\"kt\">Nothing</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"kt\">Maybe</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Just</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">}</span>\n<span class=\"n\">fmap</span><span class=\"o\">...</span>\n</code></pre></div>\n<p>Yet, in Julia there is another possible construction. We can define a \"functor-like\" thing as the following:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">F</span>\n<span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"k\">end</span>\n<span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Such construction is actually called \"functor\" by programmers... But it seems that it is not an actual functor in terms of Category Theory.<br>\nThe reason for me saying this is that <code>F</code> takes types (sets) <code>T</code> to <code>F</code> and not to <code>F{T}</code>. Hence, if we think of types as sets, the type <code>F</code> would not be an actual set, as it seems to contain all other types, including itself...</p>\n<p>Is there any formal treatment of such construction? Is this actually a functor and I'm with the wrong interpretation?</p>",
        "id": 364980979,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686349619
    },
    {
        "content": "<p>Don't know Julia, but this looks like a functor that is parametrized by the type of a.</p>",
        "id": 365028995,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686378365
    },
    {
        "content": "<p>In particular it looks like the identity functor i.e. just a box that contains a value.</p>",
        "id": 365029105,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686378417
    },
    {
        "content": "<p>It would not be the identity because it actually takes a type <code>T</code> to a type <code>F</code>.</p>",
        "id": 365104051,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686399072
    },
    {
        "content": "<p>Don’t understand where this T comes from, to me it looks like it takes an argument of type F (called x)</p>",
        "id": 365132974,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686406974
    },
    {
        "content": "<p>Perhaps you mean to say that the type is polymorphic, but it is de facto polymorphic, it is just not annotated as such.</p>",
        "id": 365157405,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686414535
    },
    {
        "content": "<blockquote>\n<p>The reason for me saying this is that F takes types (sets) T to F and not to F{T}. Hence, if we think of types as sets, the type F would not be an actual set, as it seems to contain all other types, including itself...</p>\n</blockquote>\n<p>F{T} can also contain itself, you can take T to be F.</p>",
        "id": 365157632,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686414603
    },
    {
        "content": "<p>Actually, they are both recursive types, they don’t contain themselves, I think.</p>",
        "id": 365187392,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686426789
    },
    {
        "content": "<p>Let me try to clarify my issue. You probably already know how functors are defined in programming, but I'll just recap how I do it in Julia:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">F</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"k\">end</span>\n<span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>We can interpret the thing above as a functor <code>F</code>, where an element of type <code>T</code> is taken to an element of type <code>F{T}</code>. For example, an element of type <code>Int</code>  becomes of type <code>F{Int}</code>. This example seems to fit nicely with the notion of an endofunctor acting on the category of sets. We just think of types as sets, hence, type <code>Int</code>  is just the set of integers, and type <code>F{Int}</code> can be thought of as the set of elements <code>(F, i)</code> where <code>i</code> where <code>i</code> are integers. In other words, the sets <code>Int</code> and <code>F{Int}</code> are isomorphic.</p>\n<p>My issue comes with the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">F</span>\n<span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"k\">end</span>\n<span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This is very similar, but now this \"functor\" takes elements of type <code>Int</code> to type <code>F</code>, and not to  <code>F{Int}</code>.  But note that this \"functor\" also takes elements of type <code>String</code> to the type <code>F</code>... Hence, <code>F</code> is not isomorphic to <code>Int</code>. In fact, <code>F</code> actually is larger than all previous types, since for any <code>x</code> of type <code>T</code> we have a representation in <code>F</code>, which would be <code>(F, x)</code>. <br>\nThus, what I was thinking was that <code>F</code> is not an endofunctor in Set anymore.</p>",
        "id": 365196353,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686431586
    },
    {
        "content": "<p>But why do you think this way?</p>",
        "id": 365390674,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686516053
    },
    {
        "content": "<p>I don't think that the fact that F is larger than some other types raises any contradictions.</p>",
        "id": 365391185,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686516322
    },
    {
        "content": "<p>If we have to formalize this functor in set theory we might say that there exist a general type, like that contains all values of all other types, like the type<code>Object</code> in Java (note it contains all types', values, it doesn't contain the types themselves)  and that the functor is implicitly parametrized by that type.</p>",
        "id": 365398504,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1686521084
    },
    {
        "content": "<p>This doesn't seem like a functor because <code>fmap(f,x)</code> produces \"type errors\" rather than valid results when <code>x</code> isn't originally from the argument type of <code>f</code>.  It breaks the abstraction of the source category rather than respecting it.</p>",
        "id": 375898032,
        "sender_full_name": "James Deikun",
        "timestamp": 1689574261
    },
    {
        "content": "<p>Yes, it's an untyped functor.  In general, functions that may raise errors are impartial functions and those cannot be modeled in CT.</p>",
        "id": 376315559,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1689680242
    },
    {
        "content": "<p>So, strictly speaking, the answer to your original question is \"No\".</p>",
        "id": 376315950,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1689680329
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 376373716,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1689690942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"612694\">Jencel Panic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Is.20there.20a.20formalization.20of.20.22non-parametric.20functors.22.3F/near/376315559\">said</a>:</p>\n<blockquote>\n<p>In general, functions that may raise errors are impartial functions and those cannot be modeled in CT.</p>\n</blockquote>\n<p>That's not true at all, see at <a href=\"https://ncatlab.org/nlab/show/partial%20function\">[[partial function]]</a> for example.</p>",
        "id": 376375711,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1689691313
    },
    {
        "content": "<p>Sorry, bad phrasing, I meant that functors specifically can only be modeled with total functions.</p>",
        "id": 376449128,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1689707194
    },
    {
        "content": "<p>The definition of partial function also lifts to a definition of partial functor!</p>",
        "id": 376456209,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1689709105
    },
    {
        "content": "<p>I guess this answers Davi's original question: What kind of functor is this --- a <em>partial</em> functor</p>",
        "id": 380602720,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1690878735
    }
]