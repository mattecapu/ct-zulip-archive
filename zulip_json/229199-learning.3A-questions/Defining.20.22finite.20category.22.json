[
    {
        "content": "<p>[Caveat: this is a basic question, not a beginner question]</p>\n<p>How do I define \"finite category\" <strong>if</strong> I am in a</p>\n<ol>\n<li>constructive context (so no excluded middle, and no choice)</li>\n<li>I do not wish to refer to equality of objects (really, not at all) ?<br>\n[A definition in type theory, such as Martin-Loef Type Theory, would be perfect.]</li>\n</ol>\n<p>For example, how do you define FinSet (the category of finite sets and functions) in such a setting?  Or Bij [finite sets and bijections]?</p>\n<p>You can't assume that you have an iso <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>≃</mo><mi mathvariant=\"normal\">Σ</mi><mtext> </mtext><mi mathvariant=\"double-struck\">N</mi><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">F</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">n</mi></mrow></mrow><annotation encoding=\"application/x-tex\">X \\simeq \\Sigma\\ \\mathbb{N}\\ \\mathsf{Fin}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathsf\">F</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">n</span></span></span></span></span> for example, as that would let you transport the decidable equality of the rhs onto the lhs. Worse, you even get an ordering on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>! And since we're not in HoTT, no, propositional truncation is not available either.</p>\n<p>Definitions involving language like \"equivalent to a finite skeletal category\" are not better (as the nLab page explains).</p>",
        "id": 197600878,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589482141
    },
    {
        "content": "<p>Which nLab page are you referring to - I can't see it on the finite category page?</p>",
        "id": 197607816,
        "sender_full_name": "Jem",
        "timestamp": 1589485450
    },
    {
        "content": "<p>I'm referring to the <a href=\"https://ncatlab.org/nlab/show/skeleton\">skeleton</a> page, sorry, I wasn't precise enough.</p>",
        "id": 197607994,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589485550
    },
    {
        "content": "<p>Would \"category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> with finite hom-sets and with essentially surjective on objects functor from a finite discrete category (i.e. from a finite set)\" work?<br>\nOf course this has extra data (the e.s.o functor), and your type of objects isn't \"actually\" finite - is that close enough to what you want?</p>",
        "id": 197609305,
        "sender_full_name": "Jem",
        "timestamp": 1589486187
    },
    {
        "content": "<p>Essentially surjective on objects is either too weak (because it builds in 'merely exists' which is propositional truncation) or too strong (if you use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>) as you can recover too much from that, as that becomes a choice function.</p>",
        "id": 197611841,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589487391
    },
    {
        "content": "<p>Coquand and Spiwack's <a href=\"http://dialnet.unirioja.es/servlet/fichero_articulo?codigo=3217816\">Constructively Finite?</a> is a good entry point into the intricacies of \"finite\" constructively. A nice follow-up is Firsov, Uustalu and Veltri's <a href=\"https://arxiv.org/pdf/1604.01186.pdf\">Variations on Noetherianness</a> in MSFP 2016 that continues to weave that tale. Figure 1 on the last page is a nice visual of the \"design space\".</p>",
        "id": 197614172,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589488490
    },
    {
        "content": "<p>I don't understand the question. FinSet is not a finite category. What do you want to define exactly?</p>",
        "id": 197614472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589488647
    },
    {
        "content": "<p>Is the question how to define FinSet in a constructive setting?</p>",
        "id": 197614604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589488705
    },
    {
        "content": "<p>Sorry, yes, of course FinSet isn't finite.  Yes, I'm interested in defining FinSet in a constructive setting.</p>",
        "id": 197614722,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589488778
    },
    {
        "content": "<p>Well, as far as I can see, the question just seems to reduce to understanding what you mean by \"finite set\" in the first place, and presumably the meaning will depend on the desired application.</p>",
        "id": 197615717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589489243
    },
    {
        "content": "<p>If you have a notion of \"finite set\" presumably there is a way to get the underlying type out, and then the morphisms of the category would just be all morphisms (or all isomorphisms) between the underlying types.</p>",
        "id": 197615910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589489336
    },
    {
        "content": "<p>Let me start with the context / desired application: a formalization of \"wild\" category theory (i.e. Setoid-Enriched Categories with Types as objects with no equality) in Agda, using 'pure' Martin-Loef Type Theory, without the K axiom.</p>\n<p>On top of that, I'm currently working on formalizing Species, as functors from core(FinSet) into Set.  Well, core(FinType) into Setoids to be precise. [All of this work is publicly visible in the github repo for agda-categories.]</p>\n<p>But I'm not satisfied with my definition of FinSet. And I'm not happy with my co-author's definition of Finite Category either (as being any category that is adjoint equivalent to a 'shape' category built on Fin for objects and finitely enumerated Hom sets).</p>",
        "id": 197616580,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589489648
    },
    {
        "content": "<p>Well, of course you cannot mechanically take a concept that lives originally in classical mathematics and make sense of it in a constructive setting, because this process cannot preserve equivalence of concepts.</p>",
        "id": 197617240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589489972
    },
    {
        "content": "<p>In other words, you face a creative problem, not a technical one</p>",
        "id": 197617350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589490004
    },
    {
        "content": "<p>which may have more (or fewer) than one solution</p>",
        "id": 197617380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589490016
    },
    {
        "content": "<p>Right!</p>",
        "id": 197617391,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589490021
    },
    {
        "content": "<p>but the solution to this problem is presumably going to be intimately related to details of the theory of species</p>",
        "id": 197617508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589490069
    },
    {
        "content": "<p>I've kind of exhausted my creative juices on this one, so I figured I would ask the experts, who might have already thought about it, and come up with some reasonable solutions.</p>",
        "id": 197617529,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589490076
    },
    {
        "content": "<p>I am trying to do two things (and willing to have 2 \"solutions\"): a generic CT library, and a particular implementation of Species.</p>",
        "id": 197617652,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589490132
    },
    {
        "content": "<p>For Species, I am exploring the nature of the definitions, to try to see the necessary assumptions for each construction. [Yes, I know about 'Generalized Species'].</p>",
        "id": 197617930,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589490258
    },
    {
        "content": "<p>For example, the One species is usually defined on objects via \"if the input set is of size 1, then that set as a singleton, else empty\" (which can be made fully precise). But a much more generalizable definition is \"the hom Setoid from 'the' terminal groupoid to the given groupoid\".  <a href=\"https://github.com/agda/agda-categories/blob/64c0c02fc602a778214af847df86712be46f5493/src/Categories/Category/Species/Constructions.agda#L88-L152\">63 lines of Agda</a> versus <a href=\"https://github.com/agda/agda-categories/blob/64c0c02fc602a778214af847df86712be46f5493/src/Categories/Category/Species/Constructions.agda#L155-L156\">2 lines</a>.</p>\n<p>So the latter version captures the choice being made much more nicely. And clearly generalizes a lot more.</p>",
        "id": 197619354,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589491021
    },
    {
        "content": "<p>Hmm, I should probably link to the <a href=\"https://agda.github.io/agda-categories/Categories.Category.Species.Constructions.html\">nice html version</a> rather than directly to the sources.</p>",
        "id": 197619543,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589491121
    },
    {
        "content": "<p>I've nothing interesting to compute, but I'm glad you're trying to code up species!   </p>\n<blockquote>\n<p>For example, the One species is usually defined on objects via \"if the input set is of size 1, then that set as a singleton, else empty\" (which can be made fully precise). But a much more generalizable definition is \"the hom Setoid from 'the' terminal groupoid to the given groupoid\".</p>\n</blockquote>\n<p>Why does the latter definition give something empty if you're working with sets and \"the given groupoid\" is a set with two elements?  I'd think it gives a 2-element set.</p>",
        "id": 197624218,
        "sender_full_name": "John Baez",
        "timestamp": 1589493882
    },
    {
        "content": "<p>Sorry: Hom over Groupoid.  i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>𝔹</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mtext>⊤</mtext><mo>−</mo><mi>F</mi><mi>i</mi><mi>n</mi><mi>S</mi><mi>e</mi><mi>t</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">Hom[ 𝔹 ][ ⊤-FinSetoid , - ]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">[</span><span class=\"mord mathbb\">B</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">⊤</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">]</span></span></span></span>. ⊤-FinSetoid is here promoted to a Groupoid because Species is defined as <br>\nFunctors (Core (FinSetoids o ℓ)) (Setoids o′ ℓ′)<br>\n(the category of functors from the Core of FinSetoids to Setoids). Where the above is the exact line of Agda defining that.</p>",
        "id": 197625359,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589494617
    },
    {
        "content": "<p>By the way, why not just work in a setting with quotients? Isn't all this Setoid stuff terribly tedious?</p>",
        "id": 197625518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589494725
    },
    {
        "content": "<p>Turns out that working with Setoids, at least for Category Theory, is not tedious at all. That was a big, but welcome, surprise.</p>",
        "id": 197625587,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589494788
    },
    {
        "content": "<p>It is akin to working in 1.5-Category, i.e. some of the stuff from 2-Categories peek through early. But that's it. And hopefully no one here considers 2-Categories 'tedious' ;)</p>",
        "id": 197625682,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589494852
    },
    {
        "content": "<p>I will choose to remain skeptical.</p>",
        "id": 197626346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589495302
    },
    {
        "content": "<p>Also, 2-categories are in fact quite tedious. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197626388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589495330
    },
    {
        "content": "<p>For instance, compare the definition of a symmetric monoidal 2-category to that of an ordinary symmetric monoidal category. \"No worse than blowing up the dimension of everything by one\" isn't much of an endorsement.</p>",
        "id": 197626545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589495436
    },
    {
        "content": "<p>When your only source of equalities is axioms, and your only use of equalities is to prove more axioms, I can believe that there'd be little benefit in using identity types.</p>",
        "id": 197627005,
        "sender_full_name": "James Wood",
        "timestamp": 1589495719
    },
    {
        "content": "<p>Data-heavy work (which category theory is almost explicitly not) seems to be where you get wanting identity types.</p>",
        "id": 197627216,
        "sender_full_name": "James Wood",
        "timestamp": 1589495870
    },
    {
        "content": "<p>But category theory intrinsically wants to become n-category theory or at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-category theory.</p>",
        "id": 197627593,
        "sender_full_name": "John Baez",
        "timestamp": 1589496144
    },
    {
        "content": "<p>Well, identity types do have this handy property that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = y \\implies f(x) = f(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7194400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> for <em>any</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 197627604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496156
    },
    {
        "content": "<p>But, different strokes for different folks I guess.</p>",
        "id": 197627615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496171
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"296322\">@Jacques Carette</span>, did you say you had a formalization of multicategories somewhere? I'd be curious to take a loook.</p>",
        "id": 197628296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276480\">@Reid Barton</span> Sort of. Fin-based Multicategories completely stumped me. There are many (implicit) uses of a lot of theorems of arithmetic buried in the definitions that need to be made explicit to please any ITP. However, if you go to \"Indexed Multicategories\" instead, then it's relatively straightforward.  The pretty version is at <a href=\"https://agda.github.io/agda-categories/Categories.Multi.Category.Indexed.html\">https://agda.github.io/agda-categories/Categories.Multi.Category.Indexed.html</a> .  The key part is that the axioms rely on lower-level axioms on the index sets (the multiplicative monoid structure of Type).  The tricky definition is composition. Once that's straight, the rest follows.</p>",
        "id": 197631314,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589498878
    },
    {
        "content": "<p>Relevant topics from the topos theory stream, <a href=\"#narrow/stream/230087-theory.3A-topos.20theory/topic/Finite.20objects\">finite objects</a> and <a href=\"#narrow/stream/230087-theory.3A-topos.20theory/topic/predicative.20finiteness\">predicative finiteness</a>.<br>\nI don't know enough about the setoid setting to meaningfully contribute without making a blunder, but perhaps seeing the different definitions of finite objects in the topos context, and how they can be defined, might help?<br>\nSomething that scared me when I saw someone working with groupoids for the first time is that without equality you won't be able to distinguish between finite categories and \"essentially finite\" categories: those which are merely equivalent, in whatever sense you have available, to finite ones. Of course, this isn't really a problem, since the notion of equivalence means that even if they externally look different (ie you are able to construct a type which is infinite in some sense but equivalent in your type theory to a finite thing), they'll internally be functionally indistinguishable. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 197680496,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1589544093
    },
    {
        "content": "<p>Thanks for the pointers <span class=\"user-mention\" data-user-id=\"277473\">@Morgan Rogers</span>, reading now . Note that I consider \"finite up to categorical equivalence\" to be a feature, not a bug.</p>",
        "id": 197680695,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589544225
    },
    {
        "content": "<p>The speaker defining finiteness in that context convinced me of the same. I wish I could remember who was speaking and where that talk was, it would probably be a lot more helpful. I suspect it might have been Benedict Ahrens, but I could be wrong.</p>",
        "id": 197680867,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1589544339
    },
    {
        "content": "<p>It may or may not be worth mentioning that there are multiple notions of equivalence and even functor in a constructive setting (or even just without choice): <a href=\"https://ncatlab.org/nlab/show/anafunctor\">https://ncatlab.org/nlab/show/anafunctor</a></p>",
        "id": 197681900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589545017
    },
    {
        "content": "<p>Though maybe this other notion doesn't really exist if you don't even have a way to express a non-split surjection?</p>",
        "id": 197682345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589545338
    },
    {
        "content": "<p>It does bear repeating. I've been meaning to write about that - I think the traditional definitions here are too overshadowed with what happens in 0-category theory, where <code>g</code> can be fully reconstructed. I see that as an accident because things are \"too small\". The anafunctor way out is to build-in to <code>f</code> the crucial data needed to reconstruct <code>g</code> !</p>",
        "id": 197682379,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589545369
    },
    {
        "content": "<p>Oh, I guess in your language a non-split surjection is a map of setoids with an inverse that does not respect the equivalence relation.</p>",
        "id": 197682577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589545498
    },
    {
        "content": "<p>Rereading <a href=\"https://ncatlab.org/nlab/show/finite+set\">https://ncatlab.org/nlab/show/finite+set</a>, I think that a generalization of Dedekind-finite might be what I'm after.</p>",
        "id": 197682579,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589545501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276480\">@Reid Barton</span> right. We never look at those. Respecting the equivalence is built right in (but requires proof).</p>",
        "id": 197682702,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589545572
    },
    {
        "content": "<p>Would it be reasonable to call a Category C \"Dedekind finite\" if any faithful endofunctor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">F : X \\rightarrow X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> must be an equivalence? (Probably want to go for 'part of an adjoint equivalence')</p>",
        "id": 197683992,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1589546298
    }
]