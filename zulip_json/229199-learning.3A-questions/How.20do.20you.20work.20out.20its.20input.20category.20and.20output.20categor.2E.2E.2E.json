[
    {
        "content": "<p>In an earlier question I tried to ask whether categories I've attempted to define were \"useful\" <a href=\"#narrow/stream/229199-learning.3A-questions/topic/How.20to.20make.20up.20categories.20outside.20of.20math.3F\">https://categorytheory.zulipchat.com/#narrow/stream/229199-learning.3A-questions/topic/How.20to.20make.20up.20categories.20outside.20of.20math.3F</a></p>\n<p>I didn't like how vague the question was, this is my attempt to do somewhat better. </p>\n<p>If you think you're looking at something that satisfies the definition of a Functor, how do you work out its input category and output category? </p>\n<p>You could also ask a similar question about functions.</p>\n<p>It can be very easy to just note two things seem analogous, just like it's very easy to note some sequence looks like it's even \"numbers\". But, it can take a lot more work to really say for sure you have a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>N</mi><mo>→</mo><mn>2</mn><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">f : N \\rightarrow 2N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<p>The motivation (this might deserve its own thread) is I often want to make physical gadgets, or \"toys\", that simulate some mathematical system. A smart friend of mine told me \"I like functors\", which I think is essentially correct. I'm trying to use these toys as \"Functors\" from some physics thing to some math thing. </p>\n<p>But while I like using \"toys\" as analogies for \"math\", I'm almost never sure how to see the \"toy\" as a \"syntactic category\" or the math I'm trying to understand with it as a \"semantics category\". I'm not sure that's the right terminology, but hopefully the idea is clear.</p>\n<p>Other questions I asked earlier connect to this basic activity, like if a sphere can be in multiple categories, and I have a spherical toy in the real world that I want to use as a model for something else (like a color sphere). Does that mean I need to figure out which sphere is the correct one for my analogy (or my functor)? Etc.</p>\n<p>Any help with this (or help tightening my question further) is welcome.</p>",
        "id": 486824640,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733710224
    },
    {
        "content": "<p>The source and target categories of a functor must be given prior to the definition of that functor, like how the domain and codomain of a function must be given before the definition of a function.  That is, a functor's definition includes its source and target, not just its \"action\".  Similarly, there is no number 7; there is the  real number 7, the natural number 7, the floating point number 7, and so: you must first say which collection of numbers you are talking about, then pick out 7 (or a sphere, etc).  Programmers have to deal with such \"type casting\" everywhere!</p>",
        "id": 486829665,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1733713780
    },
    {
        "content": "<p>Of course, what I'm noting is that when I'm describing something with a Functor, it's often easier to tell what the rule should be, but not the input and output categories. I'm asking for advice on how to approach specifying the categories. Because I know the Functor isn't specified until this is done.</p>\n<p>For example, in this video, the presenter is illustrating a surprising group homomorphism (<a href=\"https://youtu.be/dYj0rPQeRkA?si=2orJ94PHWW7f6Urq\">https://youtu.be/dYj0rPQeRkA?si=2orJ94PHWW7f6Urq</a>).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"dYj0rPQeRkA\" href=\"https://youtu.be/dYj0rPQeRkA?si=2orJ94PHWW7f6Urq\"><img src=\"https://uploads.zulipusercontent.net/904041cdfd9c3f100d4036cf72b632e94f71a03e/68747470733a2f2f692e7974696d672e636f6d2f76692f64596a3072505165526b412f64656661756c742e6a7067\"></a></div><p>But they don't explain the way in which the Rubik's Cube forms a group, or a category. Here the problem is definite enough I think I could do it, but I'm asking for advice on how to go about this more generally.</p>",
        "id": 486832760,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733715905
    },
    {
        "content": "<p>The way to think of the Rubik's cube puzzle in terms of a group is discussed here:</p>\n<ul>\n<li>Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Rubik%27s_Cube_group\">Rubik's cube group</a>.</li>\n</ul>\n<p>Briefly, each way you can move the cubes around in the Rubik's cube is an element of this group, and doing one of these motions and then another is multiplication in this group.  They say this group has</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>43</mn><mo separator=\"true\" lspace=\"0em\" rspace=\"0em\">,</mo><mn>252</mn><mo separator=\"true\" lspace=\"0em\" rspace=\"0em\">,</mo><mn>003</mn><mo separator=\"true\" lspace=\"0em\" rspace=\"0em\">,</mo><mn>274</mn><mo separator=\"true\" lspace=\"0em\" rspace=\"0em\">,</mo><mn>489</mn><mo separator=\"true\" lspace=\"0em\" rspace=\"0em\">,</mo><mn>856</mn><mo separator=\"true\" lspace=\"0em\" rspace=\"0em\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\"> 43{,}252{,}003{,}274{,}489{,}856{,}000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">43</span><span class=\"mord\"><span class=\"mpunct\">,</span></span><span class=\"mord\">252</span><span class=\"mord\"><span class=\"mpunct\">,</span></span><span class=\"mord\">003</span><span class=\"mord\"><span class=\"mpunct\">,</span></span><span class=\"mord\">274</span><span class=\"mord\"><span class=\"mpunct\">,</span></span><span class=\"mord\">489</span><span class=\"mord\"><span class=\"mpunct\">,</span></span><span class=\"mord\">856</span><span class=\"mord\"><span class=\"mpunct\">,</span></span><span class=\"mord\">000</span></span></span></span></p>\n<p>elements.   By understanding the structure of this group well enough, you can figure out you might want to know about the Rubik's cube puzzle.   I've never thought about it myself.</p>",
        "id": 486833204,
        "sender_full_name": "John Baez",
        "timestamp": 1733716218
    },
    {
        "content": "<blockquote>\n<p>If you think you're looking at something that satisfies the definition of a Functor, how do you work out its input category and output category?</p>\n</blockquote>\n<p>Can you give an example problem?   I don't know if there's a general strategy, or if it depends completely on the details of the example.</p>",
        "id": 486833713,
        "sender_full_name": "John Baez",
        "timestamp": 1733716577
    },
    {
        "content": "<p>To be clear, this is a bit embarrassing because I'm confused, and I'm interested in making sense of \"toys\" or \"tools\".</p>\n<p>I've been thinking hard about hexagon lattices as inputs for instruments. For example, Euler's Tonnetz was used as a layout for a harmonica, called the \"Harmonetta\" (<a href=\"https://en.m.wikipedia.org/wiki/Harmonetta\">https://en.m.wikipedia.org/wiki/Harmonetta</a>)</p>\n<p>Chromatic button accordions, in the left hand, use various standards that almost all amount to reflections and rotations of the same system, shared here: <a href=\"/user_uploads/21317/-SzPPaobioqzlSfg3nPHGvx3/Semitone-layout-numbers.jpg\">Semitone layout numbers.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/-SzPPaobioqzlSfg3nPHGvx3/Semitone-layout-numbers.jpg\" title=\"Semitone layout numbers.jpg\"><img data-original-dimensions=\"4000x1815\" src=\"/user_uploads/thumbnail/21317/-SzPPaobioqzlSfg3nPHGvx3/Semitone-layout-numbers.jpg/840x560.webp\"></a></div><p>The numbers refer to the twelve tones of equal temperament.</p>\n<p>You can visualize a song on this lattice (because how else would you play it?)</p>\n<p>And, generally speaking, this is called the \"tablature\" of the song.</p>\n<p>In principle, you could convert this tablature to sheet music, sounds played on a music system, etc.</p>\n<p>I think there's a ton of possible categories and functors here, but I'm struggling to sort out what I should be focusing my energy on. </p>\n<p>But like, my basic intuition for why it's <em>some</em> sort of functor is because of the following:</p>\n<ul>\n<li>if the first half of the song involves <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>O</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">fingeringOne</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span></span></span></span></li>\n<li>and the second half of the song involves <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>w</mi><mi>o</mi></mrow><annotation encoding=\"application/x-tex\">fingeringTwo</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mord mathnormal\">o</span></span></span></span></li>\n<li>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">accordion</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span></span></span></span> converts fingering into music, </li>\n</ul>\n<p>Then we should have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>O</mi><mi>n</mi><mi>e</mi><mspace width=\"1em\"></mspace><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>w</mi><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>O</mi><mi>n</mi><mi>e</mi><mo stretchy=\"false\">)</mo><mspace width=\"1em\"></mspace><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>w</mi><mi>o</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">accordion(fingeringOne\\quad fingeringTwo) =accordion(fingeringOne)\\quad  accordion(fingeringTwo)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mord mathnormal\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mord mathnormal\">o</span><span class=\"mclose\">)</span></span></span></span> (If I play the first half, and then the second half, that's just the same as playing from the beginning to the end, therefore I can practice music \"one measure at a time\")</p>",
        "id": 486836637,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733718502
    },
    {
        "content": "<blockquote>\n<p>But like, my basic intuition for why it's <em>some</em> sort of functor is...</p>\n</blockquote>\n<p>Wait a minute - what's \"it\"?   You didn't say.</p>",
        "id": 486836873,
        "sender_full_name": "John Baez",
        "timestamp": 1733718646
    },
    {
        "content": "<p>The rule that takes positions on a lattice to notes, as specified by the image</p>\n<p>Or maybe I can take paths on the lattice to sequences of notes</p>",
        "id": 486837091,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733718780
    },
    {
        "content": "<p>Okay, so I was supposed to figure that out?  Whew, you must think I'm telepathic.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 486837171,
        "sender_full_name": "John Baez",
        "timestamp": 1733718841
    },
    {
        "content": "<p>Well, I think there's more than one possible functor here for a given accordion, but I'm not sure. </p>\n<p>Those are the most obvious rules I can think of</p>",
        "id": 486837278,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733718897
    },
    {
        "content": "<p>Like I'm not sure what I should mean by \"notes\" etc. Especially if I want to map tablature to sheet music, or vice versa</p>",
        "id": 486837605,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733719031
    },
    {
        "content": "<p>I'd say you just have a <em>function</em> from positions on the lattice to notes, say </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f: X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is the set of lattice positions and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is the set of notes.  From this you automatically get a function sending lists of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> lattice positions to lists of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> notes, called</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>×</mo><mo>⋯</mo><mo>×</mo><mi>f</mi><mo>:</mo><mi>X</mi><mo>×</mo><mo>⋯</mo><mo>×</mo><mi>X</mi><mo>→</mo><mi>Y</mi><mo>×</mo><mo>⋯</mo><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\"> f \\times \\cdots \\times f : X \\times \\cdots \\times X \\to Y \\times \\cdots \\times Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>\n<p>where I'm taking a cartesian product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> sets (well-known I hope) or a cartesian product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> functions (slightly less well known, but still used a lot).</p>",
        "id": 486837606,
        "sender_full_name": "John Baez",
        "timestamp": 1733719032
    },
    {
        "content": "<p>We can abbreviate this as </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>n</mi></msup><mo>:</mo><msup><mi>X</mi><mi>n</mi></msup><mo>→</mo><msup><mi>Y</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> f^n : X^n \\to Y^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is rarely used this way, but makes sense because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo>−</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">-^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mbin\">−</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is actually a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span>, which works not only for objects (sets) but morphisms (functions).</p>",
        "id": 486837738,
        "sender_full_name": "John Baez",
        "timestamp": 1733719092
    },
    {
        "content": "<p>Now there's no serious category theory here yet - I'm just mentioning categories to make you happier.  But then you seemed to want to create a monoid consisting of lists of <em>arbitrary</em> length, either of lattice positions or notes.  In the first case this is </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> \\sum_{n \\ge 0} X^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>and in the second it's</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>Y</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> \\sum_{n \\ge 0} Y^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Here the sum means <a href=\"https://ncatlab.org/nlab/show/coproduct\">[[coproduct]]</a>, or 'disjoint union'.   These things get to be monoids like this:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><msubsup><mi>x</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>m</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><msubsup><mi>x</mi><mi>m</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (x_1, \\dots, x_n) \\cdot (x&#x27;_1, \\dots, x&#x27;_m) = (x_1, \\dots, x_n, x&#x27;_1, \\dots x&#x27;_m) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>We just concatenate two lists to get a new longer list.</p>",
        "id": 486838166,
        "sender_full_name": "John Baez",
        "timestamp": 1733719287
    },
    {
        "content": "<p>We then get a function</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>f</mi><mi>n</mi></msup><mo>:</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>X</mi><mi>n</mi></msup><mo>→</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>Y</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> \\sum_{n \\ge 0} f^n : \\sum_{n \\ge 0} X^n \\to \\sum_{n \\ge 0} Y^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>which does the obvious thing: converts a sequence of lattices positions to the corresponding sequence of notes.   And this map is a monoid homomorphism, meaning </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>f</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>f</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>f</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (\\sum_{n \\ge 0} f^n )(x \\cdot x&#x27;) = (\\sum_{n \\ge 0} f^n )(x) \\cdot (\\sum_{n \\ge 0} f^n )(x&#x27;) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1468em;vertical-align:-0.3949em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are two sequences of lattice positions, each of arbitrary length.</p>",
        "id": 486838396,
        "sender_full_name": "John Baez",
        "timestamp": 1733719407
    },
    {
        "content": "<p>This is just the fact you said here:</p>\n<blockquote>\n<p>Then we should have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>O</mi><mi>n</mi><mi>e</mi><mspace width=\"1em\"/><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>w</mi><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>O</mi><mi>n</mi><mi>e</mi><mo stretchy=\"false\">)</mo><mspace width=\"1em\"/><mi>a</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>w</mi><mi>o</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">accordion(fingeringOne\\quad fingeringTwo) =accordion(fingeringOne)\\quad  accordion(fingeringTwo)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mord mathnormal\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ccor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mord mathnormal\">o</span><span class=\"mclose\">)</span></span></span></span> (If I play the first half, and then the second half, that's just the same as playing from the beginning to the end, therefore I can practice music \"one measure at a time\")</p>\n</blockquote>",
        "id": 486838488,
        "sender_full_name": "John Baez",
        "timestamp": 1733719447
    },
    {
        "content": "<p>What's really going on is that we've got a functor </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mo>−</mo><mi>n</mi></msup><mo>:</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">M</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">n</mi></mrow></mrow><annotation encoding=\"application/x-tex\"> \\sum_{n \\ge 0} -^n : \\mathsf{Set} \\to \\mathsf{Mon} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mbin\">−</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Mon</span></span></span></span></span></p>\n<p>sending each set, say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, to the monoid <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n \\ge 0} X^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> of arbitrary-length lists of elements of that set.   And this is a very famous functor from the category of sets to the category of monoids!  Computer scientists might call it the \"list\" functor, but mathematicians would call it the \"free monoid\" functors, since it's left adjoint to the forgetful functor from monoids to sets.</p>",
        "id": 486838740,
        "sender_full_name": "John Baez",
        "timestamp": 1733719583
    },
    {
        "content": "<p>I'm not claiming any of this is actually <em>useful</em> for anything in music.  It's just the math of converting lists of elements in some set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to lists in some other set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.</p>",
        "id": 486838855,
        "sender_full_name": "John Baez",
        "timestamp": 1733719654
    },
    {
        "content": "<p>So that's what immediately pops into mind when I try to take what you're saying and say it more mathematically.  Notice it has nothing to do with the details of your situation: I really just started with any function between sets, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f: X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, and did stuff with it.</p>",
        "id": 486839281,
        "sender_full_name": "John Baez",
        "timestamp": 1733719840
    },
    {
        "content": "<p>Everything you're saying sounds right. And makes a ton of sense. And what you're saying I think is useful for music. But there's one more big fact that makes me interested in lattices (that I see now in retrospect I didn't make clear enough)</p>\n<p>If you shift your hands on the numbered grid, but play a song with the same shape, it'll be the same song in a different key:</p>\n<p>I got this image from a respected accordion text, I think the arrows could be morphisms in some category (That I don't know how to articulate)</p>\n<p><a href=\"/user_uploads/21317/RACOzSptEuHivQYnFwCr0bV7/485ce2e7-8da1-4c21-af1e-e3fcc870608a.jpg\">485ce2e7-8da1-4c21-af1e-e3fcc870608a.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/RACOzSptEuHivQYnFwCr0bV7/485ce2e7-8da1-4c21-af1e-e3fcc870608a.jpg\" title=\"485ce2e7-8da1-4c21-af1e-e3fcc870608a.jpg\"><img data-original-dimensions=\"3000x4000\" src=\"/user_uploads/thumbnail/21317/RACOzSptEuHivQYnFwCr0bV7/485ce2e7-8da1-4c21-af1e-e3fcc870608a.jpg/840x560.webp\"></a></div><p>Your analysis is noting we don't need to know this about an accordion to play it successfully (Or you could use a piano layout instead, where you don't have this big fact, but you can still play a song provided you play the right keys in sequence)</p>",
        "id": 486839408,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733719899
    },
    {
        "content": "<p>One thing you're noting is that \"transposing\" gives a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">t: X \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, or at least it would if your accordion were infinitely long.  Then we can throw this into the machinery I've discussed and get a monoid homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>t</mi><mi>n</mi></msup><mo>:</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>X</mi><mi>n</mi></msup><mo>→</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n \\ge 0} t^n : \\sum_{n \\ge 0} X^n \\to \\sum_{n \\ge 0} X^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 486839819,
        "sender_full_name": "John Baez",
        "timestamp": 1733720070
    },
    {
        "content": "<p>And, I'm noting, that transposing here in the musical sense, is literally the same as translating in the physical sense, provided you're using a lattice (and the notes are placed on the lattice correctly)</p>",
        "id": 486839981,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733720158
    },
    {
        "content": "<p>Right.  By the way, there are lot of people who work on the math of music, who would have already written about very similar things, though not necessarily acccordions.  Some of them use category theory, and others don't.</p>",
        "id": 486840751,
        "sender_full_name": "John Baez",
        "timestamp": 1733720511
    },
    {
        "content": "<p>One of my favorite mathematical music theorists, Dmitri Tymoczko, has been using groupoids lately, and he's been talking to me about that.</p>",
        "id": 486840906,
        "sender_full_name": "John Baez",
        "timestamp": 1733720582
    },
    {
        "content": "<p>His book <em><a href=\"https://dmitri.mycpanel.princeton.edu/geometry-of-music.html\">A Geometry of Music</a></em> is really good, but it doesn't get into groupoids.</p>",
        "id": 486841084,
        "sender_full_name": "John Baez",
        "timestamp": 1733720665
    },
    {
        "content": "<p>There's also this:</p>\n<ul>\n<li>Alexandre Popoff, Moreno Andreatta and Andree Ehresmann, <a href=\"https://arxiv.org/abs/1801.02922\">Groupoids and wreath products of musical transformations: a categorical approach from poly-Klumpenhouwer networks</a>.</li>\n</ul>\n<p>but I've only read their <a href=\"https://arxiv.org/abs/1611.02249\">previous paper</a>, which is probably a prerequisite.</p>",
        "id": 486841602,
        "sender_full_name": "John Baez",
        "timestamp": 1733720938
    },
    {
        "content": "<p>I am interested in music theory so I'll check out that book. </p>\n<p>I'm more interested in analogies, how to work with them exactly, especially if I can use them to encode math facts in physical toys.</p>\n<p>I think because I'm interested in physical aids for thinking about abstract stuff. </p>\n<p>So here, rather than thinking about <em>music composition</em> as such, I'm trying to understand \"How does an accordion convert my finger's motions through space into sounds?\" So I got really excited when a physical(well, geometric) transformation \"translation\" could correspond to a musical transformation \"transposition\"</p>\n<p>And I'm very interested in converting physical space (usually lines) into many other things. I was drawn to category theory in part because string diagrams seem to do that - for example. And because analogies seem to play a big role in category theory as functors. </p>\n<p>(Your lazy lines discussion from your paper you linked awhile back was very exciting by the way)</p>",
        "id": 486841854,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733721071
    },
    {
        "content": "<p>I appreciate the time you took with this question!</p>",
        "id": 486842111,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733721242
    },
    {
        "content": "<p>Lazy paths, you mean.  </p>\n<p>A lot of mathematical music theory is about transformations acting on notes, chords, melodies, etc.   For example they talk a lot about the <a href=\"https://alpof.wordpress.com/2013/12/19/an-introduction-to-neo-riemannian-theory-6/\">transposition-inversion group</a> and the <a href=\"https://alpof.wordpress.com/2014/01/26/an-introduction-to-neo-riemannian-theory-9/\">PLR group</a>, which acts on triads.</p>",
        "id": 486845521,
        "sender_full_name": "John Baez",
        "timestamp": 1733722985
    },
    {
        "content": "<p>I explained these in <a href=\"https://math.ucr.edu/home/baez/week234.html\">week234</a> of my series <em>This Week's Finds</em>, and there are some references there.</p>",
        "id": 486845612,
        "sender_full_name": "John Baez",
        "timestamp": 1733723032
    },
    {
        "content": "<p>Yes, you can partially blame this question on me reading your post! It's convenient to carry out PLR group transforms on Euler's Tonnetz, and therefore on the Harmonetta!</p>",
        "id": 486846167,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733723305
    },
    {
        "content": "<p>For those listening in who know group theory, the T/I and PLR groups can be summarized very quickly.  The group of transformations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>12</mn><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">f: \\mathbb{Z}/12 \\to \\mathbb{Z}/12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/12</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/12</span></span></span></span> of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mo>±</mo><mi>x</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">x \\mapsto \\pm x + c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">±</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">c \\in \\mathbb{Z}/12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/12</span></span></span></span> is the dihedral group with 24 elements, and in music is known as the <strong>transposition/inversion</strong> group or <strong>T/I</strong> group.  The set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> of major and minor triads is a torsor for this group, so the group of bijections <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mi>T</mi><mo>→</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">g: T \\to T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> that commute with the action of the T/I group form an isomorphic group called the <strong>PLR group</strong>.  </p>\n<p>The fun part is seeing how all this connects to music theory.</p>",
        "id": 486846587,
        "sender_full_name": "John Baez",
        "timestamp": 1733723530
    },
    {
        "content": "<p>The bass notes on an accordions left hand are almost Euler's Tonnetz, it's one shear away, so technically you can still play the PLR group transformations conveniently.</p>\n<p>Euler's Tonnetz:<br>\n<a href=\"/user_uploads/21317/KjGjVW02alw1g_nMgJckaBqE/Neo-Riemannian_Tonnetz.svg.png\">Neo-Riemannian_Tonnetz.svg.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/KjGjVW02alw1g_nMgJckaBqE/Neo-Riemannian_Tonnetz.svg.png\" title=\"Neo-Riemannian_Tonnetz.svg.png\"><img data-original-dimensions=\"1280x658\" src=\"/user_uploads/thumbnail/21317/KjGjVW02alw1g_nMgJckaBqE/Neo-Riemannian_Tonnetz.svg.png/840x560.webp\"></a></div><p>My illustration of Accordion's left hand bass rows (French system, which adds one more low bass row than is typical):<br>\n<a href=\"/user_uploads/21317/VlcF6NY6A_hyuSJ82K1FE6RI/French-Layout.jpg\">French Layout.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/VlcF6NY6A_hyuSJ82K1FE6RI/French-Layout.jpg\" title=\"French Layout.jpg\"><img data-original-dimensions=\"3976x2571\" src=\"/user_uploads/thumbnail/21317/VlcF6NY6A_hyuSJ82K1FE6RI/French-Layout.jpg/840x560.webp\"></a></div>",
        "id": 486846939,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733723729
    },
    {
        "content": "<p>Nice!!!  I've been listening to a lot of accordion music on Sundays in the local pub when I'm in Edinburgh, and it uses this kind of hexagonal arrangement of buttons, or some similar kind.  It reminded me of the Tonnetz but for some reason I didn't look into the connection.</p>",
        "id": 486847134,
        "sender_full_name": "John Baez",
        "timestamp": 1733723825
    },
    {
        "content": "<p>When you require, that a consecutive move on the lattice changes by a definite number of half steps, and you treat layouts the same if you can rotate, reflect and translate between them, then there are only 12 possibilities, and only 8 of them hit all notes.</p>\n<p><a href=\"https://guichaoua.gitlab.io/web-hexachord/\">https://guichaoua.gitlab.io/web-hexachord/</a></p>\n<p>One of these possibilities is Euler's Tonnetz.</p>\n<p>These are also related to square lattices.</p>\n<p>And 5 of the above 8 are possible to tune on a slanted guitar. That is, five of them have one semitone steps for one of the axis. And I say slanted, because guitars are normally square lattices, but the link is for hex lattices, which are sheared from squares.</p>",
        "id": 486847908,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733724177
    },
    {
        "content": "<p>The accordion's bass rows, on Stradella systems, is the closest \"guitar possible tuning\" to the Tonnetz (with the qualifier that guitars are square lattices, not hex lattices, so I'm stretching the language a bit)</p>",
        "id": 486848109,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733724278
    },
    {
        "content": "<p>I'll have to think about this more - I can't really absorb that fully right away.  I got interested in these hexagonal grids when I wrote these:</p>\n<p>• <a href=\"https://johncarlosbaez.wordpress.com/2023/10/30/just-intonation-part-1/\">Part 1</a>: The history of just intonation. Just intonation versus Pythagorean tuning. The syntonic comma.</p>\n<p>• <a href=\"https://johncarlosbaez.wordpress.com/2023/11/06/just-intonation-part-2/\">Part 2</a>: Just intonation from the Tonnetz. The four possible tritones in just intonation. The small and large just whole tones. Ptolemy’s intense diatonic scale, and its major triads.</p>\n<p>• <a href=\"https://johncarlosbaez.wordpress.com/2023/11/09/just-intonation-part-3/\">Part 3</a>: Curling up a parallelogram in the Tonnetz to get just intonation. The frequency ratios of the four possible tritones: the syntonic comma, the lesser and greater diesis, and the diaschisma.</p>",
        "id": 486848510,
        "sender_full_name": "John Baez",
        "timestamp": 1733724496
    },
    {
        "content": "<p>You'll see some hexagonal grids in parts 2 and 3.</p>",
        "id": 486848595,
        "sender_full_name": "John Baez",
        "timestamp": 1733724554
    },
    {
        "content": "<p>The math behind my basic claims about the lattices, like that there are only 12 up to isometry, is relatively elementary number theory...but I find its very easy to get extremely confused.</p>\n<p>Like I once conflated a reflection, with reversing the rows of an accordion - but those aren't the same <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>If I remember correctly, using the notation from the website I linked to in my previous message, (1,2,9) and (1, 3, 8) are related by reversing the rows of an accordion. </p>\n<p>Accordion right hands, when they aren't pianos, are almost always (1, 2, 9), that's the lattice I shared in my original question.</p>",
        "id": 486849829,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733725192
    },
    {
        "content": "<p>Btw, do you play the accordion?</p>",
        "id": 486851840,
        "sender_full_name": "John Baez",
        "timestamp": 1733726021
    },
    {
        "content": "<p>I do! This is a big way I do math - through my widgets or \"toys\"!</p>",
        "id": 486852018,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733726086
    },
    {
        "content": "<p>I'm <em>slightly</em> embarrassed to say I started accordion in part to explore these questions (but I swear I can play \"normal\" music)</p>",
        "id": 486852145,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733726161
    },
    {
        "content": "<p>Good!  It would be sort of a waste to think so much about accordion math without actually playing an accordion.</p>",
        "id": 486852215,
        "sender_full_name": "John Baez",
        "timestamp": 1733726179
    },
    {
        "content": "<p>I asked my piano teacher years ago \"why don't we make a piano where all the keys have the same width?\"</p>\n<p>Instead of saying \"there's this neat invention called the Janko Keyboard\"<a href=\"/user_uploads/21317/VowGjuaRTuzq4kniJ_OxF9ib/1280px-MIM_Janko_Piano.jpg\">1280px-MIM_Janko_Piano.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/VowGjuaRTuzq4kniJ_OxF9ib/1280px-MIM_Janko_Piano.jpg\" title=\"1280px-MIM_Janko_Piano.jpg\"><img data-original-dimensions=\"1280x766\" src=\"/user_uploads/thumbnail/21317/VowGjuaRTuzq4kniJ_OxF9ib/1280px-MIM_Janko_Piano.jpg/840x560.webp\"></a></div><p>She said \"You'll never find a better layout, learn the fingering!\" So, I was like \"Okay...\"</p>\n<p>Years later when I saw a chromatic accordion I was like \"THATS THE THING!!!\"</p>",
        "id": 486852612,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733726374
    },
    {
        "content": "<p>(Immediately followed by, \"Oh two dimensions makes it smaller! That's a good idea!\")</p>",
        "id": 486852800,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733726439
    },
    {
        "content": "<p>Probably the biggest <em>absolutely practical</em> advantage of the lattices over the piano, is that it's trivial to have multiple octave spans with one hand on most of them. That's part of what makes guitars sound different than pianos.</p>",
        "id": 486853031,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733726523
    },
    {
        "content": "<p>I only play the piano and I don't really want to learn these other instruments, but I'm very glad they exist.  Do you know about the \"lumatone\"?</p>\n<p><a href=\"https://www.youtube.com/results?search_query=lumatone\">https://www.youtube.com/results?search_query=lumatone</a></p>",
        "id": 486853381,
        "sender_full_name": "John Baez",
        "timestamp": 1733726677
    },
    {
        "content": "<p>I do! What's crazy about the <em>Lumatone</em>, is it uses something called a \"Bosanquet - Wilson\" layout. The hex lattice is rotated in such a way, that for various different equal temperament layouts, your hand doesn't fly off the top or bottom of the keyboard as you play up the scale.</p>\n<p>So it's a good example of why it's dangerous to treat these layouts the same up to isometry.</p>\n<p>I almost bought it, but I realized I couldn't use my accordion fingerings on it, because of this rotation.</p>\n<p>If I'm ever interested in equal temperament tunings with more than 12 notes, I'll get it.</p>",
        "id": 486859356,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733727011
    },
    {
        "content": "<p>Here's a few Lumatone examples, note the diatonic scale is horizontal over the various equal temperament tunings, but the hexagons are \"tilted\":</p>\n<p><a href=\"/user_uploads/21317/Qa996OEFI959_S30zQrJcTZZ/9b05af08-b2a5-4efa-8630-c17a5db4000d.jpg\">9b05af08-b2a5-4efa-8630-c17a5db4000d.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Qa996OEFI959_S30zQrJcTZZ/9b05af08-b2a5-4efa-8630-c17a5db4000d.jpg\" title=\"9b05af08-b2a5-4efa-8630-c17a5db4000d.jpg\"><img data-original-dimensions=\"720x537\" src=\"/user_uploads/thumbnail/21317/Qa996OEFI959_S30zQrJcTZZ/9b05af08-b2a5-4efa-8630-c17a5db4000d.jpg/840x560.webp\"></a></div><p><a href=\"/user_uploads/21317/wYsfHrQRE-xFgnQn4z_qWhWZ/0ca27fa1-d463-4e4a-a34e-51f290eb8f16.jpg\">0ca27fa1-d463-4e4a-a34e-51f290eb8f16.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/wYsfHrQRE-xFgnQn4z_qWhWZ/0ca27fa1-d463-4e4a-a34e-51f290eb8f16.jpg\" title=\"0ca27fa1-d463-4e4a-a34e-51f290eb8f16.jpg\"><img data-original-dimensions=\"720x537\" src=\"/user_uploads/thumbnail/21317/wYsfHrQRE-xFgnQn4z_qWhWZ/0ca27fa1-d463-4e4a-a34e-51f290eb8f16.jpg/840x560.webp\"></a></div><p><a href=\"/user_uploads/21317/2E2EvF_KOZ_shbZYbXxmq2W-/e68a474d-5d63-465d-a30a-4ed284d11738.jpg\">e68a474d-5d63-465d-a30a-4ed284d11738.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/2E2EvF_KOZ_shbZYbXxmq2W-/e68a474d-5d63-465d-a30a-4ed284d11738.jpg\" title=\"e68a474d-5d63-465d-a30a-4ed284d11738.jpg\"><img data-original-dimensions=\"720x537\" src=\"/user_uploads/thumbnail/21317/2E2EvF_KOZ_shbZYbXxmq2W-/e68a474d-5d63-465d-a30a-4ed284d11738.jpg/840x560.webp\"></a></div><p>Whereas if you drew in the hexagons of an accordion lattice, they aren't tilted, like on this accordion midi controller:<br>\n<a href=\"/user_uploads/21317/BrjSQDSTQic2kJt5O2mBUglR/358225f4-7777-4891-b6b6-e7c147de39d2.jpg\">358225f4-7777-4891-b6b6-e7c147de39d2.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/BrjSQDSTQic2kJt5O2mBUglR/358225f4-7777-4891-b6b6-e7c147de39d2.jpg\" title=\"358225f4-7777-4891-b6b6-e7c147de39d2.jpg\"><img data-original-dimensions=\"1000x325\" src=\"/user_uploads/thumbnail/21317/BrjSQDSTQic2kJt5O2mBUglR/358225f4-7777-4891-b6b6-e7c147de39d2.jpg/840x560.webp\"></a></div>",
        "id": 486896495,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733728432
    },
    {
        "content": "<p>(the white and black buttons of this accordion are the white and black keys of piano)</p>",
        "id": 486900604,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733728578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277352\">@Alex Kreitzberg</span>  Your question reminded me something that I read somewhere that Rudolph Carnap originally coined the word \"functor\" to mean something that is like a function, but is not one.</p>",
        "id": 486993360,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1733750343
    },
    {
        "content": "<p>For sure! A generic Functor's Domain often feels way weirder than a set to me. </p>\n<p>Another thought I had. Hex lattices like the above, with the property that hand shape determines quality, are sometimes called \"Isomorphic keyboards\" (<a href=\"https://en.m.wikipedia.org/wiki/Isomorphic_keyboard\">https://en.m.wikipedia.org/wiki/Isomorphic_keyboard</a>).</p>\n<p>This invites me to wonder whether there's a category with a notion of isomorphism that coincides with this terminology. I think Its objects would be \"diagrams\" in the hex lattice.</p>\n<p>Though I suspect they're called \"isomorphic\" because somebody thought that was a good word to summarize \"same shape, same sound\"</p>",
        "id": 487059457,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733766245
    },
    {
        "content": "<p>The notion of isomorphism is not only a CT notion, or at least the word is often used outside of CT. </p>\n<p>I wonder if all isomorphisms can be reduced to CT isomorphisms.</p>",
        "id": 487241593,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1733835125
    },
    {
        "content": "<p>But even if they can, there surely is also the <em>informal</em> notion of isomorphism which CT (or any other mathematics) cannot pinpoint, as in \"<em>I</em> know how to convert one to the other\", as in  \"I know how to convert notes to music.\" (although the relation between notes and music is actually more like a functor,   <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>u</mi><mi>s</mi><mi>i</mi><mi>c</mi><mo>→</mo><mi>n</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">music \\to notes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">es</span></span></span></span> as there is many different ways to play the same notes.)</p>",
        "id": 487245538,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1733836157
    },
    {
        "content": "<p>I was curious about the term <a href=\"https://en.wikipedia.org/wiki/Isomorphic_keyboard\">isomorphic keyboard</a> when I first heard it, but the Wikipedia definition connects to the etymology of isomorphic, meaning \"same shape\":</p>\n<blockquote>\n<p>An <strong>isomorphic keyboard</strong> is a musical <a href=\"https://en.wikipedia.org/wiki/Input_device\">input device</a> consisting of a two-dimensional grid of note-controlling elements (such as buttons or keys) on which any given sequence and/or combination of <a href=\"https://en.wikipedia.org/wiki/Interval_(music)\">musical intervals</a> has the \"same shape\" on the <a href=\"https://en.wikipedia.org/wiki/Musical_keyboard\">keyboard</a> wherever it occurs – within a key, across keys, across octaves, and across tunings.</p>\n</blockquote>\n<p>So, it's not that the whole keyboard is isomorphic to something.</p>",
        "id": 487308163,
        "sender_full_name": "John Baez",
        "timestamp": 1733852540
    },
    {
        "content": "<blockquote>\n<p>If you think you're looking at something that satisfies the definition of a Functor, how do you work out its input category and output category?</p>\n</blockquote>\n<blockquote>\n<p>You could also ask a similar question about functions.</p>\n</blockquote>\n<p>Mathematicians did!  The concept of a function has evolved a lot over time.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/History_of_the_function_concept\">https://en.wikipedia.org/wiki/History_of_the_function_concept</a></p>\n<p>If you think of a function as a special kind of relation, then your question is a good one when encountering category theory.  If the codomain is not exactly the range, how do you pick it?  Like, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = x^2,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span> and the domain is the reals, what right do we have to say that the codomain is not the nonnegative reals?</p>\n<p>If you think of a function as a rule for acting on inputs to produce an output, you might consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>⋅</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = x \\cdot x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> to be different functions.  Certainly <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">bubblesort</a> and <a href=\"https://en.wikipedia.org/wiki/Quicksort\">quicksort</a> both have the same input/output relation on lists of integers, but one runs in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> time and the other in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> time.  Shouldn't we consider them different?</p>\n<p>In 1951, Bourbaki defined a function as a triple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(F, A, B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are sets and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> a relation from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> such that each element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> was related to a single element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.  In this definition, the domain and codomain are given as part of the data.</p>\n<p>Category theory follows Bourbaki in specifying the domain and codomain as part of the data of a morphism.  Whether bubblesort and quicksort count as different functions depends on the context. In Lambek and Scott's construction of the internal language of a cartesian closed category, they would be considered different morphisms because they are not beta equivalent in the lambda calculus.  But as morphisms in Set, once we choose the domain and codomain, they're the same because they have the same input/output relation.</p>",
        "id": 487308226,
        "sender_full_name": "Mike Stay",
        "timestamp": 1733852566
    },
    {
        "content": "<p>If you like highfalutin' language, quicksort and bubblesort are <em>extensionally</em> equal but <em>intensionally</em> distinct.</p>\n<p><em>Edited later to add:</em></p>\n<blockquote>\n<p>In Lambek and Scott's construction of the internal language of a cartesian closed category, they would be considered different morphisms because they are not beta equivalent in the lambda calculus.</p>\n</blockquote>\n<p>I would say that in the construction of the <em>syntactic</em> cartesian closed category of lambda-calculus, they are different morphisms.  Normally when we say \"the internal language of a cartesian closed category\" we mean to start with a particular <em>semantic</em> category and build a (very large) theory whose constants and equations are all the morphisms of that category and the equations that hold between them, and in that case whether or not bubblesort and quicksort are equal would depend on the category you start with.  For instance, that category might be Set, in which case they would be equal in the resulting theory.</p>",
        "id": 487316633,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1733855415
    },
    {
        "content": "<p>The process of adding specified codomains can be formalized as the process of passing from a <a href=\"https://ncatlab.org/nlab/show/protocategory\">[[protocategory]]</a> to a category.  Perhaps one could define some kind of \"protofunctor\" that wouldn't know its domain and codomain yet, but which gives rise to a functor between categories in a similar way.</p>",
        "id": 487317596,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1733855735
    },
    {
        "content": "<p>I'm very impressed with your ability to directly answer my question Shulman. </p>\n<p>Here's my rough takeaway from what people are saying.</p>\n<p>It's like if a student had a solution of a differential equation, and the differential equation, but then asked \"what were the initial conditions of my solution?\"</p>\n<p>The question is a bit unnatural, because initial conditions are typically data. You can maybe fix it by asking \"What are all the possible initial conditions this solution could've had?\" But that's a lot of work to go through, when you're suspicious the student simply hasn't shared the full context.</p>\n<p>I think a practical issue I'm struggling with, is I'm still getting used to picking categories. It's like when a programmer, used to Python, decides it's important to annotate with types. It's initially stressful, but eventually the activity becomes convenient and clarifying. </p>\n<p>And maybe I'm a bit embarrassed at how long it's taking me to figure out how to do this for the weirder examples I'm interested in.</p>\n<p>Here's my attempt to give a bit more context for what I'm doing.</p>\n<p>It's like there's a \"target category\" which is rich enough to hold \"the computations I want to do\" and an \"input category\" that's almost like a programming language, but is a physical thingy. And I'm trying to figure out how to articulate the way the physical thingy is making it easier to do the computations I want to do.</p>\n<p>Like I want to think of an abacus, or a slide rule, as a \"proto programming language.\" How would I then approach giving these physical things semantics? Category theory seems like a really compelling general way to think about this. Constructive mathematicians are drawn to it, etc. But maybe that's the wrong approach?</p>\n<p>Like categorical semantics of programming languages are very cool, why can't I use topological spaces as programming languages instead? Isn't that what string diagrams are? How weird, or physical, can the \"syntax category\" get?</p>\n<p>I want to develop the lattice example further, to stay closer to the ground and to build up some more context. There's a song I'm learning right now \"Lamento Nordestino\", maybe it'll help if I show how this thinking helps me learn this song.</p>",
        "id": 487329679,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733860220
    },
    {
        "content": "<p>You seem to be switching rather rapidly between different questions:</p>\n<ol>\n<li>how can I think of a slide rule as a programming language?</li>\n<li>could I use topological spaces as a programming language?</li>\n<li>how \"weird\" can a syntax category get?</li>\n</ol>\n<p>Each of these question is potentially interesting, but it would take work to make the question precise (there are many ways) and then figure out a good answer.   </p>\n<p>Instead of throwing out several hard questions in rapid succession, might be more productive to pretend you have <em>one</em> question you are very interested in, and sit still on it, and talk about it for a long time, in order to bring it to the point of mathematical precision where it admits a precise and useful answer.  </p>\n<p>That at least is how midt mathematicians proceed.  We tend to work patiently and thoroughly.  I can easily imagine writing a whole paper about question 1.</p>",
        "id": 487352320,
        "sender_full_name": "John Baez",
        "timestamp": 1733870171
    },
    {
        "content": "<p>I say \"pretend\" because you don't actually need to be interested in just one question to act like that's all you care about, and put your all into making it very precise, and trying to answer it.</p>",
        "id": 487352973,
        "sender_full_name": "John Baez",
        "timestamp": 1733870509
    },
    {
        "content": "<p>Well my hope was that I was trying to \"pretend to worry about one question\" by focusing on the accordion a little bit longer. I was going to illustrate a diagram, show chords on it, show how this helps me memorize a song, and really try to define a category carefully.</p>\n<p>I think Shulman answered the base question I asked as precisely as one could hope. I am actually pretty happy with his answer. So maybe I should start a new thread about the accordion category.</p>\n<p>But I'm worried people would still ask \"What exactly are you trying to solve with an accordion category?\" And I don't know how else to explain it other than \"An accordion is a physical tool, that I think can act as a physical analog (<em>or a functor?</em>) for musical concepts. Whenever a physical tool is a useful analog (<em>or a functor?</em>) for a computation, I get curious. Because my personal working memory is chaotic and error prone. </p>\n<p>Hrmmmm, but if this physical analogy is a functor - then in what sense is the input of an accordion a category?\")</p>\n<p>I'm really trying to get precise, I know I'm not there yet. I hope with the above I've helped people avoid needlessly guessing at what's going on in my head. </p>\n<p>If I'm too all over the place, or asking the wrong questions, that's useful for others to know<span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 487360706,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733874974
    },
    {
        "content": "<p>It's perfectly fine to stick to accordions!  When you start talking about \"how slide rules can be programming languages\", it looks (to me) like you've lost interest in the original topic.</p>",
        "id": 487360933,
        "sender_full_name": "John Baez",
        "timestamp": 1733875120
    },
    {
        "content": "<p>I explained how any function that translates something (like a button press on an accordion) to something else (like a note) can be turned, via the \"free monad\" functor, into a monoid homomorphism that translates <em>lists</em> of something into <em>lists</em> of something else.    Then we discussed how \"transposition\" fit naturally into that mathematical framework.   We could keep going and develop all the math you might be interested in when it comes to accordion music.   I felt like we were just getting going.</p>",
        "id": 487361402,
        "sender_full_name": "John Baez",
        "timestamp": 1733875337
    },
    {
        "content": "<p>Yes I want to say more about the accordions! I was just trying to explain</p>\n<ul>\n<li>slide rule → calculator</li>\n<li>accordion → song</li>\n</ul>\n<p>Are in my head examples of</p>\n<ul>\n<li>real world system → abstract system</li>\n</ul>\n<p>I don't have a lot of hope getting an answer for what exactly that third bullet point is. But I was worried something about how I was writing my questions was leaving that implicitly in the air. </p>\n<p>I wanted to give people the ability to ignore the point if it seemed too loose to make sense of, to them.</p>\n<p>But yes, accordions! I want to say more <em>definite</em> things about those!</p>",
        "id": 487362069,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733875755
    },
    {
        "content": "<p>I think </p>\n<ul>\n<li>real world system <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span> abstract system</li>\n</ul>\n<p>is too diffuse an idea to make real progress on before fully working out, say, 5 examples.   By the way, people often think of the \"syntax to semantics\" functors as going the other way: mapping an abstract description to the real thing it describes.  But never mind!  I shouldn't have even mentioned that.  Right now I'm more interested in the categorical semantics of accordions.</p>",
        "id": 487362620,
        "sender_full_name": "John Baez",
        "timestamp": 1733876076
    },
    {
        "content": "<p>I've got a lot more than five examples in mind, so I guess I should get to work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>I appreciate your point about syntax, because maybe that's part of what's making some of my questions on this confusing. I'll avoid getting distracted by it and get to accordions.</p>",
        "id": 487677246,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733876993
    },
    {
        "content": "<p>Yes, I find it very good to work examples out in detail while letting the grand philosophical issues hover silently in the background.  That's why I went into mathematical physics rather than philosophy (which I actually considered at some point in my foolish youth).</p>",
        "id": 487677387,
        "sender_full_name": "John Baez",
        "timestamp": 1733877076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/487316633\">said</a>:</p>\n<blockquote>\n<p>If you like highfalutin' language, quicksort and bubblesort are <em>extensionally</em> equal but <em>intensionally</em> distinct... they would be considered different morphisms...</p>\n</blockquote>\n<p>I know this was a digression, and sorry to jump in, but: I understood that different sorting algorithms will always be equated as morphisms whenever lists are interpreted categorically using initial algebras, as would be usual in categorical semantics, since their equality can be shown by initial algebra induction. I'm not aware of a ccc that would distinguish them or how that would be set up, and I would be interested to hear about it if there is one. I've seen some work (e.g. by Robin Cockett and collaborators) but I'm not sure what the state of the art is for categorical analysis of algorithms and complexity.</p>",
        "id": 488050792,
        "sender_full_name": "Sam Staton",
        "timestamp": 1733908835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/487362620\">said</a>:</p>\n<blockquote>\n<p>By the way, people often think of the \"syntax to semantics\" functors as going the other way: mapping an abstract description to the real thing it describes.</p>\n</blockquote>\n<p>That's an apt remark: when I had tried to graph such functors, I stumbled on the following complication: the real world is much richer than any abstract system, and there are aspects of it that cannot be mapped to it. </p>\n<p>e.g. when I play an accordion, not all movements of my hand would be triggered by notes, not all aspects of sound would be described by them.</p>\n<p>When I think about this, I think of a functor from a <em>subcategory</em> of the real world, to a  category of abstractions, or a functor from an abstraction to the real world.</p>",
        "id": 488068814,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1733914522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308397\">Sam Staton</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488050792\">said</a>:</p>\n<blockquote>\n<p>I understood that different sorting algorithms will always be equated as morphisms whenever lists are interpreted categorically using initial algebras, as would be usual in categorical semantics, since their equality can be shown by initial algebra induction. I'm not aware of a ccc that would distinguish them or how that would be set up, and I would be interested to hear about it if there is one.</p>\n</blockquote>\n<p>Yes, I thought about this a bit before posting that.  I agree that two functions on a list that can be proven equal by list-induction will always be equal in a CCC <em>if</em> lists are interpreted by initial algebras, and similarly for functions between other inductive types.  And if you go up one step to dependent type theory, then the equality of such functions can be proven inside the syntax, so they will therefore be equal in <em>all</em> models.  But my understanding is that in non-dependent lambda-calculus, the rules for a \"list type\" only require it to be interpreted semantically by a <em>weakly</em> initial algebra, which doesn't in general admit \"list induction\".</p>\n<p>I don't know of a specific semantic CCC with weak list objects in which quicksort and bubblesort actually turn out different.  <span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span>, since you brought them up, do you?  As soon as there is any such CCC, though, the syntactic CCC built from lambda-calculus will also have that property, by initiality (hence my edit).</p>",
        "id": 488132086,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1733932658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"612694\">Jencel Panic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488068814\">said</a>:</p>\n<blockquote>\n<p>When I think about this, I think of a functor from a <em>subcategory</em> of the real world, to a  category of abstractions, or a functor from an abstraction to the real world.</p>\n</blockquote>\n<p>Do you mean that a functor from a subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> is necessarily a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? Or that it should probably be interpreted as a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?</p>",
        "id": 488143472,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733935967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488132086\">said</a>:</p>\n<blockquote>\n<p>I don't know of a specific semantic CCC with weak list objects in which quicksort and bubblesort actually turn out different. @Mike Stay, since you brought them up, do you?</p>\n</blockquote>\n<p>Not specifically, but this paper looks relevant:</p>\n<p><a href=\"https://sartemov.ws.gc.cuny.edu/files/2012/10/Bonelli2007.pdf\">https://sartemov.ws.gc.cuny.edu/files/2012/10/Bonelli2007.pdf</a></p>\n<p>Since I can't provide proof, let me back off from saying they're different to saying I would be gobsmacked if they were equal.</p>",
        "id": 488172157,
        "sender_full_name": "Mike Stay",
        "timestamp": 1733945643
    },
    {
        "content": "<p>This isn't really the distinction you were getting at, which I'm understanding is something like, \"the syntax can be different even though the functions are the same\".</p>\n<p>But this reminded me of one fun little category I made. Its arrows are pairs of functions with \"cost functions\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>ϕ</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo>→</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, \\phi) : (X \\rightarrow Y) \\times (X \\rightarrow \\mathbb{R})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span>. The idea was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> was the cost of running <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Then composing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>ϕ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, \\phi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mclose\">)</span></span></span></span>, which I define to be an arrow from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>ψ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(g, \\psi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mclose\">)</span></span></span></span>, an arrow from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>, gives the pair <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>g</mi><mo>∘</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>ψ</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(g \\circ f, \\lambda x . \\psi(f(x)) + \\phi(x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span>, an arrow from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>.</p>\n<p>If I define identities to be identity functions with zero cost functions, then this composition is associative, has left and right identities, etc.</p>\n<p>I cooked this up trying to think of a category with an obvious functor into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Set</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\"><span class=\"mord\">Set</span></span></span></span></span>, that wasn't faithful. Because I was told if I did that, it'd look like morphisms that lost structure, which it does! (Of course, I built it so that this was obviously true)</p>",
        "id": 488174919,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733946521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277352\">Alex Kreitzberg</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488143472\">said</a>:</p>\n<blockquote>\n<p>Do you mean that a functor from a subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> is necessarily a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? Or that it should probably be interpreted as a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?</p>\n</blockquote>\n<p>I hope he didn't mean those - they're wrong.  Think about it with functions (which are a special case of functors).   A function from a subset of a set X to a set Y doesn't always  give a function from Y to X.</p>",
        "id": 488188838,
        "sender_full_name": "John Baez",
        "timestamp": 1733951313
    },
    {
        "content": "<p>Oh sure, that makes sense <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 488196793,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1733954451
    },
    {
        "content": "<p>If you want a highfalutin' description of your \"category with cost functions\" I think it is the <a href=\"https://ncatlab.org/nlab/show/Kleisli%20category\">[[Kleisli category]]</a> of the <a href=\"https://ncatlab.org/nlab/show/monad\">[[monad]]</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>X</mi><mo>=</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">TX = \\mathbb{R}\\times X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">TX</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>... (-:O</p>",
        "id": 488197584,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1733954765
    },
    {
        "content": "<p>You probably want to use big-O for your cost functions.  Otherwise you may not even have products: if it costs even some constant amount to project out of a product, then the triangles in the universal property diagram won't commute.</p>",
        "id": 488683455,
        "sender_full_name": "Mike Stay",
        "timestamp": 1734024215
    },
    {
        "content": "<p>Or you could keep the strict costs but just be content with a <a href=\"https://ncatlab.org/nlab/show/Freyd%20category\">[[Freyd category]]</a>.  This is in line with recent work on <a href=\"https://dl.acm.org/doi/10.1145/3498670\">cost as a computational effect</a>.</p>\n<p>But it sounded to me like Alex wasn't specifically interested in \"cost functions\" in their own right, but just as an example of a category with a natural \"underlying-set\" functor that isn't faithful.</p>",
        "id": 488684933,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734024709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277352\">Alex Kreitzberg</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488143472\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"612694\">Jencel Panic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488068814\">said</a>:</p>\n<blockquote>\n<p>When I think about this, I think of a functor from a <em>subcategory</em> of the real world, to a  category of abstractions, or a functor from an abstraction to the real world.</p>\n</blockquote>\n<p>Do you mean that a functor from a subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> is necessarily a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? Or that it should probably be interpreted as a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?</p>\n</blockquote>\n<p>I compare the two, because they are both alternatives of the \"real world system → abstract system\" model which wouldn't have the issue that I tried to outline above.</p>\n<ul>\n<li>\"abstract system → real world system \" is one, but that would entail that all the structure of the abstract system would have to be manifested in the real world.</li>\n<li>Subcategory (real world system)  → abstract system is another alternative, which is less constrained.</li>\n</ul>",
        "id": 488801509,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1734082775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"612694\">Jencel Panic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488801509\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"abstract system → real world system \" is one, but that would entail that all the structure of the abstract system would have to be manifested in the real world.</li>\n</ul>\n</blockquote>\n<p>It's pretty off topic from category theory, but you might be interested in the philosophical discussion about physical implementation of computations, which asks essentially \"given some mathematical gadget which models a computation, say a DFA or Turing machine, when does a real-world physical system implement that computation?\" There are a number of related questions that are actively discussed in certain parts of analytic philosophy. (In undergrad a professor and I spent some time trying to give an answer in terms of PL-theoretic models of computation; we never got anything satisfactory.)</p>\n<p>In particular, the historically first answer (explicitly written down by Putnam, but probably older) was what we now call the \"simple mapping account,\" which says a system implements a computation, modelled as some kind of automaton, if there is a mapping from states of the DFA to states of the physical system that preserves transitions. That reminds me quite strongly of your abstract -&gt; real world functor. This account pretty quickly runs into a lot of issues, some technical, some physical, and some philosophical, of the kind it seems you're running into here.</p>\n<p>(There's a reasonable-looking <a href=\"https://plato.stanford.edu/entries/computation-physicalsystems\">SEP article</a>, but if you're interested I would recommend <a href=\"https://link.springer.com/article/10.1007/BF00413692\">this</a> paper of Chalmers, which argues that these kinds of mappings are actually <em>too</em> plentiful to be useful tools.)</p>",
        "id": 488881063,
        "sender_full_name": "Riley Shahar",
        "timestamp": 1734108405
    },
    {
        "content": "<p>I'm trying to make a nice, easy to read, post on algebraic aspects of accordions, which takes time - but it's so painful not engaging with all the topics people are bringing up.</p>\n<p>I'll say when trying to find help on making \"math toys\" in the past, I hit that philosophical crowd and felt discouraged <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 488891170,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1734111881
    },
    {
        "content": "<p>I read the intro of \"Physical Computation: A Mechanistic Account\", the book is about the philosophical issues you mentioned. </p>\n<p>I want to finish it, because it seems relevant.</p>",
        "id": 488891818,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1734112084
    },
    {
        "content": "<p>But I really like analogies, which I think Functors model well, so I don't really want to give up on \"mapping accounts\" too soon.</p>",
        "id": 488892004,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1734112162
    },
    {
        "content": "<p>If my mindset is \"Analogies are neat!\" Rather than \"they're the perfect tool for modeling computations of physical systems!\" I think (or hope) I'll be fine <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 488892254,
        "sender_full_name": "Alex Kreitzberg",
        "timestamp": 1734112239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277352\">Alex Kreitzberg</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488892004\">said</a>:</p>\n<blockquote>\n<p>But I really like analogies, which I think Functors model well, so I don't really want to give up on \"mapping accounts\" too soon.</p>\n</blockquote>\n<p>I don't think you have to give them up! There are a lot of proposals in the literature for extra restrictions to put on the map from the mathematical model to the physical world, e.g. that it respects counterfactual/causal structure, locality principles, or mechanistic information as in the piccinini book you mention. It seems to me that you are wrestling with related questions; the discussion in that literature might give you insight into the kind of information you want to somehow encode into the real-world category that forms the codomain of your functor.</p>",
        "id": 488961014,
        "sender_full_name": "Riley Shahar",
        "timestamp": 1734151628
    },
    {
        "content": "<blockquote>\n<p>It's pretty off topic from category theory, but you might be interested in the philosophical discussion about physical implementation of computations, which asks essentially \"given some mathematical gadget which models a computation, say a DFA or Turing machine, when does a real-world physical system implement that computation?\"</p>\n</blockquote>\n<p>Haven't read about this, but I have thought about the question and the answer for me is pretty simple --- intend. A computer is a mechanism that was <em>made</em> in order to compute by people. Even if it doesn't compute correctly it is still a computer, just a defunct computer. </p>\n<p>Interesting to hear your opinion, but we should probably open another topic :)</p>",
        "id": 489018158,
        "sender_full_name": "Jencel Panic",
        "timestamp": 1734202822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"612694\">Jencel Panic</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/489018158\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It's pretty off topic from category theory, but you might be interested in the philosophical discussion about physical implementation of computations, which asks essentially \"given some mathematical gadget which models a computation, say a DFA or Turing machine, when does a real-world physical system implement that computation?\"</p>\n</blockquote>\n<p>Haven't read about this, but I have thought about the question and the answer for me is pretty simple --- intend. A computer is a mechanism that was <em>made</em> in order to compute by people. Even if it doesn't compute correctly it is still a computer, just a defunct computer. </p>\n<p>Interesting to hear your opinion, but we should probably open another topic :)</p>\n</blockquote>\n<p>I don't know if you'll automatically get a notification; I made a new thread in <a class=\"stream\" data-stream-id=\"229134\" href=\"/#narrow/channel/229134-theory.3A-philosophy\">#theory: philosophy</a>.</p>",
        "id": 489023695,
        "sender_full_name": "Riley Shahar",
        "timestamp": 1734207903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488172157\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/How.20do.20you.20work.20out.20its.20input.20category.20and.20output.20categor.2E.2E.2E/near/488132086\">said</a>:</p>\n<blockquote>\n<p>I don't know of a specific semantic CCC with weak list objects in which quicksort and bubblesort actually turn out different. @Mike Stay, since you brought them up, do you?</p>\n</blockquote>\n<p>Not specifically, but this paper looks relevant:</p>\n<p><a href=\"https://sartemov.ws.gc.cuny.edu/files/2012/10/Bonelli2007.pdf\">https://sartemov.ws.gc.cuny.edu/files/2012/10/Bonelli2007.pdf</a></p>\n<p>Since I can't provide proof, let me back off from saying they're different to saying I would be gobsmacked if they were equal.</p>\n</blockquote>\n<p>Thanks both. This is an interesting question. I would usually use ordinary strong initial algebras, so it is interesting to consider the weak case. </p>\n<p>Ordinarily I would think \"cost\" would count the beta reductions, but in a ccc you can't do that. (You sort-of can in the Kleisli category that you also mentioned, which is one way I've seen cost treated.) </p>\n<p>So suppose we're in a ccc with weak natural numbers object. Although I think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>0</mn><mo mathvariant=\"normal\">≠</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x+0\\neq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> in general, you must still have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant=\"normal\">.</mi><mi>z</mi><mo>+</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x+0)+(x+0)=(\\lambda z.z+z)(x+0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, because of the beta equalities. So you can't just count \"reduction steps\" in a naive machine. I suppose it might work for some machine that does optimal sharing and memoization -- in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x+0)+(x+0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, don't calculate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x+0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> twice, remember that you have already done it. </p>\n<p>It is quite possible that different algorithms are still separated here, perhaps the complexity distinctions are invariant under this kind of sharing and memoization. But I wonder, </p>\n<ul>\n<li>is there a simpler question to test this on than bubble sort vs merge sort?</li>\n</ul>",
        "id": 489203180,
        "sender_full_name": "Sam Staton",
        "timestamp": 1734346166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308397\">Sam Staton</span> [said]</p>\n<ul>\n<li>is there a simpler question to test this on than bubble sort vs merge sort?</li>\n</ul>\n<p>I guess you could try addition, defined by induction on the first argument, versus addition, defined by induction on the second argument. These probably won't be different in terms of time complexity, but running them on certain inputs ought to give a different number of steps.</p>",
        "id": 489209099,
        "sender_full_name": "Chad Nester",
        "timestamp": 1734347908
    },
    {
        "content": "<p>Personally I'm convinced that in order to talk about this we really want to be in a <em>weakly</em> closed setting, in which the many \"names\" of a given morphism are like different programs implementing it. </p>\n<p>The first step towards talking about complexity theory is to be able to talk about the time a given program takes to terminate on a given input. It seems to me that this is a feature of the names/codes more than it is a feature of the morphism/function they happen to name/implement. So, it's important that we can have multiple names!</p>",
        "id": 489209941,
        "sender_full_name": "Chad Nester",
        "timestamp": 1734348180
    },
    {
        "content": "<p>As far as I know nobody has seriously tried to do this. There's some encouraging work on timing morphisms in Turing categories (which happen to be weakly closed), but they don't work with the names...</p>",
        "id": 489210191,
        "sender_full_name": "Chad Nester",
        "timestamp": 1734348265
    },
    {
        "content": "<p>Let me mention again the recent work of Bob Harper's group on <a href=\"https://dl.acm.org/doi/10.1145/3498670\">cost as a computational effect</a>.</p>",
        "id": 489281628,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734366418
    }
]