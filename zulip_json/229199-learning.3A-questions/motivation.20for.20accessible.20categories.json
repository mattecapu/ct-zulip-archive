[
    {
        "content": "<p>What was/is the motivation for accessible categories? What are applications of them? For instance, why did Grothendieck and Verdier talk about accessible functors in SGA4?</p>",
        "id": 252607732,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1631186024
    },
    {
        "content": "<p>Accessible categories are not-necessarily small categories that are generated by a small category in a particularly nice, controlled way. It's a way of addressing some size problems.</p>",
        "id": 252608853,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1631186694
    },
    {
        "content": "<p>Nice! What would be a concrete example of a classical such size problem addressed by accessible categories? (That one doesn't have to check the technical conditions in the adjoint functor theorems?)</p>",
        "id": 252609370,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1631186977
    },
    {
        "content": "<p>Since you mentioned the adjoint functor theorem: any accessible functor between locally presentable categories is a left adjoint iff it preserves colimits, and any accessible functor between locally presentable categories is a right adjoint iff it preserves limits.</p>",
        "id": 252609624,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1631187118
    },
    {
        "content": "<p>Cool! So that's all, accessible categories are just about allowing annoying conditions to be omitted?</p>",
        "id": 252611078,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1631187957
    },
    {
        "content": "<p>No... I would say that's not the point at all...</p>",
        "id": 252611190,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1631188007
    },
    {
        "content": "<p>There's no free lunch – call it conservation of annoyingness if you like – but packaging technical conditions into a definition doesn't make it go away!</p>",
        "id": 252611492,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1631188176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Motivation.20for.20accessible.20categories/near/252611190\">said</a>:</p>\n<blockquote>\n<p>No... I would say that's not the point at all...</p>\n</blockquote>\n<p>Then, what's the point of accessible categories? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 252611868,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1631188361
    },
    {
        "content": "<p>Why don't you go read a textbook and find out for yourself?</p>",
        "id": 252612142,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1631188523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Motivation.20for.20accessible.20categories/near/252612142\">said</a>:</p>\n<blockquote>\n<p>Why don't you go read a textbook and find out for yourself?</p>\n</blockquote>\n<p>Allow me to politely remind you the tagline of this channel. I'm considering it against the Rules to say this to somebody here, any question you don't want to answer just leave for somebody else</p>",
        "id": 252612534,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1631188734
    },
    {
        "content": "<p>Fine. I'll ignore questions I don't want to answer even if they are addressed to me directly.</p>",
        "id": 252613416,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1631189149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Motivation.20for.20accessible.20categories/near/252613416\">said</a>:</p>\n<blockquote>\n<p>Fine. I'll ignore questions I don't want to answer even if they are addressed to me directly.</p>\n</blockquote>\n<p>I won't say much more as a moderator, we try to keep a light touch, the goal in this case is to keep things friendly and to prevent this from becoming a less good version of MathOverflow (we try to occupy a different niche, since MO has its own niche very well covered). Speaking as a human rather than as a moderator, the best thing is to politely disengage yourself from the thread, but just ignoring it is pretty much fine too, somebody else will probably pick it up</p>",
        "id": 252617861,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1631191146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Motivation.20for.20accessible.20categories/near/252613416\">said</a>:</p>\n<blockquote>\n<p>Fine. I'll ignore questions I don't want to answer even if they are addressed to me directly.</p>\n</blockquote>\n<p>You may have been speaking facetiously, but doing that does actually work (without seeming rude!) in this format.</p>",
        "id": 252617958,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1631191193
    },
    {
        "content": "<p>Re accessible categories: most of category theory is about studying categories which are constructed in a particular way, or which are \"just nice enough\" for some phenomenon or other to work in/on them. One motivation for accessible categories comes from studying models of sketches, another is understanding categories with certain classes of colimits. But these are things you could have learned from just reading the nLab page <span class=\"user-mention\" data-user-id=\"408864\">@Leopold Schlicht</span>; what deeper insight are you looking for here?</p>",
        "id": 252618181,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1631191299
    },
    {
        "content": "<p>In case you haven't seen it yet, take a look at chapter XVIII of Dérivateurs, where Grothendieck revisits the question in terms of \"pseudo-topos\". You can ask Maltsiniotis for the other sections if you get caught. <a href=\"https://webusers.imj-prg.fr/~georges.maltsiniotis/groth/Derivateurs.html\">https://webusers.imj-prg.fr/~georges.maltsiniotis/groth/Derivateurs.html</a> G says some words about it at the beginning of this letter <a href=\"https://webusers.imj-prg.fr/~georges.maltsiniotis/groth/ps/lettreder.pdf\">https://webusers.imj-prg.fr/~georges.maltsiniotis/groth/ps/lettreder.pdf</a></p>",
        "id": 252628012,
        "sender_full_name": "Mateo Carmona",
        "timestamp": 1631195130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408864\">Leopold Schlicht</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Motivation.20for.20accessible.20categories/near/252611078\">said</a>:</p>\n<blockquote>\n<p>Cool! So that's all, accessible categories are just about allowing annoying conditions to be omitted?</p>\n</blockquote>\n<p>If you left out the word \"just\" I would say <em>yes</em>, this is one of the things they're good for.</p>",
        "id": 252635781,
        "sender_full_name": "John Baez",
        "timestamp": 1631197923
    },
    {
        "content": "<blockquote>\n<p>But these are things you could have learned from just reading the nLab page @Leopold Schlicht; what deeper insight are you looking for here?</p>\n</blockquote>\n<p>I again find a bit of \"question-shaming\" is at work here.  I don't want people to feel they need to study the nLab before they ask a question here.</p>",
        "id": 252635870,
        "sender_full_name": "John Baez",
        "timestamp": 1631197962
    },
    {
        "content": "<p>I think Leopold's original question was great: what are accessible good for?   One can ask this without knowing what particular \"deeper insight\" one is seeking.</p>",
        "id": 252636057,
        "sender_full_name": "John Baez",
        "timestamp": 1631198023
    },
    {
        "content": "<p>Come to think of it, when I'm looking for deeper insight into something, I never know <em>what</em> deeper insight I'm looking for until I've got it!</p>",
        "id": 252636657,
        "sender_full_name": "John Baez",
        "timestamp": 1631198200
    },
    {
        "content": "<p>So I think you should go on asking such questions, Leopold - and anyone who doesn't like them should remember that silence is often more useful than a grumpy reply.</p>",
        "id": 252637511,
        "sender_full_name": "John Baez",
        "timestamp": 1631198488
    },
    {
        "content": "<p>Personally I've found <a href=\"https://ncatlab.org/nlab/show/locally+presentable+category\">locally presentable categories</a> to be easier to like than accessible categories... but locally presentable categories are the same as cocomplete accessible categories, so when you're trying to use locally presentable categories you need to read results about accessible categories.</p>",
        "id": 252638070,
        "sender_full_name": "John Baez",
        "timestamp": 1631198695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/motivation.20for.20accessible.20categories/near/252635870\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But these are things you could have learned from just reading the nLab page @Leopold Schlicht; what deeper insight are you looking for here?</p>\n</blockquote>\n<p>I again find a bit of \"question-shaming\" is at work here.  I don't want people to feel they need to study the nLab before they ask a question here.</p>\n</blockquote>\n<p>Quite the opposite: I was admitting to the fact that, if Leopold was asking here <em>after</em> going to the nLab, then I wasn't really providing them with anything new! I also am encouraging more specific questions; is <span class=\"user-mention\" data-user-id=\"408864\">@Leopold Schlicht</span> asking us to \"sell them\" accessible categories, or asking for more specific applications of them, or something else?</p>",
        "id": 252639023,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1631198996
    },
    {
        "content": "<p>Here's what I tend to remember about locally presentable categories:</p>\n<p>1) They have a somewhat technical definition, but they're the same as categories of models of limits theories - which is nice, because this includes tons of categories I care about.</p>\n<p>2) The adjoint functor theorem gets a lot simpler for locally presentable categories.</p>",
        "id": 252639284,
        "sender_full_name": "John Baez",
        "timestamp": 1631199070
    },
    {
        "content": "<p>Morgan wrote:</p>\n<blockquote>\n<p>I was admitting to the fact that, if Leopold was asking here after going to the nLab, then I wasn't really providing them with anything new!</p>\n</blockquote>\n<p>Interesting.   I read it the opposite way, since often people ask for help after looking at the nLab and not getting the point of what's there.   (Often the information is there but quite hard to digest if you don't know the point of it all.)</p>",
        "id": 252639936,
        "sender_full_name": "John Baez",
        "timestamp": 1631199273
    },
    {
        "content": "<p>A good motivation is just that so many of the large categories of structures which naturally occur are accessible</p>",
        "id": 252642189,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631200067
    },
    {
        "content": "<p>So it just makes sense to see what the axioms alone imply</p>",
        "id": 252642298,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631200095
    },
    {
        "content": "<p>More theoretically, there’s also the fact that a category is accessible if and only if it’s sketchable. So accessibility is a nice categorical axiomatisation of ‘presentable by axioms’ (roughly)</p>",
        "id": 252642407,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631200144
    },
    {
        "content": "<p>Here's some <a href=\"https://mathoverflow.net/q/343132/49\">relevant discussion at mathoverflow</a> (starting in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-case, but the points are mostly the same).</p>",
        "id": 252650828,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1631203266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341237\">Fawzi Hreiki</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/motivation.20for.20accessible.20categories/near/252642407\">said</a>:</p>\n<blockquote>\n<p>More theoretically, there’s also the fact that a category is accessible if and only if it’s sketchable. So accessibility is a nice categorical axiomatisation of ‘presentable by axioms’ (roughly)</p>\n</blockquote>\n<p>I think a category is <em>locally presentable</em> iff it's equivalent to the category of models of a limits sketch.    Does \"sketchable\" mean something else?</p>",
        "id": 252655788,
        "sender_full_name": "John Baez",
        "timestamp": 1631205271
    },
    {
        "content": "<p>Oh, it means sketchable using limits and colimits.</p>",
        "id": 252655936,
        "sender_full_name": "John Baez",
        "timestamp": 1631205339
    },
    {
        "content": "<p>Now I'll finally start to love accessible categories!</p>",
        "id": 252656051,
        "sender_full_name": "John Baez",
        "timestamp": 1631205377
    },
    {
        "content": "<p>Here is a nice statement that is true in every locally presentable category C: If X and Y are types of structures that can be specified using only limits (i.e. by limit sketches, e.g. groups, rings, lie algebras, internal categories) then an X in the categories of Ys in C is the same as a Y in the category of Xs in C. E.g. a category object in group objects in Lie algebras is the same as a group object in category objects in Lie algebras. This follows from the commutation of limits and the fact that C itself is a category of models (in Set) of a limit sketch.  <br>\nFrom the discussion <a href=\"#narrow/stream/229199-learning.3A-questions/topic/is.20every.20X.20in.20the.20category.20of.20Ys.20a.20Y.20in.20the.20category.20of.20Xs.3F\">here</a> you can also extract the corresponding statements in general accessible categories and with more general sketches.</p>",
        "id": 252661897,
        "sender_full_name": "Peter Arndt",
        "timestamp": 1631207762
    },
    {
        "content": "<p>Another one: An accessible category is complete if and only if it is cocomplete. This one, in its <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-categorical version, really comes to the rescue when you treat Lie algebras...</p>",
        "id": 252662166,
        "sender_full_name": "Peter Arndt",
        "timestamp": 1631207876
    },
    {
        "content": "<p>Returning to this thread: this was touched on a bit already, but I think it's useful to think of the theory of locally presentable categories as \"categorical model theory\", as the famous book by Makkai and Par&euml; puts in in the title. Actually, what it is is a beautiful and satisfying interplay and duality between syntax (generalizing something akin to Lawvere theories) and semantics (generalizing models of such theories).</p>",
        "id": 266217215,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649633
    },
    {
        "content": "<p>One good way to get started is with Gabriel-Ulmer duality, which is very striking. In the first place, this concerns \"finite-limits logic\" and \"finite limits theories\". So you have to imagine the sorts of internal structures in categories that can be expressed using the language of finite limits. Group objects in a category would be an example -- to define those those you just need products in the category. Category objects would be another example -- there you need pullbacks. Poset objects would be another example.</p>",
        "id": 266217256,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649673
    },
    {
        "content": "<p>The classical case would be where the background category is the category of sets. Internal posets in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> are just... posets. Category objects in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> are just small categories. And so on. The category of groups, the category of small categories, the category of posets -- these are all examples of what are called locally finitely presentable categories.</p>",
        "id": 266217273,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649695
    },
    {
        "content": "<p>Slightly more precisely, one way of defining a locally finitely presentable category is that it is a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> equivalent to a category of finite-limit preserving functors </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>:</mo><mi>T</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">M: T \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> </p>\n<p>from a small category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> that has finite limits (is finitely complete). Such a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> can be thought of as a \"finite limits theory\", and the finitely continuous functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>:</mo><mi>T</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">M: T \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span>, also called \"left exact\" or \"lex\" functors, can be thought of as \"models\" of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>. Very much in the spirit of Lawvere theories.</p>",
        "id": 266217335,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649723
    },
    {
        "content": "<p>Now, this is not really an intrinsic definition of an LFP category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> -- we have to be told there is some small finite-limits theory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> out there that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> can be presented in terms of. What is quite amazing though is that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> in question is essentially unique and can be extracted from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>. Namely, if we are told <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is LFP, then define an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to be \"finitely presentable\" if the representable functor </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C(c, -): C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> </p>\n<p>preserves filtered colimits. Bring in the nice fact that in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span>, filtered colimits commute with finite limits. It follows that such representable functors are closed under finite limits; consequently, the representing objects themselves, aka finitely presentable objects, are closed under finite colimits. The theory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> we are after is the category opposite to the full subcategory of finitely presentable objects. (Somewhat akin to the way in which a Lawvere theory for a category of algebras is opposite to the category of finitely generated free algebras.)</p>",
        "id": 266217364,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649763
    },
    {
        "content": "<p>For example, the canonical finite-limits theory for the theory of groups is the category opposite to the category of finitely presented groups, where this is the usual notion of \"finitely presented group\" that is widely familiar to mathematicians.</p>",
        "id": 266217398,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649792
    },
    {
        "content": "<p>So, on the theory or syntax side, we have small finitely complete categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>, finitely continuous functors between them (which could be called \"interpretations\" of theories), and natural transformations between those. We get a 2-category called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LEX}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">LEX</span></span></span></span></span>. On the model or semantic side, we have LFP categories (definition recalled below), where the morphisms between them are right adjoints that preserve filtered colimits, and we have natural transformations between those. We get a 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LFP}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">LFP</span></span></span></span></span>.</p>",
        "id": 266217415,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649806
    },
    {
        "content": "<p>Gabriel-Ulmer duality states that there is an equivalence of 2-categories </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">X</mi></mrow><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>≃</mo><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">P</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LEX}^{op} \\simeq \\mathrm{LFP}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7376em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">LEX</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7376em;\"><span style=\"top:-3.1362em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">LFP</span></span></span></span></span> </p>\n<p>where going from left to right, you take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>E</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">LEX(T, \\mathsf{Set})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">EX</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mclose\">)</span></span></span></span>, and going right to left, you take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>F</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">LFP(C, \\mathsf{Set})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FP</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mclose\">)</span></span></span></span> (this latter gives a 2-functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">P</mi></mrow><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>→</mo><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">X</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LFP}^{op} \\to \\mathrm{LEX}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7376em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">LFP</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7376em;\"><span style=\"top:-3.1362em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">LEX</span></span></span></span></span>, but then you can apply <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><msup><mo stretchy=\"false\">)</mo><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(-)^{op}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to that -- here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><msup><mo stretchy=\"false\">)</mo><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(-)^{op}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> is the operation on 2-categories that reverses the direction on 1-cells). Thus, we obtain here a perfect duality between syntax and semantics.</p>",
        "id": 266217435,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649824
    },
    {
        "content": "<p>Summarizing: an LFP category is a locally small and small-cocomplete category that has a small set of finitely presentable objects, such that every object is (in a canonical way) a filtered colimit of finitely presented objects. (For example, any group is a filtered colimit of finitely presented groups.)</p>",
        "id": 266217500,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649850
    },
    {
        "content": "<p>The wonderful Gabriel-Ulmer duality can be generalized, where instead of being constrained to limits of diagrams of finite size, one considers theories involving limit diagrams of infinite size (but still bounded in size by a cardinal). The theory of locally presentable categories explores further such dualities, but now reaching into the infinitary realm.</p>",
        "id": 266217514,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649867
    },
    {
        "content": "<p>Some of this stuff is strikingly powerful. One of my own favorite applications is to coalgebras and cocommutative coalgebras. Using the fundamental theorem of coalgebras (they are all unions of their finite-dimensional subcoalgebras), and taking advantage of the theory of LFP categories, one can show that cocommutative coalgebras are cartesian closed, develop the theory of measure coalgebras, and many other things. And, they cover a wide swath. For example, presheaf categories are LFP. Perhaps I can leave it as an exercise to show how.</p>",
        "id": 266217518,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640649873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277611\">@Todd Trimble</span>  Thank you for that amazing explanation!</p>\n<p>You describe two constructions from LFPs two LEXs: Firstly, given an LFP <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, assign to it the opposite of the full subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> consisting of finitely presentable objects. Secondly, assign to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">P</mi></mrow><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LFP}(C, \\mathbf{Set})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">LFP</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Set</span></span><span class=\"mclose\">)</span></span></span></span>. Are these constructions isomorphic?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"277611\">Todd Trimble</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/motivation.20for.20accessible.20categories/near/266217500\">said</a>:</p>\n<blockquote>\n<p>Summarizing: an LFP category is a locally small and small-cocomplete category that has a small set of finitely presentable objects, such that every object is (in a canonical way) a filtered colimit of finitely presented objects. (For example, any group is a filtered colimit of finitely presented groups.)</p>\n</blockquote>\n<p>Actually, that isn't a summary, because you didn't mention these facts above. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>Which doctrine corresponds to accessible categories?</p>",
        "id": 266273770,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1640710043
    },
    {
        "content": "<p>Why are LFPs called \"presentable\"? Because there's a finite-limits theory that \"presents\" it?</p>",
        "id": 266274171,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1640710430
    },
    {
        "content": "<p>Or because of the \"finitely presented objects\"? There seems to be several ways of interpreting \"presented\" - probably the group-theoretic interpretation came first.</p>",
        "id": 266274397,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1640710589
    },
    {
        "content": "<p>Yes, there are some things I glossed over. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">P</mi></mrow><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LFP}(C, \\mathsf{Set})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">LFP</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mclose\">)</span></span></span></span> means the collection of right adjoints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> that preserve filtered colimits, and the first point is that these are the same as representables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C(c, -): C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> that preserve filtered colimits. In other words, the first point is that right adjoints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> are the same as representable functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C(c, -): C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span>, at least under reasonable conditions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (it's more than enough that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> be cocomplete).</p>",
        "id": 266276806,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712665
    },
    {
        "content": "<p>In one direction, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>:</mo><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">G: C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> is a right adjoint, say with left adjoint <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, then I claim <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>≅</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G \\cong C(F1, -)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span>. This is because </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>≅</mo><msub><mn>1</mn><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></msub><mo>∘</mo><mi>G</mi><mo>≅</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>∘</mo><mi>G</mi><mo>=</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>G</mi><mo>−</mo><mo stretchy=\"false\">)</mo><mo>≅</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G \\cong 1_\\mathsf{Set} \\circ G \\cong \\mathsf{Set}(1, -) \\circ G= \\mathsf{Set}(1, G-) \\cong C(F1, -)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathsf mtight\">Set</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> </p>\n<p>where the last isomorphism comes from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⊣</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F \\dashv G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>.</p>",
        "id": 266276819,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712682
    },
    {
        "content": "<p>In the other direction, a representable functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mi>C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C(c, -): C \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> will have a left adjoint provided that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> admits tensoring with sets. (This means by definition that for any object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and any set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, there is coproduct in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> of an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>-indexed set of copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. This <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∐</mo><mi>S</mi></msub><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">\\coprod_S c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> is often denoted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⋅</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">S \\cdot c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>.) To see this other direction, note that </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>≅</mo><msub><mo>∏</mo><mi>S</mi></msub><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mo>∐</mo><mi>S</mi></msub><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo>⋅</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}(S, C(c, d)) \\cong \\prod_S C(c, d) \\cong C(\\coprod_S c, d) = C(S \\cdot c, d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> </p>\n<p>and this says precisely that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>⋅</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">- \\cdot c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> is left adjoint to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(c, -)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span>, so that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(c, -)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> is a right adjoint.</p>",
        "id": 266276831,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712703
    },
    {
        "content": "<p>The second point is that the category of filtered-colimit preserving representables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(c, -)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> and natural transformations between them is equivalent to the opposite of the category of finitely presentable objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> and morphisms between them, by the Yoneda lemma. </p>\n<p>I think that answers your first question.</p>",
        "id": 266276874,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712725
    },
    {
        "content": "<p>\"Finitely accessible\" is the condition we get from the definition of LFP category (given under \"Summarizing\") simply by dropping the cocompleteness condition. A good go-to example is the category of fields. I think here the finitely presentable objects are fields of finite transcendence degree over a prime field (a prime field being either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span>. Meanwhile, however, the category of fields is not cocomplete (e.g., it lacks coproducts).</p>",
        "id": 266276898,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712754
    },
    {
        "content": "<p>As for \"accessible\" itself, or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>-accessible -- that would similarly refer to one of these generalizations of locally <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>-presentable I categories I was talking about, except that we again drop a cocompleteness condition. For that, let me just refer you to the <a href=\"https://ncatlab.org/nlab/show/locally+presentable+category\">nLab</a>.</p>",
        "id": 266276909,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712766
    },
    {
        "content": "<p>The bible of the subject, as may have already been mentioned, is the text by Adamek and Rosicky (leaving off diacritical marks), Locally Presentable and Accessible Categories. IMO, it belongs on the shelf of every category theorist.</p>",
        "id": 266276923,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712779
    },
    {
        "content": "<p>We say \"<em>locally</em> finitely presentable category\", instead of \"finitely presentable category\" as Jacob Lurie might, because we're not presenting the category itself by finite graphs and congruence relations. Rather, the \"locally\" refers to the fact that one is talking about presentations of objects <em>in</em> the category. To answer your question, I think it's more because of \"finitely presented objects\".</p>",
        "id": 266276931,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640712787
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 266286990,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1640721027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277611\">Todd Trimble</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/motivation.20for.20accessible.20categories/near/266276931\">said</a>:</p>\n<blockquote>\n<p>We say \"<em>locally</em> finitely presentable category\", instead of \"finitely presentable category\" as Jacob Lurie might, because we're not presenting the category itself by finite graphs and congruence relations.</p>\n</blockquote>\n<p>Strangely enough, the nLab page you link to claims the opposite:</p>\n<blockquote>\n<p>This says equivalently that a locally presentable category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> is a reflective localization <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi><mo>↪</mo><mrow><mi mathvariant=\"normal\">P</mi><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">h</mi></mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal C\\hookrightarrow \\mathrm{PSh}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">PSh</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> of a category of presheaves over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. Since here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">P</mi><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">h</mi></mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{PSh}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">PSh</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> is the free colimit completion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and the localization imposes relations, this is a presentation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> by generators and relations, hence the name (locally) presentable category.</p>\n</blockquote>",
        "id": 266287348,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1640721321
    },
    {
        "content": "<p>Let me get back to you on this.</p>",
        "id": 266287487,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640721415
    },
    {
        "content": "<p>So my understanding is consonant with Remark 1.17 in the nLab <a href=\"https://ncatlab.org/nlab/show/locally+presentable+categories+-+introduction\">here</a>.</p>",
        "id": 266287637,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640721537
    },
    {
        "content": "<p>I guess I'll also adduce Remark 2.3 <a href=\"https://ncatlab.org/nlab/show/locally+presentable+category#definition\">here</a>. </p>\n<p>I think there are probably public discussions, maybe on the old Categories list, that discuss/debate this terminology, but I can't quite put my finger on them at the moment. Of course, bear in mind that the nLab is edited by many people (or many states of the same person), and there's no organizing committee at the head that makes sure that it's internally consistent everywhere.</p>",
        "id": 266289131,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640722689
    },
    {
        "content": "<p>The historically original terminology, and the only one in use for many decades, was \"locally presentable category\", with the motivation that Todd mentioned.  Then some people were apparently too lazy to write \"locally\" all the time, so they started saying just \"presentable category\".</p>\n<p>One can try to justify this <em>a posteriori</em> by claiming that the description of a locally presentable category as a reflective subcategory of a presheaf category is a kind of \"presentation\" of it, but in my opinion this is execrable.  A presentation of a <em>category</em> should mean a coequalizer of maps between free categories in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span>, just as a presentation of a group is a coequalizer of maps between free groups in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Grp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Grp</span></span></span></span></span>.  One could argue for replacing \"coequalizer\" with something more 2-categorical like \"coinverter\", and a reflective subcategory is indeed a coinverter, but not in the 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span>, only in the 2-category of cocomplete categories and left adjoints.  So at the most we can regard this as a presentation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> as a <em>cocomplete</em> category, so if that is the motivation one should say \"presentable cocomplete category\".</p>",
        "id": 266295264,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1640728065
    },
    {
        "content": "<p>I find \"presentable category\" unideal for the reasons stated above, but \"locally presentable category\" is also unfortunate, because \"locally\" is typically used to mean \"with respect to homs\" (e.g. locally complete), and here it means something entirely different.</p>",
        "id": 266298641,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1640730945
    },
    {
        "content": "<p>Actually, I thought other than \"locally small\", \"locally X\" often commonly means all slices are X, c.f. \"locally cartesian\". Incidentally, there is a scenario where we want all slices to be essentially small...</p>",
        "id": 266298817,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1640731148
    },
    {
        "content": "<p>That's a good point. \"Locally\" in the sense of hom-structure is often used for 2-categorical structure, whereas \"locally\" in the sense of slices is often used for finitely complete structure.</p>",
        "id": 266299104,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1640731470
    },
    {
        "content": "<p>We're a little stuck with both of them, unfortunately. But it would be nice if there was some alternative terminology to disambiguate the two.</p>",
        "id": 266299142,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1640731519
    },
    {
        "content": "<p>The explanation that Leopold pointed to reads to me like after-the-fact folk etymology. Aside from Mike's objection (which I pretty much agree with), I find it objectionable because it's confusing, being at odds with explanations elsewhere in the nLab.</p>",
        "id": 266299740,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1640732216
    },
    {
        "content": "<p>I think \"locally\" for slicewise is apt. I am under the impression that a category is the pseudocolimit of its slices (with the pushforward action), so this fits with the topological use of \"locally\". Similarly, in my view, \"locally κ-presentable category\" refers to the fact that the objects in the category are colimits of κ-presentable objects (so it is the objects that are locally presentable!), and is in the tradition of saying \"X category\" for \"categories of X objects\".</p>",
        "id": 266299884,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1640732395
    },
    {
        "content": "<p>I would expect \"locally presentable\" to mean \"each slice is presentable\" in that case.</p>",
        "id": 266307528,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1640741499
    },
    {
        "content": "<p>While they may both capture similar intuitions, they seem different enough to me that I think they ought to use separate terminology.</p>",
        "id": 266307583,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1640741527
    },
    {
        "content": "<p>Though in practice, I don't think it causes confusion.</p>",
        "id": 266307597,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1640741553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/motivation.20for.20accessible.20categories/near/266299142\">said</a>:</p>\n<blockquote>\n<p>We're a little stuck with both of them, unfortunately. But it would be nice if there was some alternative terminology to disambiguate the two.</p>\n</blockquote>\n<p>Fortunately, it's rare to find values of X for which \"locally X\" is interesting for both meanings of \"locally\".  Or, at least, for any given value of X, one of the two meanings of \"locally X\" is so much more common that everyone knows what it means.  If necessary one can use words like \"homwise\" and \"slicewise\".</p>",
        "id": 266307601,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1640741562
    },
    {
        "content": "<p>Historically, I think \"locally\" was sometimes used with a third meaning that was something like \"for a generating set of objects\".  For instance, in some very old papers one can find \"locally small\" used to mean something roughly like \"has a small generating set\".  I think this must be the origin of \"locally presentable\" = \"having a generating set of presentable objects\".</p>",
        "id": 266307688,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1640741684
    },
    {
        "content": "<p>So I suppose a more modern and explicit terminology would be something like \"presentably generated category\", but I would hesitate to introduce yet another name for them.</p>",
        "id": 266307719,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1640741753
    },
    {
        "content": "<p><em>Question 1:</em> Can somebody provide a mathematical reference for the following philosopical thoughts of Lawvere (found in his <em>Adjointness in Foundations</em>):<br>\n<a href=\"/user_uploads/21317/Xxv0MZrpkUI22XDhJ6z_A2rz/lawvere.png\">lawvere.png</a> <br>\nThis could be interesting, but I don't know what he is talking about, since he doesn't give precise definitions.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Xxv0MZrpkUI22XDhJ6z_A2rz/lawvere.png\" title=\"lawvere.png\"><img src=\"/user_uploads/21317/Xxv0MZrpkUI22XDhJ6z_A2rz/lawvere.png\"></a></div><p><em>Question 2:</em> Gabriel-Ulmer duality is very similar to Makkai duality: both tell us how to reconstruct a theory from its category of models. Furthermore, the paper <em><a href=\"https://link.springer.com/article/10.1007/s000120300002\">On the duality between varieties and algebraic theories</a></em> by Adámek, Lawvere, and Rosický proves that the \"models\" functor from the opposite of the 2-category of Cauchy complete algebraic theories to the 2-category of varieties is a biequivalence. Are there any other results of that type? I guess so because Todd Trimble wrote:</p>\n<blockquote>\n<p>The wonderful Gabriel-Ulmer duality can be generalized, where instead of being constrained to limits of diagrams of finite size, one considers theories involving limit diagrams of infinite size (but still bounded in size by a cardinal). The theory of locally presentable categories explores further such dualities, but now reaching into the infinitary realm.</p>\n</blockquote>\n<p>Is there somewhere an overview of all these results?</p>",
        "id": 268287487,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1642434635
    },
    {
        "content": "<p>Regarding the last question, these results are subsumed by Centazzo–Vitale's <a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.3207&amp;rep=rep1&amp;type=pdf\">A duality relative to a limit doctrine</a> and, more recently, the paper <a href=\"https://arxiv.org/abs/1804.08710\">Accessibility and presentability in 2-categories</a> by <span class=\"user-mention\" data-user-id=\"277318\">@Ivan Di Liberti</span> and <span class=\"user-mention\" data-user-id=\"282822\">@fosco</span>.</p>",
        "id": 268298009,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1642440966
    },
    {
        "content": "<p>Thanks, but are you sure they subsume Makkai duality? Anyway, I'd be more interested in a comprehensive list of concrete dualities than a big general theorem.</p>",
        "id": 268305127,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1642445943
    },
    {
        "content": "<p>Sorry, I meant to say that it subsumes Gabriel–Ulmer and Adámek–Lawvere–Rosický duality. I'm not sure whether Makkai duality fits into a more general framework that is in the literature.</p>",
        "id": 268314085,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1642452602
    }
]