[
    {
        "content": "<p>Hello there. I was wondering if it's possible to simplify the article given here <a href=\"https://ncatlab.org/nlab/show/free+cartesian+category\">https://ncatlab.org/nlab/show/free+cartesian+category</a>. The article seems to explain everything in terms of the free coproduct cocompletion to start with, then dives into some 2-categorical business. Would it be significantly more complicated to just write out the hom structure of the free cartesian category directly?</p>",
        "id": 252054233,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1630822692
    },
    {
        "content": "<p>It's totally possible to do it directly. If you know a bit of formal logic then you basically already know the construction: morphisms in the free cartesian category are (certain equivalence classes of) proofs in a logic that has \"and\" as its only connective. I think this might be what section 3 is trying to say...</p>",
        "id": 252064895,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1630835471
    },
    {
        "content": "<p>Looking at the history page for this article, yep, it's another well thought out article by Todd Trimble. It seems that so many of the good nlab pages are the ones that Todd wrote, or mainly wrote.</p>",
        "id": 252075639,
        "sender_full_name": "Simon Burton",
        "timestamp": 1630847220
    },
    {
        "content": "<p>It's absolutely fundamental that the category P(C) of presheaves on a category C is what you get by freely cocompleting C.</p>",
        "id": 252088152,
        "sender_full_name": "John Baez",
        "timestamp": 1630860995
    },
    {
        "content": "<p>So, it's very natural to want to describe other cocompletions of C, where you freely throw in just <em>some</em> colimits, as subcategories of P(C).</p>",
        "id": 252088188,
        "sender_full_name": "John Baez",
        "timestamp": 1630861036
    },
    {
        "content": "<p>For example, if you want to freely throw in just coproducts, you take the full subcategory of P(C) where the objects are just coproducts of representable presheaves.   (Remember, by Yoneda the representables give you a copy of C sitting inside P(C).)</p>",
        "id": 252088284,
        "sender_full_name": "John Baez",
        "timestamp": 1630861137
    },
    {
        "content": "<p>Or if you want to freely throw in <em>products</em>, you just twist this idea around using \"op\": you take the  full subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msup><mi>C</mi><mtext>op</mtext></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(C^{\\textrm{op}})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord textrm mtight\">op</span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where the objects are just coproducts of representable presheaves, and then take the opposite of that!</p>",
        "id": 252088424,
        "sender_full_name": "John Baez",
        "timestamp": 1630861227
    },
    {
        "content": "<p>But yes, there's another way to take C and freely throw in products.   I find it less stressful to think about freely throwing in <em>finite</em> products.   Then you build a category where the objects are finite lists of objects in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, and morphisms are \"the obvious things\".</p>",
        "id": 252088551,
        "sender_full_name": "John Baez",
        "timestamp": 1630861355
    },
    {
        "content": "<p>It's a wee bit easier for the free symmetric monoidal category on C.   Here objects are finite lists of objects in C, and a morphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(c_1, \\dots, c_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>c</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>c</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(c&#x27;_1, \\dots, c&#x27;_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a permutation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>∈</mo><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma \\in S_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> together with morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>:</mo><msub><mi>c</mi><mi>i</mi></msub><mo>→</mo><msubsup><mi>c</mi><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">f_i : c_i \\to c&#x27;_{\\sigma(i)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.248892em;vertical-align:-0.49699999999999994em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.378em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49699999999999994em;\"><span></span></span></span></span></span></span></span></span></span>.  </p>\n<p>(Don't sue me if that last <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> should be a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>σ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\sigma^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>; you can just draw the string diagrams and see what works.)</p>",
        "id": 252089566,
        "sender_full_name": "John Baez",
        "timestamp": 1630862461
    },
    {
        "content": "<p>For the free category with finite products on C, you need to use functions instead of just permutations, and you need to get the functions going the right way, which I guess is backwards.</p>",
        "id": 252089698,
        "sender_full_name": "John Baez",
        "timestamp": 1630862635
    },
    {
        "content": "<p>For example: the free category with finite coproducts on the terminal category is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{FinSet}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">FinSet</span></span></span></span></span>, so here the functions go forwards.</p>\n<p>The free category with finite products on the terminal category is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{FinSet}^{\\rm op}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.737622em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">FinSet</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.737622em;\"><span style=\"top:-3.1362300000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span></span></span></span></span></span></span></span>, so here the functions go backwards.</p>",
        "id": 252089784,
        "sender_full_name": "John Baez",
        "timestamp": 1630862714
    },
    {
        "content": "<p>In these examples the morphisms in our original category C are trivial: there's just the identity morphism.   In general you need to \"label\" the functions with morphisms in C.</p>",
        "id": 252089801,
        "sender_full_name": "John Baez",
        "timestamp": 1630862739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> incredible, thank you so much. the correspondence between {bijections, \"forward\", \"backward\" functions} and the free {symmetric monoidal, cocartesian, cartesian} categories made this so much clearer for me</p>",
        "id": 252212510,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1630954962
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 252213033,
        "sender_full_name": "John Baez",
        "timestamp": 1630955343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/free.20cartesian.20category.20for.20dummies/near/252088152\">said</a>:</p>\n<blockquote>\n<p>It's absolutely fundamental that the category P(C) of presheaves on a category C is what you get by freely cocompleting C.</p>\n</blockquote>\n<p>Very interesting. Can we extend this picture to the case where C is equipped with a Grothendieck topology and we consider the category of sheaves? Is there a way to modify \"free cocompletion\" in a way that accounts for this?</p>\n<p>If F : C -&gt; A is some diagram from a small cat C into a cocomplete  category A, and C has a topology J, then it should be easy to write down a condition on A such that the 'nerve' functor  which sends a to Hom(F(-),a) is valued in the subcategory of sheaves. For each a, and for each covering sieve {s_i} on c, any family of maps f_i : dom(s_i) -&gt; a satisfying some coherence conditions should glue together into a unique map f : c -&gt; a. But I'm not sure where, if at all, the topology would play in the associated 'realization' functor, I assume we would just restrict the domain to sheaves.</p>\n<p>For the sake of argument, let's assume the topology is subcanonical.</p>",
        "id": 252272506,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1631005189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/free.20cartesian.20category.20for.20dummies/near/252272506\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/free.20cartesian.20category.20for.20dummies/near/252088152\">said</a>:</p>\n<blockquote>\n<p>It's absolutely fundamental that the category P(C) of presheaves on a category C is what you get by freely cocompleting C.</p>\n</blockquote>\n<p>Very interesting. Can we extend this picture to the case where C is equipped with a Grothendieck topology and we consider the category of sheaves? Is there a way to modify \"free cocompletion\" in a way that accounts for this?</p>\n</blockquote>\n<p>Yes: I believe that the composite of the Yoneda embedding with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>-sheafification functor is the universal functor sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>-covering sieves to universal effective epimorphic sieves (i.e. to colimit cocones which are stable under pullbacks); the subcanonicity requirement isn't needed.</p>",
        "id": 252273133,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1631005513
    },
    {
        "content": "<p>I didn't really understand the remainder of your comment, though.</p>",
        "id": 252273196,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1631005553
    },
    {
        "content": "<p>Ok, cool. I guess that answers my question, can you provide any intuition for the 'effectiveness' condition? I'm not sure how pullbacks arise here, seems like a bit of a surprise to me. And sure, sounds like in the subcanonical case we would just be able to suppress reference to sheafification.</p>",
        "id": 252273852,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1631005903
    },
    {
        "content": "<p>to clarify the rest of the comment, in the usual case of presheaves, for any functor F : C -&gt; A for C small and A cocomplete, there is a unique cocontinuous functor F' : \\hat[C} -&gt; A which I call the \"realization\" associated to F, and F' has a right adjoint, the \"nerve\"  A -&gt; \\hat{C} sending a to the presheaf Hom(F(-),c). i was speculating on how these two were both altered when the topology was added</p>",
        "id": 252274313,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1631006124
    },
    {
        "content": "<p>Any functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>C</mi><mo>→</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">F: C \\rightarrow E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> into a cocomplete category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> which sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>-covering sieves to universal effective epimorphic sieves factors uniquely through the restricted Yoneda embedding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mtext>Sh</mtext><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>J</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C \\rightarrow \\text{Sh}(C, J)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Sh</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 252313687,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631024809
    },
    {
        "content": "<p>This is just the definition of what <span class=\"user-mention\" data-user-id=\"277473\">@Morgan Rogers (he/him)</span>  said above.</p>",
        "id": 252313746,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631024829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/free.20cartesian.20category.20for.20dummies/near/252273852\">said</a>:</p>\n<blockquote>\n<p>Ok, cool. I guess that answers my question, can you provide any intuition for the 'effectiveness' condition? I'm not sure how pullbacks arise here, seems like a bit of a surprise to me. And sure, sounds like in the subcanonical case we would just be able to suppress reference to sheafification.</p>\n</blockquote>\n<p>Colimits are universal/stable under pullback in any Grothendieck topos, but thinking about it there is no reason that this has to be the case in the codomain category of the functor being universally factored, so I'll roll that back. We only need to require that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>-covering sieves become colimit cocones. Although what <span class=\"user-mention\" data-user-id=\"341237\">@Fawzi Hreiki</span> is still certainly true as a special case.</p>",
        "id": 252320541,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1631027291
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is an elementary topos and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> is a topology on its subobject classifier, then the sheafification functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><msub><mtext>Sh</mtext><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E \\rightarrow \\text{Sh}_j(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Sh</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> is the universal functor out of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> localising all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>-local isomorphisms (I believe).</p>",
        "id": 252322026,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631028000
    },
    {
        "content": "<p>Combining this with the free cocompletion universal property of presheaf categories gives the universal property of sheaf categories.</p>",
        "id": 252322160,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1631028054
    },
    {
        "content": "<p>Sorry for the somewhat tangential question, but am I understanding correctly that the notion of \"multigraph\" referred to in the M-span business towards the end of <a href=\"https://ncatlab.org/nlab/show/free+cartesian+category\">https://ncatlab.org/nlab/show/free+cartesian+category</a> is _not_ referring to the multigraphs of e.g. <a href=\"https://en.wikipedia.org/wiki/Multigraph\">https://en.wikipedia.org/wiki/Multigraph</a>, but instead to what are described <a href=\"https://en.wikipedia.org/wiki/Hypergraph\">here</a> as \"hypergraphs\"?</p>",
        "id": 252783164,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1631279061
    },
    {
        "content": "<p>By <em>multigraph</em>, they mean the analogue of a <a href=\"https://ncatlab.org/nlab/show/quiver\">quiver</a> for a multicategory, i.e. a directed multigraph where each edge can have multiple inputs.</p>",
        "id": 252783477,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1631279204
    },
    {
        "content": "<p>This is like a \"multicategory without composition\".</p>",
        "id": 252783522,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1631279225
    },
    {
        "content": "<p>It's not quite the same as a hypergraph, which doesn't specify source/targets. The terminology on that page is confusing, though; I think it ought to be changed.</p>",
        "id": 252783872,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1631279375
    },
    {
        "content": "<p>Ah yes, I admit I didn't actually read the Wikipedia definition, I just vaguely misremembered it to be the same as the one in <a href=\"https://www.sciencedirect.com/science/article/pii/0166218X9390045P\">https://www.sciencedirect.com/science/article/pii/0166218X9390045P</a></p>",
        "id": 252784784,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1631279792
    },
    {
        "content": "<p>(which describes \"directed hypergraphs\" aka multicategories without composition)</p>",
        "id": 252784935,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1631279874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276050\">Asad Saeeduddin</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/free.20cartesian.20category.20for.20dummies/near/252784935\">said</a>:</p>\n<blockquote>\n<p>(which describes \"directed hypergraphs\" aka multicategories without composition)</p>\n</blockquote>\n<p>The directed hypergraphs of that paper appear to be more like \"polycategories without composition\", i.e. they permit multiple targets.</p>",
        "id": 252785326,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1631280023
    },
    {
        "content": "<p>One useful characterization of cartesian categories is as \"symmetric monoidal categories with copying and discarding\" (see <a href=\"https://ncatlab.org/nlab/show/cartesian+monoidal+category#properties\">https://ncatlab.org/nlab/show/cartesian+monoidal+category#properties</a>), and so that makes it possible to think of free cartesian categories on a signature as a category of string diagrams. Perhaps it would be useful to describe that in this \"free cartesian category\" page?</p>",
        "id": 253736399,
        "sender_full_name": "Antonin Delpeuch",
        "timestamp": 1631882956
    }
]