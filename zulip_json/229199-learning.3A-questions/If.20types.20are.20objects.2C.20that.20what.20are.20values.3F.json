[
    {
        "content": "<p>Hey everyone. I've been reading Bartoz \"Category Theory for Programmers\" and I've been trying to code things in Julia. So far it has been a truly great experience, since Julia is more \"grounded\" than Haskell, and it has enabled me to truly understand the concepts, since I cannot just copy the code.<br>\nYet, this has led me to some (weird) questions. One of the is the following. In programming, one thinks of types as the objects, and functions as morphisms. Now, to implement a functor we implement a parametric struct, and an <code>fmap</code> that tells how to map a function from type <code>T-&gt;M</code> to a type <code>F T -&gt; FM</code>. Here is an example in Julia:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">F</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">F</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"c\"># Note that from fmap we can do</span><span class=\"w\"></span>\n<span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Great, so in the example above, <code>F(T)</code> acts on object <code>T</code> and returns an object of type <code>F{T}</code>. Also, we've overloaded <code>F</code><br>\nso that it now can take a function as input and returns a new function <code>Ff</code> which one can check that satisfies the definition of a functor.</p>\n<p>All good. But there is one caveat. I've actually defined more than a simple functor. I've also defined how to select a \"value\" of type <code>F{T}</code>.<br>\nIf I do <code>F(1,2)</code> I get a value of type <code>F{Int}</code>... Now, what is going on here in terms of Category Theory? How am I to interpret this <code>F(1,2)</code>, which actually is an \"element\" of <code>F{Int}</code>.</p>\n<p>My guess is that this <code>F(1,2)</code> is something like a natural transformation ... Is it? And if so, between which functors? How should one interpret it?</p>",
        "id": 299441090,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1663511348
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"498398\">@Davi Sales Barreira</span></p>\n<p>In this kind of a story, individual elements are usually represented as maps out of the terminal object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊤</mi></mrow><annotation encoding=\"application/x-tex\">\\top</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊤</span></span></span></span>. In this case, your constructor is a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"monospace\">I</mi><mi mathvariant=\"monospace\">n</mi><mi mathvariant=\"monospace\">t</mi><mo>×</mo><mi mathvariant=\"monospace\">I</mi><mi mathvariant=\"monospace\">n</mi><mi mathvariant=\"monospace\">t</mi><mo>→</mo><mi mathvariant=\"monospace\">F</mi><mo stretchy=\"false\">{</mo><mi mathvariant=\"monospace\">I</mi><mi mathvariant=\"monospace\">n</mi><mi mathvariant=\"monospace\">t</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\tt Int\\times Int\\to F\\{Int\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">Int</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathtt\">Int</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathtt\">F</span><span class=\"mopen\">{</span><span class=\"mord mathtt\">Int</span><span class=\"mclose\">}</span></span></span></span></span>. The pair corresponds to a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>:</mo><mi mathvariant=\"normal\">⊤</mi><mo>→</mo><mrow><mi mathvariant=\"monospace\">I</mi><mi mathvariant=\"monospace\">n</mi><mi mathvariant=\"monospace\">t</mi><mo>×</mo><mi mathvariant=\"monospace\">I</mi><mi mathvariant=\"monospace\">n</mi><mi mathvariant=\"monospace\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">(1,2): \\top \\to \\tt Int \\times Int</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">Int</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathtt\">Int</span></span></span></span></span>, and the composite is your element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"monospace\">F</mi><mo stretchy=\"false\">(</mo><mn mathvariant=\"monospace\">1</mn><mo separator=\"true\">,</mo><mn mathvariant=\"monospace\">2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\tt F(1,2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">F</span><span class=\"mopen\">(</span><span class=\"mord mathtt\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathtt\">2</span><span class=\"mclose\">)</span></span></span></span></span>.</p>\n<p>For a natural transformation, you need to provide an arrow for <em>every</em> type, but here you've just got one for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"monospace\">I</mi><mi mathvariant=\"monospace\">n</mi><mi mathvariant=\"monospace\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\tt Int</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6111em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">Int</span></span></span></span></span>. A typical example would be something like the \"diagonal\" function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"monospace\">t</mi><mo>:</mo><mo>:</mo><mi mathvariant=\"monospace\">T</mi><mo>↦</mo><mi mathvariant=\"monospace\">F</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"monospace\">t</mi><mo separator=\"true\">,</mo><mi mathvariant=\"monospace\">t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\tt t::T\\mapsto F(t,t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">::</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathtt\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathtt\">F</span><span class=\"mopen\">(</span><span class=\"mord mathtt\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathtt\">t</span><span class=\"mclose\">)</span></span></span></span></span>, which makes sense for any type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"monospace\">T</mi></mrow><annotation encoding=\"application/x-tex\">\\tt T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6111em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">T</span></span></span></span></span>. In Julia, you would implement this using a <code>where</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Note that sometimes the <code>where</code> statement can be implicit in the type arguments, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">proj1</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">proj2</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 299462222,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1663524423
    },
    {
        "content": "<p>Thanks for the answer <span class=\"user-mention\" data-user-id=\"278008\">@Spencer Breiner</span> ! when you say that  the composite is my element <code>F(1,2)</code>, what do you mean?</p>",
        "id": 299479571,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1663539027
    },
    {
        "content": "<p>Just so I see if I understood. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">T</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When we created such struct, Julia implicitly created a \"value\" constructor, i.e. <br>\na function <code>T(a::Tuple{Int,Int})</code> that returns values of type <code>T</code>.<br>\nSince a value <code>a::Tuple{Int,Int}</code> is just a function <code>a(x::Terminal)::Tuple{Int,Int}</code>,<br>\nthen <code>T(a)</code> is actually a function composition <code>T ∘ a</code> in the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">T</mi><mi mathvariant=\"bold\">y</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">s</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Types}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8805em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Types</span></span></span></span></span>.</p>\n<p>Thus, we are able to talk about <code>T(1,2)</code> as a morphism (function), without requiring to talk<br>\nabout elements of sets.</p>\n<p>Is this correct?</p>",
        "id": 299480412,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1663540020
    },
    {
        "content": "<p>That's it. There are subtleties, like the distinction between a value <code>x::X</code> and a function <code>x()</code> that returns an X, but that's the basic idea</p>",
        "id": 299483469,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1663543596
    }
]