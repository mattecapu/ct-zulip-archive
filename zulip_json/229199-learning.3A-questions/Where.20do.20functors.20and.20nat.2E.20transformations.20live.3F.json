[
    {
        "content": "<p>I’m relatively new to category theory, so please be gentle! <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>\n<p>As I understand it, objects and morphisms exist within a category. Since functors map between categories, they themselves must reside in another (higher?) category where categories are the objects and functors are the morphisms. This leads to the question: where do natural transformations reside, since they are maps between functors?</p>\n<ol>\n<li>\n<p>Do they perhaps exist in yet another category, where functors are the objects and natural transformations are the morphisms?</p>\n</li>\n<li>\n<p>Or do they belong to a 2-category (which I recently learned about)?</p>\n</li>\n</ol>\n<p>On a related note, are there examples of 2-morphisms in a 2-category that are not natural transformations (assuming the second option above is correct)?</p>",
        "id": 495808904,
        "sender_full_name": "Yuri",
        "timestamp": 1737760815
    },
    {
        "content": "<p>Natural transformations are the 2-morhpisms in the 2-category <a href=\"https://ncatlab.org/nlab/show/Cat\">[[Cat]]</a>.</p>\n<blockquote>\n<p>Are there examples of 2-morphisms in a 2-category that are not natural transformations (assuming the second option above is correct)?</p>\n</blockquote>\n<p>Yes, there are many examples of 2-categories.  Here's one: there's a 2-category with one object,  sets as 1-morphisms, with cartesian product of sets as composition of 1-morphisms, and functions between sets as 2-morphisms.</p>",
        "id": 495811339,
        "sender_full_name": "John Baez",
        "timestamp": 1737762451
    },
    {
        "content": "<p>It's worth commenting that the first option is <em>also</em> correct. Functor categories are important, and you'll likely meet special cases of these when you learn about presheaves.</p>\n<p>The connection between these is that, just as in a 1-category C every pair of objects x,y has a <em>set</em> of morphisms between them C(x,y), in a 2-category each pair of objects has a <em>category</em> of morphisms between them.</p>",
        "id": 496007163,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1737929929
    },
    {
        "content": "<p>let's maybe roll back a bit, what do you mean by <em>must</em> in </p>\n<p><span class=\"user-mention silent\" data-user-id=\"312586\">Yuri</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/Where.20do.20functors.20and.20nat.2E.20transformations.20live.3F/near/495808904\">said</a>:</p>\n<blockquote>\n<p>they themselves must reside in another (higher?) category</p>\n</blockquote>\n<p>? do you mean “requirement” or rather that you expect it to be the case ?</p>",
        "id": 496126506,
        "sender_full_name": "Josselin Poiret",
        "timestamp": 1737985715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284453\">Josselin Poiret</span> <a href=\"#narrow/channel/229199-learning.3A-questions/topic/Where.20do.20functors.20and.20nat.2E.20transformations.20live.3F/near/496126506\">said</a>:</p>\n<blockquote>\n<p>let's maybe roll back a bit, what do you mean by <em>must</em> in <br>\n...<br>\n? do you mean “requirement” or rather that you expect it to be the case ?</p>\n</blockquote>\n<p>I rather expect it (intuitively) to be the case. If a functor maps from a category to another, it may well not be part of domain category nor the codomain category but one that includes both?</p>",
        "id": 496468160,
        "sender_full_name": "Yuri",
        "timestamp": 1738124364
    },
    {
        "content": "<p>Yes, a functor is a morphism in the category <a href=\"https://ncatlab.org/nlab/show/Cat\">[[Cat]]</a>.</p>",
        "id": 496600141,
        "sender_full_name": "John Baez",
        "timestamp": 1738171447
    },
    {
        "content": "<p>It sounds like you assume \"everything is in some category\", but that's not the case.</p>\n<p>If you have a collection of objects, for each pair of objects a collection of morphisms, an associative partial operation defined on composable morphisms, and for each object an identity morphism that acts as a unit, then you have a category. But it's not the case that in category theory, every concept has to be located in some category. A category is an axiomatizable structure, like a group. We don't need to say, \"in group theory, a group has a set and an operation. But there are also group homomorphisms; what group are they in?\"</p>",
        "id": 496616628,
        "sender_full_name": "Julius Hamilton",
        "timestamp": 1738174793
    },
    {
        "content": "<p>Yes, I guess coming from a programming background I expect all things to have a place so that they can be uniquely identified and referenced.</p>",
        "id": 496643022,
        "sender_full_name": "Yuri",
        "timestamp": 1738184708
    },
    {
        "content": "<p>all things will be defined in the \"meta theory\" one is working in.  So if one is doing category theory in zfc (or type theory), then all things will be definable in zfc (or type theory), but not all things will be a morphism in a category.  Sometimes  failure to be a morphism/object happens because of \"size issues\" - the category of categories cannot be an object of itself, and sometimes one postulates axioms to make this be so ('let every set be an element of another set called a Grothendieck universe').  And sometimes, extra structure can indeed be placed on a collection of homomorphisms (a natural transformation is a morphism in a functor category, for example)</p>",
        "id": 496646120,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1738186161
    },
    {
        "content": "<p>This “meta theory” was the bigger picture behind my specific question about where natural transformations fit in category theory. I’m trying to understand if category theory (CT) has its own basic framework that can describe itself. This idea comes from my experience with Unified Modeling Language (UML) and the Meta Object Facility (MOF), which is a tool that defines and organizes UML models. I want to know if category theory has something similar that lets it describe and manage its own structures and ideas, just like MOF does for UML. Basically, I’m looking into whether CT has a foundational layer that allows it to model and refer to its own categorical concepts internally, even though this self-referential aspect might lead to some inconsistencies.</p>",
        "id": 496671933,
        "sender_full_name": "Yuri",
        "timestamp": 1738198074
    },
    {
        "content": "<p>After learning a bit about functorial semantics from Lawvere, I was wondering if it could serve as a mechanism for layering different meta-levels within category theory like in MOF? However, I might be approaching this incorrectly ...</p>",
        "id": 496672493,
        "sender_full_name": "Yuri",
        "timestamp": 1738198396
    },
    {
        "content": "<p>Certainly one can define a 'category object' in any category with enough pullbacks, with a category object in Set being a normal category.  Similarly, one can define a 'group object' etc.</p>",
        "id": 496673070,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1738198754
    },
    {
        "content": "<p>I think these resources could help:</p>\n<p><a href=\"https://arxiv.org/abs/2210.08663\">A Formal Logic for Formal Category Theory</a></p>\n<p><a href=\"https://ncatlab.org/nlab/show/formal%20category%20theory\">[[formal category theory]]</a></p>\n<p><a href=\"https://ncatlab.org/nlab/show/category%20theory%20and%20foundations\">[[category theory and foundations]]</a></p>",
        "id": 496776338,
        "sender_full_name": "Julius Hamilton",
        "timestamp": 1738243639
    },
    {
        "content": "<blockquote>\n<p>This “meta theory” was the bigger picture behind my specific question about where natural transformations fit in category theory. I’m trying to understand if category theory (CT) has its own basic framework that can describe itself. This idea comes from my experience with Unified Modeling Language (UML) and the Meta Object Facility (MOF), which is a tool that defines and organizes UML models. I want to know if category theory has something similar that lets it describe and manage its own structures and ideas, just like MOF does for UML. Basically, I’m looking into whether CT has a foundational layer that allows it to model and refer to its own categorical concepts internally, even though this self-referential aspect might lead to some inconsistencies.</p>\n</blockquote>\n<p>It sounds like you should study <a href=\"https://ncatlab.org/nlab/show/model%20theory\">[[model theory]]</a>.</p>",
        "id": 496778730,
        "sender_full_name": "Julius Hamilton",
        "timestamp": 1738244356
    },
    {
        "content": "<p>There is a lot to learn here and it will definitely take some time!</p>\n<p>I appreciate all the inputs I got here!</p>",
        "id": 496850927,
        "sender_full_name": "Yuri",
        "timestamp": 1738264765
    },
    {
        "content": "<p>I don't think you need to study model theory if you're mainly interested in \"where do functors and natural transformations live\".  I think you mainly need to study the 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Cat</span></span></span></span></span>.  That's the 2-category where</p>\n<ul>\n<li>objects are categories</li>\n<li>morphisms are functors</li>\n<li>2-morphisms are natural transformations.</li>\n</ul>\n<p>That's where functors and natural transformations live!</p>",
        "id": 496872663,
        "sender_full_name": "John Baez",
        "timestamp": 1738272813
    }
]