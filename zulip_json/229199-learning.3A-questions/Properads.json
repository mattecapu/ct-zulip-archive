[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276679\">@Jonathan Beardsley</span> or anyone else, can you tell me what a properad is?</p>",
        "id": 191795328,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585162696
    },
    {
        "content": "<p>Sure, so let's think about one way to define an operad: as a functor from a category of trees to the category of sets (or spaces, if you want topological operads or something)</p>",
        "id": 191795458,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162761
    },
    {
        "content": "<p>And by tree here, I mean a rooted tree.</p>",
        "id": 191795516,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162795
    },
    {
        "content": "<p>Like this: Y</p>",
        "id": 191795576,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162806
    },
    {
        "content": "<p>So one \"downward root\" and then some collection of leaves.</p>",
        "id": 191795659,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162841
    },
    {
        "content": "<p>Let's see... to actually give this in any reasonable detail I'd have to probably think/read for a little bit...</p>",
        "id": 191795750,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162885
    },
    {
        "content": "<p>I'd also have to tell you about the morphisms in the category of trees.</p>",
        "id": 191795876,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162931
    },
    {
        "content": "<p>I guess one important thing to know is that the category of trees actually extends the classical simplex category $\\Delta$</p>",
        "id": 191795952,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162965
    },
    {
        "content": "<p>Hm, that didn't work.</p>",
        "id": 191795959,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162969
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span></p>",
        "id": 191795971,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585162974
    },
    {
        "content": "<p>Where we can think of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span> as being the category of linear trees.</p>",
        "id": 191796040,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163007
    },
    {
        "content": "<p>There are a lot of morphisms between the trees, but they're generated by a nice collection of morphisms, just like you have with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span></p>",
        "id": 191796143,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163046
    },
    {
        "content": "<p>Basically, you can \"contract a branch\" and you can \"insert a degenerate node\" into a branch.</p>",
        "id": 191796188,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163070
    },
    {
        "content": "<p>(the only place I know that this stuff is written down is in Moerdijk's stuff on dendroidal sets)</p>",
        "id": 191796484,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163186
    },
    {
        "content": "<p>And so if we call this category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> then an operad is a presheaf on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> satisfying certain conditions.</p>",
        "id": 191796606,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163256
    },
    {
        "content": "<p>Reading along as I make a salad <span aria-label=\"salad\" class=\"emoji emoji-1f957\" role=\"img\" title=\"salad\">:salad:</span></p>",
        "id": 191796696,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585163286
    },
    {
        "content": "<p>Haha, I think you're also reading a (word) salad.</p>",
        "id": 191796756,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163307
    },
    {
        "content": "<p>Are you familiar with this way of describing operads?</p>",
        "id": 191796793,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163326
    },
    {
        "content": "<p>Like, basically, your presheaf takes the one-vertex tree with n leaves, call it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, to your set of n-ary operations.</p>",
        "id": 191796865,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163370
    },
    {
        "content": "<p>Not exactly, but I'm liking it so far.</p>",
        "id": 191796897,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585163391
    },
    {
        "content": "<p>But then you have to know what to do with all the other trees, and the maps between them.</p>",
        "id": 191796961,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163407
    },
    {
        "content": "<p>But so let's take a simple example.</p>",
        "id": 191797026,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163438
    },
    {
        "content": "<p>Let's say I've got the binary tree Y, and then I've got another tree which is the binary tree Y with its root stuck into its top right leaf</p>",
        "id": 191797104,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163484
    },
    {
        "content": "<p>I guess I should say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>=</mo><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">Y=T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 191797148,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163509
    },
    {
        "content": "<p>And so then I have another tree which looks like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> plugged in to itself. Let's call it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub><msub><mo>∘</mo><mn>2</mn></msub><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_2\\circ_2 T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">∘</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> maybe for obvious reasons.</p>",
        "id": 191797276,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163573
    },
    {
        "content": "<p>Well it's hard to say without drawing a picture, but by \"contracting\" the branch on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub><msub><mo>∘</mo><mn>2</mn></msub><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_2\\circ_2 T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">∘</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which was originally the root of the upper <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, we can create <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 191797343,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163616
    },
    {
        "content": "<p>This all makes sense. I think this formalizes the basic way I describe operads to people pictorially.</p>",
        "id": 191797476,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585163667
    },
    {
        "content": "<p>So, in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> there's this morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub><mo>→</mo><msub><mi>T</mi><mn>2</mn></msub><msub><mo>∘</mo><mn>2</mn></msub><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_3\\to T_2\\circ_2 T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">∘</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, which when we take a functor out of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Omega^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> turns into \"composition.\"</p>",
        "id": 191797524,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163696
    },
    {
        "content": "<p>I.e. the set of operations of \"shape\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub><mo>∘</mo><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_2\\circ T_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> needs to come equipped with some kind of map to the set of operations of shape <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 191797618,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163745
    },
    {
        "content": "<p>Sorry, my daughter just came in and started pushing buttons on my computer.</p>",
        "id": 191798090,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585163990
    },
    {
        "content": "<p>So right, maybe you can see how the above goes. There are \"face\" and \"degeneracy\" maps in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> and then you can talk about a \"dendroidal set\" or \"dendroidal object\" wherever you like.</p>",
        "id": 191798283,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164058
    },
    {
        "content": "<p>(it turns out that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> is a generalized Reedy category, so functors out of it into, e.g., Quillen model categories, have nice properties)</p>",
        "id": 191798383,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164095
    },
    {
        "content": "<p>Okay so anyway, the EXTREMELY brief description of properads is: do all of that again, but with graphs instead of trees.</p>",
        "id": 191798509,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164143
    },
    {
        "content": "<p>Now, you have to be careful about what you mean by \"graphs\" of course, just as we had to be careful about what we meant by \"trees.\"</p>",
        "id": 191798555,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164164
    },
    {
        "content": "<p>So the way that it extends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span> is that you can think of an finite ordinal as a line graph?</p>",
        "id": 191798556,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585164164
    },
    {
        "content": "<p>Ah right but we have to be careful I think.</p>",
        "id": 191798584,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164176
    },
    {
        "content": "<p>Let me see here.</p>",
        "id": 191798604,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164187
    },
    {
        "content": "<p>There's some subtlety here that I usually mess up.</p>",
        "id": 191798662,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164231
    },
    {
        "content": "<p>So in this framework, the \"branches\" are the \"colors\" I think, for instance if you wanted to do a colored operad.</p>",
        "id": 191798807,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164292
    },
    {
        "content": "<p>And the vertices of the trees are the \"operations\"</p>",
        "id": 191798869,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164325
    },
    {
        "content": "<p>So I think, for instance, we want to think of, in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span>, the object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> as the \"tree\" that looks like  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>⋅</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-\\cdot-</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span></p>",
        "id": 191799117,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164425
    },
    {
        "content": "<p>And <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> as the \"tree\" that looks like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span></p>",
        "id": 191799173,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164450
    },
    {
        "content": "<p>Now there are two injections of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> which become \"face maps\" in simplicial sets</p>",
        "id": 191799360,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164527
    },
    {
        "content": "<p>And in the context of simplicial sets we think of them as \"projecting down onto a face of the 1-simplex,\" i.e. telling us which of all the 0-simplices in a simplicial set \"belong\" to that particular 1-simplex.</p>",
        "id": 191799492,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164593
    },
    {
        "content": "<p>But here, we want to think of the morphism (in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Omega^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span>) as being something like \"the two ways to contract a branch to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>⋅</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-\\cdot -</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span>, if I'm recalling correctly.</p>",
        "id": 191799676,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164660
    },
    {
        "content": "<p>So there are sort of... ALMOST dual geometric interpretations</p>",
        "id": 191799731,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164685
    },
    {
        "content": "<p>As a tree, the face maps are contracting branches, as a simplicial set, they're projecting to a face.</p>",
        "id": 191799769,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164713
    },
    {
        "content": "<p>But so anyway, you can see in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> that there's something special about the trees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 191800120,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164848
    },
    {
        "content": "<p>And for something to actually be an operad, you need it to satisfy a sort of \"Segal condition.\" This corresponds to the fact that a functor out of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Δ</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Delta^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> satisfying the Segal condition is a monoid. I.e. it has a reasonable notion of \"composition.\"</p>",
        "id": 191800281,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585164929
    },
    {
        "content": "<p>In that case, the Segal condition says that the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[n]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span></span></span></span> needs to be the n-fold Cartesian product of the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 191800436,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165003
    },
    {
        "content": "<p>And then magically the face and degeneracy maps turn into the structure maps of a monoid.</p>",
        "id": 191800477,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165025
    },
    {
        "content": "<p>(this is, of course, assuming that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mo>∗</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">[0]=\\{\\ast\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∗</span><span class=\"mclose\">}</span></span></span></span>, without which you just get a category!)</p>",
        "id": 191800796,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165186
    },
    {
        "content": "<p>So yeah, maybe a better way to say this is that with the Segal condition, a simplicial set is a category.</p>",
        "id": 191800867,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165208
    },
    {
        "content": "<p>(and a Simplicial space is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-category)</p>",
        "id": 191800883,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165218
    },
    {
        "content": "<p>(and a category with one object is a monoid)</p>",
        "id": 191800914,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165234
    },
    {
        "content": "<p>But so now, okay, in that case, the object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> goes to the \"set of objects of the category.\"</p>",
        "id": 191800961,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165268
    },
    {
        "content": "<p>In the case that we're thinking of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> as being in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span>, we want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> to go to the \"set of colors of the operad.\"</p>",
        "id": 191801008,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165294
    },
    {
        "content": "<p>(or equivalently, the set of objects of the multicategory)</p>",
        "id": 191801026,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165302
    },
    {
        "content": "<p>And then you have a whole bunch of trees that can, in many different ways, \"contract their branches\" to end up just giving you a single branch, i.e. a single \"color.\"</p>",
        "id": 191801210,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165373
    },
    {
        "content": "<p>So given a tree, there are a whole bunch of \"face maps\" that tell me what its output and input colors are.</p>",
        "id": 191801248,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165397
    },
    {
        "content": "<p>And basically what the Segal  condition is doing here is saying that the image of some arbitrary tree needs to be able to be constructed by \"gluing together\" the basic trees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 191801455,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165486
    },
    {
        "content": "<p>And so then in the <strong>properad</strong> situation, we replace the trees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with the \"corollas\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{n,m}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, each of which looks like a single vertex with n inputs and m outputs.</p>",
        "id": 191801538,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165534
    },
    {
        "content": "<p>And these have the obvious \"edge contraction\" and \"vertex insertion\" maps.</p>",
        "id": 191801633,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165575
    },
    {
        "content": "<p>I know what a properad is</p>",
        "id": 191801698,
        "sender_full_name": "philip hackney",
        "timestamp": 1585165615
    },
    {
        "content": "<p>But, again, the functor out of our category of graphs has to take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{n,m}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> to the \"set of operations with n inputs and m outputs\" and then we have all kinds of \"composition\" things to do.</p>",
        "id": 191801722,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165624
    },
    {
        "content": "<p>Well yeah <span class=\"user-mention\" data-user-id=\"275951\">@philip hackney</span> is a FAR better resource for this stuff than I am.</p>",
        "id": 191801737,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165635
    },
    {
        "content": "<p>He literally wrote a book on properads.</p>",
        "id": 191801766,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165651
    },
    {
        "content": "<p>And all I'm really doing is regurgitating all the reading I did three years ago in preparation for going to Australia to talk to him and Marcy Robertson.</p>",
        "id": 191801819,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165682
    },
    {
        "content": "<p>haha I didn't jump in just to make jb feel self-conscious</p>",
        "id": 191801966,
        "sender_full_name": "philip hackney",
        "timestamp": 1585165743
    },
    {
        "content": "<p>It's okay. Also I have no idea if anyone is even reading anymore.</p>",
        "id": 191802027,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165771
    },
    {
        "content": "<p>And my \"work time\" is almost up now anyway. Gotta go be a dad. I was \"supposed\" to be grading a quiz. Whoops.</p>",
        "id": 191802076,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165795
    },
    {
        "content": "<p>I'll try to pop back in later on today to see if <span class=\"user-mention\" data-user-id=\"275914\">@Joe Moeller</span> came back</p>",
        "id": 191802204,
        "sender_full_name": "philip hackney",
        "timestamp": 1585165852
    },
    {
        "content": "<p>I'm certainly still reading :)</p>",
        "id": 191802212,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585165858
    },
    {
        "content": "<p>Oh! OKay well I'll come back a bit later  today when I have more time</p>",
        "id": 191802274,
        "sender_full_name": "philip hackney",
        "timestamp": 1585165902
    },
    {
        "content": "<p>I'm just butting into the conversation here, but can a properad be described as a special kind of dioperad, or are they not related like that?</p>",
        "id": 191802281,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585165905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> dioperads are a special kind of properad</p>",
        "id": 191802302,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165917
    },
    {
        "content": "<p>oh, is there a specific name for a coloured properad, analogous to a polycateory for a dioperad?</p>",
        "id": 191802409,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585165965
    },
    {
        "content": "<p>where, if I recall correctly, you can only \"compose by attaching two edges at a time\"</p>",
        "id": 191802446,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585165989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275951\">@philip hackney</span> Ah, please don't inconvenience yourself for my sake. I'm happy sucking up whatever knowledge falls off between you, Jonathan and Joe.</p>",
        "id": 191802456,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585165993
    },
    {
        "content": "<p>in a properad, you can attach any collection of outputs to any collection of inputs</p>",
        "id": 191802487,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166014
    },
    {
        "content": "<p>also, properads are generally always \"colored\"</p>",
        "id": 191802514,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275951\">@philip hackney</span> is there a special name for a properad with one color?</p>",
        "id": 191802585,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166044
    },
    {
        "content": "<p>so you've got \"operad = 1-colored multicategory\" and \"dioperad = 1-colored polycategory\" and then \"properad = properad\"</p>",
        "id": 191802679,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166095
    },
    {
        "content": "<p>I think.</p>",
        "id": 191802707,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166109
    },
    {
        "content": "<blockquote>\n<p>where, if I recall correctly, you can only \"compose by attaching two edges at a time\"</p>\n</blockquote>\n<p>oh, is this analogous to the situation where you can present operads in either a \"partial\" or \"full\" style?</p>",
        "id": 191802785,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585166154
    },
    {
        "content": "<p>I'm not sure.</p>",
        "id": 191802866,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166177
    },
    {
        "content": "<p>I think there are properads that are NOT dioperads.</p>",
        "id": 191802894,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166193
    },
    {
        "content": "<p>Like, basically you can attach one edge at a time in a dioperad, but I sort of think there are properads with composition operations that cannot be built up in this way</p>",
        "id": 191802951,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166222
    },
    {
        "content": "<blockquote>\n<p>\"properad = properad\"</p>\n</blockquote>\n<p>ah, it's sad if the naming convention isn't \"-ad\" = one-coloured</p>",
        "id": 191802989,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585166237
    },
    {
        "content": "<blockquote>\n<p>sort of think there are properads with composition operations that cannot be built up in this way</p>\n</blockquote>\n<p>oh, I'd be very interested to see an example</p>",
        "id": 191803046,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585166262
    },
    {
        "content": "<p>I was under the impression that the partial and full styles of operads were equivalent, at least</p>",
        "id": 191803073,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585166275
    },
    {
        "content": "<p>Yeah, I'm not 100% sure off the top of my head. Again, <span class=\"user-mention\" data-user-id=\"275951\">@philip hackney</span> really would be the guy to ask here.</p>",
        "id": 191803078,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585166278
    },
    {
        "content": "<p>(but that may not be the analogous situation anyway)</p>",
        "id": 191803131,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585166286
    },
    {
        "content": "<p>The Segal condition for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Δ</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Delta^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> is what I normally call \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Δ</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Delta^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> is the Lawvere theory for monoids.\"</p>",
        "id": 191805958,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585167674
    },
    {
        "content": "<p>I finished my salad, so now I'm back.</p>",
        "id": 191806346,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585167896
    },
    {
        "content": "<p>So I'm sorta confused what the difference between a properad and a prop is.</p>",
        "id": 191806693,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585168085
    },
    {
        "content": "<p>I think this distinction is especially important for me, because I actually construct my operads from symmetric monoidal categories, which happen to be props/colored props.</p>",
        "id": 191807820,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585168660
    },
    {
        "content": "<p>I've found conflicting information about the relationship: on the nLab it says that PROPs are more general than properads, but in the <em>Handbook of Algebra</em>, it says that every PROP is a properad</p>",
        "id": 191807840,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585168678
    },
    {
        "content": "<p>You gotta be careful about this \"more general\" business, because for example every Lawvere theory gives a prop, and every prop gives a Lawvere theory, but it's just an adjunction.</p>",
        "id": 191808158,
        "sender_full_name": "John Baez",
        "timestamp": 1585168851
    },
    {
        "content": "<p>what's the nonrepresentable version of a PROP?</p>",
        "id": 191808164,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585168855
    },
    {
        "content": "<p>I don't know.   Maybe a \"strict symmetric polycategory\"???</p>",
        "id": 191808217,
        "sender_full_name": "John Baez",
        "timestamp": 1585168889
    },
    {
        "content": "<p>I don't know if people have even defined symmetric polycategories yet, but they will someday if not today.</p>",
        "id": 191808305,
        "sender_full_name": "John Baez",
        "timestamp": 1585168932
    },
    {
        "content": "<p>polycategories only allow composition along single objects at a time, whereas we need something that allows multiple composition</p>",
        "id": 191808308,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585168934
    },
    {
        "content": "<p>Richard Garner defines symmetric polycategories in <a href=\"https://arxiv.org/abs/math/0606735\" title=\"https://arxiv.org/abs/math/0606735\">https://arxiv.org/abs/math/0606735</a></p>",
        "id": 191808358,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585168979
    },
    {
        "content": "<p>\"polycategories only allow composition along single objects at a time, whereas we need something that allows multiple composition\" - oh, okay.</p>",
        "id": 191808464,
        "sender_full_name": "John Baez",
        "timestamp": 1585169043
    },
    {
        "content": "<p>How about a \"properad\", then?  I'm trying to grok the elegant definition here:</p>\n<p><a href=\"https://ncatlab.org/nlab/show/properad\" title=\"https://ncatlab.org/nlab/show/properad\">https://ncatlab.org/nlab/show/properad</a></p>",
        "id": 191808518,
        "sender_full_name": "John Baez",
        "timestamp": 1585169082
    },
    {
        "content": "<p>yes, we've been struggling to decipher what it is <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 191808575,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585169120
    },
    {
        "content": "<p>Phil will straighten us out as soon as he returns. I wonder how far we can get before then though.</p>",
        "id": 191808628,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585169152
    },
    {
        "content": "<p>There is an alternative description of properads as algebras for a monad on the category of presheaves on elementary graphs. It's a Segal-condition-style nerve theorem just like the ones quoted above for operads.</p>",
        "id": 191809271,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585169506
    },
    {
        "content": "<p>Can you just tell me what a properad is in one sentence as if I were a five-year-old?   <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 191809457,
        "sender_full_name": "John Baez",
        "timestamp": 1585169584
    },
    {
        "content": "<p>It's a bunch of things with inputs and outputs, where you can glue together all (? some?) of the outputs of one thing with the inputs of the next.... something like that.</p>",
        "id": 191809588,
        "sender_full_name": "John Baez",
        "timestamp": 1585169649
    },
    {
        "content": "<p>It's an algebraic rule that allow you to contract acyclic connected graph configurations of operations to a single operation. Operations are many-in/many-out. Sorry, that was two sentences. Argh now we up to four sentences :-(</p>",
        "id": 191809728,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585169752
    },
    {
        "content": "<p>how does this differ from how you would describe a PROP in the same language?</p>",
        "id": 191809901,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585169833
    },
    {
        "content": "<p>Okay, I get it now.   So if I have an operation A with 2 inputs and 2 outputs, and an operation B with 2 inputs and 2 outputs, I <em>cannot</em>, in a properad, compose them by attaching <em>both</em> outputs of A to inputs of B.  Right, <span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span>?</p>",
        "id": 191809947,
        "sender_full_name": "John Baez",
        "timestamp": 1585169863
    },
    {
        "content": "<p>In a prop, you are also allowed to contract nonconnected (acyclic, directed) graphs.</p>",
        "id": 191809957,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585169869
    },
    {
        "content": "<p>....</p>",
        "id": 191810053,
        "sender_full_name": "John Baez",
        "timestamp": 1585169895
    },
    {
        "content": "<p>Also.... Wheeled properads?</p>",
        "id": 191810068,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585169901
    },
    {
        "content": "<p>How can I reply to a specific message?</p>",
        "id": 191810082,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585169906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span>: there's a drop-down menu if you hover over the right side of a message — and there's an option \"Quote and reply\"</p>",
        "id": 191810127,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585169935
    },
    {
        "content": "<p>The best you can do is click on it, at right, and quote it.</p>",
        "id": 191810128,
        "sender_full_name": "John Baez",
        "timestamp": 1585169936
    },
    {
        "content": "<p>\"Quote and reply\".</p>",
        "id": 191810153,
        "sender_full_name": "John Baez",
        "timestamp": 1585169948
    },
    {
        "content": "<p>I think in some ways we are still behind the technology of \"usenet\" discussions back in 1989, where we could have arbitrary discussion trees.</p>",
        "id": 191810225,
        "sender_full_name": "John Baez",
        "timestamp": 1585169988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191809947\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191809947\">said</a>:</p>\n<blockquote>\n<p>Okay, I get it now.   So if I have an operation A with 2 inputs and 2 outputs, and an operation B with 2 inputs and 2 outputs, I <em>cannot</em>, in a properad, compose them by attaching <em>both</em> outputs of A to inputs of B.  Right, <span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span>?</p>\n</blockquote>\n<p>Yes, you are allowed to connect those pairs of wires, because even if it's slightly loopy, it's not a directed loop. By acyclic, I meant 'no directed cycles'.</p>",
        "id": 191810475,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170097
    },
    {
        "content": "<p>Oh, wow.  Hmm.</p>",
        "id": 191810591,
        "sender_full_name": "John Baez",
        "timestamp": 1585170134
    },
    {
        "content": "<p>Oh, and props do let you do that. Right?</p>",
        "id": 191810610,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585170144
    },
    {
        "content": "<p>Just as you would with any symmetric monoidal category.</p>",
        "id": 191810638,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585170164
    },
    {
        "content": "<p>So Joachim's \"yes\" means \"you're wrong, Baez, you <em>can</em> do that\".</p>",
        "id": 191810653,
        "sender_full_name": "John Baez",
        "timestamp": 1585170172
    },
    {
        "content": "<p>oh whoops. So what's the difference then?</p>",
        "id": 191810716,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585170205
    },
    {
        "content": "<p>I feel young with all this technology.</p>",
        "id": 191810749,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170217
    },
    {
        "content": "<p>I think someone needs to make a chart of all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{20}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> different variations on these ideas.</p>",
        "id": 191810779,
        "sender_full_name": "John Baez",
        "timestamp": 1585170236
    },
    {
        "content": "<p>In a prop, you can take for example the disjoint union of seven (1,1) operations and contract the whole thing to a (7,7)-corolla.</p>",
        "id": 191810850,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170261
    },
    {
        "content": "<p>ahh</p>",
        "id": 191810875,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170278
    },
    {
        "content": "<p>And this is just \"tensoring the morphisms\", right?</p>",
        "id": 191810928,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585170312
    },
    {
        "content": "<p>so in a properad, you just have the notion of composition; but in a prop, you also have a notion of concatenation (given by functoriality of the tensor product)</p>",
        "id": 191810946,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170326
    },
    {
        "content": "<p>There is a nice survey by Markl.</p>",
        "id": 191810948,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275914\">Joe Moeller</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191810928\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191810928\">said</a>:</p>\n<blockquote>\n<p>And this is just \"tensoring the morphisms\", right?</p>\n</blockquote>\n<p>Right.</p>",
        "id": 191810971,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170340
    },
    {
        "content": "<p>A prop is just a strict symmetric monoidal category with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> as objects, so there's no mystery about <em>them</em>.</p>",
        "id": 191811070,
        "sender_full_name": "John Baez",
        "timestamp": 1585170385
    },
    {
        "content": "<p>Oh, this is making sense now. Right, this is precisely what you don't have in operads too. Should've known. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 191811076,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585170390
    },
    {
        "content": "<p>so is a (coloured) dioperad the same as a (coloured) properad?</p>",
        "id": 191811082,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170394
    },
    {
        "content": "<p>or is one the \"partial composition\" version of the other?</p>",
        "id": 191811111,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170409
    },
    {
        "content": "<p>or something else entirely?</p>",
        "id": 191811124,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170414
    },
    {
        "content": "<p>Dioperads are definitely not the same as properads!</p>",
        "id": 191811164,
        "sender_full_name": "John Baez",
        "timestamp": 1585170434
    },
    {
        "content": "<p>I want to establish how polycategories are different from coloured properads</p>",
        "id": 191811280,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170486
    },
    {
        "content": "<p>because they seem very similar to me at the moment</p>",
        "id": 191811291,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170495
    },
    {
        "content": "<p>(Actually I what I described should be called a graphical prop. It is not precisely the same thing as a prop in the symmetric-monoidal-category sense of Mac Lane. The difference was spotted only recently by Michael Batanin: the difference is that in a Mac Lane prop, the (0,0) operations form a<br>\ncommutative monoid, by the Eckmann-Hilton argument. In a graphical prop it can be any monoid.)</p>",
        "id": 191811377,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170554
    },
    {
        "content": "<p>In a dioperad you are only allowed to contract contractible graphs. That is, John's example is not allowed. I think this is the same thing as polycategory. (For me everything is always coloured.)</p>",
        "id": 191811527,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170644
    },
    {
        "content": "<p>Nathanael said that polycategories only let you attach one output to one input; Joachim just said that colored properads let you attach multiple outputs to multiple inputs.  So, they can't be the same.</p>",
        "id": 191811582,
        "sender_full_name": "John Baez",
        "timestamp": 1585170671
    },
    {
        "content": "<p>okay, so if this is the case, then dioperads are to properads what operads with partial composition are to operads with multiple composition</p>",
        "id": 191811725,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170744
    },
    {
        "content": "<p>I was under the impression that operads with partial and operads with multiple composition were equivalent</p>",
        "id": 191811787,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170778
    },
    {
        "content": "<p>Yes, they are.</p>",
        "id": 191811817,
        "sender_full_name": "John Baez",
        "timestamp": 1585170789
    },
    {
        "content": "<p>and so I would have imagined dioperads and properads to be similarly equivalent?</p>",
        "id": 191811829,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170794
    },
    {
        "content": "<p>Joachim explained how they're not, in response to my question.</p>",
        "id": 191811867,
        "sender_full_name": "John Baez",
        "timestamp": 1585170816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191811527\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191811527\">said</a>:</p>\n<blockquote>\n<p>contract contractible graphs</p>\n</blockquote>\n<p>OK, that sounded funny. By contractible graph I meant simply-connected geometric realisation.</p>",
        "id": 191811870,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170822
    },
    {
        "content": "<p>So now I have also been able to reply to myself. Now I can continue the conversation even when all you other go to bed.</p>",
        "id": 191811949,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585170855
    },
    {
        "content": "<blockquote>\n<p>Joachim explained how they're not, in response to my question.</p>\n</blockquote>\n<p>ah, of course!</p>",
        "id": 191812083,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170942
    },
    {
        "content": "<p>everything feels like it's fitting into place now — thank you for explaining, everyone!</p>",
        "id": 191812163,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585170976
    },
    {
        "content": "<p>to me, coloured properads seem more deserving of the name \"polycategory\" than coloured dioperads</p>",
        "id": 191812417,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585171121
    },
    {
        "content": "<p>Wheeled properads? You just allow yourself directed cycles (but still connected). Sounds easy, but that's really a can of worms :-( because of the nodeless loop. Philip and his friends wrote a whole book about it...</p>",
        "id": 191812919,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585171426
    },
    {
        "content": "<p>Sorry, that was not a proper attribution (I just mentioned Philip because he was around in this chat). I meant: Hackney-Robertson-Yau.</p>",
        "id": 191813063,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585171499
    },
    {
        "content": "<p>Yeah I'm the only one of us around in the chat. :-)</p>",
        "id": 191822787,
        "sender_full_name": "philip hackney",
        "timestamp": 1585178047
    },
    {
        "content": "<p>But since someone else who has written about properads appeared in the chat while I was gone, I'm not sure there's anything I should add.</p>",
        "id": 191823110,
        "sender_full_name": "philip hackney",
        "timestamp": 1585178300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> did you feel like you got a good understanding of why there where properads that could not be dioperads?</p>",
        "id": 191829388,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585183618
    },
    {
        "content": "<p>I wish someone would make a like... hierarchy</p>",
        "id": 191829400,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585183646
    },
    {
        "content": "<p>yes, <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> gave an example of a properad that was not a polycategory here: <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191809947\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191809947\">https://categorytheory.zulipchat.com/#narrow/stream/229199-basic-questions/topic/Properads/near/191809947</a></p>",
        "id": 191829495,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585183755
    },
    {
        "content": "<p>I think the hierarchy goes like this: coloured PROPs &gt; coloured properads &gt; polycategories &gt; multicompositional multicategories ~ partial-compositional multicategories &gt; categories</p>",
        "id": 191829573,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585183832
    },
    {
        "content": "<p>where <code>&gt;</code> means \"generalises\" and <code>~</code> means \"is equivalent to\"</p>",
        "id": 191829590,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585183854
    },
    {
        "content": "<p>(and then wheeled properads sound even more general than properads)</p>",
        "id": 191829699,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585183997
    },
    {
        "content": "<p>Right I'm actually wondering if wheeled properads are PROPS or not</p>",
        "id": 191829866,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184195
    },
    {
        "content": "<p>And then you've got modular (pr)operads and cyclic (pr)operads haha</p>",
        "id": 191829887,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184224
    },
    {
        "content": "<p>And then you can do everything but with ∞ in front of it</p>",
        "id": 191829899,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184238
    },
    {
        "content": "<p>it's easy to see how categorifying everything will affect the hierarchy</p>",
        "id": 191829931,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184279
    },
    {
        "content": "<p>I would be surprised if wheeled properads could be expressed as PROPs</p>",
        "id": 191829980,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184294
    },
    {
        "content": "<p>I would imagine they're two different generalisations</p>",
        "id": 191829996,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184304
    },
    {
        "content": "<p>Yeah I'm getting that feeling as well</p>",
        "id": 191830004,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184315
    },
    {
        "content": "<p>but I don't yet have an intuition for wheeled properads</p>",
        "id": 191830017,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184327
    },
    {
        "content": "<p>Maybe it's worth pointing out some examples of properads: bialgebras, Lie bialgebras are two that I can think of off the top my head.</p>",
        "id": 191830041,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184361
    },
    {
        "content": "<p>Maybe there's some notion of, like,  a Poisson bialgebra or something</p>",
        "id": 191830057,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184389
    },
    {
        "content": "<p>cyclic operads also seem like a different generalisation: you no longer have a strict divide between input and output</p>",
        "id": 191830062,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184399
    },
    {
        "content": "<p>so they don't seem like operads or dioperads</p>",
        "id": 191830129,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184419
    },
    {
        "content": "<p>Oh yeah cyclic and modular are going in a different direction completely</p>",
        "id": 191830131,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184421
    },
    {
        "content": "<p>(personally, I think many of these names are very misleading)</p>",
        "id": 191830155,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184444
    },
    {
        "content": "<p>I STILL don't really know wtf is going on with modular operads</p>",
        "id": 191830158,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184451
    },
    {
        "content": "<p>I hadn't come across modular operads before</p>",
        "id": 191830177,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184474
    },
    {
        "content": "<p>I've tried to read the Getzler paper introducing them a couple of times, never seriously, but I've never been able to grok it</p>",
        "id": 191830197,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184507
    },
    {
        "content": "<p>Oh and of course coöperads are an example of properads</p>",
        "id": 191830261,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184561
    },
    {
        "content": "<p>I like your use of the diaeresis <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 191830370,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184656
    },
    {
        "content": "<p>it would be really nice if all these examples could be captured in some general framework, like Cruttwell–Shulman's approach to multicategories</p>",
        "id": 191830381,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585184681
    },
    {
        "content": "<p>maybe. i suspect that would be a rather thankless task.</p>",
        "id": 191830397,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184716
    },
    {
        "content": "<p>there's also the possibility of messing around with the group acting on the inputs. so you've got non-symmetric operads and symmetric operads, but you can also have _braided_ operads, where the symmetries of the inputs are coming from the braid group</p>",
        "id": 191830487,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585184789
    },
    {
        "content": "<p>there's certainly an interesting question of what the right generalisation of input and output is</p>",
        "id": 191830741,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585185110
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/0907.2460.pdf\" title=\"https://arxiv.org/pdf/0907.2460.pdf\">https://arxiv.org/pdf/0907.2460.pdf</a> captures braided operads already</p>",
        "id": 191830811,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585185160
    },
    {
        "content": "<p>(and really anything that is \"some structured input\" and a single output)</p>",
        "id": 191830837,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585185185
    },
    {
        "content": "<p>a good person to ask about this could be Mike Shulman, who appears to be in the Zulip server</p>",
        "id": 191831168,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585185633
    },
    {
        "content": "<p>whoa mike's here, cool! also... whoa there are a LOT of people here!</p>",
        "id": 191831364,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585185901
    },
    {
        "content": "<p>It's a little weird stepping outside of the homotopy theory bubble and all of the sudden seeing all these people whose names I don't recognize.</p>",
        "id": 191831426,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585185970
    },
    {
        "content": "<blockquote>\n<p>I STILL don't really know wtf is going on with modular operads</p>\n</blockquote>\n<p>For those you have to be somewhat comfortable with Riemann surfaces (or maybe algebraic curves).  Are you?   I forget.</p>",
        "id": 191832323,
        "sender_full_name": "John Baez",
        "timestamp": 1585187304
    },
    {
        "content": "<p>Eh, somewhat. I've spent a little time with the Grothendieck-T<strong>*</strong>****r group.</p>",
        "id": 191832441,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585187426
    },
    {
        "content": "<p>I just think about spheres and tori and stuff.</p>",
        "id": 191832449,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585187441
    },
    {
        "content": "<p>And that seems to get me close enough.</p>",
        "id": 191832453,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585187450
    },
    {
        "content": "<p>But that does jar my memory a little bit I guess. You've got marked Riemann surfaces and you can like, glue them together along markings, or delete a marking, or something?</p>",
        "id": 191832534,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585187542
    },
    {
        "content": "<p>Yes.  I'm not an expert on modular operads by any means, but looking over the Getzler-Kapranov paper again I see this:</p>\n<p>The concept of modular operad is described purely combinatorially: it's a cyclic operad with extra structure.  But this extra structure reflects things you can do with Riemann surface with marked points.   You can think of a Riemann surface with n+1 labelled marked points as an n-ary operation.  You can compose these as usual for operations in an operad, or even a cyclic operad.  But you can also take two marked points and glue your Riemann surface to itself by identifying these points.   This idea is incorporated into the definition of modular operad: for example, I guess you get ways to take an n-ary operation and produce an (n-2)-ary operation.</p>",
        "id": 191833298,
        "sender_full_name": "John Baez",
        "timestamp": 1585188525
    },
    {
        "content": "<p>Are the marked points supposed to be like a divisor?</p>",
        "id": 191833479,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585188796
    },
    {
        "content": "<p>Yes.</p>",
        "id": 191833566,
        "sender_full_name": "John Baez",
        "timestamp": 1585188887
    },
    {
        "content": "<p>The \"gluing\" business is a bit subtle.</p>",
        "id": 191833599,
        "sender_full_name": "John Baez",
        "timestamp": 1585188953
    },
    {
        "content": "<p>right so \"cyclic\" here means that you can permute the inputs</p>",
        "id": 191833679,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189065
    },
    {
        "content": "<p>(or the \"labels\" on the \"input\" markings)</p>",
        "id": 191833681,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189076
    },
    {
        "content": "<p>oh no sorry</p>",
        "id": 191833723,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189096
    },
    {
        "content": "<p>cyclic means you can rotate an input to an output</p>",
        "id": 191833726,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189104
    },
    {
        "content": "<p>gah it's too late i need to go to bed</p>",
        "id": 191833736,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189111
    },
    {
        "content": "<p>No prob.  Yes, cyclic means you can rotate an input to be an output.</p>",
        "id": 191833780,
        "sender_full_name": "John Baez",
        "timestamp": 1585189175
    },
    {
        "content": "<p>There's no fundamental distinction between the n inputs and the 1 output of an operation in a cyclic operad.</p>",
        "id": 191833834,
        "sender_full_name": "John Baez",
        "timestamp": 1585189207
    },
    {
        "content": "<p>On top of all the structures we've been discussing, I want to understand how they relate to hypergraph categories, because they're giving me the same vibes.</p>",
        "id": 191834134,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585189587
    },
    {
        "content": "<p>I also want to know about the graph complex stuff that comes up w/r/t GT and all that stuff.</p>",
        "id": 191834147,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189621
    },
    {
        "content": "<p>What's GT?</p>",
        "id": 191834262,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585189769
    },
    {
        "content": "<p>Grothendieck-Teichmuller.</p>",
        "id": 191834281,
        "sender_full_name": "John Baez",
        "timestamp": 1585189800
    },
    {
        "content": "<p>There's a book about operads and that stuff by Benoit Fresse.</p>",
        "id": 191834328,
        "sender_full_name": "John Baez",
        "timestamp": 1585189821
    },
    {
        "content": "<p>Yeah, an enormous book.</p>",
        "id": 191834358,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275914\">@Joe Moeller</span> the Grothendieck-T* group (I don't like writing his name b/c he's an actual Nazi) is related to Riemann surfaces and all that jazz, but it also happens to be the homotopy automorphisms of the little 2-discs operad (this isn't SUPER surprising once you learn what GT is), but there's a lot of stuff going on there</p>",
        "id": 191834460,
        "sender_full_name": "Jonathan Beardsley",
        "timestamp": 1585189988
    },
    {
        "content": "<p>I would be happy to talk about something like this GT stuff.  I'd have to read stuff to get up to speed and remember what I once knew.</p>",
        "id": 191834831,
        "sender_full_name": "John Baez",
        "timestamp": 1585190511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276679\">Jonathan Beardsley</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191829400\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191829400\">said</a>:</p>\n<blockquote>\n<p>I wish someone would make a like... hierarchy</p>\n</blockquote>\n<p>Here's such a thing from the preface of  \"A Foundation for PROPs, Algebras, and Modules\" (but only dealing with \"directed\" contexts)<br>\n<a href=\"/user_uploads/21317/GWVxoBCCxhnp3Ge_c820H5FX/Screen-Shot-2020-03-25-at-8.01.56-PM.png\" title=\"Screen-Shot-2020-03-25-at-8.01.56-PM.png\">Screen-Shot-2020-03-25-at-8.01.56-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/GWVxoBCCxhnp3Ge_c820H5FX/Screen-Shot-2020-03-25-at-8.01.56-PM.png\" title=\"Screen-Shot-2020-03-25-at-8.01.56-PM.png\"><img src=\"/user_uploads/21317/GWVxoBCCxhnp3Ge_c820H5FX/Screen-Shot-2020-03-25-at-8.01.56-PM.png\"></a></div>",
        "id": 191836015,
        "sender_full_name": "philip hackney",
        "timestamp": 1585191898
    },
    {
        "content": "<p>So this idea of having distinguished points in a surface reminds me of modular tensor categories. Is it the same modular as modular operads?</p>",
        "id": 191836622,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585192775
    },
    {
        "content": "<p>Yes.  \"Modular\" just means \"like stuff you can do with Riemann surfaces\".</p>",
        "id": 191836680,
        "sender_full_name": "John Baez",
        "timestamp": 1585192821
    },
    {
        "content": "<p>That is, in this context that's what it means.  The \"modular group\" and \"modular curves\" use the word in a more specific way... but they too are connected to Riemann surfaces.</p>",
        "id": 191836726,
        "sender_full_name": "John Baez",
        "timestamp": 1585192909
    },
    {
        "content": "<p>Great. So what does the operad look like here?</p>",
        "id": 191836795,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585193004
    },
    {
        "content": "<p>Which operad?  As I said, there's not just one \"modular operad\": a modular operad is a <em>kind</em> of operad, whose properties I sketched.</p>",
        "id": 191841483,
        "sender_full_name": "John Baez",
        "timestamp": 1585200244
    },
    {
        "content": "<p>I meant the one you get for a fixed surface. How do you glue the surface to itself? I'm confused what exactly the operations are.</p>",
        "id": 191841529,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585200361
    },
    {
        "content": "<p>I didn't say a fixed surface gives an operad.</p>",
        "id": 191841590,
        "sender_full_name": "John Baez",
        "timestamp": 1585200411
    },
    {
        "content": "<blockquote>\n<p>The concept of modular operad is described purely combinatorially: it's a cyclic operad with extra structure.  But this extra structure reflects things you can do with Riemann surfaces with marked points.   You can think of a Riemann surface with n+1 labelled marked points as an n-ary operation.  You can compose these as usual for operations in an operad, or even a cyclic operad.  But you can also take two marked points and glue your Riemann surface to itself by identifying these points.   This idea is incorporated into the definition of modular operad: for example, I guess you get ways to take an n-ary operation and produce an (n-2)-ary operation.</p>\n</blockquote>",
        "id": 191841663,
        "sender_full_name": "John Baez",
        "timestamp": 1585200519
    },
    {
        "content": "<p>I guess it wasn't clear from this that a modular operad is a <em>kind</em> of operad: a cyclic operad with extra structure that's a bit hard for me to explain because I don't understand it very well.</p>",
        "id": 191841678,
        "sender_full_name": "John Baez",
        "timestamp": 1585200575
    },
    {
        "content": "<p>Right, so I read this and I'm confused by it.</p>",
        "id": 191841680,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585200577
    },
    {
        "content": "<p>I was sorta guessing that a surface gives an example of one of these operads, where the operations are the n+1 points.</p>",
        "id": 191841730,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585200617
    },
    {
        "content": "<p>No.</p>",
        "id": 191841746,
        "sender_full_name": "John Baez",
        "timestamp": 1585200634
    },
    {
        "content": "<p>In an ordinary operad you can take a bunch of operations, visualize them as trees, and do things with them that you'd do with trees.</p>",
        "id": 191841750,
        "sender_full_name": "John Baez",
        "timestamp": 1585200652
    },
    {
        "content": "<p>So what is a Riemann surface doing here?</p>",
        "id": 191841757,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585200663
    },
    {
        "content": "<p>I'm saying that in a modular operad, which is a <em>kind</em> of operad, you can take a bunch of operations, visualize them as Riemann surfaces with marked points, and do thigns with them that you'd do with Riemann surfaces with marked points.</p>",
        "id": 191841762,
        "sender_full_name": "John Baez",
        "timestamp": 1585200694
    },
    {
        "content": "<p>So the analogy is \"trees are to operads as Riemann surfaces are to modular operads\".</p>",
        "id": 191841764,
        "sender_full_name": "John Baez",
        "timestamp": 1585200719
    },
    {
        "content": "<p>You don't get an operad from a specific tree, and you don't get a modular operad from a specific Riemann surface with marked points.</p>",
        "id": 191841802,
        "sender_full_name": "John Baez",
        "timestamp": 1585200749
    },
    {
        "content": "<p>Right, I was misunderstanding what you were saying before.</p>",
        "id": 191841817,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585200824
    },
    {
        "content": "<p>Great. What's one specific one?</p>",
        "id": 191841879,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585200880
    },
    {
        "content": "<p>I deleted some stuff that I said that was wrong.</p>",
        "id": 191841888,
        "sender_full_name": "John Baez",
        "timestamp": 1585200906
    },
    {
        "content": "<p>Let me try to give an example of a modular operad.</p>",
        "id": 191841890,
        "sender_full_name": "John Baez",
        "timestamp": 1585200918
    },
    {
        "content": "<p>I'm looking at the paper by Getzler and Kapranov.</p>",
        "id": 191842185,
        "sender_full_name": "John Baez",
        "timestamp": 1585201376
    },
    {
        "content": "<p>This stuff is pretty complicated....</p>",
        "id": 191842190,
        "sender_full_name": "John Baez",
        "timestamp": 1585201382
    },
    {
        "content": "<p>I don't think I can get it right and also be comprehensible - it'll be hard to even get things right!</p>",
        "id": 191842209,
        "sender_full_name": "John Baez",
        "timestamp": 1585201433
    },
    {
        "content": "<p>But the most important idea in this general vicinity is the moduli space of Riemann surfaces with genus g and n marked points.</p>",
        "id": 191842254,
        "sender_full_name": "John Baez",
        "timestamp": 1585201466
    },
    {
        "content": "<p>There are lots of Riemann surfaces with genus g and n marked points (i.e. points labelled 1, 2, ... n).</p>",
        "id": 191842265,
        "sender_full_name": "John Baez",
        "timestamp": 1585201496
    },
    {
        "content": "<p>The set of isomorphism class of these things, roughly, forms a space called M(g,n).</p>",
        "id": 191842277,
        "sender_full_name": "John Baez",
        "timestamp": 1585201520
    },
    {
        "content": "<p>It's incredibly important and people have spend a lot of time trying to understand its topology (it's a topological space) and geometry (it's something like an algebraic variety).</p>",
        "id": 191842318,
        "sender_full_name": "John Baez",
        "timestamp": 1585201563
    },
    {
        "content": "<p>It's a fundamental player in string theory, since you can think of it as the \"set of strings of genus g with n inputs/outputs\".</p>",
        "id": 191842346,
        "sender_full_name": "John Baez",
        "timestamp": 1585201597
    },
    {
        "content": "<p>Roughly speaking, there's a modular operad whose set of (n-1)-ary operations is the union of all the M(g,n)'s over all g.</p>",
        "id": 191842371,
        "sender_full_name": "John Baez",
        "timestamp": 1585201642
    },
    {
        "content": "<p>This is probably the one to understand.</p>",
        "id": 191842373,
        "sender_full_name": "John Baez",
        "timestamp": 1585201657
    },
    {
        "content": "<p>One operation is some surface with the right number of distinguished points. How does the tree analogy come into play here?</p>",
        "id": 191842616,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585202078
    },
    {
        "content": "<p>A tree has a certain number of leaves and a root.  These are the points where you're allowed to attach one tree to another!</p>",
        "id": 191842759,
        "sender_full_name": "John Baez",
        "timestamp": 1585202302
    },
    {
        "content": "<p>In an ordinary operad you can only attach an output of one operation (root) to an input of another (leaf).</p>",
        "id": 191842766,
        "sender_full_name": "John Baez",
        "timestamp": 1585202333
    },
    {
        "content": "<p>In a cyclic operad, operations should instead be visualized as <em>unrooted</em> trees!</p>",
        "id": 191842771,
        "sender_full_name": "John Baez",
        "timestamp": 1585202360
    },
    {
        "content": "<p>They are just trees in the sense of graph theory, with a bunch of leaves.</p>",
        "id": 191842775,
        "sender_full_name": "John Baez",
        "timestamp": 1585202382
    },
    {
        "content": "<p>In a cyclic operad there's no real distinction between \"inputs\" and \"output\" - an operation just has a bunch of \"puts\".  (Nobody calls them that.)</p>",
        "id": 191842847,
        "sender_full_name": "John Baez",
        "timestamp": 1585202433
    },
    {
        "content": "<p>You can attach a \"put\" of one operation to a \"put\" of another operation.</p>",
        "id": 191842849,
        "sender_full_name": "John Baez",
        "timestamp": 1585202445
    },
    {
        "content": "<p>A modular operad is more like that... as I mentioned, it's a cyclic operad with extra structure.</p>",
        "id": 191842871,
        "sender_full_name": "John Baez",
        "timestamp": 1585202503
    },
    {
        "content": "<p>So are you supposed to thing of the unrooted tree as embedded in a Riemann surface?</p>",
        "id": 191845382,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585206106
    },
    {
        "content": "<p>And the leaves are the distinguished points?</p>",
        "id": 191845386,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585206121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191830381\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191830381\">said</a>:</p>\n<blockquote>\n<p>it would be really nice if all these examples could be captured in some general framework, like Cruttwell–Shulman's approach to multicategories</p>\n</blockquote>\n<p>Try the <em>operadic categories</em> of Batanin and Markl.</p>",
        "id": 191853221,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585212399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191830017\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191830017\">said</a>:</p>\n<blockquote>\n<p>but I don't yet have an intuition for wheeled properads</p>\n</blockquote>\n<p>Did you read this tweet: <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191812919\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191812919\">https://categorytheory.zulipchat.com/#narrow/stream/229199-basic-questions/topic/Properads/near/191812919</a><br>\nI can expand on it if necessary.</p>",
        "id": 191854278,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585213097
    },
    {
        "content": "<p>Regarding modular operads, the one of marked Riemann surfaces is of course the most famous one, because Riemann surfaces are so famous anyway. But just to grasp the notion, I would stick to graphs, saying that a modular operad is a structure where the operations indexed by corollas (but without distinction between in and out), and where you can contract any (connected) graph of operations to a single operation.</p>",
        "id": 191855117,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585213599
    },
    {
        "content": "<p>If you want to talk about Riemann surfaces, you have to realise that they are allowed to have singular points. It is cleaner to deal with this in the setting of stable algebraic curves in the sense of Deligne and Mumford: these are algebraic curve allowed to have ordinary double points (but not cusps or worse singularities). (I ignore the actual stability condition, a technical condition to limit the number of automorphisms.)<br>\nThey also have marked points.</p>",
        "id": 191855919,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585214012
    },
    {
        "content": "<p>Given a stable curve, consider the dual graph: for each irreducible component, draw a node, and for each double point, draw an edge between the two irreducible components meeting at that point. Since a double point could be that of a component intersecting itself (like in an irreducible nodal plane cubic y^2=x^2(x-1)), the graph can have loops. Finally for each marked point, draw a dangling edge from the node corresponding to the irreducible component. Altogether you get a (non-oriented) graph with open-ended edges allowed. (If you really want to follow the original Getzler-Kapranov definition of modular operad, your graphs should also have a genus decoration at each node, namely the genus of the corresponding irreducible component. But nowadays many users have stripped off this data from the definition, and regard it as further decoration you can add if really needed.)</p>",
        "id": 191856676,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585214378
    },
    {
        "content": "<p>The overview of all these different kinds of operad-like structures can be made in terms of which graph-like configurations of operations you are allowed to contract.<br>\nFor a category, you contract linear rooted trees to linear rooted trees with only one node.<br>\nFor an operad, you contract rooted trees to rooted trees with only one node.<br>\n(For a nonsymmetric operad, you contract planar rooted trees to planar rooted trees with only one node.)<br>\nFor properads, you contract connected directed acyclic graphs to ones with only one node.<br>\nFor wheeled properads, you also allow directed cycles, and contract to directed acyclic graphs without inner edges.<br>\nFor (graphical) props, you contract (not-necessarily-connected) directed acyclic graphs to directed acyclic graphs with only one node.<br>\nFor cyclic operads you contract non-rooted trees to non-rooted trees with only one node.<br>\nFor modular operads, you contract connected graphs to connected graphs without inner edges.</p>\n<p>(For wheeled and modular it is not good enough to say \"with only one node\". A loop with a single node should not count as an operation.)</p>",
        "id": 191857520,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585214772
    },
    {
        "content": "<p>In each case, the contracted graph must have the same arity as the graph you contract. (This condition essentially tells you that the structures are algebras for a cartesian monad, but for this to be true you need to upgrade from sets to groupoids.)</p>",
        "id": 191857775,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585214904
    },
    {
        "content": "<p>In each case there is an operadic category whose objects are the graphs in question, and whose morphisms are contractions of inner edges. I am not an expert in this, so please look at the papers of Batanin and Markl for precise statements and details.</p>",
        "id": 191858133,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585215099
    },
    {
        "content": "<p>I am talking about the coloured version of these notions. This means that it is important to allow the graph which is just an edge without any nodes. This graph indexes the 'colours'. So 'graph-like configuration of operations' means that each node is decorated by an operation, and each edge by a colour -- in a compatible way.</p>",
        "id": 191858991,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585215517
    },
    {
        "content": "<p>To actually formalise the intuitions listed above, a main task is to make precise the notions of trees and graphs, and have a good formalism for them. (In particular, they should admit open-ended edges. For trees, these are the leaves and the root.) That's a longer story. I think I should not bend the discussion in that direction, although it is one of my favourite topics.</p>",
        "id": 191860165,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585216144
    },
    {
        "content": "<p>I am a little late to the discussion. Are (coloured) properads the same thing as \"compact polycategories\" defined by Ross Duncan in his PhD thesis (some slides about those: <a href=\"http://www.cs.ox.ac.uk/people/ross.duncan/ckc-21-jul-2006.pdf\" title=\"http://www.cs.ox.ac.uk/people/ross.duncan/ckc-21-jul-2006.pdf\">http://www.cs.ox.ac.uk/people/ross.duncan/ckc-21-jul-2006.pdf</a>)?<br>\nThese are basically polycategories with multicuts (composition along multiple elements).</p>",
        "id": 191865823,
        "sender_full_name": "Nicolas Blanco",
        "timestamp": 1585219364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span>: that's a really helpful explanation, thank you!</p>",
        "id": 191874401,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585224647
    },
    {
        "content": "<blockquote>\n<p>To actually formalise the intuitions listed above, a main task is to make precise the notions of trees and graphs, and have a good formalism for them.</p>\n</blockquote>\n<p>is this to say that this is <em>not</em> what Batanin–Markl do?</p>",
        "id": 191874474,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585224696
    },
    {
        "content": "<p>that indeed sounds like a fascinating topic — I shall look at operadic categories; thank you for the reference!</p>",
        "id": 191874513,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585224720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191854278\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191854278\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191830017\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191830017\">said</a>:</p>\n<blockquote>\n<p>but I don't yet have an intuition for wheeled properads</p>\n</blockquote>\n<p>Did you read this tweet: <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191812919\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191812919\">https://categorytheory.zulipchat.com/#narrow/stream/229199-basic-questions/topic/Properads/near/191812919</a><br>\nI can expand on it if necessary.</p>\n</blockquote>\n<p>ah, I did read it — but what I meant was that to feel I properly understood what was going on, I would have to think of some examples, as I don't think I've seen such a structure before</p>",
        "id": 191874618,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585224772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276120\">@Nicolas Blanco</span>: they do sound like the same thing to me</p>",
        "id": 191875079,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585225016
    },
    {
        "content": "<p>operadic categories seem like a nice abstraction, but it's a bit hard for me to tell exactly what kinds of \"generalised multicategory\" structures they capture — are all generalised multicategories (in either the Leinster or Cruttwell–Shulman sense) examples of operadic categories?</p>",
        "id": 191910584,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585239843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191874474\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191874474\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>To actually formalise the intuitions listed above, a main task is to make precise the notions of trees and graphs, and have a good formalism for them.</p>\n</blockquote>\n<p>is this to say that this is <em>not</em> what Batanin–Markl do?</p>\n</blockquote>\n<p>I did not say anything in that direction.</p>",
        "id": 191919231,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585243255
    },
    {
        "content": "<p>the graph-focused view seemed particularly espoused by Markl's <em>Operads and PROPs</em></p>",
        "id": 191919862,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585243517
    },
    {
        "content": "<p>But maybe I can clarify this: for each of the examples in the list, it can be tricky to get the combinatorics right. This goes for the situation where you just want to develop your own 'ad hoc' theory for the kind of operad in question, and it also goes for the situation where you want to prove that your trees or graphs form an operadic category. In both cases, care and precision is required. <br>\n(The <em>theory</em> of operadic categories is abstract. In principle, it could be developed without ever seeing a tree or a graph.)</p>",
        "id": 191920797,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585243876
    },
    {
        "content": "<blockquote>\n<p>(The theory of operadic categories is abstract. In principle, it could be developed without ever seeing a tree or a graph.)</p>\n</blockquote>\n<p>the definition doesn't seem to indicate of an graph/tree-based intuition, certainly</p>",
        "id": 191921511,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585244162
    },
    {
        "content": "<blockquote>\n<p>it also goes for the situation where you want to prove that your trees or graphs form an operadic category</p>\n</blockquote>\n<p>would it be reading too much into your comments to take it that there might be a more \"direct\" way to go from these kinds of descriptions of operations on graphs to the corresponding kinds of operadic categories (or another, similarly-inclined categorical structure)?</p>",
        "id": 191921969,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585244334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <br>\nYes, that would be reading to much into my comments.</p>",
        "id": 191938176,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585251500
    },
    {
        "content": "<p>The operadic-category axioms are very powerful. It is normal that it takes some work to check them in a given situation, perhaps a bit like Quillen model structures.<br>\nI advertised operadic categories because I recommend them.</p>",
        "id": 191938289,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585251594
    },
    {
        "content": "<p>okay, that makes sense, thank you :)</p>",
        "id": 191938435,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585251672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276120\">Nicolas Blanco</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191865823\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191865823\">said</a>:</p>\n<blockquote>\n<p>I am a little late to the discussion. Are (coloured) properads the same thing as \"compact polycategories\" defined by Ross Duncan in his PhD thesis (some slides about those: <a href=\"http://www.cs.ox.ac.uk/people/ross.duncan/ckc-21-jul-2006.pdf\" title=\"http://www.cs.ox.ac.uk/people/ross.duncan/ckc-21-jul-2006.pdf\">http://www.cs.ox.ac.uk/people/ross.duncan/ckc-21-jul-2006.pdf</a>)?<br>\nThese are basically polycategories with multicuts (composition along multiple elements).</p>\n</blockquote>\n<p>The pictures in these slides certainly seem promising! I hadn't heard of this thesis before, so can't say for sure. But thanks for the pointer</p>",
        "id": 191964273,
        "sender_full_name": "philip hackney",
        "timestamp": 1585267576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191938289\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/191938289\">said</a>:</p>\n<blockquote>\n<p>The operadic-category axioms are very powerful. It is normal that it takes some work to check them in a given situation, perhaps a bit like Quillen model structures.<br>\nI advertised operadic categories because I recommend them.</p>\n</blockquote>\n<p>Sorry if this is a digression. I've been wondering if the operadic category definition can be modified to allow for finitely presentable presheaves (on some small category) rather than finite sets to be the \"cardinalities\". <span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> this is an approach I've been thinking about to get dependently coloured operads/dependent multicategories. In particular, one might hope that globular operads become examples. Note that the (opposite) category of globes is a finitely branching inverse category.</p>",
        "id": 192013841,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1585314624
    },
    {
        "content": "<p>I had also been wondering if there were operadic categories whose operads were \"dependent multicategories\" (in whichever particular sense)</p>",
        "id": 192017766,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585316394
    },
    {
        "content": "<p>but I need to become more familiar with the intuition behind operadic categories first</p>",
        "id": 192017845,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585316415
    },
    {
        "content": "<p>are you sure that globular operads are not already examples covered by operadic categories?</p>",
        "id": 192017887,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585316435
    },
    {
        "content": "<p>(the existing papers on operadic categories don't mention enough examples or non-examples to really give a good idea of what's covered and what isn't)</p>",
        "id": 192017953,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585316472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/192017887\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/192017887\">said</a>:</p>\n<blockquote>\n<p>are you sure that globular operads are not already examples covered by operadic categories?</p>\n</blockquote>\n<p>I'm not sure but I would be surprised. The arities of operations of globular operads are not finite sets but rather finite globular sets.</p>",
        "id": 192019559,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1585317176
    },
    {
        "content": "<p>it's not clear to me that the cardinality functor should be thought of as an arity functor; it reminds me a little of the length function in a C-system</p>",
        "id": 192021453,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585317968
    },
    {
        "content": "<p>as long as the dependency itself is encoded somewhere, a length function can be a reasonable operation, even when it doesn't capture all the information</p>",
        "id": 192021578,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585318030
    },
    {
        "content": "<p>I don't yet understand why operadic categories are the <em>right</em> notion — they seem to capture many existing notions, but the definition itself isn't suggestive to me of the graph-like intuition, for instance</p>",
        "id": 192022396,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585318378
    },
    {
        "content": "<p>(compared to, say, generalised multicategories, the formulation of which feels very intuitive)</p>",
        "id": 192022753,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585318503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/192021453\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/192021453\">said</a>:</p>\n<blockquote>\n<p>it's not clear to me that the cardinality functor should be thought of as an arity functor; it reminds me a little of the length function in a C-system</p>\n</blockquote>\n<p>I believe the moral is that objects in an operadic category are contexts that \"look like\" finite sets (of \"variables\" if you like), and that the morphisms (context morphisms) have a \"descent-like\" property in that they can be chopped up into fibres and glued back together. It's easy to understand what this means for usual coloured operads seen as operadic categories. (Look at the example of the operadic category of \"bouquets\"). It's precisely this \"descent-like\" property that one would like to understand for morphisms between dependently-typed contexts.</p>",
        "id": 192023041,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1585318617
    },
    {
        "content": "<p>I would say that the cardinality functor describes the \"shape\" of a context.</p>",
        "id": 192023871,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1585318941
    },
    {
        "content": "<p>I see what you mean; I think Lack's reformulation makes this slightly clearer, now that I look at it again — but I still don't have enough of an intuition to see precisely what the obstruction is in thinking about a simple dependent operad — I'll try playing around with some examples to get a better understanding</p>",
        "id": 192027563,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585320420
    },
    {
        "content": "<p>if operadic categories are insufficent, then considering finitely presentable presheaves seems like a promising idea to try</p>",
        "id": 192027650,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585320470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-basic-questions/topic/Properads/near/192022396\" title=\"#narrow/stream/229199-basic-questions/topic/Properads/near/192022396\">said</a>:</p>\n<blockquote>\n<p>I don't yet understand why operadic categories are the <em>right</em> notion — they seem to capture many existing notions, but the definition itself isn't suggestive to me of the graph-like intuition, for instance</p>\n</blockquote>\n<p>To grasp the intuition, I think the best example to look at is the operadic category Delta (the monoidal delta, including the empty ordinal), which is the operadic category for nonsymmetric operads. This means that a nonsymmetric operad (in a symmetric monoidal category V) is a strictly monoidal lax functor Delta -&gt; Sigma V. Here Sigma V is the one-object 2-category with V as Hom cat. If you spell out the conditions, you get precisely the operad axioms. (This is due to Day and Street, and was one of the motivating examples for the notion of operadic category.)</p>",
        "id": 192089649,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585349486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span>: yes, I think it would be helpful for me to explicitly work through that example — one can often only get so far in understanding without going through a construction step-by-step</p>",
        "id": 192094371,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585353742
    },
    {
        "content": "<p>that correspondence (Lemma 1.13 in the original paper on operadic categories) seems quite helpful</p>",
        "id": 192094420,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585353806
    },
    {
        "content": "<p>I think there are quite a few steps of understanding to make here — I've only just taken a look at your paper with Batanin and Weber, and the result that Feynman categories, which can describe many operadic notions that intuitively seem much richer than just operads, are biequivalent to coloured operads seems very surprising at first sight</p>",
        "id": 192094520,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585353906
    },
    {
        "content": "<p>also, the note relating regular patterns and substitutes to generalised species is also very interesting, as I feel slightly more familiar with that work, so I can hopefully draw some more connections to things I understand</p>",
        "id": 192094657,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585354032
    },
    {
        "content": "<p>it seems like a delightful area to start exploring</p>",
        "id": 192094725,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585354086
    }
]