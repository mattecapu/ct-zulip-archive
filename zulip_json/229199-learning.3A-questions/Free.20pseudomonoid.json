[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Enrichment.20relations.20categorically/near/210089941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276050\">Asad Saeeduddin</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Enrichment.20relations.20categorically/near/210089597\">said</a>:</p>\n<blockquote>\n<p>this is probably a question for a different thread, but I was wondering if there is such a thing as a \"free pseudofunctor to the bicategory of pseudomonoids\" for any monoidal bicategory. if so, since Cat is a monoidal bicategory, does the free pseudofunctor to the bicategory of monoids of Cat give us on 1-cells (functors) the corresponding \"free monoidal functor\" in some sense?</p>\n</blockquote>\n<p>I'm not sure I understand this.  Let's see.  In any monoidal bicategory C we can define pseudomonoids, and we get a bicategory (not monoidal!) of pseudomonoids in C - call it Ps(C).  </p>\n<p>There's always a forgetful functor U: Ps(C) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> C since any pseudomonoid has an underlying object: it's an object together with some other stuff.  </p>\n<p>I imagine you're asking if U has a left adjoint F: C <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> Ps(C) sending any object to the free pseudomonoid on that object.</p>\n<p>This clearly won't work unless C has enough 2-colimits!</p>\n<p>It's probably best to start one level down: in any monoidal category C we can define monoids, and we get a category Mon(C) and a forgetful functor U: Mon(C) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> C, and we can ask if this has a left adjoint F: C <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> Mon(C).   </p>\n<p>If C = Set with its cartesian monoidal structure, the answer is \"yes\", and we have</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>S</mi><mo>+</mo><msup><mi>S</mi><mn>2</mn></msup><mo>+</mo><msup><mi>S</mi><mn>3</mn></msup><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">F(S) = 1 + S + S^2 + S^3 \\cdots </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span></span></span></span></p>\n<p>So here we are taking a <em>coproduct</em>.   In the category of finite sets this wouldn't work!</p>\n</blockquote>",
        "id": 210090650,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1600145956
    },
    {
        "content": "<p>So assuming our monoidal bicategory is \"cocartesian\" (in some sense suitable for bicategories), do we indeed have a free pseudofunctor to its bicategory of pseudomonoids?</p>",
        "id": 210090721,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1600146031
    },
    {
        "content": "<p>does the monoidal structure in question need to be related to the cocartesian structure in some way?</p>",
        "id": 210090751,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1600146112
    },
    {
        "content": "<p>or, to take the analogous specialization of C = Set: is there a 2-functor <code>Cat -&gt; MonCat</code> from the 2-category of small categories and functors to the 2-category of monoidal categories and (lax/strong?) monoidal functors?</p>",
        "id": 210090952,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1600146406
    },
    {
        "content": "<p>There's too much to say about all this.   But in the example I gave, of \"the free monoid on a set\", we took advantage of the fact that Set has countable coproducts, finite products, and products distribute over coproducts.   That's what we use to show </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>S</mi><mo>+</mo><msup><mi>S</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\"> F(S) = 1 + S + S^2 + \\cdots </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> </p>\n<p>is a monoid and in fact the free monoid on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.  So you can generalize this idea in various ways.</p>",
        "id": 210090972,
        "sender_full_name": "John Baez",
        "timestamp": 1600146468
    },
    {
        "content": "<p>Other examples work differently!</p>",
        "id": 210091020,
        "sender_full_name": "John Baez",
        "timestamp": 1600146504
    },
    {
        "content": "<p>Exercise: work out the multiplication in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> and show it's associative.</p>",
        "id": 210091035,
        "sender_full_name": "John Baez",
        "timestamp": 1600146547
    },
    {
        "content": "<p>I think I can see how to generalize the concept of products distributing over coproducts via the idea of a <a href=\"https://ncatlab.org/nlab/show/distributive+monoidal+category\">distributive monoidal category</a> (i don't think the actual projections of a product are relevant). But I'm not sure what the analog of \"countability\" for coproducts is</p>",
        "id": 210091168,
        "sender_full_name": "Asad Saeeduddin",
        "timestamp": 1600146744
    },
    {
        "content": "<p>I think a useful level of generality is a monoidal category with countable coproducts where the tensor product distributes over countable coproducts.    In any category of this sort, the formula I gave (using <em>tensor</em> powers instead of cartesian powers) gives the free monoid.   For example (Vect, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span>) or (AbGp, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span>) or (Set, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo></mrow><annotation encoding=\"application/x-tex\">\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">×</span></span></span></span>) are all like this.... and lots more too.</p>",
        "id": 210091539,
        "sender_full_name": "John Baez",
        "timestamp": 1600147400
    },
    {
        "content": "<p>In fact all these examples have <em>all</em> coproducts, not just countable ones.</p>",
        "id": 210093504,
        "sender_full_name": "John Baez",
        "timestamp": 1600150274
    }
]