[
    {
        "content": "<p>From the nLab article, I'm having a hard time being confident in determining whether something is \"structure\" and whether something is \"stuff\". Does anyone have a good way to get an intuition for this, ideally without referring to properties of forgetful functors? Maybe some more examples of objects with extra stuff and some with extra structure?</p>\n<p>My current vague guess is we can distinguish operations vs subsets? So equipping a set with a total order adds structure (subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S \\times S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>) but equipping a set with addition adds stuff?</p>",
        "id": 217931830,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606334245
    },
    {
        "content": "<p>This section could be a bit more helpful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://ncatlab.org/nlab/show/structure#examples\">https://ncatlab.org/nlab/show/structure#examples</a></p>",
        "id": 217932363,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606334498
    },
    {
        "content": "<p>'Stuff' is objects, 'structure' is arrows, 'property' is equations between arrows.</p>",
        "id": 217932938,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606334814
    },
    {
        "content": "<p>I usually think of “stuff” as some extra information on morphisms...</p>",
        "id": 217933101,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606334913
    },
    {
        "content": "<p>For example, you could think of a category of sets and “functions implemented in a specific programming language”. The implementation is “stuff” on the functions.</p>",
        "id": 217933436,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606335113
    },
    {
        "content": "<p>Does that fit into the stuff/structure/properties thing?</p>\n<p>I think the way that would work with what I said would that you could have the same set 'within' distinct programming languages, and that would show up as multiple non-isomorphic objects that are 'forgotten' to the same set (so, the forgetful functor is not faithful).</p>",
        "id": 217933961,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606335402
    },
    {
        "content": "<p>I know you don't want to refer to properties of forgetful functors, but I do think it is helpful: a functor that “forgets only stuff” is one that, essentially, can only “forget the distinction” between some parallel morphisms.</p>",
        "id": 217934021,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606335442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217932938\">said</a>:</p>\n<blockquote>\n<p>'Stuff' is objects, 'structure' is arrows, 'property' is equations between arrows.</p>\n</blockquote>\n<p>I think you need to do swap “stuff” and “property” here?</p>",
        "id": 217934297,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606335574
    },
    {
        "content": "<p>Do I? I thought I had finally vaguely understood this stuff. :)</p>",
        "id": 217934377,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606335605
    },
    {
        "content": "<p>This is why I want to avoid the functor interpretation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Can we ground this in pre-categorical examples? E.g. we can presumably all agree commutativity of a monoid is a <em>property</em>. Is there anything that is unambiguously structure vs unambiguously stuff?</p>",
        "id": 217934639,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606335744
    },
    {
        "content": "<p>Taking a stab, maybe \"pointedness\" of a pointed set is structure since the point was in a sense \"already there\" but not specially identified</p>",
        "id": 217934943,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606335896
    },
    {
        "content": "<p>Is a semigroup being a monoid a property? Or is the unit of a monoid structure on a semigroup?</p>",
        "id": 217934990,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606335932
    },
    {
        "content": "<p>I think it's structure?</p>",
        "id": 217935093,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606335970
    },
    {
        "content": "<p>Yeah, but what is your pre-categorical argument for that?</p>",
        "id": 217935131,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606335985
    },
    {
        "content": "<p>That's the answer the forgetful functor gives, but why?</p>",
        "id": 217935160,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606336005
    },
    {
        "content": "<p>Well if we want the theory to be algebraic, we need to have a chosen element</p>",
        "id": 217935231,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1606336047
    },
    {
        "content": "<p>It's more than a property because it gives the specific element</p>",
        "id": 217935247,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606336056
    },
    {
        "content": "<p>To be clear, I'm not expecting to get a <em>precise</em> answer without referring to the category theory concepts. Just an intuition</p>",
        "id": 217935751,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606336339
    },
    {
        "content": "<p>The reason the forgetful functor says structure is that semigroup maps needn't preserve the unit element, if they exist, while monoid maps must. But I think if you consider semigroup <em>equivalences</em> in HoTT instead, they automatically preserve units, so that makes it look like a property.</p>",
        "id": 217936023,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606336477
    },
    {
        "content": "<p>At least, if I'm remembering the right example when I was thinking about this before.</p>",
        "id": 217936034,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606336487
    },
    {
        "content": "<p>And if you consider congruences there might be another example where something looks like structure, but the category version would say it's a property.</p>",
        "id": 217936322,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606336657
    },
    {
        "content": "<p>Maybe another example that might help or confuse things: if we pair a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> with a proposition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\le b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">a, b \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, the relation to me seems more like structure where as if we pair a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> with a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">hom(a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">a, b \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> the hom set to me is more like stuff</p>",
        "id": 217936417,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606336691
    },
    {
        "content": "<p>(maybe some arbitrary order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≺</mo></mrow><annotation encoding=\"application/x-tex\">\\prec</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">≺</span></span></span></span> would be better here since you can more naturally impose many of those on the same set)</p>",
        "id": 217936506,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606336749
    },
    {
        "content": "<p>I think maybe group inverse is an example of the map vs. congruence thing? Monoid maps automatically preserve group inverses, so that version says it's a property, but congruences might say it's property-like structure.</p>",
        "id": 217937851,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606337563
    },
    {
        "content": "<p>Your informal heuristic probably argues that group-inverse is structure, too, because it's \"giving\" the inverse of each element.</p>",
        "id": 217937955,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606337630
    },
    {
        "content": "<p>Hmm yeah... Less confident in that now honestly.</p>",
        "id": 217938386,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606337851
    },
    {
        "content": "<p>My point isn't that you're wrong, it's that this classification is somewhat arbitrary.</p>",
        "id": 217938437,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606337882
    },
    {
        "content": "<p>Sure. I'm trying to get at the central cases though, I'm still not sure I get what stuff is, beyond the underlying set itself.</p>",
        "id": 217938527,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606337916
    },
    {
        "content": "<p>I guess if we take X to the free foo on generators in X that might add stuff if foo has some operators?</p>",
        "id": 217938599,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606337950
    },
    {
        "content": "<p>I thought \"stuff\" was typically another sort</p>",
        "id": 217938706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606338007
    },
    {
        "content": "<p>e.g. a ring and a module over the ring is a ring with extra stuff</p>",
        "id": 217938750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606338037
    },
    {
        "content": "<p>Is a relation a sort in this context? Does it change if we're proof-relevant or not?</p>",
        "id": 217938805,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606338070
    },
    {
        "content": "<p>Well, your earlier example correctly classifies things, I think. Equipping a set with an ordering relation is structure, because distinct order-preserving maps go to distinct maps. But forgetting the hom structure might leave you with duplicate maps on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, so that's 'stuff' I think.</p>",
        "id": 217938835,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606338082
    },
    {
        "content": "<p>No, a relation is similar to a function--both are structure</p>",
        "id": 217938873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606338099
    },
    {
        "content": "<p>After all, you (Dan excepted) can encode an operation by the relation that is its graph</p>",
        "id": 217939024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606338160
    },
    {
        "content": "<p>Dan excepted due to non-intuitionistic? Me too then I'm afraid <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 217939128,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606338215
    },
    {
        "content": "<p>OK, then you might be confused by mathematicians.</p>",
        "id": 217939221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606338245
    },
    {
        "content": "<p>So I guess you can see the extra 'stuff' in two ways. It's 'stuff' because it's equipping <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> with additional sets of things. But it's also 'stuff' because you have more arrows generated by mappings between those equipped sets, like <span class=\"user-mention\" data-user-id=\"276363\">@Amar Hadzihasanovic</span>  said.</p>",
        "id": 217939411,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606338369
    },
    {
        "content": "<p>Rather than just maps on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 217939468,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606338407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217938835\">said</a>:</p>\n<blockquote>\n<p>Well, your earlier example correctly classifies things, I think. Equipping a set with an ordering relation is structure, because distinct order-preserving maps go to distinct maps. But forgetting the hom structure might leave you with duplicate maps on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, so that's 'stuff' I think.</p>\n</blockquote>\n<p>Is this essentially saying that a \"map\" from a category includes mapping on the hom structure, while a \"map\" from a partial order merely needs to preserve the existence of the order structure?</p>",
        "id": 217939518,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606338432
    },
    {
        "content": "<p>Was property/stuff/structure as a trichotomy ever meant to be more than a heuristic for making sense of properties of functors?</p>",
        "id": 217939667,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1606338513
    },
    {
        "content": "<p>Yeah. You can view them the same way, because the latter includes a 'map' between the orders. But all such maps are equivalent, because they're propositions.</p>",
        "id": 217939706,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606338541
    },
    {
        "content": "<p>The sense I've always gotten was that the functor properties formalized informal language that mathematicians might use</p>",
        "id": 217939724,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606338560
    },
    {
        "content": "<p>It does, but it got arbitrarily formalized in terms of categories instead of one of at least two other ways, because biased category theorists decided to codify it. :)</p>",
        "id": 217940047,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606338758
    },
    {
        "content": "<p>Structure vs. properties I think is pretty widely understood, but stuff vs. structure is not so standard. For instance a scheme is a topological space equipped with a \"structure sheaf\"--which is definitely stuff and not structure by any version of this definition.</p>",
        "id": 217940292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606338922
    },
    {
        "content": "<p>The more basic distinction is structure is anything that's data, and properties are, well, properties.</p>",
        "id": 217940463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606339037
    },
    {
        "content": "<p>\"Property\" means it comes after \"such that\" in the definition.</p>",
        "id": 217940488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606339060
    },
    {
        "content": "<p>I'd say necessary (though not, perhaps, sufficient, see Dan's example of monoid vs semigroup) for \"property\" is that it follows from the structure/stuff. A given group is abelian or it isn't.</p>",
        "id": 217940805,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606339208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276480\">Reid Barton</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217938706\">said</a>:</p>\n<blockquote>\n<p>I thought \"stuff\" was typically another sort</p>\n</blockquote>\n<p>I had assumed that \"stuff\" corresponded to sorts, \"structure\" to operations, and \"properties\" to equations, though now I see that this doesn't quite match some of the examples on the nLab page (e.g. an inner product on a vector space, which I would have thought was structure).</p>",
        "id": 217941488,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1606339580
    },
    {
        "content": "<p>If it did match up, it seems like quite a neat way of capturing this trichotomy from an algebraic perspective.</p>",
        "id": 217941551,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1606339618
    },
    {
        "content": "<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span> an operation or an equation? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 217941628,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606339662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217940047\">said</a>:</p>\n<blockquote>\n<p>It does, but it got arbitrarily formalized in terms of categories instead of one of at least two other ways, because biased category theorists decided to codify it. :)</p>\n</blockquote>\n<p>Can you spell out the two other ways a bit more?</p>",
        "id": 217941764,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606339731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217941488\">said</a>:</p>\n<blockquote>\n<p>I had assumed that \"stuff\" corresponded to sorts, \"structure\" to operations, and \"properties\" to equations, though now I see that this doesn't quite match some of the examples on the nLab page (e.g. an inner product on a vector space, which I would have thought was structure).</p>\n</blockquote>\n<p>The “inner product” seems like a confusing example because it certainly is structure if one considers e.g. isometries or short maps as the morphisms of inner product spaces. I guess the author considers it as “stuff” if one takes all linear maps as morphisms.</p>",
        "id": 217942098,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606339944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"351475\">@Shea Levy</span>  A 'congruence' is a relation that respects algebraic operations. Those are generally more flexible than homomorphisms. So if you do the same analysis with respect to those, you'll get more things categorized as structure instead of properties when it's ambiguous, I think. And probably the same with stuff.</p>\n<p>The opposite direction is to use isomorphisms instead of homomorphisms, which classifies more things as properties instead of structure.</p>",
        "id": 217942213,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606340040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217942213\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"351475\">Shea Levy</span>  A 'congruence' is a relation that respects algebraic operations. Those are generally more flexible than homomorphisms. So if you do the same analysis with respect to those, you'll get more things categorized as structure instead of properties when it's ambiguous, I think. And probably the same with stuff.</p>\n<p>The opposite direction is to use isomorphisms instead of homomorphisms, which classifies more things as properties instead of structure.</p>\n</blockquote>\n<p>Hmm so if we're using isomorphisms then in the single sorted case there is no structure at all right?</p>",
        "id": 217942483,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606340215
    },
    {
        "content": "<p>Or maybe that's set-theoretic bias sneaking in</p>",
        "id": 217942528,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606340242
    },
    {
        "content": "<p>Single sorted case of what?</p>",
        "id": 217942559,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606340278
    },
    {
        "content": "<p>So there seems to be at least two different kinds of “stuff”: </p>\n<ul>\n<li>extra information on objects that is not taken into account by morphisms;</li>\n<li>extra information on morphisms...</li>\n</ul>",
        "id": 217942563,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606340281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217942559\">said</a>:</p>\n<blockquote>\n<p>Single sorted case of what?</p>\n</blockquote>\n<p>Any single-sorted theory, an isomorphism on the underlying set will always preserve whatever else right?</p>",
        "id": 217942630,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606340317
    },
    {
        "content": "<p>I don't think isomorphisms of sets automatically preserve binary operations on sets.</p>",
        "id": 217942670,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606340364
    },
    {
        "content": "<p>It's interesting to see I'm not alone in uncertainty here. Would it be helpful to collect a few examples that have pretty strong agreement?</p>\n<ol>\n<li>Equipping a set of objects with a hom-set for each pair of objects is definitely stuff</li>\n<li>A group being abelian is definitely properties</li>\n<li>??? is definitely structure</li>\n</ol>",
        "id": 217942718,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606340403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217942670\">said</a>:</p>\n<blockquote>\n<p>I don't think isomorphisms of sets automatically preserve binary operations on sets.</p>\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> right, was thinking of <em>equality</em> of sets</p>",
        "id": 217942756,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606340415
    },
    {
        "content": "<p>The first kind corresponds to forgetful functors that are essentially surjective, full, faithful, but not injective on objects.<br>\nThe second to forgetful functors that are essentially surjective, full, injective on objects, but not faithful.</p>",
        "id": 217942788,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606340450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"351475\">Shea Levy</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217941628\">said</a>:</p>\n<blockquote>\n<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span> an operation or an equation? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>On its own, certainly an operation (but perhaps one conferred by the meta-theory itself!).</p>",
        "id": 217943159,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1606340726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"351475\">Shea Levy</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217931830\">said</a>:</p>\n<blockquote>\n<p>From the nLab article, I'm having a hard time being confident in determining whether something is \"structure\" and whether something is \"stuff\". Does anyone have a good way to get an intuition for this, ideally without referring to properties of forgetful functors? Maybe some more examples of objects with extra stuff and some with extra structure?</p>\n<p>My current vague guess is we can distinguish operations vs subsets? So equipping a set with a total order adds structure (subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S \\times S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>) but equipping a set with addition adds stuff?</p>\n</blockquote>\n<p>Equipping a set with a total order or an addition adds <em>structure</em>.</p>\n<p>Equipping a set with another set adds <em>stuff</em>.</p>",
        "id": 217947645,
        "sender_full_name": "John Baez",
        "timestamp": 1606344105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217934297\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217932938\">said</a>:</p>\n<blockquote>\n<p>'Stuff' is objects, 'structure' is arrows, 'property' is equations between arrows.</p>\n</blockquote>\n<p>I think you need to do swap “stuff” and “property” here?</p>\n</blockquote>\n<p>No, Dan has it exactly right.   </p>\n<p>We often describe mathematical gadgets by first giving some stuff, then some structure, then some properties.</p>\n<p>Here's a good example: a <strong>semigroup</strong> is </p>\n<ul>\n<li>a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></li>\n<li>together with a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>:</mo><mi>S</mi><mo>×</mo><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">m: S \\times S \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></li>\n<li>such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is associative.</li>\n</ul>\n<p>The set is <em>stuff</em>, the function is <em>structure</em>, and the associative law is a <em>property</em>.</p>",
        "id": 217947767,
        "sender_full_name": "John Baez",
        "timestamp": 1606344231
    },
    {
        "content": "<p>Why is an inner product extra structure then?</p>",
        "id": 217947841,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606344288
    },
    {
        "content": "<p>Because it's a function.</p>",
        "id": 217947852,
        "sender_full_name": "John Baez",
        "timestamp": 1606344302
    },
    {
        "content": "<p>Erm, stuff</p>",
        "id": 217947857,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606344303
    },
    {
        "content": "<p>An inner product on a vector space is not extra stuff.</p>",
        "id": 217947883,
        "sender_full_name": "John Baez",
        "timestamp": 1606344327
    },
    {
        "content": "<p>\"objects being equipped with “extra stuff” (for instance a vector space equipped with an inner product).\" is nlab wrong here?</p>",
        "id": 217947886,
        "sender_full_name": "Shea Levy",
        "timestamp": 1606344330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217947767\">said</a>:</p>\n<blockquote>\n<p>We often describe mathematical gadgets by first giving some stuff, then some structure, then some properties.</p>\n<p>Here's a good example: a <strong>semigroup</strong> is </p>\n<ul>\n<li>a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></li>\n<li>together with a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>:</mo><mi>S</mi><mo>×</mo><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">m: S \\times S \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></li>\n<li>such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is associative.</li>\n</ul>\n<p>The set is <em>stuff</em>, the function is <em>structure</em>, and the associative law is a <em>property</em>.</p>\n</blockquote>\n<p>Note that we can't describe the structure until we have the stuff.</p>\n<p>We can't describe the property until we have the structure.</p>\n<p>That's how it works.</p>\n<p>Also note that:</p>\n<ul>\n<li>the stuff is choosing an object in a category (an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>∈</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">S \\in \\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> in this example).</li>\n<li>the structure is choosing a morphism in a category (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>:</mo><mi>S</mi><mo>×</mo><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">m: S \\times S \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>).</li>\n<li>the property is choosing an equation between morphisms in a category.</li>\n</ul>",
        "id": 217948152,
        "sender_full_name": "John Baez",
        "timestamp": 1606344518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"351475\">Shea Levy</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217947886\">said</a>:</p>\n<blockquote>\n<p>\"objects being equipped with “extra stuff” (for instance a vector space equipped with an inner product).\" is nlab wrong here?</p>\n</blockquote>\n<p>Yes, that sounds wrong to me.  Can you point me to it?  I can't imagine any way for it to be correct.</p>",
        "id": 217948202,
        "sender_full_name": "John Baez",
        "timestamp": 1606344572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span>: see bullet point 3 <a href=\"https://ncatlab.org/nlab/show/stuff%2C+structure%2C+property\">here</a>.</p>",
        "id": 217948759,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1606344996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217934990\">said</a>:</p>\n<blockquote>\n<p>Is a semigroup being a monoid a property? Or is the unit of a monoid structure on a semigroup?</p>\n</blockquote>\n<p>This is a fun example.  We can do this one either way, but it makes a big difference.</p>\n<p>1) We can say \"a monoid is a semigroup <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> together with an element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">1 \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⋅</mo><mi>s</mi><mo>=</mo><mi>s</mi><mo>=</mo><mi>s</mi><mo>⋅</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 \\cdot s = s = s \\cdot 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.   Here the unit extra structure.</p>\n<p>2) We can say \"a monoid is a semigroup <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> such that there exists an element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">e \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>⋅</mo><mi>s</mi><mo>=</mo><mi>s</mi><mo>=</mo><mi>s</mi><mo>⋅</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e \\cdot s = s = s \\cdot e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.   Here the existence of the unit is a property.</p>\n<p>What's the difference?  The difference is visible when we consider morphisms <em>between</em> monoids!   Structure is preserved by morphisms.  It makes no sense for properties to be preserved by morphisms.  (For example, it makes no sense to talk about \"a homomorphism between groups that preserves abelianness.\")</p>\n<p>1) In the first approach, a monoid homomorphism is a semigroup homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>S</mi><mo>→</mo><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f: S \\to S'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">S'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are monoids and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> preserves the unit.</p>\n<p>2) n the first approach, a monoid homomorphism would be just a semigroup homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>S</mi><mo>→</mo><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f: S \\to S'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">S'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are monoids... it doesn't make sense to say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> preserves the <em>existence</em> of the unit.</p>\n<p>1) is the usual definition of monoid homomorphism, which means we normally treat the unit as extra <em>structure</em>.</p>",
        "id": 217948802,
        "sender_full_name": "John Baez",
        "timestamp": 1606345031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217948759\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span>: see bullet point 3 <a href=\"https://ncatlab.org/nlab/show/stuff%2C+structure%2C+property\">here</a>.</p>\n</blockquote>\n<p>Okay, thanks.  That's complete crap.  I'll fix it.</p>",
        "id": 217948892,
        "sender_full_name": "John Baez",
        "timestamp": 1606345106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276480\">Reid Barton</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217938706\">said</a>:</p>\n<blockquote>\n<p>I thought \"stuff\" was typically another sort</p>\n</blockquote>\n<p>Yes.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217941488\">said</a>:</p>\n<blockquote>\n<p>I had assumed that \"stuff\" corresponded to sorts, \"structure\" to operations, and \"properties\" to equations.</p>\n</blockquote>\n<p>Yes, that's a good way to think about it... though structure can consist of <em>relations</em> as well as operations.</p>\n<blockquote>\n<p>though now I see that this doesn't quite match some of the examples on the nLab page (e.g. an inner product on a vector space, which I would have thought was structure).</p>\n</blockquote>\n<p>That example was wrong.  It's gone now.  An inner product is just structure.  I wonder who put in that example.</p>",
        "id": 217949205,
        "sender_full_name": "John Baez",
        "timestamp": 1606345335
    },
    {
        "content": "<p>Perfect, that clears up my remaining confusion, thank you!</p>",
        "id": 217949750,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1606345844
    },
    {
        "content": "<p>oooh nice to hear that's been changed</p>",
        "id": 217951602,
        "sender_full_name": "sarahzrf",
        "timestamp": 1606347506
    },
    {
        "content": "<p>that particular example tripped me up for a <em>while</em></p>",
        "id": 217951618,
        "sender_full_name": "sarahzrf",
        "timestamp": 1606347520
    },
    {
        "content": "<p>...maybe i should try getting into the habit of editing the nlab when i realize something is wrong.</p>",
        "id": 217951632,
        "sender_full_name": "sarahzrf",
        "timestamp": 1606347534
    },
    {
        "content": "<p>anyway tho: my 2 cents on this topic is that what made some of this click for me was that \"equipping your objects with (n + 1)-stuff\" means equipping your morphisms with n-stuff, and as base cases:</p>\n<ul>\n<li>to equip with (-1)-stuff is just to require some properties</li>\n<li>to equip with (-2)-stuff is to do nothing whatsoever</li>\n</ul>",
        "id": 217952109,
        "sender_full_name": "sarahzrf",
        "timestamp": 1606348061
    },
    {
        "content": "<p>so</p>\n<ul>\n<li>an abelian group is a group plus (-1)-stuff (properties)—note that no extra requirements are placed on the morphisms</li>\n<li>a group is a set plus 0-stuff (structure)—you have to equip the morphisms with (-1)-stuff (impose properties on the functions between the underlying sets)</li>\n<li>a monoid is a semigroup plus <em>0-stuff</em> (structure)—monoids aren't a full subcategory of semigroups! (but it's \"property-like\" structure)</li>\n<li>a ringed space is a topological space plus 1-stuff (stuff)—you have to equip the morphisms with 0-stuff, in the sense that you <em>toss out some of the equations between them</em>, or \"require the equations to be equipped with (-1)-stuff\", when you add the extra component to the morphisms that goes between the sheaves of rings.</li>\n</ul>",
        "id": 217952671,
        "sender_full_name": "sarahzrf",
        "timestamp": 1606348620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217951632\">said</a>:</p>\n<blockquote>\n<p>...maybe i should try getting into the habit of editing the nlab when i realize something is wrong.</p>\n</blockquote>\n<p>Please do! And when you edit it, leave a comment in the box saying what you did. That way, if you make a mistake, the residents will probably notice and fix it... so you don't have to agonize so much over whether you're right (though it's good to feel pretty sure before you make a correction).</p>",
        "id": 217957586,
        "sender_full_name": "John Baez",
        "timestamp": 1606354180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217947767\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217934297\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217932938\">said</a>:</p>\n<blockquote>\n<p>'Stuff' is objects, 'structure' is arrows, 'property' is equations between arrows.</p>\n</blockquote>\n<p>I think you need to do swap “stuff” and “property” here?</p>\n</blockquote>\n<p>No, Dan has it exactly right.   </p>\n</blockquote>\n<p>Maybe we are thinking of different perspectives (which may be dual in some sense? I'm not sure).</p>\n<p>From the “forgetful functor” perspective, if I have an underlying structure,</p>\n<ul>\n<li>imposing <em>properties</em> selects some <em>objects</em>, so the forgetful functor is not essentially surjective;</li>\n<li>imposing <em>structure</em> selects some <em>morphisms</em>, so the forgetful functor is not full;</li>\n<li>imposing <em>stuff</em> selects some <em>equations between morphisms</em>, so the forgetful functor is not faithful.</li>\n</ul>\n<p>Hence the “backwards” way I was thinking of the correspondence.<br>\nHow do the two relate?</p>",
        "id": 217970465,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1606373646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217949205\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276480\">Reid Barton</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217938706\">said</a>:</p>\n<blockquote>\n<p>I thought \"stuff\" was typically another sort</p>\n</blockquote>\n<p>Yes.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/217941488\">said</a>:</p>\n<blockquote>\n<p>I had assumed that \"stuff\" corresponded to sorts, \"structure\" to operations, and \"properties\" to equations.</p>\n</blockquote>\n<p>Yes, that's a good way to think about it... though structure can consist of <em>relations</em> as well as operations.</p>\n<blockquote>\n<p>though now I see that this doesn't quite match some of the examples on the nLab page (e.g. an inner product on a vector space, which I would have thought was structure).</p>\n</blockquote>\n<p>That example was wrong.  It's gone now.  An inner product is just structure.  I wonder who put in that example.</p>\n</blockquote>\n<p>Urs Schreiber.</p>",
        "id": 218230781,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1606684286
    },
    {
        "content": "<p>One thing that bugs me a little is that a monoidal category should be a category with extra \"structure\", or maybe \"2-structure\", not \"stuff\". I feel like the ladder for n-categories should be: property, structure, 2-structure, 3-structure...and stuff at the last place. Not property, structure, stuff, 2-stuff... and so on. <br>\nHowever, this is rather subjective, it's only the way <em>I</em> find most helpful.</p>",
        "id": 218789265,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1607051150
    },
    {
        "content": "<p>I figured if you were doing stuff like that, then \"stuff, structure, property\" would become \"0-stuff, 1-stuff, 2-stuff.\"</p>",
        "id": 218793982,
        "sender_full_name": "Dan Doel",
        "timestamp": 1607057138
    },
    {
        "content": "<p>Like, adding equations to some algebraic theory is adding 2-cells. And it only cuts off there because the higher cells are assumed to be trivial.</p>",
        "id": 218794116,
        "sender_full_name": "Dan Doel",
        "timestamp": 1607057337
    },
    {
        "content": "<p>Having done my time in the KZ-monad “structure versus property” rabbit hole, I can’t say I find the formal distinctions between these things terribly helpful “on the ground”, as it were.</p>\n<p>I propose an alternative:</p>\n<p>Structure is what you have. Properties are what you want. Stuff is what you get.</p>",
        "id": 218797987,
        "sender_full_name": "Chad Nester",
        "timestamp": 1607063095
    },
    {
        "content": "<p>And if you try sometimes, you get what you need.</p>",
        "id": 218799222,
        "sender_full_name": "Jason Erbele",
        "timestamp": 1607065028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275989\">Paolo Perrone</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/218789265\">said</a>:</p>\n<blockquote>\n<p>One thing that bugs me a little is that a monoidal category should be a category with extra \"structure\", or maybe \"2-structure\", not \"stuff\". I feel like the ladder for n-categories should be: property, structure, 2-structure, 3-structure...and stuff at the last place. Not property, structure, stuff, 2-stuff... and so on. <br>\nHowever, this is rather subjective, it's only the way <em>I</em> find most helpful.</p>\n</blockquote>\n<p>The terms \"stuff, structure, property\" were originally developed in a categorical context (categories of sets with extra stuff), so they sound a bit strange when applied to a 2-categorical context (2-categories of categories with extra 2-stuff).</p>\n<p>In the categorical context it's very easy to believe that if you need to equip your morphisms with extra structure then you are equipping your objects with extra stuff.  For example a pair of sets is a set with extra stuff (namely another set), and morphisms between pairs of sets are functions with extra structure (namely another function), not merely an extra property.</p>\n<p>We follow the same rules in the 2-categorical context.   A monoidal functor is a functor equipped with extra structure (the laxator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow></msub><mo>:</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⊗</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi_{x,y} : F(x) \\otimes F(y) \\to F(x \\otimes y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> and unit laxator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mn>0</mn></msub><mo>:</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\phi_0 : F(1) \\to 1 </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>), so a monoidal category is a category equipped with extra stuff.</p>\n<p>A <em>pair</em> of categories is a category equipped with extra <em>2-stuff</em>, since a morphism between a pair of categories (a pair of functors) is a functor equipped with extra stuff.</p>",
        "id": 218852345,
        "sender_full_name": "John Baez",
        "timestamp": 1607097779
    },
    {
        "content": "<p>You probably know all this and just wish \"stuff\" in the 2-categorical context was redefined to mean \"2-stuff\", \"structure\" was redefined to mean \"stuff\", and so on - boosting the level of everything.</p>",
        "id": 218852578,
        "sender_full_name": "John Baez",
        "timestamp": 1607097850
    },
    {
        "content": "<p>I can sympathize with that urge, but when you get deep into n-category theory that convention would be very confusing; we want a convention where categories can be seen as discrete 2-categories without changing all the terminology regarding them.</p>",
        "id": 218852815,
        "sender_full_name": "John Baez",
        "timestamp": 1607097958
    },
    {
        "content": "<p>Another way to put it:</p>\n<p>Properties of something are either true or false.     (E.g. a group is either abelian or not.)</p>\n<p>Structures on something form a set.  (E.g. there's a set of ways you can make a set into a group.)</p>\n<p>Stuffs on something form a category.   (E.g. there's a category of ways to make a functor between monoidal categories into a monoidal functor.)</p>\n<p>2-stuffs on something form a 2-category.   (E.g. there's a 2-category of ways to make a category into a monoidal category.)</p>\n<p>Etc.</p>",
        "id": 218853517,
        "sender_full_name": "John Baez",
        "timestamp": 1607098252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Structure.20vs.20stuff.3F/near/218853517\">said</a>:</p>\n<blockquote>\n<p>Another way to put it:</p>\n<p>Properties of something are either true or false.     (E.g. a group is either abelian or not.)</p>\n<p>Structures on something form a set.  (E.g. there's a set of ways you can make a set into a group.)</p>\n<p>Stuffs on something form a category.   (E.g. there's a category of ways to make a functor between monoidal categories into a monoidal functor.)</p>\n<p>2-stuffs on something form a 2-category.   (E.g. there's a 2-category of ways to make a category into a monoidal category.)</p>\n<p>Etc.</p>\n</blockquote>\n<p>Could you call a property that turns out to always hold -2-stuff?  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218855938,
        "sender_full_name": "Shea Levy",
        "timestamp": 1607099303
    },
    {
        "content": "<p>Yes, I probably did in my paper <a href=\"http://math.ucr.edu/home/baez/cohomology.pdf\">Lectures on n-categories and cohomology</a>, which introduced the world to n-stuff.  (It was invented by James Dolan.)</p>",
        "id": 218863589,
        "sender_full_name": "John Baez",
        "timestamp": 1607102604
    },
    {
        "content": "<p>What I mean is that, to me, stuff always deserves the \"last place\". In 2-dimensional contexts, saying \"structure, stuff, 2-stuff\" instead of \"structure, 2-structure, stuff\" to me sounds a bit as if we said \"braided, symmetric, 2-symmetric monoidal bicategory\" instead of <a href=\"https://ncatlab.org/nlab/show/periodic+table\">\"braided, sylleptic, symmetric monoidal bicategory\"</a>. To me, \"stuff\", like \"symmetry\", should always be the last one.</p>\n<p>In any case, this is by far not a hill I want to die on - different people find different terminology suggestive. The power of category theory is precisely that it unifies different backgrounds, so it's normal that not everyone likes every convention - as long as we agree on the <em>math</em>.</p>",
        "id": 218872161,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1607106171
    },
    {
        "content": "<p>The analogous notions in HoTT come up pretty regularly. I would imagine if one were doing a similar synthetic category theory, they'd be pretty important.</p>",
        "id": 218872655,
        "sender_full_name": "Dan Doel",
        "timestamp": 1607106389
    },
    {
        "content": "<p>I have a tangential question about this stuff (pun intended) but I don't think it's worth making a new topic. On the nlab page for stuff, structure property, the definitions are given in terms of a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>C</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">F: C \\rightarrow D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> <em>forgetting</em> stuff/structure/properties. But it seems more natural to talk instead about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> <em>preserving</em> stuff/structure/properties. </p>\n<p>I think it's reasonable to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> preserves stuff iff it is faithful and that it preserves structure iff it is full. I want to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> preserves properties iff it is essentially surjective but in the cases that it is not full or faithful, I'm not really sure what properties it would be preserving. Are there any natural examples that might shed light on this?</p>",
        "id": 218952119,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1607200162
    },
    {
        "content": "<p>I don't know if this helps, but I think the 'forgets' stuff is because you can turn it around, and treat that functor as a display map. Then the 'forgetful' display map tells you what is being equipped to things in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to form things in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>. If you used displayed categories, then you would get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> as the total category of a family of categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> displayed over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>. And then 'stuff, structure, property' is talking about how 'truncated' these things are, like hlevels in HoTT.</p>",
        "id": 218954658,
        "sender_full_name": "Dan Doel",
        "timestamp": 1607203976
    },
    {
        "content": "<p>So, in HoTT, where you work with things displayed a lot, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">s</mi><mi mathvariant=\"sans-serif\">G</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">u</mi><mi mathvariant=\"sans-serif\">p</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">d</mi></mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathsf{isGroupoid}(B(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">s</span><span class=\"mord mathsf\">G</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">u</span><span class=\"mord mathsf\">p</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">d</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> means you're equipping with stuff (I think), and the forgetful functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">s</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo>:</mo><msub><mi mathvariant=\"normal\">Σ</mi><mrow><mi>x</mi><mo>:</mo><mi>D</mi></mrow></msub><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{fst} : Σ_{x:D} B(x) → D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\">s</span><span class=\"mord mathsf\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> forgets that stuff.  At least, modulo groupoids vs categories.</p>",
        "id": 218954854,
        "sender_full_name": "Dan Doel",
        "timestamp": 1607204292
    },
    {
        "content": "<p>An extra sort will have an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">h</mi><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{hSet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">h</span><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> making it a groupoid (corner cases aside, and assuming set theoretic algebra). The type of binary operations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A → A → A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> being an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">h</mi><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{hSet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">h</span><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> is itself an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">h</mi><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{hSet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">h</span><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span>. Equations between values in an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">h</mi><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{hSet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">h</span><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> are an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">h</mi><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{hProp}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">h</span><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">p</span></span></span></span></span> (that's the definition).</p>",
        "id": 218956209,
        "sender_full_name": "Dan Doel",
        "timestamp": 1607206584
    }
]