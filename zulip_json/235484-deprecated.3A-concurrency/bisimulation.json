[
    {
        "content": "<p>Bisimulation is a fundamental concept in concurrency and I've always felt I didn't understand it as deeply as I should have. This topic is about:</p>\n<ul>\n<li>Explaining the main ideas behind it</li>\n<li>Understanding why it is useful, and what applications it has</li>\n<li>Uderstanding how this translates in categorical terms<br>\nPersonally I'm in the Petri net crowd but I'm also interested in notions of bisimulation coming from other disciplines (e.g. FSMs, I guess). Bisimulation-aware peope, show yourselves! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></li>\n</ul>",
        "id": 198880307,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590580264
    },
    {
        "content": "<p>I found this diagram on a quick search on Google from an asian paper (there are other similar ones). This helps <br>\nput the various pieces in context. <a href=\"/user_uploads/21317/URyhjzYJcX3s2DvlciE1tjzs/Coalgebra-Algebra.png\">Coalgebra-Algebra.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/URyhjzYJcX3s2DvlciE1tjzs/Coalgebra-Algebra.png\" title=\"Coalgebra-Algebra.png\"><img src=\"/user_uploads/21317/URyhjzYJcX3s2DvlciE1tjzs/Coalgebra-Algebra.png\"></a></div>",
        "id": 198882836,
        "sender_full_name": "Henry Story",
        "timestamp": 1590582128
    },
    {
        "content": "<p>I think the above is not so good. This one (I think) by D. Sangiorgi is better.<br>\n<a href=\"user_uploads/21317/Ii9H2g7y_JVkNZqWmRPeeiBt/AlgebraColagebra.jpg\">AlgebraColagebra.jpg</a>. What these diagrams show is that bisimulation is as important to coalgebras as congruence to algebras. So that firmly nails the concept there.</p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/21317/Ii9H2g7y_JVkNZqWmRPeeiBt/AlgebraColagebra.jpg\" title=\"AlgebraColagebra.jpg\"><img src=\"user_uploads/21317/Ii9H2g7y_JVkNZqWmRPeeiBt/AlgebraColagebra.jpg\"></a></div>",
        "id": 198882917,
        "sender_full_name": "Henry Story",
        "timestamp": 1590582185
    },
    {
        "content": "<p>In Bart Jacobs' recent book  <a href=\"https://www.cambridge.org/core/books/introduction-to-coalgebra/0D508876D20D95E17871320EADC185C6\">Introduction to Coalgebra - Towards a Mathematics of States and Observations</a> there is only one reference to petri-nets right on the first page as an example of how category theory deals with dynamic systems. It's weird: there indeed seems to be some lack of communication between the Petri-net crowd and the coalgebra crowd. (perhaps a quick search on the two on google scholar will find something). I found an earlier introduction that is free on the web <a href=\"https://nasslli.sitehost.iu.edu/2003/datas/DirkPattinson.pdf\">An Introduction to the Theory of Coalgebras</a> by Dirk Pattinson that covers these areas too. Any work on coalgebras goes quite quickly into bisimulation.</p>",
        "id": 198883836,
        "sender_full_name": "Henry Story",
        "timestamp": 1590582768
    },
    {
        "content": "<p>I only really know about it via type theory/coalgebra/programming, so I don't know if the answer to your questions is different in other domains. But it is basically the properly extensional notion of equality of coinductive values/processes. Two processes are equal if they will produce corresponding (non-well-founded) trees of observations, not merely when they have the same definition/internal mechanism (intensional equality).</p>\n<p>I'm not sure what you're looking for with some of your questions, though. As a simple analogy (that goes quite far for the type theory case), it's like asking, \"why is function extensionality useful?\" One might say that's what it means to be considering <em>functions</em> rather than the specific algorithm that implements them. Functions are the same when all their points are the same, not merely when they are presented by β convertible algorithms (or something). In type theories that lack this principle, it can be quite frustrating to manually work with the desired extensional equality, because it doesn't work as nicely as equality.</p>",
        "id": 198886184,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590584199
    },
    {
        "content": "<p>Here is my beginners take on this. Given a Polynomial Functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> an algebra is a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">f:  F(A) \\to A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. So if our functor is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>A</mi><mo>×</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">F(X) = 1 + A \\times X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> then we have an algebra for Lists of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. The coalgebra is a dual morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f: S \\to F(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> this takes a state S to a structure that either describes the state or gives a function that allows one to move to the another state. (So that resembles objects in OO programming, which one can manipulate with getters and setters (the functor acts like an interface in Java) and where one can change state. An example would be a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>Z</mi><mo>×</mo><msup><mi>X</mi><mi>Z</mi></msup></mrow><annotation encoding=\"application/x-tex\">F(X) = Z \\times X^{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">Z</span></span></span></span></span></span></span></span></span></span></span></span>, where the coalgebra would allow us to observe our balance but also give us a function to add money to our account.  Given two such coalgebras one would want to know if they are in some sense the same, and bisimulation says that they are if one can get the same observation at two states, and all possible successor states, arrived at by using the same transformations on both sides. So one can have two Objects in OO implemented differently that look exactly the same to the outside world. Eg. one could have a bank account DB that contains the whole history of transactions and another that contains only the balance.  If the interface to access that data only allows you to observe the balance and add or remove money, then you would not be able to tell the difference between both databases and so they are bisimilar.</p>\n<p>Now one thing I have been wondering about is that coalgebras only allow one to move one state forward at a time. So it is a way of describing one machine. But it may be that it is problematic when describing the interaction of many machines. That is a problem that one finds in OO, namely that it is not easy to work with concurrency. So it may be that petri nets have something here additionally to offer which would explain why Martin Oderski coming from working on Java in the late 1990s, but with <a href=\"https://dl.acm.org/doi/abs/10.1145/141471.141536\">previous experience in Haskell</a>, moved to petri-nets. (just speculating here)</p>",
        "id": 198886416,
        "sender_full_name": "Henry Story",
        "timestamp": 1590584341
    },
    {
        "content": "<p>Intuitively how does this relate to modal logic? I think that is quite simple. You have a coalgebra that describes a machine (the simplest one is an infinite stream, but that is not so interesting). A machine like a bank account, that can change state, can have properties such as the balance never going below 0. That is to say one would like to say, necessarily all future states are in the black. Or if you reach above 100 thousand savings you are from then on gold member (whatever happens next). <br>\nI mention modal logic because I think it is work in modal logic where the importance of bisimiarities were first discovered. Though I think it was bisimilarity was first discovered in <a href=\"https://plato.stanford.edu/entries/nonwellfounded-set-theory/\">non-well-founded sets</a></p>",
        "id": 198894386,
        "sender_full_name": "Henry Story",
        "timestamp": 1590588052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> I am reminded of Joe Goguen's \"hidden algebra\" line of work. <br>\nPerhaps worth revisiting :<br>\n<a href=\"https://cseweb.ucsd.edu/~goguen/projs/halg.html\">https://cseweb.ucsd.edu/~goguen/projs/halg.html</a></p>",
        "id": 198902445,
        "sender_full_name": "Rich Hilliard",
        "timestamp": 1590591033
    },
    {
        "content": "<p>So, how is this related to, say, bisimulation of labelled transition systems? In the coalgebra definition it seems to me that bisimulation is formulated by saying that two different coalgebras are/aren't bisimilar, while in labelled transition systems the bisimulation is a relation over a particular LTS. I guess the bisimulation between different LTSs is obtained by first taking their coproduct, and then defining a bisimulation relation on it</p>",
        "id": 198905818,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590592122
    },
    {
        "content": "<p>A labelled transition system is a coalgebra on the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathscr{P}(S)^A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span></span></span></span>. Bisimulations between two coalgebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>→</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup></mrow><annotation encoding=\"application/x-tex\">S \\to \\mathscr{P}(S)^A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span></span></span></span> is described by Jacobs on p118 of \"Introduction to coalgebra\". It's a relation on the subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup><mo>×</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathscr{P}(S)^A  \\times \\mathscr{P}(S)^A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span></span></span></span>. I don't have time now to re-write it here, though it would be a good exercise for me. You can find the details on Google Books <a href=\"https://books.google.de/books?id=tApQDQAAQBAJ&amp;lpg=PA118&amp;vq=Bisimulation%20for%20non-deterministic%20automata&amp;pg=PA118#v=snippet&amp;q=Bisimulation%20for%20non-deterministic%20automata&amp;f=false\">here</a></p>",
        "id": 198908019,
        "sender_full_name": "Henry Story",
        "timestamp": 1590592989
    },
    {
        "content": "<p>But then again, this is a bisimulation between two different systems, while in principle you could have a bisimulation relation over any LTS.</p>",
        "id": 198909691,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590593665
    },
    {
        "content": "<p>Bisimulation is a relation on values/points of a coalgebra. If two values are bisimilar they are taken to the same value of the terminal coalgebra via the universal map.</p>",
        "id": 198910016,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590593815
    },
    {
        "content": "<p>Here's the definition in <a href=\"https://fldit-www.cs.uni-dortmund.de/~peter/Rutten/UniversalCoalgebra.pdf\">Rutten's paper</a>:</p>\n<p>Given two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-coalgebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>α</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi>F</mi><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(S,\\alpha:S\\rightarrow FS)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>T</mi><mo separator=\"true\">,</mo><mi>β</mi><mo>:</mo><mi>T</mi><mo>→</mo><mi>F</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(T,\\beta:T\\rightarrow FT)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>, a bisimulation between them is a relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>⊆</mo><mi>S</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">R\\subseteq S\\times T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> such that there exists a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>:</mo><mi>R</mi><mo>→</mo><mi>F</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma: R\\rightarrow FR</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> making the natural maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">R\\rightarrow S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">R\\rightarrow T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> coalgebra-homomorphisms.</p>",
        "id": 198911310,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590594384
    },
    {
        "content": "<p>You can also have a bisimulation between two different coalgebras. Two states <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> are bisimilar if there is a bisimulation between the LTS and itself containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>. Taking the largest bisimulation on the LTS makes this an if and only if.</p>\n<p>Shameless plug here: I gave a lecture to introduce the theory behind coalgebras (and algebras) in very basic terms and I have notes here: <a href=\"https://ralphs16.github.io/src/CatLectures/Lect102019.pdf\">https://ralphs16.github.io/src/CatLectures/Lect102019.pdf</a></p>",
        "id": 198911332,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590594395
    },
    {
        "content": "<p>Unhelpful non-answer: Bisimulation is one of those things that looks like it shouldn't be hard, but it won't click no matter how many times I read about it</p>",
        "id": 198911456,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1590594462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198909691\">said</a>:</p>\n<blockquote>\n<p>But then again, this is a bisimulation between two different systems, while in principle you could have a bisimulation relation over any LTS.</p>\n</blockquote>\n<p>I just corrected what I wrote from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup><mo>×</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>B</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathscr{P}(S)^A  \\times \\mathscr{P}(S)^B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup><mo>×</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathscr{P}(S)^A  \\times \\mathscr{P}(S)^A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 198911490,
        "sender_full_name": "Henry Story",
        "timestamp": 1590594477
    },
    {
        "content": "<p>I have a problem with this definition actually.  I think that the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> should be part of the content of the bisimulation, not just something that must exist.  So I would say rather that a bisimulation between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>α</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi>F</mi><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(S,\\alpha:S\\rightarrow FS)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>T</mi><mo separator=\"true\">,</mo><mi>β</mi><mo>:</mo><mi>T</mi><mo>→</mo><mi>F</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(T,\\beta:T\\rightarrow FT)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span> is another <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-coalgebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>γ</mi><mo>:</mo><mi>R</mi><mo>→</mo><mi>F</mi><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R,\\gamma:R\\rightarrow FR)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> equipped with jointly monic coalgebra-homomorphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>γ</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R,\\gamma)\\rightarrow (S,\\alpha)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>γ</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo separator=\"true\">,</mo><mi>β</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R,\\gamma)\\rightarrow (T,\\beta)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 198911698,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590594588
    },
    {
        "content": "<p>In other words, a jointly monic span in the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-coalgebras.</p>",
        "id": 198911766,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590594603
    },
    {
        "content": "<p>This is not to say I really understand what the point of bisimulations are.  It would be nice to see a key theorem which arrives at them in some canonical way, uses them as a crucial assumption, etc.</p>",
        "id": 198911851,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590594653
    },
    {
        "content": "<p>From what I've studied, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> should really be a relation between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>, that is, a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S\\times T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> and the monic coalgebra-homomorphisms must then be the projections. Also, the coalgebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> is a witness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> being a bisimulation, so I would not necessarily put it in the definition. In my opinion, a bisimulation is first and foremost a relation between states of two LTSs satisfying some properties. These properties are here stated in coalgebraic terms, but they have other characterizations.</p>",
        "id": 198912487,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590594948
    },
    {
        "content": "<p>Perhaps it makes more semantic sense to not say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> is part of the definition, but it does make for a much simpler definition from a CT standpoint!</p>",
        "id": 198912659,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590595019
    },
    {
        "content": "<p>Can we give an example of two different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mtext>s</mtext></mrow><annotation encoding=\"application/x-tex\">\\gamma\\text{s}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mord text\"><span class=\"mord\">s</span></span></span></span></span> so we can see if there is a semantic difference?</p>",
        "id": 198912706,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590595040
    },
    {
        "content": "<p>I went to <a href=\"https://vetss.org.uk/fifth-workshop-on-formal-methods-and-tools-for-security-fmats5/\">a security conference in Cambridge three year ago</a> and someone presented a project with Facebook. FB had written an optimized PhP compiler, but they wanted to prove that it was bisimilar to the standard one. The project proved that. I can't work out which talk it was though.</p>",
        "id": 198913246,
        "sender_full_name": "Henry Story",
        "timestamp": 1590595268
    },
    {
        "content": "<p>Wasn't that an answer to the 'key theorem' part?</p>",
        "id": 198913853,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590595525
    },
    {
        "content": "<p>Not really, I was looking for something abstract that could be stated concisely and completely.  That's pretty cool because it means to me that bisimulation is a concept that people care a lot about, but it isn't abstract enough to be called a \"key theorem\", and you can't state it concisely and completely because it involves many incompressible idiosyncrasies about PhP and the particular implementation of that compilier.</p>",
        "id": 198914422,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590595779
    },
    {
        "content": "<p>The point of bisimilarity is that it is what people care about in many cases. The two internally different things are identical with respect to their (relevant) observable behavior. That is also one interpretation behind the 'universal map' statement above. If two values are bisimilar, they are mapped to equal values of the terminal coalgebra, which is the coalgebra consisting of 'all possible observation trees'.</p>",
        "id": 198914442,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590595791
    },
    {
        "content": "<p>Are you saying that whenever a bisimulation exists between two coalgebras, they are identical w.r.t. (relevant) observable behavior?  That can't be true because for every two coalgebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> the null bisimulation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi>S</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing\\subseteq S\\times T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> exists between them.  So what is your claim?</p>",
        "id": 198914886,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590596004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198912706\">said</a>:</p>\n<blockquote>\n<p>Can we give an example of two different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mtext>s</mtext></mrow><annotation encoding=\"application/x-tex\">\\gamma\\text{s}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mord text\"><span class=\"mord\">s</span></span></span></span></span> so we can see if there is a semantic difference?</p>\n</blockquote>\n<p>Here's what I've got: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> be a set with more than one element, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mi>S</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo stretchy=\"false\">}</mo><mo>∪</mo><mo stretchy=\"false\">{</mo><mi>y</mi><mo stretchy=\"false\">}</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma = (x,y) \\mapsto S \\times \\{x\\} \\cup \\{y\\} \\times S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mi>S</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma = (x,y) \\mapsto S\\times S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> both make the following diagram commute.<br>\n<a href=\"/user_uploads/21317/EKv5fVJuejy74gYFtMYcmqFu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/EKv5fVJuejy74gYFtMYcmqFu/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/EKv5fVJuejy74gYFtMYcmqFu/image.png\"></a></div>",
        "id": 198916362,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590596615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198914886\">said</a>:</p>\n<blockquote>\n<p>Are you saying that whenever a bisimulation exists between two coalgebras, they are identical w.r.t. (relevant) observable behavior?  That can't be true because for every two coalgebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> the null bisimulation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi>S</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing\\subseteq S\\times T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> exists between them.  So what is your claim?</p>\n</blockquote>\n<p>It is not the coalgebras that are identical (w.r.t. the observable behaviour) but the bisimilar states. The empty relation does not imply any state are bisimilar.</p>",
        "id": 198916805,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590596798
    },
    {
        "content": "<p>I've found a lot of good material for understanding why one might care about different notions of bisimilarity is in the paper \"bisimulation can't be traced\": <a href=\"http://www.lix.polytechnique.fr/~catuscia/teaching/DEA/General/BloomIstrailMeyer.pdf\">http://www.lix.polytechnique.fr/~catuscia/teaching/DEA/General/BloomIstrailMeyer.pdf</a></p>\n<p>I also agree with Dan that it is better to first understand why people care about bisimilarity by using concrete examples and then later understand \"oh, this stuff is captured very neatly by examining coalgebras\" rather than start with the general categorical setup first.</p>",
        "id": 198917859,
        "sender_full_name": "Gershom",
        "timestamp": 1590597336
    },
    {
        "content": "<p>The point is that the terminal coalgebra contains exactly the things we care about, by definition. So, if two states are mapped to the same value of the terminal coalgebra, they are interchangeable from this perspective. There may be reasons for choosing one coalgebra/state over another that is abstracted over by only considering the coalgebra structure, but the point is to know that they are 'the same' with respect to the coalgebra structure.</p>\n<p>This is similar to only caring about the points/graph of a function, and using extensional equality of functions. There may be many ways to implement a function on a computer (say), with different reasons for choosing one over another, but when we consider the specific abstraction of functions, we are only concerned with the mapping between inputs and outputs. You could do a similar thing where you consider 'functional coalgebras', and the exponential would be the terminal coalgebra (although the presentation as a coalgebra is kind of trivial).</p>",
        "id": 198918602,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590597714
    },
    {
        "content": "<p>(I should not be hanging out here, but it's really too fun!)<br>\nI wish I could find that project with FB documented somewhere, as that really made me go Wow! It may have been during a conversation that that came up, when I asked how CT was used. I'll keep looking... <br>\nFor OO programmers these articles by Bart Jacobs are really helpful, essentially explaining how to think of interfaces in Java</p>\n<ul>\n<li><a href=\"https://link.springer.com/chapter/10.1007/978-1-4613-1437-0_5\">Objects and Classes, Co-Algebraically</a></li>\n<li><a href=\"https://www.sciencedirect.com/science/article/pii/S1571066104000611\">Coalgebraic Reasoning about Classes in OO Languages</a></li>\n</ul>",
        "id": 198918943,
        "sender_full_name": "Henry Story",
        "timestamp": 1590597872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198914886\">said</a>:</p>\n<blockquote>\n<p>Are you saying that whenever a bisimulation exists between two coalgebras, they are identical w.r.t. (relevant) observable behavior?  That can't be true because for every two coalgebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> the null bisimulation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi>S</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing\\subseteq S\\times T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> exists between them.  So what is your claim?</p>\n</blockquote>\n<p>A bisimulation is a relation in a category of coalgebras. Then they define <em>bisimilarity</em> to be the colimit of all such bisimulations. <a href=\"https://en.wikipedia.org/wiki/Bisimulation\">https://en.wikipedia.org/wiki/Bisimulation</a></p>\n<p>Then if two things are bisimilar, they have the same observable behavior. I picture them as agents which make actions to change state, and bisimilarity means that they can \"match each other's moves\".</p>",
        "id": 198933690,
        "sender_full_name": "Christian Williams",
        "timestamp": 1590604678
    },
    {
        "content": "<p>So from that wikipedia page, seems like bisimulation is between systems and bisimilarity is between states in a single system.   Are you thinking of systems or states as agents?</p>",
        "id": 198934418,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590605019
    },
    {
        "content": "<p>Good question. I think it's mainly a matter of perspective. More literally I think about an element of a labelled transition system as a program, and the edges are computation steps.</p>\n<p>Now there's two main kinds of LTS: in the simple one, the edges are just reductions -- steps that the program could take by itself. But there is one which is more expressive, in which you also include edges for \"if the program were put into this context, then it could take this step\".</p>",
        "id": 198936000,
        "sender_full_name": "Christian Williams",
        "timestamp": 1590605734
    },
    {
        "content": "<p>The latter is important for concurrency, because we also want to record <em>potential</em> for interaction -- on which channels can this program communicate? This introduces a more refined kind of bisimulation called \"barbed bisimulation\".</p>",
        "id": 198936141,
        "sender_full_name": "Christian Williams",
        "timestamp": 1590605796
    },
    {
        "content": "<p>What's a good interpretation of the coalgebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>γ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R,\\gamma)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span></span></span></span>?  What is a good way of thinking of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">FR</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>?  It seems like people here are really thinking about transition systems of some sort, rather than coalgebras in general, is that true?  Is there a way that every coalgebra is in some sense a transition system?</p>",
        "id": 198945484,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590609888
    },
    {
        "content": "<p>Yes. That is the idea.</p>",
        "id": 198945637,
        "sender_full_name": "Henry Story",
        "timestamp": 1590609950
    },
    {
        "content": "<p>Can you elaborate?  If I hand you an arbitrary set functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, how are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-coalgebras transition systems?</p>",
        "id": 198946347,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590610291
    },
    {
        "content": "<p>You can think of the full memory layout in a computer or virtual machine as the state of the machine. The a procedural program changes that state from one instruction to the next. But you can transform the same coalgebra into a monad, and you then get the functional view on programming. <a href=\"https://www.sciencedirect.com/science/article/pii/S0304397502003663\">Coalgebras and monads in the semantics of Java</a>.</p>",
        "id": 198946730,
        "sender_full_name": "Henry Story",
        "timestamp": 1590610508
    },
    {
        "content": "<p>Transition systems are coalgebras of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi><mo>→</mo><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathscr{P}(A\\times -):\\mathrm{Set\\to Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">t</span></span></span></span></span> for a set of labels <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. The insight that these are coalgebras of an endofunctor leads to huge generalization -- we can think about any endofunctor on any category. It seems like people like to think of them as transition systems, but in reality they could be all sorts of structures.</p>",
        "id": 198947052,
        "sender_full_name": "Christian Williams",
        "timestamp": 1590610680
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">t: S \\to F(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> is the coalgebra (S, F), with state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and Functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. It's a function that gives you something with another <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> from which you can call the function t again. If you don't have a S in your result but some type A, then that is your observable. If you have a function that returns an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> then that can be used to choose the next transition by the one running the program.</p>",
        "id": 198947251,
        "sender_full_name": "Henry Story",
        "timestamp": 1590610765
    },
    {
        "content": "<p>But yes, it does not have to be states. There is work on thinking of real numbers coalgebraically. That allows you to think of infinite sequences as being produced. <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> wrote this article <a href=\"https://www.sciencedirect.com/science/article/pii/S1571066105802725\">On coalgebras of real numbers</a></p>",
        "id": 198947831,
        "sender_full_name": "Henry Story",
        "timestamp": 1590611002
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> has an equational presentation (<a href=\"https://www.semanticscholar.org/paper/Presentation-of-Set-Functors%3A-A-Coalgebraic-Ad%C3%A1mek-Gumm/0638f4cccc0fe20fe7868d8e2d84af2301863dcd\">cf</a>) then I can kind of see how an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-coalgebra could be thought of as a transition system, maybe someone can make this more precise?</p>",
        "id": 198948552,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590611321
    },
    {
        "content": "<p>OK, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> has an equational presentation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\Sigma, E)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>, then we could consider each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>∈</mo><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma\\in \\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> as a transition action which regards <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>ar</mtext><mo stretchy=\"false\">(</mo><mi>σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{ar}(\\sigma)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">ar</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">)</span></span></span></span> multiple states in different roles.  Equations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> would represent equivalences of actions.</p>",
        "id": 198949168,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590611567
    },
    {
        "content": "<p>If someone wants I can explain what I mean by \"equational presentation\".</p>",
        "id": 198949543,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590611753
    },
    {
        "content": "<p>I think you have to remember this diagram. <a href=\"/user_uploads/21317/Ii9H2g7y_JVkNZqWmRPeeiBt/AlgebraColagebra.jpg\">AlgebraColagebra.jpg</a>. What identity is to algebras so bisimilarity is to coalgebras.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Ii9H2g7y_JVkNZqWmRPeeiBt/AlgebraColagebra.jpg\" title=\"AlgebraColagebra.jpg\"><img src=\"/user_uploads/21317/Ii9H2g7y_JVkNZqWmRPeeiBt/AlgebraColagebra.jpg\"></a></div>",
        "id": 198950030,
        "sender_full_name": "Henry Story",
        "timestamp": 1590611991
    },
    {
        "content": "<p>but I should probably leave this for people with more experience with CT to explain this...</p>",
        "id": 198950673,
        "sender_full_name": "Henry Story",
        "timestamp": 1590612262
    },
    {
        "content": "<p>I should probably elaborate more.  But I do want to acknowledge that people on this forum are coming from lots of different disciplines so communicating will take some trial and error, and asking and giving clarification is very important because it is hard to know what concepts and vocabulary is okay to assume.</p>",
        "id": 198951263,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590612565
    },
    {
        "content": "<p>So let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> be a signature, that is, a set of operators, each equipped with an arity.  We define a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which sends a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>σ</mi><mo>∈</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mtext>ar</mtext><mo stretchy=\"false\">(</mo><mi>σ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\sigma(x_1,\\ldots x_n) | \\sigma\\in\\Sigma, \\text{ar}(\\sigma)=n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord\">ar</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">}</span></span></span></span>.  This is called a polynomial functor with signature <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>.</p>",
        "id": 198951524,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590612692
    },
    {
        "content": "<p>(The notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(x_1,\\ldots, x_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is purely formal, by which I mean that it is a string, not something which can be evaluated.)</p>",
        "id": 198951663,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590612758
    },
    {
        "content": "<p>What is your background? I was tricked into writing up some of my background <a href=\"#narrow/stream/232163-learning.3A-history.20of.20ideas/topic/History.20of.20Ideas.20AMA.3A.20Henry.20Story\">here</a> which in short is philosophy, computing, and the semantic web. ;-)</p>",
        "id": 198951672,
        "sender_full_name": "Henry Story",
        "timestamp": 1590612762
    },
    {
        "content": "<p>Math mainly</p>",
        "id": 198951689,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590612776
    },
    {
        "content": "<p>I have been discovering that Maths is a huge field. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 198951805,
        "sender_full_name": "Henry Story",
        "timestamp": 1590612840
    },
    {
        "content": "<p>Also some chemistry and physics, coding but not much theoretical CS, and philosophy through discussion but not much reading</p>",
        "id": 198951806,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590612840
    },
    {
        "content": "<p>What you said makes perfect sense to me so far, Joshua.   A polynomial functor given by a signature - yup!</p>",
        "id": 198951887,
        "sender_full_name": "John Baez",
        "timestamp": 1590612860
    },
    {
        "content": "<p>Never suspected bisimulation was connected to those.</p>",
        "id": 198952105,
        "sender_full_name": "John Baez",
        "timestamp": 1590612959
    },
    {
        "content": "<p>Yeah the math I am familiar with is roughly equal to the proof-based math in the undergraduate curriculum for pure math majors</p>",
        "id": 198952122,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590612961
    },
    {
        "content": "<p>Oh I was talking several steps away from bisimulation atm.  I was just trying to think about how to interpret a large class of coalgebras as transition systems, because everyone seems to think in terms of transition systems when thinking about coalgebras and bisimulation.</p>",
        "id": 198952293,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613028
    },
    {
        "content": "<p>Okay.  I don't understand any of this stuff (except the general idea of coalgebras of functors).</p>",
        "id": 198952407,
        "sender_full_name": "John Baez",
        "timestamp": 1590613085
    },
    {
        "content": "<p>But I think we're stopping you from saying what you're trying to say!</p>",
        "id": 198952595,
        "sender_full_name": "John Baez",
        "timestamp": 1590613194
    },
    {
        "content": "<p>So to continue, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> be a bunch of formal equations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>m</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>τ</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(x_1,\\ldots,x_m)=\\tau(y_1,\\ldots,y_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>m</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">x_1,\\ldots,x_m, y_1,\\ldots,y_n\\in X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> for some set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>ar</mtext><mo stretchy=\"false\">(</mo><mi>σ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\text{ar}(\\sigma)=m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">ar</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>ar</mtext><mo stretchy=\"false\">(</mo><mi>τ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\text{ar}(\\tau)=n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">ar</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>.</p>",
        "id": 198952687,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613216
    },
    {
        "content": "<p>I came to coalgebras looking for modern views on modal logics, and found <span class=\"user-mention\" data-user-id=\"276830\">@Alexander Kurz</span> 's <a href=\"https://academic.oup.com/comjnl/article-abstract/54/1/31/336864\">Modal Logics are coalgebraic</a> also written by my supervisor Corina Cirstea. So that led me to wonder what mathematicians understood by algebras, and found your explanation in terms of signatures is the standard one <span class=\"user-mention\" data-user-id=\"280784\">@Joshua Meyers</span> . CT simplifies/unifies that by thinking in terms of polynomial functors, as I understand.</p>",
        "id": 198952750,
        "sender_full_name": "Henry Story",
        "timestamp": 1590613255
    },
    {
        "content": "<p>We can now define a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> by saying that the natural transformation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo>⇒</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma\\Rightarrow F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is universal w.r.t sending things that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> equates to the same thing.</p>",
        "id": 198953039,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613373
    },
    {
        "content": "<p>then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\Sigma, E)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> is an <em>equational presentation</em> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>.</p>",
        "id": 198953189,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613453
    },
    {
        "content": "<p>Can I try to rephrase this so I understand it?  Or do you want to march on?</p>",
        "id": 198953238,
        "sender_full_name": "John Baez",
        "timestamp": 1590613487
    },
    {
        "content": "<p>I think that every accessible functor has an equational presentation.</p>",
        "id": 198953240,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613487
    },
    {
        "content": "<p>Sure</p>",
        "id": 198953253,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613493
    },
    {
        "content": "<p>So I'm guessing maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> is a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>:</mo><mi mathvariant=\"sans-serif\">S</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\Sigma : \\mathsf{S} \\to \\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{S}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span></span></span></span></span> is the groupoid of finite sets and bijections, or if you prefer a skeleton thereof.</p>",
        "id": 198953464,
        "sender_full_name": "John Baez",
        "timestamp": 1590613598
    },
    {
        "content": "<p>That is for each finite set of \"variables\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> gives a set of \"operations\".</p>",
        "id": 198953562,
        "sender_full_name": "John Baez",
        "timestamp": 1590613668
    },
    {
        "content": "<p>Or if you prefer, for each natural number \"arity\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> gives a set of operations - here I'm using a skeleton, to work with natural numbers instead of \"finite sets of variables\"</p>",
        "id": 198953677,
        "sender_full_name": "John Baez",
        "timestamp": 1590613713
    },
    {
        "content": "<p>Sure, but let's use a different symbol because your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> is my <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mtext>ar</mtext><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\text{ar}^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">ar</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 198953728,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613751
    },
    {
        "content": "<p>But the main thing I'm checking is that the permutation groups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> acts on the set of n-ary operations.</p>",
        "id": 198953744,
        "sender_full_name": "John Baez",
        "timestamp": 1590613758
    },
    {
        "content": "<p>Well, you said the \"signature\" was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>, and I'm saying what I think a signature is.</p>",
        "id": 198953764,
        "sender_full_name": "John Baez",
        "timestamp": 1590613778
    },
    {
        "content": "<p>It's a set of operations for each arity.</p>",
        "id": 198953785,
        "sender_full_name": "John Baez",
        "timestamp": 1590613794
    },
    {
        "content": "<p>I'll let you use your notation as you see fit; I'm just trying to say how I think about what you're saying.</p>",
        "id": 198953864,
        "sender_full_name": "John Baez",
        "timestamp": 1590613813
    },
    {
        "content": "<p>Sure it's equivalent.  I'm thinking of a signature as a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> with a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>ar</mtext><mo>:</mo><mi mathvariant=\"normal\">Σ</mi><mo>→</mo><mtext>Card</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{ar}:\\Sigma\\rightarrow \\text{Card}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">ar</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">Card</span></span></span></span></span></p>",
        "id": 198953866,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613814
    },
    {
        "content": "<p>OK sorry go on</p>",
        "id": 198953888,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590613835
    },
    {
        "content": "<p>Well, my way of thinking gives a permutation action, but you could say no, you don't want the ability to permute variables in operations.</p>",
        "id": 198953933,
        "sender_full_name": "John Baez",
        "timestamp": 1590613870
    },
    {
        "content": "<p>Anyway, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> gives a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo>:</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma : \\mathsf{Set} \\to \\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span>.</p>",
        "id": 198953993,
        "sender_full_name": "John Baez",
        "timestamp": 1590613921
    },
    {
        "content": "<p>And this is</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msub><mo>×</mo><msub><mi>S</mi><mi>n</mi></msub></msub><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> H_\\Sigma(X) = \\sum_{n \\ge 0} \\Sigma(n) \\times_{S_n} X^n </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.144889em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139799999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">Σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">×</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 198954090,
        "sender_full_name": "John Baez",
        "timestamp": 1590613972
    },
    {
        "content": "<p>Note <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> acts on both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> and on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, so we're modding out by that action here.  Another notation is</p>",
        "id": 198954198,
        "sender_full_name": "John Baez",
        "timestamp": 1590614017
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>×</mo><msup><mi>X</mi><mi>n</mi></msup></mrow><msub><mi>S</mi><mi>n</mi></msub></mfrac></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\"> \\displaystyle{ H_\\Sigma(X) = \\sum_{n \\ge 0} \\frac{ \\Sigma(n) \\times X^n}{S_n}} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:2.789292em;vertical-align:-1.362292em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8828869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.362292em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>",
        "id": 198954326,
        "sender_full_name": "John Baez",
        "timestamp": 1590614048
    },
    {
        "content": "<p>Either way, what I'm doing is letting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> range over natural numbers, i.e. my favorite finite sets, and the sum is  a coproduct, i.e. disjoint union.</p>",
        "id": 198954399,
        "sender_full_name": "John Baez",
        "timestamp": 1590614104
    },
    {
        "content": "<p>And this formula, esp. the second version, looks a whole lot like a Taylor series.</p>",
        "id": 198954437,
        "sender_full_name": "John Baez",
        "timestamp": 1590614124
    },
    {
        "content": "<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is like the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span></span></span></span> you see in a Taylor series.</p>",
        "id": 198954461,
        "sender_full_name": "John Baez",
        "timestamp": 1590614143
    },
    {
        "content": "<p>Okay, now you're gonna get another functor by imposing equations.</p>",
        "id": 198954484,
        "sender_full_name": "John Baez",
        "timestamp": 1590614160
    },
    {
        "content": "<p>Hmm, you're imposing equations that depend on what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is?</p>",
        "id": 198954673,
        "sender_full_name": "John Baez",
        "timestamp": 1590614268
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 198954830,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614327
    },
    {
        "content": "<p>Actually I'm completely confused now because your concept of \"equation\" seems to involve choosing a specific set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, but in the end you're getting a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>.</p>",
        "id": 198954846,
        "sender_full_name": "John Baez",
        "timestamp": 1590614337
    },
    {
        "content": "<p>Oh</p>",
        "id": 198954861,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614344
    },
    {
        "content": "<p>I just meant that each equation must be drawn from a single <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span></p>",
        "id": 198954902,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614370
    },
    {
        "content": "<p>How are you going to wrangle all these choices of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>'s into a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">F: \\mathsf{Set} \\to \\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span>?</p>",
        "id": 198955003,
        "sender_full_name": "John Baez",
        "timestamp": 1590614410
    },
    {
        "content": "<p>But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> can totally contain equations from different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mtext>s</mtext></mrow><annotation encoding=\"application/x-tex\">X\\text{s}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord text\"><span class=\"mord\">s</span></span></span></span></span>, you just can't equate things in different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mtext>s</mtext></mrow><annotation encoding=\"application/x-tex\">X\\text{s}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord text\"><span class=\"mord\">s</span></span></span></span></span></p>",
        "id": 198955023,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614420
    },
    {
        "content": "<p>So here's how we could construct <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span></p>",
        "id": 198955045,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614442
    },
    {
        "content": "<p>I don't get this at all, esp. since we're trying to make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> a functor in the end, so it shouldn't care about individual choices of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> at all, like {3,4} versus {1,7}.</p>",
        "id": 198955112,
        "sender_full_name": "John Baez",
        "timestamp": 1590614488
    },
    {
        "content": "<p>I was (and am) hoping that you'll get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> by starting with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and doing a coequalizer in the category of functors from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> to  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span>.</p>",
        "id": 198955256,
        "sender_full_name": "John Baez",
        "timestamp": 1590614556
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the functor of operations, so presumably you'll take the free monad on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, to get the terms, and then take a coequaliser of <em>that</em>.</p>",
        "id": 198955345,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1590614628
    },
    {
        "content": "<p>[Note Let's bracket size issues.]  So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a relation on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∐</mo><mrow><mi>X</mi><mo>∈</mo><mtext>Set</mtext></mrow></msub><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\coprod_{X\\in\\text{Set}} H_\\Sigma X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"mrel mtight\">∈</span><span class=\"mord text mtight\"><span class=\"mord mtight\">Set</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.  Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∼</mo></mrow><annotation encoding=\"application/x-tex\">\\sim</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">∼</span></span></span></span> be the congruence generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, i.e. the smallest congruence containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span>.  By \"congruence\" I mean an equivalence relation which also satisfies the property that whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x,y\\in H_\\Sigma(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∼</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\sim y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X\\rightarrow Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is a morphism, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma f(x)\\sim H_\\Sigma f(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 198955543,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614738
    },
    {
        "content": "<p>Then let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>X</mi><mo>=</mo><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>X</mi><mi mathvariant=\"normal\">/</mi><msub><mo>∼</mo><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">FX=H_\\Sigma X / \\sim_X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">∼</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∼</mo><mi>X</mi></msub><mo>=</mo><mo>∼</mo><mo>∩</mo><mo stretchy=\"false\">(</mo><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sim_X=\\sim \\cap (H_\\Sigma X)^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5168699999999999em;vertical-align:-0.15em;\"></span><span class=\"mrel\"><span class=\"mrel\">∼</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∩</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 198955880,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590614927
    },
    {
        "content": "<p>Zounds!   I find this terrifying.   I think there must be a way to rephrase it that I could tolerate better.</p>",
        "id": 198956334,
        "sender_full_name": "John Baez",
        "timestamp": 1590615153
    },
    {
        "content": "<p>Sorry let me try</p>",
        "id": 198956389,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615191
    },
    {
        "content": "<p>This is the equational presentation of an algebraic theory, no? In which case you can simply pick your favourite definition.</p>",
        "id": 198956423,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1590615213
    },
    {
        "content": "<p>I was trying to determine what Joshua was doing.</p>",
        "id": 198956453,
        "sender_full_name": "John Baez",
        "timestamp": 1590615238
    },
    {
        "content": "<p>If he's doing an equational presentation of an algebraic theory, I know ways to do that that I like.  But I'm having trouble being sure he's doing that.</p>",
        "id": 198956540,
        "sender_full_name": "John Baez",
        "timestamp": 1590615275
    },
    {
        "content": "<p>It seems like this is just trying to do the same thing as algebra, but this is coalgebra, so you should instead do the opposite thing.</p>",
        "id": 198956563,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590615295
    },
    {
        "content": "<p>I'm doing an equational presentation of a set functor, not an algebraic theory.  Unless it's equivalent somehow and I don't realize</p>",
        "id": 198956596,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615314
    },
    {
        "content": "<p>It could be quite different... you say in the end you're gonna get all accessible functors Set -&gt; Set this way?</p>",
        "id": 198956743,
        "sender_full_name": "John Baez",
        "timestamp": 1590615403
    },
    {
        "content": "<p>Yeah</p>",
        "id": 198956753,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615411
    },
    {
        "content": "<p>How about I give some examples?</p>",
        "id": 198956756,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615413
    },
    {
        "content": "<p>It may be easier if one starts before bringing in congruence, since coalgebras have a dual of it. <br>\nI think in algebras and coalgebras we are dealing with polynomial endofunctors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> if that helps. The functors can be divided into three inclusive groups, quoting Bart Jacobs:</p>\n<ul>\n<li>simple ploynomial functors: identity, constants,  finite products, arbitrary coproduces</li>\n<li>exponent polynomial: additionally with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><msup><mo stretchy=\"false\">)</mo><mi>A</mi></msup></mrow><annotation encoding=\"application/x-tex\">(-)^A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span></span></span></span></span></span></span></span> with infinite A</li>\n<li>Kripke polynomials: Additionally the powerset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathscr{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">P</span></span></span></span></span> functor</li>\n</ul>\n<p>Then an coalgebra is a choice in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">X \\in \\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> together with a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c: X \\to F(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is called the state space and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span> the transition or coalgebra structure.</p>",
        "id": 198956788,
        "sender_full_name": "Henry Story",
        "timestamp": 1590615437
    },
    {
        "content": "<p>Like, for algebra, you don't present a functor F by generators and equations and then do the F-algebra, you present a monad T that way, and F-algebras are algebras of the free monad (on F). But, coalgebras are related to comonads, and F-coalgebras are coalgebras of the cofree comonad (on F).</p>",
        "id": 198956880,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590615483
    },
    {
        "content": "<p>Anyway, I have to do some work now, but my preferred method of proceeding <em>would</em> have been to rephrase what Joshua was doing in a way that didn't require a large coproduct.  And this other way (if it exists) would with luck be something I find much easier to understand.</p>",
        "id": 198956928,
        "sender_full_name": "John Baez",
        "timestamp": 1590615535
    },
    {
        "content": "<p>Oh that was the problem</p>",
        "id": 198956952,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615558
    },
    {
        "content": "<p>No, that was just the usual sign that something terrible was happening.</p>",
        "id": 198956971,
        "sender_full_name": "John Baez",
        "timestamp": 1590615575
    },
    {
        "content": "<p>Lol</p>",
        "id": 198956986,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615587
    },
    {
        "content": "<p>I don't mind large things, but I've seen other cases where when you're tempted to use them it means you're doing something suboptimally.</p>",
        "id": 198957070,
        "sender_full_name": "John Baez",
        "timestamp": 1590615612
    },
    {
        "content": "<p>It seems in the end you're getting a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> as a \"quotient\" of the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 198957119,
        "sender_full_name": "John Baez",
        "timestamp": 1590615635
    },
    {
        "content": "<p>So that to me would suggest you're getting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> as a coequalizer in the category of functors from Set to Set.</p>",
        "id": 198957163,
        "sender_full_name": "John Baez",
        "timestamp": 1590615670
    },
    {
        "content": "<p>So the way to get around that is to say that a congruence on a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is a family of equivalence relations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>∼</mo><mi>X</mi></msub><msub><mo stretchy=\"false\">)</mo><mrow><mi>X</mi><mo>∈</mo><mtext>Set</mtext></mrow></msub></mrow><annotation encoding=\"application/x-tex\">(\\sim_X)_{X\\in\\text{Set}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mrel\"><span class=\"mrel\">∼</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"mrel mtight\">∈</span><span class=\"mord text mtight\"><span class=\"mord mtight\">Set</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span></span></span></span> such that whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">x,y\\in X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><msub><mo>∼</mo><mi>X</mi></msub><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\sim_X y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">∼</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X\\rightarrow Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is a morphism, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msub><mo>∼</mo><mi>Y</mi></msub><mi>F</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Ff(x)\\sim_Y Ff(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">∼</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 198957207,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615708
    },
    {
        "content": "<p>I can't think about that - it breaks my brain.   I really think you must be taking a coequalizer as I'm suggesting.</p>",
        "id": 198957314,
        "sender_full_name": "John Baez",
        "timestamp": 1590615782
    },
    {
        "content": "<p>Congruences on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> are in 1-1 correspondence with \"epitransformations\", that is, natural transformations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⇒</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F\\Rightarrow G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span> which are epi in each component.</p>",
        "id": 198957321,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615787
    },
    {
        "content": "<p>OK how does this coequalizer work?</p>",
        "id": 198957334,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590615798
    },
    {
        "content": "<p>Oh, now you're starting to talk English!</p>",
        "id": 198957335,
        "sender_full_name": "John Baez",
        "timestamp": 1590615798
    },
    {
        "content": "<p>An \"epitransformation\" is just an epimorphism in the functor category I'm talking about: the category of functors from Set to Set.</p>",
        "id": 198957450,
        "sender_full_name": "John Baez",
        "timestamp": 1590615868
    },
    {
        "content": "<p>I feel sure you're just doing a coequalizer in this category - a coequalizers of two natural transformations from some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 198957560,
        "sender_full_name": "John Baez",
        "timestamp": 1590615956
    },
    {
        "content": "<p>If you did such a coequalizer (annoying to draw the diagram here), you'd wind up with an epimorphism</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo>⇒</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma \\Rightarrow F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span></p>",
        "id": 198957645,
        "sender_full_name": "John Baez",
        "timestamp": 1590615999
    },
    {
        "content": "<p>Huh maybe I can make that work</p>",
        "id": 198957659,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616012
    },
    {
        "content": "<p>But okay, instead of doing a coequalizer you're \"modding out by a congruence\".</p>",
        "id": 198957716,
        "sender_full_name": "John Baez",
        "timestamp": 1590616067
    },
    {
        "content": "<p>Yeah</p>",
        "id": 198957842,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616131
    },
    {
        "content": "<p>I think the process of building up that congruence was freaking me out.   Usually when you take a coequalizer diagram (where you just say what you want to be equal to what) and turn it into a congruence (a very nice sort of \"equivalence relation\") you have to do a lot of work.</p>",
        "id": 198957875,
        "sender_full_name": "John Baez",
        "timestamp": 1590616158
    },
    {
        "content": "<p>I don't see right now how to figure out what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> could be, seeing as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is completely arbitrary</p>",
        "id": 198957899,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616173
    },
    {
        "content": "<p>Like I can take a group and just say \"I want to make x equal to y, and z equal to w\", and that's easy to do with a coequalizer.</p>",
        "id": 198957997,
        "sender_full_name": "John Baez",
        "timestamp": 1590616207
    },
    {
        "content": "<p>Or I can explicitly describe the smallest congruence with x ~ y and z ~ w, and that's a pain in the butt.</p>",
        "id": 198958065,
        "sender_full_name": "John Baez",
        "timestamp": 1590616240
    },
    {
        "content": "<p>Of course in the first approach all the <em>work</em> is buried in showing that the category of groups <em>has</em> coequalizers.</p>",
        "id": 198958117,
        "sender_full_name": "John Baez",
        "timestamp": 1590616280
    },
    {
        "content": "<p>X would depend on what E you want.</p>",
        "id": 198958136,
        "sender_full_name": "John Baez",
        "timestamp": 1590616302
    },
    {
        "content": "<p>Like if I have a group G and I want to mod out in a way that sets x equal y and z equal to w, I pick two homomorphisms</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msup><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^2 \\to G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span></p>",
        "id": 198958209,
        "sender_full_name": "John Baez",
        "timestamp": 1590616334
    },
    {
        "content": "<p>one of which sends the two generators of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> to x and z, the other of which sends them to y and w.</p>",
        "id": 198958235,
        "sender_full_name": "John Baez",
        "timestamp": 1590616358
    },
    {
        "content": "<p>Yes.   Then I do the coequalizer of these two homomorphisms.</p>",
        "id": 198958262,
        "sender_full_name": "John Baez",
        "timestamp": 1590616387
    },
    {
        "content": "<p>Right</p>",
        "id": 198958286,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198956596\">said</a>:</p>\n<blockquote>\n<p>I'm doing an equational presentation of a set functor, not an algebraic theory.  Unless it's equivalent somehow and I don't realize</p>\n</blockquote>\n<p>Finitary polynomial functors correspond to non-equational presentations; and finitary monads correspond to equational presentations, as <span class=\"user-mention\" data-user-id=\"277270\">@Dan Doel</span> points out. So I would have thought one of the two was close to equivalent to what you were doing.</p>",
        "id": 198958315,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1590616424
    },
    {
        "content": "<p>Anyway, I'll be happy, <span class=\"user-mention\" data-user-id=\"280784\">@Joshua Meyers</span>, if you're talking about functors that can be built from polynomial functors by taking a coequalizer.</p>",
        "id": 198958426,
        "sender_full_name": "John Baez",
        "timestamp": 1590616485
    },
    {
        "content": "<p>So let's say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> equates two elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">A</span></span></span></span> and two elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and that's it.</p>",
        "id": 198958453,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616502
    },
    {
        "content": "<p>Okay.   But surely if you have a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A \\to A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> you're gonna want to equate two elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.901892em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> too, right?</p>",
        "id": 198958533,
        "sender_full_name": "John Baez",
        "timestamp": 1590616557
    },
    {
        "content": "<p>Seems like to follow your group analogy, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> would need to have two \"free generators\", one for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> and one for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, and nothing else. But I'm not sure how to build a functor like that.</p>",
        "id": 198958579,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616565
    },
    {
        "content": "<p>Right</p>",
        "id": 198958602,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616576
    },
    {
        "content": "<p>What freaks me out is that you're running around the world saying stuff like \"let A = {dog, cat}, then let me equate two things in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span>.... then let B = {7,9, pi}...\"</p>",
        "id": 198958656,
        "sender_full_name": "John Baez",
        "timestamp": 1590616623
    },
    {
        "content": "<p>It's just so unsystematic!   And then you're repairing this somehow.</p>",
        "id": 198958681,
        "sender_full_name": "John Baez",
        "timestamp": 1590616641
    },
    {
        "content": "<p>Category theorists try not to let themselves do such unfunctorial things.</p>",
        "id": 198958771,
        "sender_full_name": "John Baez",
        "timestamp": 1590616685
    },
    {
        "content": "<p>I don't really understand why we're going through all this effort to describe the functors, personally. :)</p>",
        "id": 198958787,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590616700
    },
    {
        "content": "<p>I'm just trying to understand what Joshua is saying, that's all.</p>",
        "id": 198958807,
        "sender_full_name": "John Baez",
        "timestamp": 1590616716
    },
    {
        "content": "<p>I should probably get some work done, so I'll stop and let him carry on.</p>",
        "id": 198958849,
        "sender_full_name": "John Baez",
        "timestamp": 1590616750
    },
    {
        "content": "<p>Well that's the whole idea of \"presenting the functor\".  You just say the minimal amount of equations necessary.  You don't need to say anything about A'= {bird, wolf} because talking about A suffices</p>",
        "id": 198958885,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616775
    },
    {
        "content": "<p>Okay.  You come from a different tradition, I guess.  I'm happier saying what happens to all 2-element sets at once.  For one thing, if I understand what you're doing, nothing can depend on who is the dog and who is the cat - not in the end, anyway.</p>",
        "id": 198958977,
        "sender_full_name": "John Baez",
        "timestamp": 1590616816
    },
    {
        "content": "<p>Right it doesn't matter in the end</p>",
        "id": 198959144,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590616917
    },
    {
        "content": "<p>Okay, so to me it's a distracting \"gambit\" to describe things in a massively asymmetrical way and then restore the symmetry later.  Sometimes you <em>have to</em>, but if you don't have to I'd rather not.    It's just like describing some construction in linear algebra using a basis and then showing it didn't depend on the choice of a basis.</p>",
        "id": 198959299,
        "sender_full_name": "John Baez",
        "timestamp": 1590616999
    },
    {
        "content": "<p>Anyway, I will bow out now.... thanks, and sorry for the huge digression.</p>",
        "id": 198959339,
        "sender_full_name": "John Baez",
        "timestamp": 1590617028
    },
    {
        "content": "<p>I see</p>",
        "id": 198959342,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617030
    },
    {
        "content": "<p>Thanks for your patience with my strange exposition</p>",
        "id": 198959402,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617052
    },
    {
        "content": "<p>So anyway, a huge class of functors can be described this way</p>",
        "id": 198959429,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617079
    },
    {
        "content": "<p>I think it's possible to coalgebras of these functors as transition systems in some sense</p>",
        "id": 198959454,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617095
    },
    {
        "content": "<p>So, like... if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>β</mi><mo separator=\"true\">,</mo><mi>γ</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma=\\{\\alpha,\\beta,\\gamma\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">}</span></span></span></span> with arities <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">0,1,2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span></span></span></span> respectively, say, we could give some interpretations to these like, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\alpha()</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span></span></span></span> is the null transition, we don't go anywhere, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\beta(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> goes to state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\gamma(x,y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> asks the user for their favorite color and goes to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> if it's red and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> otherwise</p>",
        "id": 198959776,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617292
    },
    {
        "content": "<p>and then we might want to impose some relations like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>γ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\beta(x)=\\gamma(x,x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> because the latter throws out the info about the user's birthday anyway so we might as well not even ask</p>",
        "id": 198959831,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617339
    },
    {
        "content": "<p>So then a coalgebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>→</mo><mi>F</mi><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow FS</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> would be an assignment of a transition to each state.</p>",
        "id": 198959870,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617376
    },
    {
        "content": "<p>And I think you could do something like this for any equationally presented functor</p>",
        "id": 198959892,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617391
    },
    {
        "content": "<p>Also sorry I've been ignoring everyone else let me try to respond</p>",
        "id": 198959975,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617432
    },
    {
        "content": "<p>yes, but I think you need to take into account that coalgebras are duals of algebras. As I understand you get your equational theories in algebras using monads. And with coalgebras it is using co-monads. So everything is really upside down in this weird way that things are in CT for duals (eg addition is upside down multiplication, who would have thought!) Especially equational thinking has a dual. So if you bring equational thinking too early everything will seem weird.</p>",
        "id": 198960107,
        "sender_full_name": "Henry Story",
        "timestamp": 1590617518
    },
    {
        "content": "<p>Hm I haven't really studied algebra, only coalgebra.  The stuff I'm talking about is simply about set functors, but they came up in a coalgebra paper I was reading.</p>",
        "id": 198960236,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617605
    },
    {
        "content": "<p>which paper?</p>",
        "id": 198960360,
        "sender_full_name": "Henry Story",
        "timestamp": 1590617678
    },
    {
        "content": "<p><a href=\"https://www.semanticscholar.org/paper/Presentation-of-Set-Functors%3A-A-Coalgebraic-Ad%C3%A1mek-Gumm/0638f4cccc0fe20fe7868d8e2d84af2301863dcd\">https://www.semanticscholar.org/paper/Presentation-of-Set-Functors%3A-A-Coalgebraic-Ad%C3%A1mek-Gumm/0638f4cccc0fe20fe7868d8e2d84af2301863dcd</a></p>",
        "id": 198960394,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590617701
    },
    {
        "content": "<p>Thanks, that paper answers some of my questions.</p>",
        "id": 198960701,
        "sender_full_name": "John Baez",
        "timestamp": 1590617907
    },
    {
        "content": "<p>First, they are <em>not</em> looking at permutation group actions (the way you do in the theory of \"species\"); their polynomial functors are just </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mi>n</mi></msub><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>×</mo><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma(X) = \\sum_n \\Sigma(n) \\times X^n </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">Σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>and furthermore <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> ranges over all cardinals, so there's no finiteness constraint on the \"arities\".</p>",
        "id": 198960898,
        "sender_full_name": "John Baez",
        "timestamp": 1590618032
    },
    {
        "content": "<p>Yes.  Sorry, I should have linked to it more obviously sooner, would have cleared up a lot of confusion</p>",
        "id": 198960979,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590618083
    },
    {
        "content": "<p>Then they're looking at all functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> for which there's an epimorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo>⇒</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma \\Rightarrow F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>.</p>",
        "id": 198961071,
        "sender_full_name": "John Baez",
        "timestamp": 1590618126
    },
    {
        "content": "<p>I would normally only say that a gadget <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is a \"quotient\" of a gadget <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> when there was a <em>regular</em> epi from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> (the kind of epi you get from a coequalizer), but in the category we're working in here, namely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}^\\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9334479999999998em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9334479999999998em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathsf mtight\">S</span><span class=\"mord mathsf mtight\">e</span><span class=\"mord mathsf mtight\">t</span></span></span></span></span></span></span></span></span></span></span></span>, all epis are regular.</p>",
        "id": 198961179,
        "sender_full_name": "John Baez",
        "timestamp": 1590618217
    },
    {
        "content": "<p>So as soon as we've got an epimorphism (what you called an \"epitransformation\") <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi mathvariant=\"normal\">Σ</mi></msub><mo>⇒</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">H_\\Sigma \\Rightarrow F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span> we know it comes from some coequalizer.</p>",
        "id": 198961285,
        "sender_full_name": "John Baez",
        "timestamp": 1590618260
    },
    {
        "content": "<p>Oh wow, how can we prove that?</p>",
        "id": 198961303,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590618271
    },
    {
        "content": "<p>My proof would be pretty indirect: in any presheaf category all epis are regular.</p>",
        "id": 198961368,
        "sender_full_name": "John Baez",
        "timestamp": 1590618320
    },
    {
        "content": "<p>Also I am not convinced right now that an epimorphism of functors must be epi in each component</p>",
        "id": 198961375,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590618325
    },
    {
        "content": "<p>Umm, hmm, interesting.</p>",
        "id": 198961405,
        "sender_full_name": "John Baez",
        "timestamp": 1590618342
    },
    {
        "content": "<p>I think so, actually.</p>",
        "id": 198961426,
        "sender_full_name": "John Baez",
        "timestamp": 1590618358
    },
    {
        "content": "<p>I think the relevant buzzwords are \"in a presheaf category colimits are computed pointwise, and epis can be defined using pushouts, so whether something is an epi can be determined pointwise.\"</p>",
        "id": 198961528,
        "sender_full_name": "John Baez",
        "timestamp": 1590618427
    },
    {
        "content": "<p>Hm I'll think about it</p>",
        "id": 198961724,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590618534
    },
    {
        "content": "<p>Sorry to be so jargonesque, there's probably a more direct proof but this stuff is individually good to know.</p>",
        "id": 198961750,
        "sender_full_name": "John Baez",
        "timestamp": 1590618552
    },
    {
        "content": "<p>Anyway, one big <em>theorem</em> that this paper proves about this stuff is: every accessible functor Set -&gt; Set can be described as a \"quotient\" (in the sense we're talking about) of a polynomial functor Set -&gt; Set.</p>",
        "id": 198961872,
        "sender_full_name": "John Baez",
        "timestamp": 1590618622
    },
    {
        "content": "<p>Yes.  It also assumes soundness but that is not necessary.</p>",
        "id": 198961923,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590618660
    },
    {
        "content": "<p>I don't have much intuition for accessible functors, so I'm wondering if this is an \"iff\" - whether every quotient of a polynomial functor is accessible.</p>",
        "id": 198962011,
        "sender_full_name": "John Baez",
        "timestamp": 1590618702
    },
    {
        "content": "<p>Maybe this is much easier!</p>",
        "id": 198962014,
        "sender_full_name": "John Baez",
        "timestamp": 1590618708
    },
    {
        "content": "<p>I have no idea.</p>",
        "id": 198962020,
        "sender_full_name": "John Baez",
        "timestamp": 1590618714
    },
    {
        "content": "<p>Yes it is iff</p>",
        "id": 198962050,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590618722
    },
    {
        "content": "<p>Nice!  So this is one way for me to start understanding accessible functors.</p>",
        "id": 198962150,
        "sender_full_name": "John Baez",
        "timestamp": 1590618798
    },
    {
        "content": "<p>In section 3.1, the \"Accessible Set Functors\" section, I see why conditions (3.1) and (3.2) are equivalent to each other, but not why they are equivalent to the given definition of accessible functor.  The references don't actually show this either.   That's something I'd like to understand.  But it probably doesn't belong in this topic.</p>",
        "id": 198962781,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1590619330
    },
    {
        "content": "<p>Incidentally, I at least don't really think about these as labelled transition systems. I think about coalgebras as ways to define the non-well-founded trees (values of the terminal coalgebra). Probably you can couch everything in terms of a LTS, but it might not be the most obvious motivation for thinking about the trees in every case.</p>",
        "id": 198965886,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590621612
    },
    {
        "content": "<p>For instance, the extended natural numbers are the final coalgebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">1 + -</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span>.</p>",
        "id": 198966280,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590621859
    },
    {
        "content": "<p>And importantly, they have the right sort of 'computability topology' that other definitions you might think of don't (and you'd need to work harder to correctly define it in other ways).</p>",
        "id": 198966465,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590621994
    },
    {
        "content": "<p>That's a pretty boring LTS, though, because it's just something that beeps possibly forever, I think.</p>",
        "id": 198966672,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590622199
    },
    {
        "content": "<p>I'm not sure that coalgebras have the right \"computability topology\" to be honest. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> is an extended natural number, it's decidable whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">n \\geq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> for any finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>. But if you watch a program that beeps possibly forever, to be sure whether there's a kth beep or not you might have to wait forever, which suggests it shouldn't be decidable whether there's a kth beep.</p>\n<p>The thing I've been playing with instead is: there's a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">B</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Beep}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">B</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">p</span></span></span></span></span> and an injection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">x</mi></mrow><mo>:</mo><mrow><mi mathvariant=\"sans-serif\">B</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{index} : \\mathsf{Beep} \\to \\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">d</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">B</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">p</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> (the unique index of a beep) such that if there exists a beep with index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, there exists a beep of index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> too. This is the same thing as a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mrow><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow></msup><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^{\\mathsf{op}} \\to \\mathsf{Prop}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6741079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathsf mtight\">o</span><span class=\"mord mathsf mtight\">p</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">p</span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Prop}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">p</span></span></span></span></span> is the category of truth values (and this definition inspired by <a href=\"https://ncatlab.org/nlab/show/tree#as_functors\">this nlab definition of a tree/forest</a>). Now you can't decide whether or not there's an kth beep, so I think this matches my intuition about streams in programming better (and it's not uncategorical either).</p>",
        "id": 198969679,
        "sender_full_name": "Kyle Raftogianis",
        "timestamp": 1590624825
    },
    {
        "content": "<p>It is the right computability for the extended natural numbers. Like I said, I think about the trees. If you want to model some other idea with the trees, you have to choose the right type of trees.</p>",
        "id": 198970239,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590625302
    },
    {
        "content": "<p>Sure. But maybe not for a program that beeps possibly forever (or programs that takes streams as input and produce streams as output) which is often what coalgebras are used for</p>",
        "id": 198970357,
        "sender_full_name": "Kyle Raftogianis",
        "timestamp": 1590625406
    },
    {
        "content": "<p>Okay, but then it seems like you're also complaining that a labelled transition system with one possible label also doesn't model this, because it doesn't account for some additional aspect that is not included in just the labels that will be observed.</p>",
        "id": 198970596,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590625564
    },
    {
        "content": "<p>I don't really know what a labelled transition system is, but maybe. I'm not trying to pick a fight, I'm just trying to get a better understanding of what a stream is for computers</p>",
        "id": 198970743,
        "sender_full_name": "Kyle Raftogianis",
        "timestamp": 1590625713
    },
    {
        "content": "<p>Maybe the extended nats models a \"pull-based\" stream, whereas the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{index}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">d</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">x</span></span></span></span></span> thing models a \"push-based\" stream?</p>",
        "id": 198970771,
        "sender_full_name": "Kyle Raftogianis",
        "timestamp": 1590625748
    },
    {
        "content": "<p>What you seem to be describing is the fact that coinductive types (\"M-types\") can be built out of inductive types (\"W-types\") in a variety of cases, in the presence of a natural number object. This is not more expressive than direct coalgebraic methods -- in some settings it is about the same, and in some settings it is less expressive. C.f. <a href=\"https://arxiv.org/abs/math/0409158\">https://arxiv.org/abs/math/0409158</a> and <a href=\"https://hott.github.io/M-types/\">https://hott.github.io/M-types/</a></p>",
        "id": 198985492,
        "sender_full_name": "Gershom",
        "timestamp": 1590645686
    },
    {
        "content": "<p>please record it! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 199006444,
        "sender_full_name": "Henry Story",
        "timestamp": 1590662646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> yeah good point. If you build the extended nats this way, I think you get something like infinite binary sequences <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N} \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> that are increasing, or equivalently downward-closed decidable subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> (from the sequence description, the subset where the sequence is 0). But I want to consider <em>all</em> downward-closed subsets of the naturals, not just decidable ones. (This distinction only makes sense in constructive logic, which I totally forgot to mention I'm working in here...sorry). Is there a way to encode that as a coalgebra?</p>",
        "id": 199041439,
        "sender_full_name": "Kyle Raftogianis",
        "timestamp": 1590681216
    },
    {
        "content": "<p>Dammit, there was a &gt; 200 message convo about coalgebra and I missed it? I need to check Zulip more often...</p>",
        "id": 199158021,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1590761007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198880307\">said</a>:</p>\n<blockquote>\n<p>Bisimulation is a fundamental concept in concurrency and I've always felt I didn't understand it as deeply as I should have. This topic is about:</p>\n<ul>\n<li>Explaining the main ideas behind it</li>\n<li>Understanding why it is useful, and what applications it has</li>\n<li>Uderstanding how this translates in categorical terms<br>\nPersonally I'm in the Petri net crowd but I'm also interested in notions of bisimulation coming from other disciplines (e.g. FSMs, I guess). Bisimulation-aware peope, show yourselves! &lt;3</li>\n</ul>\n</blockquote>\n<p>Was this question answered? It's hard to tell from reading the ensuing conversation as a third party.</p>",
        "id": 199178815,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1590770009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283877\">Todd Schmid</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/199178815\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198880307\">said</a>:</p>\n<blockquote>\n<p>Bisimulation is a fundamental concept in concurrency and I've always felt I didn't understand it as deeply as I should have. This topic is about:</p>\n<ul>\n<li>Explaining the main ideas behind it</li>\n<li>Understanding why it is useful, and what applications it has</li>\n<li>Uderstanding how this translates in categorical terms<br>\nPersonally I'm in the Petri net crowd but I'm also interested in notions of bisimulation coming from other disciplines (e.g. FSMs, I guess). Bisimulation-aware peope, show yourselves! &lt;3</li>\n</ul>\n</blockquote>\n<p>Was this question answered? It's hard to tell from reading the ensuing conversation as a third party.</p>\n</blockquote>\n<p>hmm, I have not followed the conversation and maybe someone already mentioned that  bisimulation was independently \"invented\" by both Robin Milner for concurrency in CCS and by Johan van Benthem to relate Kripke models of modal logic. I find it one of nice new coincidences of our area of work!</p>",
        "id": 199181487,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1590771325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198910016\">said</a>:</p>\n<blockquote>\n<p>Bisimulation is a relation on values/points of a coalgebra. If two values are bisimilar they are taken to the same value of the terminal coalgebra via the universal map.</p>\n</blockquote>\n<p>This is a neat answer, and might even stick in my head</p>",
        "id": 199181970,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1590771542
    },
    {
        "content": "<p>Good. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 199183666,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590772324
    },
    {
        "content": "<p>Theoretically that is just dualizing things from algebra, but the dual things kind of end up playing different roles in each.</p>",
        "id": 199184326,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590772703
    },
    {
        "content": "<p>Like, the terminal/cofree coalgebra is 'all the relevant things that can be observed,' and usually the reason for studying things this way is that you only care about distinguishing two things if they can yield different observations. But initial/free algebras are 'all the relevant ways you can build things'. So, there is a dual relation of 'these two values of algebras were built the same way.' That kind of gives you an intensional notion of equality (these two things were built the same way, so they must be equal in some sense).</p>\n<p>But in an algebra, there may be values that aren't constructed purely out of algebraic operations, and this intensional equality has nothing to say about those (I think). Also, people generally want to consider things equal if they 'behave the same,' not merely if 'they were built exactly the same way.' So, 'the image in the terminal coalgebra is the same,' is the thing they actually care about in some sense.</p>",
        "id": 199186185,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590773703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/199186185\">said</a>:</p>\n<blockquote>\n<p>But in an algebra, there may be values that aren't constructed purely out of algebraic operations, and this intensional equality has nothing to say about those (I think).</p>\n</blockquote>\n<p>I was wondering what this means for arguments by induction when thinking of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> as the initial algebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn mathvariant=\"bold\">1</mn><mo>+</mo><mo>⋅</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{1}+\\cdot</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">1</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">⋅</span></span></span></span>. I recently learned that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> is not really a set and we should really use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> (the ordinal) which might contain <del>transfinite numbers</del> finite limit ordinals, but I don't see any logic dealing with limit cases when arguing by induction with initiality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mtext mathvariant=\"sans-serif\">succ</mtext><mo stretchy=\"false\">]</mo><mo>:</mo><mn mathvariant=\"bold\">1</mn><mo>+</mo><mi>ω</mi><mo>→</mo><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">[0, \\textsf{succ}]: \\mathbf{1}+\\omega \\rightarrow \\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord textsf\">succ</span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">1</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>.</p>",
        "id": 199188067,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590774575
    },
    {
        "content": "<p>Well, I do type theory, not set theory, so I'm not really sure what details you're talking about. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">ω</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> is an initial algebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">1 + -</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> in that way exactly because it doesn't contain any transfinite ordinals, just all and only the finite ordinals.</p>",
        "id": 199191918,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590776256
    },
    {
        "content": "<p>Are you thinking of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">ℵ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\aleph_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℵ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, which is defined as some kind of isomorphism class of countable sets or something?</p>",
        "id": 199192200,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590776370
    },
    {
        "content": "<p>I meant finite limit ordinal instead of transfinite numbers (I'll edit my previous message). I am trying to find a reference to the statement that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> might (I remember that it is independent of ZF) contain finite limit ordinals (finite is defined as contained in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>, so might be redundant here), but for now, Wikipedia <a href=\"https://en.wikipedia.org/wiki/Limit_ordinal#Examples\">says</a>:</p>\n<blockquote>\n<p>there is a smallest infinite limit ordinal; denoted by ω (omega).</p>\n</blockquote>",
        "id": 199194173,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590777391
    },
    {
        "content": "<p>Constructively, it's possible to have an ordinal less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> which is neither a successor nor a weak limit... but classically, no.</p>",
        "id": 199194546,
        "sender_full_name": "Cody Roux",
        "timestamp": 1590777594
    },
    {
        "content": "<p>What is a weak limit ?</p>",
        "id": 199194745,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590777673
    },
    {
        "content": "<p>In J. Lipton \"Realizability in Set Theory\", it's defined to be an ordinal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>β</mi><mo>∈</mo><mi>α</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>γ</mi><mo>∈</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>β</mi><mo>∈</mo><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\forall \\beta\\in\\alpha, \\exists \\gamma\\in\\alpha, \\beta\\in\\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>. I think it's to contrast the \"classical\" definition, which is simply \"not a successor ordinal\".</p>",
        "id": 199195442,
        "sender_full_name": "Cody Roux",
        "timestamp": 1590777957
    },
    {
        "content": "<p>\"Constructively, it's possible\" here means \"when you drop standard non-constructive axioms, then it's consistent\"?</p>",
        "id": 199196114,
        "sender_full_name": "Nikolaj Kuntner",
        "timestamp": 1590778261
    },
    {
        "content": "<p>You could define a totally ordered sub-finite set that is not provably equal to a successor ordinal, but also not a limit in that sense.</p>",
        "id": 199197613,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590778981
    },
    {
        "content": "<p>Anyhow, I think worrying about ordinals is probably unnecessary. It should be possible to construct the initial algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">N</mi></mrow><annotation encoding=\"application/x-tex\">ℕ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord amsrm\">N</span></span></span></span> as a set, and it doesn't matter if it happens to be the same set as the ordinal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">ω</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> or not.</p>",
        "id": 199198663,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590779523
    },
    {
        "content": "<p>Yeah... Thanks for this digression anyway !</p>\n<p>EDIT (the day after this discussion): I just want to come back here and clear things up in my head without disturbing the discussion.</p>\n<p>FIrst, a (categorical) proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> has no limit ordinals: Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mtext mathvariant=\"sans-serif\">succ</mtext><mo stretchy=\"false\">]</mo><mo>:</mo><mn mathvariant=\"bold\">1</mn><mo>+</mo><mi>ω</mi><mo>→</mo><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">[0, \\textsf{succ}]:\\mathbf{1}+\\omega \\rightarrow \\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord textsf\">succ</span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">1</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> is an initial algebra, Lambek's lemma tells us that it is an isomorphism. In particular, it is surjective, thus every element in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> is either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"sans-serif\">succ</mtext><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\textsf{succ}(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord textsf\">succ</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">x \\in \\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>. </p>\n<p>Second, what is still not clear in my head: I messed up with terminology twice, but I was right in saying that there are elements in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> which are not natural numbers (which are defined as finite successors of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. There are models of ZFC where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> contains <a href=\"https://en.wikipedia.org/wiki/Non-standard_model_of_arithmetic\">non-standard natural numbers</a>, which are not limit ordinals, but they are not (finite) successors of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. Now, this means that standard induction is not enough in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> and we should really use transfinite induction (right?), but I don't see how induction arguments with initiality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> can do transfinite induction.</p>",
        "id": 199198813,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1590779601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283877\">Todd Schmid</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/199178815\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198880307\">said</a>:</p>\n<blockquote>\n<p>Bisimulation is a fundamental concept in concurrency and I've always felt I didn't understand it as deeply as I should have. This topic is about:</p>\n<ul>\n<li>Explaining the main ideas behind it</li>\n<li>Understanding why it is useful, and what applications it has</li>\n<li>Uderstanding how this translates in categorical terms<br>\nPersonally I'm in the Petri net crowd but I'm also interested in notions of bisimulation coming from other disciplines (e.g. FSMs, I guess). Bisimulation-aware peope, show yourselves! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></li>\n</ul>\n</blockquote>\n<p>Was this question answered? It's hard to tell from reading the ensuing conversation as a third party.</p>\n</blockquote>\n<p>Well, I got a lot of \"formal\" answers, especially using coalgebra. I guess I can follow the mathematics, but I still feel the main idea behind simulation is eluding me. I've seen it presented game-theoretically, something like \"you can match your opponent moves and vice-versa\", and that seemed to make sense conceptually. But no, I still can't say that I <em>really</em> understand bisimulation or that I would feel confident in using it in my research work</p>",
        "id": 199204727,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590782520
    },
    {
        "content": "<p>Obviously the fault for not understanding is basically mine, if that wasn't clear from the previous message <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 199204925,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590782631
    },
    {
        "content": "<p>The simplest and <a href=\"http://cs.ru.nl/~jrot/coalg18/coalg-lect7.pdf\">famous example</a> is the coffee machines example. You are given two differently implemented coffee machines, with the same buttons, coins slots, but built differently giving you the same coffee. Can you tell them apart just from observing their behavior? If not, they are bisimilar: As far as your interaction with the machine goes you make the same moves to get the coffee.</p>",
        "id": 199207205,
        "sender_full_name": "Henry Story",
        "timestamp": 1590783710
    },
    {
        "content": "<p>This is a bit weaker than bisimulation though: this would typically be referred to as <em>trace equivalence</em>. Though it is weaker (or perhaps <em>because</em> it is weaker) it is harder to decide trace equivalence, but there are polynomial (even quasi-linear) algorithms for bisimilarity.</p>",
        "id": 199219522,
        "sender_full_name": "Cody Roux",
        "timestamp": 1590790812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/199207205\">said</a>:</p>\n<blockquote>\n<p>The simplest and <a href=\"http://cs.ru.nl/~jrot/coalg18/coalg-lect7.pdf\">famous example</a> is the coffee machines example. You are given two differently implemented coffee machines, with the same buttons, coins slots, but built differently giving you the same coffee. Can you tell them apart just from observing their behavior? If not, they are bisimilar: As far as your interaction with the machine goes you make the same moves to get the coffee.</p>\n</blockquote>\n<p>So, this is something that actually clicks. But as <span class=\"user-mention\" data-user-id=\"276030\">@Cody Roux</span> says this is not exactly bisimulation. Can we state the difference between bisimulation and trace equivalence in terms of coffee machines?</p>",
        "id": 199228659,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590799100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> I'm reading the notes you referenced. Thigs are starting to make sense <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 199229196,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590799799
    },
    {
        "content": "<p>Right, there's a difference between \"sequences of behaviors\" and \"sequences of interactions\" if certain actions are \"user actions\" and others are \"machine actions\". In the second case, bisimulation can distinguish them.</p>",
        "id": 199230696,
        "sender_full_name": "Cody Roux",
        "timestamp": 1590801804
    },
    {
        "content": "<p>Does the distinction make sense without non-determinism? From the example I found, it seems difficult to interpret trace equivalence as the thing you'd want without the magic behavior of non-deterministic automata.</p>\n<p>Like, one coffee machine lets you put in a coin, and then non-deterministically moves to one of two states, one of which allows you to press a button to get iced coffee, and the other which allows you to press a different button to get hot coffee. The other machine lets you put in a coin, then moves to a state where you can press either button to get the corresponding coffee.</p>\n<p>These are trace equivalent, because the same paths exist for both machines (coin,iced and coin,hot), but not bisimilar, because the second button press is not controlling the choice in the first case. But this only works for a coffee machine if the machine somehow always chooses to enable the style of coffee you would have wanted anyway.</p>\n<p>I think trace equivalence might be what you get automatically from a terminal coalgebra-like approach using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mo>×</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal P(Σ×-)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> (although the paper doesn't do that; I suppose because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span> would have size issues). But that isn't a very good way of thinking about equivalent use of a coffee machine.</p>",
        "id": 199235256,
        "sender_full_name": "Dan Doel",
        "timestamp": 1590808698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/199204727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"283877\">Todd Schmid</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/199178815\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/198880307\">said</a>:</p>\n<blockquote>\n<p>Bisimulation is a fundamental concept in concurrency and I've always felt I didn't understand it as deeply as I should have. This topic is about:</p>\n<ul>\n<li>Explaining the main ideas behind it</li>\n<li>Understanding why it is useful, and what applications it has</li>\n<li>Uderstanding how this translates in categorical terms<br>\nPersonally I'm in the Petri net crowd but I'm also interested in notions of bisimulation coming from other disciplines (e.g. FSMs, I guess). Bisimulation-aware peope, show yourselves! &lt;3</li>\n</ul>\n</blockquote>\n<p>Was this question answered? It's hard to tell from reading the ensuing conversation as a third party.</p>\n</blockquote>\n<p>Well, I got a lot of \"formal\" answers, especially using coalgebra. I guess I can follow the mathematics, but I still feel the main idea behind simulation is eluding me. I've seen it presented game-theoretically, something like \"you can match your opponent moves and vice-versa\", and that seemed to make sense conceptually. But no, I still can't say that I <em>really</em> understand bisimulation or that I would feel confident in using it in my research work</p>\n</blockquote>\n<p>Okay, so it's briefly mentioned far, far above, but I think it's important enough to restate what a bisimulation (in the general sense) _actually is._ A bisimulation of two systems X and Y (or machines, or coalgebras) is a third machine, say R, in which the processes present in X and Y can be simulated. Formally, by simulation I mean coalgebra homomorphism (and actually, for coalgebras in SET at least, a function is a coalgebra homomorphism iff its graph is a bisimulation).</p>",
        "id": 199255478,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1590843156
    },
    {
        "content": "<p>This is actually relevant, thanks</p>",
        "id": 199257154,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590845627
    },
    {
        "content": "<p>This \"third machine\" is often left implicit in many definitions I saw. I just assumed they were actually taking a coproduct of two machines and define a bisimulation relation there</p>",
        "id": 199257196,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590845658
    },
    {
        "content": "<p>Like when they say \"two coffee machines are bisimilar\"</p>",
        "id": 199257203,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1590845672
    },
    {
        "content": "<p>Yes, the \"third machine\" is similar to the minimal automaton in regular language theory, in that its states are equivalence classes of pairs of states.</p>",
        "id": 199259897,
        "sender_full_name": "Cody Roux",
        "timestamp": 1590849863
    },
    {
        "content": "<p>sorry, it's actually equivalence classes of the states of the <em>disjoint union</em> of the machines, I think.</p>",
        "id": 199260033,
        "sender_full_name": "Cody Roux",
        "timestamp": 1590850078
    },
    {
        "content": "<p>Milner defines barbed bisimilarity of P and Q in his \"<a href=\"https://www.lfcs.inf.ed.ac.uk/reports/91/ECS-LFCS-91-180/\">polyadic pi calculus tutorial</a>\" at the top of page 23.  P ≡ Q if the following hold:</p>\n<ol>\n<li>If P -&gt; P', then there exists Q' such that Q -&gt; Q' and P' ≡ Q'.</li>\n<li>If P↓α then Q↓α.<br>\n(Downarrow is a relation between processes and names that captures the idea that a context could interfere with a process on a name; see the paper for details.  The names α are called \"barbs\".)</li>\n</ol>\n<p>Category theorists define bisimulation to be a relation in a category of D-coalgebras, where D is some endofunctor.  The relation gives us a span of sets that we want to extend to a span of coalgebras.  Is there a way to take a relation like this and <em>derive</em> the functor D on Set and the coalgebra maps? If not on Set, then on some other relevant category?</p>",
        "id": 203018150,
        "sender_full_name": "Mike Stay",
        "timestamp": 1594056739
    },
    {
        "content": "<p>I have a question. If we see the evaluation of a term in STL as a coalgebra, does anyone know what the counterpart of \"normalization property\" in algebra is?</p>",
        "id": 227933504,
        "sender_full_name": "GhaS Shee",
        "timestamp": 1614349010
    },
    {
        "content": "<p>Is it semi-decidable set?</p>",
        "id": 227945849,
        "sender_full_name": "GhaS Shee",
        "timestamp": 1614354342
    },
    {
        "content": "<p>I do not know what are semi-decidable sets and co-semi-decidable sets, and I am confused by them. <br>\nThe counterpart of normalization seems to be the set of terms defined as they normalize. <br>\nDoes anyone know where (co-)semi-decidable set is defined well and who defined them?</p>",
        "id": 227957007,
        "sender_full_name": "GhaS Shee",
        "timestamp": 1614358752
    },
    {
        "content": "<p>Can you expand on what you mean by \"algebraic counterpart\"?</p>",
        "id": 227979594,
        "sender_full_name": "Christian Williams",
        "timestamp": 1614367891
    },
    {
        "content": "<p>A \"semi-decidable set\" is the same as a <a href=\"https://en.wikipedia.org/wiki/Recursively_enumerable_set\">recursively enumerable set</a> - in other words, a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> for which there is an algorithm such that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">x \\in X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> then the algorithm will prove this.   </p>\n<p>A \"co-semi-decidable set\" is the complement of a recursively enumerable set.   In other words, it's a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> for which there's an algorithm such that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> then the algorithm will prove that.</p>",
        "id": 227980238,
        "sender_full_name": "John Baez",
        "timestamp": 1614368129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span>  <br>\nYes. As a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><msub><mi>r</mi><mi>X</mi></msub><mo>:</mo><mi>X</mi><mo>←</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> constructor_X : X \\leftarrow F(X) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> (and the morphism from the least fixed point of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to it i.e.  the pair <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><msub><mi>r</mi><mi>X</mi></msub><mo separator=\"true\">,</mo><mi>f</mi><mi>o</mi><mi>l</mi><msub><mi>d</mi><mrow><mi>F</mi><mi>X</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (constructor_X, fold_{FX} ) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> ) is an object of the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Algebras , an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><msub><mi>n</mi><mi>X</mi></msub><mo>:</mo><mi>X</mi><mo>←</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo>←</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> evaluation_X : X \\leftarrow (X \\leftarrow F(X)) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> ( with the embedding of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">evaluation</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span></span></span></span> to Terminal Coalgebra i.e. the greatest fixed point of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> ) can be seen as that of the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Coalgebras.  the \"normalization\" is a predicate on objects of the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Coalgebras, while the \"algebraic counterpart of normalization\" is a predicate on objects of the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Algebras. </p>\n<p>(Edit: I was thinking of a particular <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Algebra , where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mi>m</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>T</mi><mi>m</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>X</mi></mrow></mfrac><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(X) = Tm × ( 1+ Tm × (\\frac{1}{1 - X}))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">Tm</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">m</span></span></span></span> is the type of term constructors, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>T</mi></mrow></mfrac><mo>=</mo><mi>μ</mi><mi>X</mi><mi mathvariant=\"normal\">.</mi><mn>1</mn><mo>+</mo><mi>T</mi><mo>×</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{1 - T} = \\mu X. 1 + T × X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> . I was confused thinking that it might be generalized to all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Algebra. Then, I should restrict the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-Alg such that its dual category consists of susystems and its embeddings i.e. proper subsets of evaluation trees contained by the terminal object. That is, we might not see the detail of an algebra precisely until we define the coalgebra.   ) </p>\n<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> <br>\nThank you very much for describing the definitions! They seem very meaningful.</p>",
        "id": 228018306,
        "sender_full_name": "GhaS Shee",
        "timestamp": 1614386249
    },
    {
        "content": "<p>In the above setting, I am not sure it is true, but I regarded fold maps as module homomorphisms and system embeddings as ring homomorphisms in terms of algebraic geometry. Then, what is the corresponding of rng homomorphism?</p>",
        "id": 228030866,
        "sender_full_name": "GhaS Shee",
        "timestamp": 1614398704
    },
    {
        "content": "<p>The article</p>\n<ul>\n<li><a href=\"https://www.sciencedirect.com/science/article/pii/S0890540196900577\">Bisimulation from open maps</a>, André Joyal, Mogens Nielsen, and Glynn Winskel, Information and Computation 127:2 (1996) 164-185.</li>\n</ul>\n<p>defines a bisimilarity between two objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> of a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to be a span of <em>open maps</em><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>←</mo><mi>A</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\"> X \\leftarrow A \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> <br>\nconnecting them.  Here's the definition of open map: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo>↪</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P} \\hookrightarrow M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> be a full subcategory whose objects are regarded as paths. A morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f: X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is <strong>open</strong> if for every commutative square<br>\n<a href=\"/user_uploads/21317/Bko2PHktW5fjTFAMD8r3LtuO/Screenshot-from-2021-03-15-10-09-01.png\">Screenshot-from-2021-03-15-10-09-01.png</a>  <br>\nwith <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> objects of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>, there is a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>:</mo><mi>Q</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">p' : Q \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> making the following triangles commute<br>\n<a href=\"/user_uploads/21317/22mTX6sMDls0NMWOoNeWJZ5x/Screenshot-from-2021-03-15-10-09-36.png\">Screenshot-from-2021-03-15-10-09-36.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Bko2PHktW5fjTFAMD8r3LtuO/Screenshot-from-2021-03-15-10-09-01.png\" title=\"Screenshot-from-2021-03-15-10-09-01.png\"><img src=\"/user_uploads/21317/Bko2PHktW5fjTFAMD8r3LtuO/Screenshot-from-2021-03-15-10-09-01.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/21317/22mTX6sMDls0NMWOoNeWJZ5x/Screenshot-from-2021-03-15-10-09-36.png\" title=\"Screenshot-from-2021-03-15-10-09-36.png\"><img src=\"/user_uploads/21317/22mTX6sMDls0NMWOoNeWJZ5x/Screenshot-from-2021-03-15-10-09-36.png\"></a></div>",
        "id": 230384213,
        "sender_full_name": "Jade Master",
        "timestamp": 1615828301
    },
    {
        "content": "<p>My question is about the terminology \"open\".  A map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f :X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> between topological spaces is open if for every open <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">U \\subseteq X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> is open in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.  Is the above definition an analogy for open maps of spaces? If so how?</p>",
        "id": 230384815,
        "sender_full_name": "Jade Master",
        "timestamp": 1615828517
    },
    {
        "content": "<p>To me it seems more like \"continuous\" because it says roughly that every path in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> lifts to a path in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>",
        "id": 230385753,
        "sender_full_name": "Jade Master",
        "timestamp": 1615828863
    },
    {
        "content": "<p>What do you mean when you say \"a full subcategory whose objects are regarded as paths\"?</p>",
        "id": 230385893,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615828911
    },
    {
        "content": "<p>Also, are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X, f, Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>?</p>",
        "id": 230386047,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615828965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>  Have you looked into \"A completeness theorem for open maps\" by Joyal and Moerdijk? Don't have time right now but it is probably related.</p>",
        "id": 230386174,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1615829025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230385893\">said</a>:</p>\n<blockquote>\n<p>What do you mean when you say \"a full subcategory whose objects are regarded as paths\"?</p>\n</blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span> can be in principle whatever you like. I think the idea is that they represent a single execution so that a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">P \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> represents an execution of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. I'm a bit confused about what they should be for Petri nets....I don't think they're the same as Sassone's definition of execution.</p>",
        "id": 230386908,
        "sender_full_name": "Jade Master",
        "timestamp": 1615829290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230386047\">said</a>:</p>\n<blockquote>\n<p>Also, are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X, f, Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>?</p>\n</blockquote>\n<p>No not in general.</p>",
        "id": 230386974,
        "sender_full_name": "Jade Master",
        "timestamp": 1615829319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383799\">Tom Hirschowitz</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230386174\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span>  Have you looked into \"A completeness theorem for open maps\" by Joyal and Moerdijk? Don't have time right now but it is probably related.</p>\n</blockquote>\n<p>Thank you that is a paper I am working on and it is definitely relevant :)</p>",
        "id": 230387103,
        "sender_full_name": "Jade Master",
        "timestamp": 1615829373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230386908\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230385893\">said</a>:</p>\n<blockquote>\n<p>What do you mean when you say \"a full subcategory whose objects are regarded as paths\"?</p>\n</blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span> can be in principle whatever you like. I think the idea is that they represent a single execution so that a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">P \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> represents an execution of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. I'm a bit confused about what they should be for Petri nets....I don't think they're the same as Sassone's definition of execution.</p>\n</blockquote>\n<p>Then I have trouble understanding what are the morphisms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>  and what does it mean to have a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is also in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span></p>",
        "id": 230390743,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615830800
    },
    {
        "content": "<p>I agree, I feel their definition of execution is not \"a string diagram in the category generated by a net\"...</p>",
        "id": 230390801,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615830831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276438\">@Fabrizio Genovese</span> X and Y are not in general in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>, they could be arbitrary Petri nets for example.</p>",
        "id": 230393029,
        "sender_full_name": "Jade Master",
        "timestamp": 1615831775
    },
    {
        "content": "<p>I'm not talking about the ones in the diagram</p>",
        "id": 230393208,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615831845
    },
    {
        "content": "<p>So in words the path-lifting condition says that whenever there is a path in Y whose shape extends a path in X, then the path in Y lifts to a nice path in X.</p>",
        "id": 230393265,
        "sender_full_name": "Jade Master",
        "timestamp": 1615831870
    },
    {
        "content": "<p>I'm saying, you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span>, a category, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>, a subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span> whose objects are interpreted as paths. So, what is a morphism in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span>? And if there is a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> object of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> object of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span>, how should I interpret these?</p>",
        "id": 230393401,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615831928
    },
    {
        "content": "<p>So, for instance, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span> can be the category of Petri nets, and I can take a subcategory of it where the objects are interpreted as \"paths of Petri nets\"?</p>",
        "id": 230393580,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832020
    },
    {
        "content": "<p>P is a full subcategory so the morphisms are the same as the morphisms in M. A morphism like you said should represent a path in Y.</p>",
        "id": 230393636,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832040
    },
    {
        "content": "<p>And then, a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> in the subcategory means \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a path of the net <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>?</p>",
        "id": 230393641,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230393636\">said</a>:</p>\n<blockquote>\n<p>P is a full subcategory so the morphisms are the same as the morphisms in M. A morphism like you said should represent a path in Y.</p>\n</blockquote>\n<p>What? Paths were the objects, no?</p>",
        "id": 230393745,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832071
    },
    {
        "content": "<p>I'm really not understanding what's going on lol</p>",
        "id": 230393885,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832124
    },
    {
        "content": "<p>Objects of P are like \"walking paths\" or \"platonic paths\" and then morphisms from an object of P to another object are like instances of that platonic path in another object.</p>",
        "id": 230394165,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832232
    },
    {
        "content": "<p>Ok, so objects of P are paths, and morphisms of P are ways of turning paths into other paths?</p>",
        "id": 230394341,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832297
    },
    {
        "content": "<p>In \"concatenable processes\" Sassone defines a process to be a morphism of Petri nets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>→</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">T \\to P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> where T is a finite 1-safe acyclic  deterministic net iirc.</p>",
        "id": 230394452,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832350
    },
    {
        "content": "<p>Ok, so the span conditions above reads: There's a way to reduce paths of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> to paths of some common object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></p>",
        "id": 230394474,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832359
    },
    {
        "content": "<p>Common object is not the right wording here</p>",
        "id": 230394509,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832378
    },
    {
        "content": "<p>But I guess you got what I mean</p>",
        "id": 230394534,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832386
    },
    {
        "content": "<p>It's the same idea here as Sassone except I think the platonic paths are different</p>",
        "id": 230394652,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832411
    },
    {
        "content": "<p>Yeah so open maps are morphisms which lift paths. So the common object has to lift paths from the two objects it's relating.</p>",
        "id": 230394882,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832483
    },
    {
        "content": "<p>Yep</p>",
        "id": 230394916,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832496
    },
    {
        "content": "<p>Note that it's also a morphism so it also needs to preserve paths.</p>",
        "id": 230394930,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832501
    },
    {
        "content": "<p>Who is also a morphism? A?</p>",
        "id": 230395056,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832542
    },
    {
        "content": "<p>An open morphism is in particular a morphism</p>",
        "id": 230395242,
        "sender_full_name": "Jade Master",
        "timestamp": 1615832621
    },
    {
        "content": "<p>Oh, in that sense! Yep</p>",
        "id": 230395368,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615832663
    },
    {
        "content": "<p>Haha the authors write “biproduct” when they mean “byproduct”.</p>",
        "id": 230396611,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615833183
    },
    {
        "content": "<p>This is really interesting.</p>",
        "id": 230396846,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615833281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276114\">Chad Nester</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230396611\">said</a>:</p>\n<blockquote>\n<p>Haha the authors write “biproduct” when they mean “byproduct”.</p>\n</blockquote>\n<p>Where is that?</p>",
        "id": 230402240,
        "sender_full_name": "Jade Master",
        "timestamp": 1615835709
    },
    {
        "content": "<p>First paragraph of section 4.</p>",
        "id": 230404117,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615836645
    },
    {
        "content": "<p>I've seen other people who have studied too much category theory and not enough English who have made that mistake....</p>",
        "id": 230404228,
        "sender_full_name": "John Baez",
        "timestamp": 1615836706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>  thanks for linking that paper. I’ve been reading about these sorts of process equivalence recently and this is extremely clean. I like it!</p>",
        "id": 230404744,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615836931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230393580\">said</a>:</p>\n<blockquote>\n<p>So, for instance, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span> can be the category of Petri nets, and I can take a subcategory of it where the objects are interpreted as \"paths of Petri nets\"?</p>\n</blockquote>\n<p>What's a \"path of Petri nets\" supposed to be?  My guess is that in this bisimulation business it's really an execution history, i.e. a morphism in the commutative monoidal category generated by a specific Petri net.</p>\n<p>This is just my wild guess.  It could be completely wrong, since I haven't looked at the paper you're talking about.   So, what's a \"path of Petri nets\"?</p>",
        "id": 230405346,
        "sender_full_name": "John Baez",
        "timestamp": 1615837167
    },
    {
        "content": "<p>I think that’s the right idea, although I suspect that taking the underlying category collapses too many things.</p>",
        "id": 230406230,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615837501
    },
    {
        "content": "<p>If your monoidal category is freely generated by boxes then I think forming the free monoidal graph generated by those boxes and considering paths in it is closer.</p>",
        "id": 230406531,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615837622
    },
    {
        "content": "<p>(Disclaimer: I don’t know much about Petri nets)</p>",
        "id": 230406636,
        "sender_full_name": "Chad Nester",
        "timestamp": 1615837667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276114\">Chad Nester</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230404744\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span>  thanks for linking that paper. I’ve been reading about these sorts of process equivalence recently and this is extremely clean. I like it!</p>\n</blockquote>\n<p>Thank you, for what it's worth I'm pretty sure this one of the more well-established definitions of bisimulation.</p>",
        "id": 230450305,
        "sender_full_name": "Jade Master",
        "timestamp": 1615861075
    },
    {
        "content": "<p>i don't know whether this will help or add to the confusion, but the problem might be that:</p>\n<p>** the idea is that two systems should be bisimilar when they are observationally indistinguishable. (the idea of the semantics of computation observing not just the input-output relations, but also some computational effects goes back to milner's \"processes\" paper in the early 70s. what is observable varies. the first formalization of bisimilarity as a relation between systems in terms of a suitable relation between the states, viz a bisimulation, goes back to david park, also in the 70s. the concept got rediscovered several times in the next 15 years or so.)</p>\n<p>** which processes are bisimilar thus does not depend on the processes alone, but also on how you observe them. more specifically, the various concepts of bisimulation do not necessarily arise within a category of coalgebras alone, but using a semantic functor into algebras of tests. ((in the CSP, tony hoare explicitly spelled out a gamut of bisimulation relations for the same CSP processes: depending on whether there are silent actions, refusals, failures... i think maybe 2 dozen bisimulations for the same family of process coalgebras. then in the 90s, rob van glabbeek spelled out in his famed thesis i think 133 notions of bisimulation for CCS processes, which could be viewed as vanilla mealy or moore machines IF you were only interested in their extensional behavior, and not in any side effects. i think rob spelled this out again in lengthy papers in the late 90s.))</p>\n<p>** it so happens that the strongest possible concept of bisimilarity, which is sometimes referred to as \"the\" bisimulation, can be realized as indistinguishability by the anamorphisms. that is, in a sense, the least interesting concept semantically, but it got popular as a justification for working with coalgebras, since it comes out very simply. however, it led to this confusion that all bisimulations should come up like that. ((that can often be achieved, but for the price of a lot of avoidable and unenlightening work, which some poor people did invest. i had 2 or 3 papers in the mid 90s, massaging various interesting notions of bisimulation into coalgebras. once i followed what the native speakers of process algebra do, and specified the systems and the tests separately, as coalgebras and algebras, all fell in place much more easily. many people did that in the meantime.))</p>\n<p>** petri nets are a system model, and there are also many different ways of interpreting/observing them, reflected in many different families of morphisms. this was an area of active research (and some controversy) also in the 90s, maybe early 2000s.</p>\n<p>if you are in pisa, @Fabrizio, then ugo montanari might still be by far the best person to tell you about the various petri nets semantics. many of ugo's students could also provide the account. it is a rich story, and probably much easier to listen than to rediscover.</p>",
        "id": 230451285,
        "sender_full_name": "dusko",
        "timestamp": 1615861913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230405346\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230393580\">said</a>:</p>\n<blockquote>\n<p>So, for instance, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span></span></span> can be the category of Petri nets, and I can take a subcategory of it where the objects are interpreted as \"paths of Petri nets\"?</p>\n</blockquote>\n<p>What's a \"path of Petri nets\" supposed to be?  My guess is that in this bisimulation business it's really an execution history, i.e. a morphism in the commutative monoidal category generated by a specific Petri net.</p>\n<p>This is just my wild guess.  It could be completely wrong, since I haven't looked at the paper you're talking about.   So, what's a \"path of Petri nets\"?</p>\n</blockquote>\n<p>This is something that I'm still trying to figure out...I'm not sure the answer.</p>",
        "id": 230453293,
        "sender_full_name": "Jade Master",
        "timestamp": 1615863625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230451285\">said</a>:</p>\n<blockquote>\n<p>i don't know whether this will help or add to the confusion, but the problem might be that:</p>\n<p>** the idea is that two systems should be bisimilar when they are observationally indistinguishable. (the idea of the semantics of computation observing not just the input-output relations, but also some computational effects goes back to milner's \"processes\" paper in the early 70s. what is observable varies. the first formalization of bisimilarity as a relation between systems in terms of a suitable relation between the states, viz a bisimulation, goes back to david park, also in the 70s. the concept got rediscovered several times in the next 15 years or so.)</p>\n<p>** which processes are bisimilar thus does not depend on the processes alone, but also on how you observe them. more specifically, the various concepts of bisimulation do not necessarily arise within a category of coalgebras alone, but using a semantic functor into algebras of tests. ((in the CSP, tony hoare explicitly spelled out a gamut of bisimulation relations for the same CSP processes: depending on whether there are silent actions, refusals, failures... i think maybe 2 dozen bisimulations for the same family of process coalgebras. then in the 90s, rob van glabbeek spelled out in his famed thesis i think 133 notions of bisimulation for CCS processes, which could be viewed as vanilla mealy or moore machines IF you were only interested in their extensional behavior, and not in any side effects. i think rob spelled this out again in lengthy papers in the late 90s.))</p>\n<p>** it so happens that the strongest possible concept of bisimilarity, which is sometimes referred to as \"the\" bisimulation, can be realized as indistinguishability by the anamorphisms. that is, in a sense, the least interesting concept semantically, but it got popular as a justification for working with coalgebras, since it comes out very simply. however, it led to this confusion that all bisimulations should come up like that. ((that can often be achieved, but for the price of a lot of avoidable and unenlightening work, which some poor people did invest. i had 2 or 3 papers in the mid 90s, massaging various interesting notions of bisimulation into coalgebras. once i followed what the native speakers of process algebra do, and specified the systems and the tests separately, as coalgebras and algebras, all fell in place much more easily. many people did that in the meantime.))</p>\n<p>** petri nets are a system model, and there are also many different ways of interpreting/observing them, reflected in many different families of morphisms. this was an area of active research (and some controversy) also in the 90s, maybe early 2000s.</p>\n<p>if you are in pisa, @Fabrizio, then ugo montanari might still be by far the best person to tell you about the various petri nets semantics. many of ugo's students could also provide the account. it is a rich story, and probably much easier to listen than to rediscover.</p>\n</blockquote>\n<p>Thanks for the reply. Why is indistinguishability by anamorphisms the least interesting sort of bisimulation?</p>",
        "id": 230454072,
        "sender_full_name": "Jade Master",
        "timestamp": 1615864276
    },
    {
        "content": "<p>If I understand you correctly, there are many choices of path subcategories and they all lead to different notions of bisimilarity and the choice depends on what you want to test for?</p>",
        "id": 230454179,
        "sender_full_name": "Jade Master",
        "timestamp": 1615864394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230454072\">said</a>:</p>\n<blockquote>\n<p>Thanks for the reply. Why is indistinguishability by anamorphisms the least interesting sort of bisimulation?</p>\n</blockquote>\n<p>i guess because the assumption is that you can observe everything: there are no silent actions, no failures. but what is interesting is also in the eye of the observer. it is considered to be the least interesting by concurrency theorists, and i think milner says that somewhere in his CCS book, before he starts refining it. but joyal's view bisimulations as open maps is of course far from uninteresting if we are slightly interested in topology.</p>\n<p>come to think, there was this conversation about tangent and cotangent bundles on another thread. there we have differential forms as coalgebras, and vector fields, and the usual dynamical systems workflow is reconstructed categorically by the system being observed along the curves on the manifold, i.e. by evaluating the coalgebra structure along the algebra structure. so it is the same approach like in concurrency: there is a description of the system, and there is a description of what is observable. there are probably variations in what can be observable here as well...</p>",
        "id": 230455263,
        "sender_full_name": "dusko",
        "timestamp": 1615865514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276438\">@Fabrizio Genovese</span>  Path morphisms are thought of as path extensions. The easiest setting is the category of forests (= families of trees = presheaves on the ordinal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> viewed as a category), and paths are \"branches\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo><mo>→</mo><mo>∙</mo><mo>…</mo><mo>→</mo><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet \\to \\bullet \\ldots \\to \\bullet</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span></span></span></span>, which are determined by their length (the representables). By Yoneda, path extensions are just pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">n \\leq p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, and a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">n \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> merely picks a path of length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>",
        "id": 230462932,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1615873884
    },
    {
        "content": "<p>Hi Jade, Fabrizio, and all,</p>\n<p>just a few comments on open and etale maps. In the axiomatic setting of Joyal and Moerdijk, the notion of open map is just a weak version of etale, where 'weak' is meant in the technical sense: something defined in terms of weak pullback instead of true pullback. In turn this means that the the universal map into a pullback is merely required to exist but not to be unique. In the category of sets, this just means surjective over the true pullback. (A better terminology might be 'submersion' rather than 'open', but that's another discussion.)</p>",
        "id": 230477086,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884009
    },
    {
        "content": "<p>As you say, the notion of open maps is a kind of path-lifting property: an open map is defined as one that has the (non-unique) right lifting property with respect to certain maps of paths, whereas an etale map is one that is right orthogonal (unique lifting) to that same class of path maps. If one digs into what these lifting properties mean, it boils down to some pullback conditions on mapping spaces, which are weak pullback condition in the case of open maps, and true pullbacks in the case of etale maps.</p>",
        "id": 230477352,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884183
    },
    {
        "content": "<p>I do not think Joyal, Nielsen and Winskel apply the notion of open maps directly to Petri nets, but of course it makes sense to try figure out, as you do, what should be the notion of path to get a reasonable notion of open map. Since it is the weak version of etale map, it is better to get hold of the paths in terms of etale maps. Furthermore, you already know what the etale maps are: they are the maps simply called maps in Baez-Genovese-Master-Shulman! Namely, those maps of Petri nets that send (m,n)-ary transitions to (m,n)-ary transitions. You see immediately that it is a condition about bijections: they are those maps that are locally an isomorphism at each transition. (Well, to make sense of these bijections, it is probably necessary to abandon the classical notion of Petri net. For whole-grain Petri nets it is true that it is about bijections.)</p>",
        "id": 230477711,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884410
    },
    {
        "content": "<p>Once we look locally, we can even restrict attention to either inputs or outputs. Then we are just talking about finite sets, and the strict orthogonality now boils down to this: in the category of sets, the etale maps are the bijections, and we know well that the class of bijections is right orthogonal to the class of all maps! But this refers locally to the transitions, so the class of path maps (the left-hand class) should be 'arbitrary on transitions', and it should remain something local. Of course it is difficult to say what these maps should be if the whole category of Petri nets we work in only has the etale maps to start with, but in the whole-grain formalism there is an obvious bigger category, namely the presheaf category of SITOS diagrams. In here the etale maps are precisely the standard etale maps of Joyal and Moerdijk. In here it is natural to take as the notion of path (which you may think of as infinitesimal path) simply the notion of arbitrary maps between transitions, or in graph language, maps between corollas. If you think of the node of a corolla as a point, and the small adjacent edges as an infinitesimal path or neighbourhood, then the left-hand class can be taken to be the class of maps between corollas, and the right-hand class will be those maps (in the presheaf category of SITOS diagrams) for which: for every node upstairs, and every corolla downstairs, there is a unique way to lift to a corolla upstairs. In other words, we do in fact recover the usual notion of transition-arity-preserving maps of Petri nets.</p>\n<p>I do not understand completely how this argument should work for classical Petri nets. But all the arguments are precise and rigorous for whole-grain Petri nets. In fact it is exactly the same argument as for directed graphs, and the right-orthogonal-to-corolla-maps description of etale maps is Lemma 1.3.5 in my paper [Graphs, hypergraphs and properads].</p>",
        "id": 230478064,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884612
    },
    {
        "content": "<p>Now, that notion of path is really more like an 'infinitesimal' version of path. To extend the left-hand class to bigger objects, the important point is that the bigger objects remain contractible. So instead of just corollas, one can take trees, or just linear trees. But it does not work if one allows anything with loops. This is precisely what one expects from geometry: for example the double cover of the circle is an etale map, and it does indeed have the path lifting property, but that does not mean one can lift a loop! A Petri-net version of the double-cover of a circle is given in Example 5.6 of [Elements of Petri nets and processes].</p>",
        "id": 230478166,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884691
    },
    {
        "content": "<p>An alternative terminology for 'etale' would be a 'cover'. Just as in topology it is interesting to find the universal covering of a space, such as a 1-dimensional CW-complex, it is interesting to study the universal cover of a Petri net. As far as I understand, this is the notion of unfolding of a Petri net. It is a structure that contains all possible 'paths' of a Petri net (emanating from a fixed initial state) or all possible 'execution histories'. In the individual-token philosophy one would like to keep track of every token in every state. To do this (cf. van Glabbeek), one annotates every token with the complete history of the transition firings that produced it. In other words, a token occurrence is essentially the same thing as a point in the unfolding.</p>",
        "id": 230478382,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884800
    },
    {
        "content": "<p>As far as I know, Winskel was interested in open maps because he needed to fix a problem with symmetries in unfolding semantics: something that looked like it should be an adjunction was simply not an adjunction, and it ended up being only a weak adjunction, or an adjunction up to some equivalence given by spans of open maps. In my opinion the whole problem is caused by the lack of control over symmetries in the classical notion of Petri nets. In fact, the problem goes away for whole-grain Petri nets, leading to a clean adjunction without the need of corrections in terms of open maps. This is Section 8 of my Petri-net paper. I think it is another good selling point of whole-grain Petri nets :-)</p>",
        "id": 230478578,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615884911
    },
    {
        "content": "<p>I don't want to say anything bad about open maps, and of course submersions are extremely important in geometry. But often weak pullbacks (and thereby notions of open maps, etc.) appear as a work-around for some homotopy structure that has been suppressed.</p>\n<p>Here are three more examples of this, relevant to the present discussion: one is that operads and analytic functors in the category of sets are endofunctors that preserve weak pullbacks, not strict pullbacks. But once you upgrade to groupoids, the correct and natural notion is true pullback (which then means homotopy pullback).</p>\n<p>Similarly, in recent work in probability, Constantin, Fritz, Perrone and Shapiro work out some interesting theory of partial evaluations, and end up with weak-pullback versions of the decomposition-space axioms. I think the reason is that they take their bar constructions to be simplicial sets. If they considered simplicial groupoids instead, I think the conditions would be true pullbacks.</p>\n<p>Finally, weak orthogonality is of course a key ingredient in Quillen model categories. But I think one can argue that they are there because it is a 1-categorical approach to something homotopical. If you pass to the native \\infty-categorical setting, it is the true orthogonality that is the correct notion again.</p>\n<p>(Maybe I should not call it a work-around, but just call it an interesting different approach to some homotopy stuff. After all, all these cases lead to super-interesting mathematics, and I do not doubt that open maps are important in process calculi. I am always worried I say something that sounds like criticism...)</p>",
        "id": 230479148,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615885237
    },
    {
        "content": "<blockquote>\n<p>I don't want to say anything bad about open maps, and of course submersions are extremely important in geometry. But often weak pullbacks (and thereby notions of open maps, etc.) appear as a work-around for some homotopy structure that has been suppressed.</p>\n</blockquote>\n<p>This is a very helpful insight!</p>",
        "id": 230483468,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1615887518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383799\">Tom Hirschowitz</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230462932\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span>  Path morphisms are thought of as path extensions. The easiest setting is the category of forests (= families of trees = presheaves on the ordinal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> viewed as a category), and paths are \"branches\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo><mo>→</mo><mo>∙</mo><mo>…</mo><mo>→</mo><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet \\to \\bullet \\ldots \\to \\bullet</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span></span></span></span>, which are determined by their length (the representables). By Yoneda, path extensions are just pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">n \\leq p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, and a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">n \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> merely picks a path of length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>\n</blockquote>\n<p>This is helpful, thanks!</p>",
        "id": 230487297,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615889435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> I am still in Pisa, but I'm really not in Pisa. Given the COVID mess I've been working from home since my postdoc started, and I still didn't manage to go there to say hi T_T</p>",
        "id": 230487367,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615889483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span> This is very detailed and helpful, thanks. Still, at least for me, it will take a bit to unpack. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230487407,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615889508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span> A difference in spirit between concurrency and homotopy is that path extensions are not at all meant to become equivalences: the idle process • should remain different from the non-idle • → •. So I'm curious about what the suppressed homotopy structure is in this case! Maybe it has to do with directed topology?</p>",
        "id": 230489470,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1615890544
    },
    {
        "content": "<p>Thanks, Fabrizio. I actually wanted to expand on these things. I do realise there is some intuition and background here not really coming from Petri-net theory. I would like to go through the whole yoga of shapes and elementary shapes and etale maps and so on, step by step, starting with directed graphs and categories, then trees and operads, then (open) graphs and properads/props, and finally (whole-grain) Petri nets. I hope to get around to it over the coming days...</p>",
        "id": 230508906,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615900340
    },
    {
        "content": "<p>Hi Tom, I am afraid I caused confusion with my various homotopy analogies. Maybe I should not have mentioned model categories. The suppressed homotopy theory in combinatorics is only about symmetries. Classical Petri nets have a lot of suppressed symmetries: namely, instead of having a set of incoming or outgoing arcs of a transition (from a given place), there is only a number of them. So there is no way of keeping track of symmetries of input args. If you want to probe Petri nets by mapping into them, for example with paths or occurrence nets, in the spirit of Goltz-Reisig processes, the symmetries of these maps are lost. It leads to the rather surprising fact that Goltz-Reisig processes cannot be composed! This makes geometric and algebraic semantics of  classical Petri nets different. My viewpoint is that this is a self-inflicted problem, due to the multiset definition of Petri nets. The problem goes away with whole-grain Petri nets.</p>\n<p>The other example I mentioned is that unfoldings of Petri nets ought to be terminal objects in a certain category -- that should be their universal property. But it turns out (Winskel et al.) that the candidate for this terminal object (namely the unfolding in the usual sense) has symmetries, and therefore cannot be a terminal object. The symmetries are caused by the fact that they are maps into Petri nets, and if the sets of incoming or outgoing arcs are collapsed to a number instead of being a set, then the maps into them get too many symmetries.  As I mentioned, the problem goes away when considering whole-grain Petri nets instead of ordinary Petri nets.</p>",
        "id": 230511073,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615901182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230508906\">said</a>:</p>\n<blockquote>\n<p>Thanks, Fabrizio. I actually wanted to expand on these things. I do realise there is some intuition and background here not really coming from Petri-net theory. I would like to go through the whole yoga of shapes and elementary shapes and etale maps and so on, step by step, starting with directed graphs and categories, then trees and operads, then (open) graphs and properads/props, and finally (whole-grain) Petri nets. I hope to get around to it over the coming days...</p>\n</blockquote>\n<p>That would be great! Homotopy theory is very far from my background so anything that can help is appreciated!</p>",
        "id": 230512702,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615901869
    },
    {
        "content": "<p>If some other people are interested and you have time, would it make sense to have some open-access zoom conversations that we can then record and share? I don't know which way you prefer, I often feel that writing something in detail takes longer than actually telling a story on video</p>",
        "id": 230513006,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1615901999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230512702\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230508906\">said</a>:</p>\n<blockquote>\n<p>Thanks, Fabrizio. I actually wanted to expand on these things. I do realise there is some intuition and background here not really coming from Petri-net theory. I would like to go through the whole yoga of shapes and elementary shapes and etale maps and so on, step by step, starting with directed graphs and categories, then trees and operads, then (open) graphs and properads/props, and finally (whole-grain) Petri nets. I hope to get around to it over the coming days...</p>\n</blockquote>\n<p>That would be great! Homotopy theory is very far from my background so anything that can help is appreciated!</p>\n</blockquote>\n<p>I would also very much enjoy hearing about this :)</p>",
        "id": 230522714,
        "sender_full_name": "Jade Master",
        "timestamp": 1615905404
    },
    {
        "content": "<p>Me too!</p>",
        "id": 230537133,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1615909904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span> <br>\nAfter reading and thinking a bit more I am starting to really appreciate this analogy to covering spaces which you have figured out.  Just like  a cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">E \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> of topological spaces, a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>→</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P \\to Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is a covering if it is locally an isomorphism and it is surjective. The local isomorphism part is covered by being an etale map (the pullback squares guarantee this). To recover a definition of open map like I wrote above we want to prove a version of the path-lifting lemma but in the context of Petri nets instead of spaces. I think that this part should follow without much work...a path in P can be lifted to a path in Q by chaining together the lifts guaranteed by the local isomorphisms in the covering <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>→</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P \\to Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>. Does that sound right to you?</p>",
        "id": 230541164,
        "sender_full_name": "Jade Master",
        "timestamp": 1615910887
    },
    {
        "content": "<p>By the way the idea that the unfolding of a net is its universal cover is really beautiful. I read it when your paper came out but I haven't really appreciated it until now.</p>",
        "id": 230541850,
        "sender_full_name": "Jade Master",
        "timestamp": 1615911040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/235484-theory.3A-concurrency/topic/bisimulation/near/230513006\">said</a>:</p>\n<blockquote>\n<p>If some other people are interested and you have time, would it make sense to have some open-access zoom conversations that we can then record and share? I don't know which way you prefer, I often feel that writing something in detail takes longer than actually telling a story on video</p>\n</blockquote>\n<p>I will certainly write something, but this week is a bit busy because of the polynomial workshop.<br>\nOn the other hand, it sounds like  fun to organise a little discussion session! And I also have many questions myself.</p>",
        "id": 230576414,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615923166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> , yes that sounds right. The main question is what it means to chain together lifts. This has to be subject to some kind of simply-connectedness, because there are certainly loop-like shapes that should not be required liftable. Another question is that I was probably too fast to equate etale maps and coverings. At least, I think it is practical not to demand etale maps to be surjective, because it is nice to have the members of a covering family (in the sense of a Grothendieck topology) not to be surjective individually. Maybe I am at odds with standard terminology?</p>",
        "id": 230578168,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1615923821
    },
    {
        "content": "<p>I don't know much about Grothendieck topologies or etale maps but the definition of cover that I have in mind is surjective.</p>",
        "id": 230581722,
        "sender_full_name": "Jade Master",
        "timestamp": 1615925097
    },
    {
        "content": "<p>In topology a cover can have any number of sheets, including zero.   So a cover doesn't need to surjective.   One style of definition goes roughly</p>\n<p><em><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>:</mo><mi>E</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">p: E \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a cover if given a path <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>:</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma  : [0,1] \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> in the base and a point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">e \\in E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>γ</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(e) = \\gamma(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, there is a unique lift of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></em></p>\n<p>and this is automatically <em>true</em> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is empty.</p>\n<p>Another style of definition goes roughly</p>\n<p><em><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>:</mo><mi>E</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">p: E \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a cover if given any point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">b \\in B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> there is a neighborhood <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p^{-1}(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> is a disjoint union of copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>, with the projection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> being a homeomorphism on each copy</em></p>\n<p>and again this is automatically <em>true</em> if there are <em>no</em> copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>.</p>\n<p>But a nonempty cover of a connected space is surjective!</p>",
        "id": 230586060,
        "sender_full_name": "John Baez",
        "timestamp": 1615926692
    },
    {
        "content": "<p>People usually don't care much about empty covers, of course.</p>",
        "id": 230586402,
        "sender_full_name": "John Baez",
        "timestamp": 1615926821
    },
    {
        "content": "<p>The definition in May's book on algebraic topology requires that the map be surjective <a href=\"/user_uploads/21317/ZCKFW529uNEA7302UVTuR52A/Screenshot-from-2021-03-16-13-51-58.png\">Screenshot-from-2021-03-16-13-51-58.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/ZCKFW529uNEA7302UVTuR52A/Screenshot-from-2021-03-16-13-51-58.png\" title=\"Screenshot-from-2021-03-16-13-51-58.png\"><img src=\"/user_uploads/21317/ZCKFW529uNEA7302UVTuR52A/Screenshot-from-2021-03-16-13-51-58.png\"></a></div>",
        "id": 230589491,
        "sender_full_name": "Jade Master",
        "timestamp": 1615928064
    },
    {
        "content": "<p>The assumption here is that all spaces are path connected.</p>",
        "id": 230589658,
        "sender_full_name": "Jade Master",
        "timestamp": 1615928135
    },
    {
        "content": "<p>Okay.  He's demanding surjectivity \"by hand\" to eliminate the empty cover, since a cover of a path connected space (using <em>my</em> definitions of cover) is nonempty iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is surjective.</p>",
        "id": 230590600,
        "sender_full_name": "John Baez",
        "timestamp": 1615928469
    },
    {
        "content": "<p>And this makes some sense, because one thing people like to do is think about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> of a covering space, and this makes no sense if the space is empty - there's no basepoint!</p>",
        "id": 230590733,
        "sender_full_name": "John Baez",
        "timestamp": 1615928520
    },
    {
        "content": "<p>Oh, and another very good reason to demand that a covering space of a path connected space be nonempty (and thus surjective) is to make sure the initial object in the category of covers is interesting!</p>\n<p>If you rule out the empty cover, the usual \"universal cover\" is initial in the category of covers!</p>\n<p>If you allow the empty cover, then <em>it</em> is the initial cover!</p>",
        "id": 230591259,
        "sender_full_name": "John Baez",
        "timestamp": 1615928746
    },
    {
        "content": "<p>So okay: all the usual theory of universal covers and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> works better if we exclude the empty cover.</p>",
        "id": 230591407,
        "sender_full_name": "John Baez",
        "timestamp": 1615928787
    },
    {
        "content": "<p>I guess the \"rational\" explanation for ruling out the empty cover is this: as algebraic topologists studying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and such, we are working in the category of <em>pointed</em> spaces.</p>",
        "id": 230591728,
        "sender_full_name": "John Baez",
        "timestamp": 1615928934
    },
    {
        "content": "<p>Right, you also need to fix a basepoint for the universal cover in order for it to be an initial object (otherwise it has automorphisms, the deck transformations). And then the covering map will at least be surjective onto the component of the base space that contains its basepoint.</p>",
        "id": 230592059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1615929103
    },
    {
        "content": "<p>So, from what I can see from that one passage, Peter May should not have stuck in \"surjective\" by hand.  He should have said he was working in the category of pointed path-connected spaces.  </p>\n<p>But maybe he was wanting to explore the consequences of changing the basepoint: seeing how that affects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 230596743,
        "sender_full_name": "John Baez",
        "timestamp": 1615931334
    },
    {
        "content": "<p>Sorry I'm late to this discussion, I'm only now starting to figure out this zulip thing because of the Very Nice Workshop.<br>\nSo no, \"open maps\" have nothing to do with topological notions of open-ness, but everything with path liftings and weak fibrations. There's a nice paper by Kurz and Rosický on bisimulations and weak fibration systems, and people have tried things with model categories (Tom?).<br>\nLogicians seem to say \"bounded morphism\" instead of \"open map\", and these briefly made an appearance in Helle's nice talk yesterday.</p>",
        "id": 230897777,
        "sender_full_name": "Uli Fahrenberg",
        "timestamp": 1616085723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"393167\">@Uli Fahrenberg</span> Haha, yes, <strong>tried</strong>. Kris Worytkiewicz and I gave it an unsuccsessful go at some point.</p>",
        "id": 230899904,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1616086499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383799\">@Tom Hirschowitz</span> It seems the idea is not yet dead: Eric is still thinking about this :)</p>",
        "id": 230903762,
        "sender_full_name": "Uli Fahrenberg",
        "timestamp": 1616087789
    },
    {
        "content": "<p>Yeah, me too, sometimes.</p>",
        "id": 230904941,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1616088221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>  I had looked at that paper \"Bisimulation from Open Maps\" before and got confused about a few things, since you are discussing it maybe someone can help me. </p>\n<p>First, I'm confused about why bisimilarity is defined as a span of open maps rather than just an open map or maybe a pair of open maps in opposite directions...</p>\n<p>E.g. in the proof of Theorem 2 (p170), it says:</p>\n<p>\"If transition systems are connected by a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>r</mi><mi>a</mi><msub><mi>n</mi><mi>L</mi></msub></mrow><annotation encoding=\"application/x-tex\">Bran_L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-open morphism then because its function on states<br>\nsatisfies the ``zig-zag'' condition (Proposition 1) its graph is a strong bisimulation. Strong bisimilarity is an equivalence relation. Hence a span of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>r</mi><mi>a</mi><msub><mi>n</mi><mi>L</mi></msub></mrow><annotation encoding=\"application/x-tex\">Bran_L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-open morphisms between two transition systems makes them strong bisimilar\"</p>\n<p>Is this implying the existence of a (strong) bisimulation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> makes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> (strong) bisimilar? If so why do we need a span of bisimulations instead of just one open map?</p>\n<p>Second, if we say bisimulation is a span of open maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo>←</mo><mi>X</mi><mo>→</mo><msub><mi>X</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_1 \\leftarrow X \\to X_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, what stops us from settings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">X = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> to be the empty transition system: it seems the empty function can be an open-map? That would mean all systems are bisimilar...</p>\n<p>Edit: it seems they require the transition system to have an initial state: I guess that answers my second question?</p>",
        "id": 230972537,
        "sender_full_name": "Naso",
        "timestamp": 1616126258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276350\">@Nasos Evangelou-Oost</span> The intuition is that you want bisimulations to be <em>relations</em>. The morphisms in your category are thought of as <em>functional simulations</em>, so open maps would be functional bisimulations; but what we're really interested in are not functions, but relations. Relating the states in a transition system so that related states have similar behavior.</p>",
        "id": 230979168,
        "sender_full_name": "Uli Fahrenberg",
        "timestamp": 1616132395
    }
]