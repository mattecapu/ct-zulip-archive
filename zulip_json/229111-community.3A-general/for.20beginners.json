[
    {
        "content": "<p>For any beginners lurking around here: I wrote two series of tweets, one explaining <a href=\"https://twitter.com/johncarlosbaez/status/1393696976999383041\">some basic intuitions behind colimits</a> and the other explaining <a href=\"https://twitter.com/johncarlosbaez/status/1395105477889904641\">some basic intuitions behind limits</a>.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/johncarlosbaez/status/1393696976999383041\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/e716f8c3f3ab76851e6edbf6b3d5392e21a713e3/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313232343934313337303838353832383630382f4b74617a394a4c425f6e6f726d616c2e6a7067\"></a><p>To understand category theory one thing you need is an intuitive grasp of \"colimits\".   So:\n\nA colimit of a bunch of objects is a way of \"sticking them together\" to get a new object.   We often use colimits to assemble interesting objects from basic pieces.\n\n(1/n)</p><span>- John Carlos Baez (@johncarlosbaez)</span></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/johncarlosbaez/status/1395105477889904641\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/e716f8c3f3ab76851e6edbf6b3d5392e21a713e3/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313232343934313337303838353832383630382f4b74617a394a4c425f6e6f726d616c2e6a7067\"></a><p>To understand category theory you need to understand \"limits\".   \n\nIt's easiest to get a feeling for these by looking at limits in the category of sets.   For example, the graph of a function \n\n{(x,y): x ∈ X, y ∈ Y, y = f(x)}  \n\nis a limit! \n\n(1/n)</p><span>- John Carlos Baez (@johncarlosbaez)</span></div></div>",
        "id": 239639982,
        "sender_full_name": "John Baez",
        "timestamp": 1621536113
    },
    {
        "content": "<p>Both these series focuses on categories that resemble the category of sets: limits in a category are colimits in its opposite, so they're really not two different concepts, but in categories like Set they behave very differently.</p>",
        "id": 239640232,
        "sender_full_name": "John Baez",
        "timestamp": 1621536227
    },
    {
        "content": "<p>(I thought you had given up on twitter???)</p>",
        "id": 239716367,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1621586636
    },
    {
        "content": "<p>In the second tweet on colimits you use the example of a graph as the colimit of the walking vertext and walking edge. I wonder how that compares to graphs as functors from the small category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo separator=\"true\">,</mo><mi>o</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">s, o: A \\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> to Set?</p>",
        "id": 239717841,
        "sender_full_name": "Henry Story",
        "timestamp": 1621587330
    },
    {
        "content": "<p>Let me check if I have the idea for the third tweet on colimits right. <br>\nWikipedia <a href=\"https://en.wikipedia.org/wiki/Pushout_(category_theory)\">entry on colimits</a> has the well known definition of <a href=\"/user_uploads/21317/kHMml-p0znvp9tpoO5qgMj0a/image.png\">colimits as a diagram</a>. I think that maps to <a href=\"https://twitter.com/johncarlosbaez/status/1393699213729406979/photo/1\">your image of the green and blue circle</a> as follows: that Z is the blue&amp;green intersection region, X and Y are the blue and green circles, and P is the union of both circles.  So if one takes a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>:</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">z: Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>i</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i_1(f(z)) = i_2(g(z))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span></span></span></span>.<br>\nIf instead of Z being the intersection, we took say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\empty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span> the empty set for Z, then we would have the usual <code>Either</code> structure in programming (disjoint union) so we would have a different P where the intersection region was duplicated somehow.... Would we need the circles to be on two planes?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/kHMml-p0znvp9tpoO5qgMj0a/image.png\" title=\"colimits as a diagram\"><img src=\"/user_uploads/21317/kHMml-p0znvp9tpoO5qgMj0a/image.png\"></a></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/johncarlosbaez/status/1393699213729406979/photo/1\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/e716f8c3f3ab76851e6edbf6b3d5392e21a713e3/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313232343934313337303838353832383630382f4b74617a394a4c425f6e6f726d616c2e6a7067\"></a><p>A more interesting kind of colimit is a \"pushout\".  Here you stick together two things with a specified \"overlap\".  \n\nFor example, here we are taking the pushout of a green and a blue disk, where we specify how the blue-green region is included in each one.\n\n(4/n) <a href=\"https://t.co/oFzNK33Yt8\">https://twitter.com/johncarlosbaez/status/1393699213729406979/photo/1</a></p><span>- John Carlos Baez (@johncarlosbaez)</span><div class=\"twitter-image\"><a href=\"https://t.co/oFzNK33Yt8\"><img src=\"https://uploads.zulipusercontent.net/2a6106edafc0a2d3a2f8bffbf3f7523640f14bb9/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45316470393253566b4141544d384b2e706e673a7468756d62\"></a></div></div></div>",
        "id": 239719659,
        "sender_full_name": "Henry Story",
        "timestamp": 1621588286
    },
    {
        "content": "<p>One thing I was obsessed with when I was learning this stuff is that you can build every limit/colimit if you have just terminal objects and pullbacks/initial objects and pushouts, or alternatively if you have products and equalizers/coproducts and coequalizers</p>",
        "id": 239723992,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1621590551
    },
    {
        "content": "<p>I think this helps intuition a lot, because you can develop intuitions for just two cases and they scale pretty well</p>",
        "id": 239724053,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1621590596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383799\">Tom Hirschowitz</span> <a href=\"#narrow/stream/229111-general/topic/for.20beginners/near/239716367\">said</a>:</p>\n<blockquote>\n<p>(I thought you had given up on twitter???)</p>\n</blockquote>\n<p>I've relapsed.</p>",
        "id": 239755974,
        "sender_full_name": "John Baez",
        "timestamp": 1621605911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229111-general/topic/for.20beginners/near/239717841\">said</a>:</p>\n<blockquote>\n<p>In the second tweet on colimits you use the example of a graph as the colimit of the walking vertex and walking edge. I wonder how that compares to graphs as functors from the small category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo separator=\"true\">,</mo><mi>o</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">s, o: A \\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> to Set?</p>\n</blockquote>\n<p>They're closely connected.   The category of graphs is a \"presheaf category\" - the category of functors from (the opposite of) some small category X to Set.   Every object of X gives an object of the presheaf category called a \"representable\" - in this case they're the walking vertex and the walking edge.  And every object in a presheaf category is a colimit of representables.  </p>\n<p>This is an important fact, and the category of graphs shows that this fact is all about building up structures in a tinker-toy like fashion from sticking basic pieces together.</p>",
        "id": 239756609,
        "sender_full_name": "John Baez",
        "timestamp": 1621606143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229111-general/topic/for.20beginners/near/239719659\">said</a>:</p>\n<blockquote>\n<p>Let me check if I have the idea for the third tweet on colimits right. <br>\nWikipedia <a href=\"https://en.wikipedia.org/wiki/Pushout_(category_theory)\">entry on colimits</a> has the well known definition of <a href=\"/user_uploads/21317/kHMml-p0znvp9tpoO5qgMj0a/image.png\">colimits as a diagram</a>. I think that maps to <a href=\"https://twitter.com/johncarlosbaez/status/1393699213729406979/photo/1\">your image of the green and blue circle</a> as follows: that Z is the blue&amp;green intersection region, X and Y are the blue and green circles, and P is the union of both circles.  So if one takes a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>:</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">z: Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>i</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i_1(f(z)) = i_2(g(z))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span></span></span></span>.</p>\n</blockquote>\n<p>Right, exactly - that's the idea I was trying to convey in a very nontechnical way.  </p>\n<blockquote>\n<p>If instead of Z being the intersection, we took say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\empty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span> the empty set for Z, then we would have the usual <code>Either</code> structure in programming (disjoint union) so we would have a different P where the intersection region was duplicated somehow.... Would we need the circles to be on two planes?</p>\n</blockquote>\n<p>Or just sitting next to each other not overlapping, or something.  Instead of thinking of the circles as subsets of some pre-existing space, you should really think of them more abstractly as \"free-floating\" entities, namely topological spaces.     Then doing a pushout lets you stick them together with any desired amount of overlap.   </p>\n<p>Doing a pushout where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is the empty set lets you say there's <em>no</em> overlap, and then your pushout is a coproduct.    And remember, the empty set is the initial object in the category of topological spaces.  There's a little theorem saying that if you do a pushout where P is the initial object you just get a coproduct.</p>",
        "id": 239757266,
        "sender_full_name": "John Baez",
        "timestamp": 1621606420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229111-general/topic/for.20beginners/near/239723992\">said</a>:</p>\n<blockquote>\n<p>One thing I was obsessed with when I was learning this stuff is that you can build every limit/colimit if you have just terminal objects and pullbacks/initial objects and pushouts, or alternatively if you have products and equalizers/coproducts and coequalizers</p>\n</blockquote>\n<p>Yes, I like these things.   To be pedantic:</p>\n<p>You can build every <em>finite</em> colimit from pushouts and an initial object, or from finite coproducts and coequalizers.   </p>\n<p>We can build arbitrary (small) colimits from <a href=\"https://ncatlab.org/nlab/show/wide+pullback\">wide pushouts</a> and an initial object, or from coproducts and wide coequalizers.</p>",
        "id": 239760613,
        "sender_full_name": "John Baez",
        "timestamp": 1621607655
    },
    {
        "content": "<blockquote>\n<p>I think this helps intuition a lot, because you can develop intuitions for just two cases and they scale pretty well.</p>\n</blockquote>\n<p>Yeah.  There's this stuff about the infinite case one has to ponder, but it's just a generalization of the finite case.</p>",
        "id": 239760998,
        "sender_full_name": "John Baez",
        "timestamp": 1621607783
    },
    {
        "content": "<p>If you have arbitrary small coproducts, you don't need wide coequalizers - ordinary coequalizers are sufficient to get all colimits</p>",
        "id": 239764209,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1621609092
    },
    {
        "content": "<p>Oh, great!   I keep wondering about that.</p>",
        "id": 239810151,
        "sender_full_name": "John Baez",
        "timestamp": 1621629590
    },
    {
        "content": "<p>Like, for one minute every year.</p>",
        "id": 239810220,
        "sender_full_name": "John Baez",
        "timestamp": 1621629616
    }
]