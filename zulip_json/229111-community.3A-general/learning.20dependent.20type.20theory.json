[
    {
        "content": "<p>I am really interested about dependent types. However most of this still goes over my head.</p>",
        "id": 319243985,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672766908
    },
    {
        "content": "<p>Mixing up terms and types would need some sort of an explanation.</p>",
        "id": 319245053,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672767216
    },
    {
        "content": "<p>A good example is the space of parameters for the type of (ordinary, geometric) shapes.  </p>\n<p>For  <code>c=Circle: Shape</code>, we might have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup><mo>×</mo><msup><mi mathvariant=\"double-struck\">R</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">Param(c)\\cong \\R^2\\times\\R^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>, corresponding to center and radius, while for another element <code>s=Square: Shape</code> it could be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup><mo>×</mo><msup><mi mathvariant=\"double-struck\">R</mi><mo>+</mo></msup><mo>×</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>π</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Param(s)\\cong \\R^2\\times\\R^+\\times[0,\\pi/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8547em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/2</span><span class=\"mclose\">)</span></span></span></span> for center, side length &amp; orientation.</p>\n<p>With dependent types, we can talk about a (type-safe) function that turns parameterized shapes into, e.g., svg code<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>x</mi><mo>:</mo><mi>S</mi><mi>h</mi><mi>a</mi><mi>p</mi><mi>e</mi></mrow></msub><mi>P</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>S</mi><mi>V</mi><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{x:Shape} Param(x) \\to SVG</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal mtight\">ha</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">G</span></span></span></span></p>\n<p>Then we could write a function that takes a list of shapes and a default assignment of parameters for each shape, and use this to construct a larger SVG<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>h</mi><mi>a</mi><mi>p</mi><mi>e</mi><mo stretchy=\"false\">)</mo><mo>×</mo><msub><mo>∏</mo><mrow><mi>x</mi><mo>:</mo><mi>S</mi><mi>h</mi><mi>a</mi><mi>p</mi><mi>e</mi></mrow></msub><mi>P</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>S</mi><mi>V</mi><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">List(Shape)\\times \\prod_{x: Shape} Param(x) \\to SVG</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">ha</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal mtight\">ha</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">G</span></span></span></span></p>",
        "id": 319306643,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1672793850
    },
    {
        "content": "<p>I mean that the theory goes over my head. I can use dependent types and understand your example very well. The problems come when it comes to theory.</p>\n<p>For instance. How do fibrations exactly model the dependent types? Or if we take presheaves how do those work?</p>",
        "id": 319314321,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672799256
    },
    {
        "content": "<p>the \"basic\" theory of dependent types isn't in any way linked to category theory, at least in the way it's usually presented. It's basically a multi-sorted algebraic theory! You can use some very categorical formulations of what those theories look like, through categories with families or even Awodey's natural models (the most concise formulation yet imho). The concept of fibrations is disjoint from the general theory of dependent types, but they provide a very important class of examples of such theories. The natural models paper is structured that way: first define what a dependent type theory is, then show that fibrations (or display maps) provide such a class of examples with such and such properties.</p>\n<p>I personally look at it the other way around: dependent type theory is a language that you can use to reason about a bunch of different things, and fibrations are one of them! So if you are interested in fibrations, DTT lets you work with them syntactically.</p>",
        "id": 319354206,
        "sender_full_name": "Josselin Poiret",
        "timestamp": 1672826115
    },
    {
        "content": "<p>Or, turning it around, anything that models dependent types behaves like a notion of \"fibration\"!</p>",
        "id": 319414745,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1672846684
    },
    {
        "content": "<p>Part of why I'm attracted to trying to understand some model for dependent types comes from universal constructions such as products and exponentials. How the reduction rules simply fall out from the definitions there.</p>\n<p>I agree I probably won't need one if I just started using dependent types. I had not seen Awodey's natural models yet though.</p>",
        "id": 319428979,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672851078
    },
    {
        "content": "<p>What kind of background are you coming from?</p>",
        "id": 319429784,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1672851320
    },
    {
        "content": "<p>Hobbyist programmer for 25 years. I've used tons of different programming languages.</p>",
        "id": 319432224,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672852030
    },
    {
        "content": "<p>Do you understand categorical semantics of simple type theory?</p>",
        "id": 319432501,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1672852116
    },
    {
        "content": "<p>Unless I miss something, I do think so.</p>",
        "id": 319433525,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672852483
    },
    {
        "content": "<p>Good.  I generally think it's best to start out thinking of dependent types as arbitrary maps, and then later observe that in the presence of higher identity types one wants them to be fibrations.  We think of a dependent type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi>A</mi><mo>⊢</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x:A \\vdash B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> as a family of objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">}</mo><mrow><mi>x</mi><mo>∈</mo><mi>A</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\{ B(x) \\}_{x\\in A}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span></span></span></span>, and represent it by the coproduct <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∐</mo><mrow><mi>x</mi><mo>∈</mo><mi>A</mi></mrow></msub><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\coprod_{x\\in A} B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> with its projection down to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.  Conversely, any map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>:</mo><mi>C</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">p:C\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> can be thought of as representing the family of all its fibers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p^{-1}(a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>≅</mo><msub><mo>∐</mo><mrow><mi>x</mi><mo>∈</mo><mi>A</mi></mrow></msub><msup><mi>p</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> C \\cong \\coprod_{x\\in A} p^{-1}(a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1412em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 319434881,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1672852990
    },
    {
        "content": "<p>I wrote a bit of an introduction to categorical semantics of dependent type theory in section 2 of <a href=\"https://arxiv.org/abs/1703.03007\">the logic of space</a>.</p>",
        "id": 319435007,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1672853027
    },
    {
        "content": "<p>regarding what I was saying above, I think it's better to only talk only about display maps first: they single out in the categorical model what arrows should model a proper type-on-type dependency through their fibers. In the case of a basic set model of let's say MLTT, seeing all arrows as defining dependent types works well enough, so you don't need to single out such a class. But if your intended semantics are groupoids, or spaces, etc., then you cannot just take all arrows: take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> B = \\{0\\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> A = [0,1] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>. There is an inclusion map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> B \\to A </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, but you can see that the fiber-wise dependency on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [0,1] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> is not well-behaved when considering identity types: you cannot continuously transport elements over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> 0 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> to elements over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>! This means that you need a specific class of display maps, and here they would be Kan fibrations.</p>",
        "id": 319466788,
        "sender_full_name": "Josselin Poiret",
        "timestamp": 1672863834
    },
    {
        "content": "<p>While trying to answer some tricky questions like this recently, I realised I don't know how to motivate Grothendieck fibrations specifically to someone coming from dependent type theory. It makes sense to me that dependent types behave like fibrations of spaces or groupoids or whatever undirected thing. Is there a neat way to motivate Grothendieck fibrations this way, or is that where the analogy stops?</p>",
        "id": 319605121,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1672931262
    },
    {
        "content": "<p>There are directed type theories, with hom types (directed-path types), where dependent types behave like fibrations of (infinity-)categories. As I understand, these were specifically designed to be a language for such things, so the motivation usually goes the other way round. But given some motivation for generalising identity types to hom types (which I'm sure one could find), this could motivate the generalisation of fibrations of groupoids to fibrations of categories.</p>",
        "id": 319616215,
        "sender_full_name": "Sam Speight",
        "timestamp": 1672934578
    },
    {
        "content": "<p>Maybe if I take a simple example, I may finally understand it: If I take a type (2 -&gt; set), I could treat it as a type (A+B) with a fiber (A+B -&gt; 2), with a limitation that I cannot directly access either A or B.</p>",
        "id": 319628961,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672938152
    },
    {
        "content": "<p>Now I could only pullback with either Inl or Inr. Consider pullback with Inl. It would 'select' A and bring the fiber (A -&gt; 1), giving the access to A.</p>",
        "id": 319629819,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672938388
    },
    {
        "content": "<p>Ok, now I read the dao of FP again and see if I get further with it.</p>",
        "id": 319630081,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672938469
    },
    {
        "content": "<p>Another way I can start to unravel this is to consider (a : set) -&gt; a as a fibration.</p>",
        "id": 319645028,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672942960
    },
    {
        "content": "<p>I think I'm on the edge of understanding this. I need to understand base change functor, a bit about slice categories and pullbacks.</p>",
        "id": 319737192,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672993965
    },
    {
        "content": "<p>The a:set - case brings up an universe level, so it's probably not a good starting point. But the simple a+b case seem to work.</p>",
        "id": 319737476,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1672994120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296269\">Henri Tuhola</span> <a href=\"#narrow/stream/229111-general/topic/learning.20CT/near/319645028\">said</a>:</p>\n<blockquote>\n<p>Another way I can start to unravel this is to consider (a : set) -&gt; a as a fibration.</p>\n</blockquote>\n<p>Yes, this is the universal fibration. If you want to see the semantics a bit more clearly, you need to use Tarski-style universes, so the function type is actually (a : Set) → El a, which is given by a universe in the semantics <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>l</mi><mo>:</mo><mover accent=\"true\"><mi>U</mi><mo>~</mo></mover><mo>→</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\"> El : Ũ → U </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">El</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9202em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9202em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span><span style=\"top:-3.6023em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2222em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\"> U </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>-small types are exactly those whose name come from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\"> Set </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span>, ie. pullbacks of the universe fibration. The example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A + B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is not great imo, as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A + B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is not directly a dependent type, just a sum of two closed types. Maybe you would want to consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>:</mo><mi mathvariant=\"double-struck\">N</mi><mo>⊢</mo><mi>F</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> n : \\mathbb{N} \\vdash Fin(n) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> as a simple example instead, or to make a definition of your example more explicit you could define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>:</mo><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mo>→</mo><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\"> K : Bool → Set </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">oo</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> K false = A </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">se</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> K true = B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, and then you do have the dependent type you're looking for</p>",
        "id": 319738177,
        "sender_full_name": "Josselin Poiret",
        "timestamp": 1672994466
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/GUBUBOq24CkQUtSjTUfbWuwf/16731929930417209198029531058890.jpg\">16731929930417209198029531058890.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/GUBUBOq24CkQUtSjTUfbWuwf/16731929930417209198029531058890.jpg\" title=\"16731929930417209198029531058890.jpg\"><img src=\"/user_uploads/21317/GUBUBOq24CkQUtSjTUfbWuwf/16731929930417209198029531058890.jpg\"></a></div><p>It almost makes sense. There are things that confuse me though.</p>",
        "id": 320091576,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673193230
    },
    {
        "content": "<p>I tried to draw the adjunctions for dependent product and sum. I should get Unit and counit right? I am confused what the signature of counit turns out to be in product.</p>",
        "id": 320092973,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673193969
    },
    {
        "content": "<p>I would draw that diagram as this:</p>",
        "id": 320147842,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1673238263
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/i8mnyZTpzAqEuQ_T0HJywkGP/d.jpg\">d.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/i8mnyZTpzAqEuQ_T0HJywkGP/d.jpg\" title=\"d.jpg\"><img src=\"/user_uploads/21317/i8mnyZTpzAqEuQ_T0HJywkGP/d.jpg\"></a></div>",
        "id": 320147849,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1673238292
    },
    {
        "content": "<p>The details of the conventions that I use are here:<br>\n<a href=\"http://angg.twu.net/math-b.html#2022-md\">http://angg.twu.net/math-b.html#2022-md</a><br>\nTake a look at its section 8.12! =)</p>",
        "id": 320147937,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1673238428
    },
    {
        "content": "<p>28 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"229111\" href=\"/#narrow/stream/229111-general/topic/learning.20CT\">#general &gt; learning CT</a> by <span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span>.</p>",
        "id": 320301369,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673290340
    },
    {
        "content": "<p>In pullback/base change, is 'f' in itself a fiber/bundle? If so then that'd make a lots of sense.</p>",
        "id": 320435930,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673352699
    },
    {
        "content": "<p>It can be, but not necessarily. It's better to think of <code>f</code> as a term that is being substituted into the definition of the dependent type.</p>",
        "id": 320436907,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1673353036
    },
    {
        "content": "<p>But why it ends up being defined before there is anything to substitute? In the introduction of the dependent function?</p>",
        "id": 320437587,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673353247
    },
    {
        "content": "<p>I'm reading through \"Topoi, the Categorial Analysis of Logic.\" it has helped me to understand these concepts.</p>",
        "id": 320439924,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673354070
    },
    {
        "content": "<p>But had to take a break. Maybe I'll just be silent until I've read through.</p>",
        "id": 320445276,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673355714
    },
    {
        "content": "<p>This is the picture that helped me<br>\n<a href=\"/user_uploads/21317/uc_Ezr2IHHYyTwydO3jl-s6o/PXL_20230110_1315283532.jpg\">PXL_20230110_131528353~2.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/uc_Ezr2IHHYyTwydO3jl-s6o/PXL_20230110_1315283532.jpg\" title=\"PXL_20230110_131528353~2.jpg\"><img src=\"/user_uploads/21317/uc_Ezr2IHHYyTwydO3jl-s6o/PXL_20230110_1315283532.jpg\"></a></div>",
        "id": 320448061,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1673356695
    },
    {
        "content": "<p>But the picture on the right is just an elaborate way to construct a commutative triangle<br>\n<a href=\"/user_uploads/21317/2RhaLJtDJC3-EP7D-GX6o86k/PXL_20230110_1319187262.jpg\">PXL_20230110_131918726~2.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/2RhaLJtDJC3-EP7D-GX6o86k/PXL_20230110_1319187262.jpg\" title=\"PXL_20230110_131918726~2.jpg\"><img src=\"/user_uploads/21317/2RhaLJtDJC3-EP7D-GX6o86k/PXL_20230110_1319187262.jpg\"></a></div>",
        "id": 320448378,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1673356791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/229111-general/topic/learning.20dependent.20type.20theory/near/320448061\">said</a>:</p>\n<blockquote>\n<p>This is the picture that helped me<br>\n<a href=\"/user_uploads/21317/uc_Ezr2IHHYyTwydO3jl-s6o/PXL_20230110_1315283532.jpg\">PXL_20230110_131528353~2.jpg</a></p>\n</blockquote>\n<p>what do those things correspond to? is this a construction, if so, of what starting from what?</p>",
        "id": 320451644,
        "sender_full_name": "Josselin Poiret",
        "timestamp": 1673357687
    },
    {
        "content": "<p>On the left we have three declarations, and on the right the associated categorical structure. In particular, the pullback is used to interpret the substitution of <code>f</code> into <code>A</code>, which is needed to give the type of <code>a</code>.</p>",
        "id": 320454083,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1673358396
    },
    {
        "content": "<p>From the diagrammatic perspective it's a bit roundabout because it's not easy to talk about a term that depends on one context in a type that depends on another. For me, it's easier to think about the partial section <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">Y\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> directly, and the (total) section of the pullback is just a device to fit it into type theory.</p>",
        "id": 320454973,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1673358667
    },
    {
        "content": "<p>Obviously a very important device...</p>",
        "id": 320455091,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1673358695
    },
    {
        "content": "<p>I finished with reading the book but didn't gain more insight into base change functor &amp; it's adjoints. I guess I'm stuck with partial understanding. I've moved on... For now.</p>",
        "id": 321360288,
        "sender_full_name": "Henri Tuhola",
        "timestamp": 1673704370
    }
]