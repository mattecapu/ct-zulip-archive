[
    {
        "content": "<p>I saw on the <a href=\"https://teamup.com/ksfss6k4j1bxc8vztb\" title=\"https://teamup.com/ksfss6k4j1bxc8vztb\">category theory calendar</a> that Kevin Buzzard gave a Zoom talk on April 1st. Is there a video available anywhere?</p>",
        "id": 193096759,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1586204731
    },
    {
        "content": "<p>He spoke at the OWLS seminar, and they don't seem to mention videos - am I overlooking it?</p>\n<p><a href=\"https://www.cs.bham.ac.uk/~vicaryjo/owls/\" title=\"https://www.cs.bham.ac.uk/~vicaryjo/owls/\">https://www.cs.bham.ac.uk/~vicaryjo/owls/</a></p>",
        "id": 193097207,
        "sender_full_name": "John Baez",
        "timestamp": 1586204935
    },
    {
        "content": "<p>apparently there isn't a recording available yet (via the HoTT Zulip)</p>",
        "id": 193097392,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1586205010
    },
    {
        "content": "<p>Okay, thanks</p>",
        "id": 193097557,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1586205092
    },
    {
        "content": "<p>The recording is promised to be put up on YouTube, but Jamie had the problem that the recording existed as two files: an audio file and a video file with no sound. I guess he's just got to find the time to faff about combining them and uploading the result.</p>",
        "id": 193103120,
        "sender_full_name": "James Wood",
        "timestamp": 1586207829
    },
    {
        "content": "<p>Okay,t hanks for letting me.  That's curious.   Zoom creates a video with sound.  I guess Jamie is stuck in the \"silent movie\" era.</p>",
        "id": 193103223,
        "sender_full_name": "John Baez",
        "timestamp": 1586207892
    },
    {
        "content": "<p>He did record using Zoom, I asked. I've done a bit of googling and sometimes mp4 files play without sound, something to do with codecs and whatnot.</p>",
        "id": 193118455,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1586218381
    },
    {
        "content": "<p>Based on what I've seen at MathOverflow, I'd almost bet money that Buzzard's answer would be 'no'. (But hey, surprise me.)</p>",
        "id": 193119021,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1586218967
    },
    {
        "content": "<p>Another case of <a href=\"https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines\" title=\"https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines\">Betteridge's law</a>?</p>",
        "id": 193123518,
        "sender_full_name": "John Baez",
        "timestamp": 1586223812
    },
    {
        "content": "<p>Over at the HoTT zulip, Kevin has seemed very open-minded.  I didn't manage to watch the talk, but from the <a href=\"https://hott.zulipchat.com/user_uploads/21159/bGevQGNpevp7xRB1t_HpkK1x/OWLS.pdf\" title=\"OWLS.pdf\">slides</a> that he shared, it seems that his answer is \"we need to formalize lots of undergraduate mathematics in a HoTT proof assistant, in order to find out.\"</p>",
        "id": 193126228,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1586227266
    },
    {
        "content": "<p>Yes, it's a bit like his attitude to formal proofs (as I understand it) before he became enamoured of Lean. We need to do a bunch of stuff to see what happens. Formalisation is as close to experimental pure mathematics as one can get, I feel (pure numerical work in number theory notwithstanding).</p>",
        "id": 193140439,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1586235055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193126228\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193126228\">said</a>:</p>\n<blockquote>\n<p>Over at the HoTT zulip, Kevin has seemed very open-minded.  I didn't manage to watch the talk, but from the <a href=\"https://hott.zulipchat.com/user_uploads/21159/bGevQGNpevp7xRB1t_HpkK1x/OWLS.pdf\" title=\"OWLS.pdf\">slides</a> that he shared, it seems that his answer is \"we need to formalize lots of undergraduate mathematics in a HoTT proof assistant, in order to find out.\"</p>\n</blockquote>\n<p>I think the story is as follows.  Kevin was trying to formalize some stuff in Lean.  In doing so, he needed to prove some statements that clearly <em>are</em> theorems of Lean (and ZFC, and other non-univalent systems) but the proofs are long and inconvenient.  He asked what would be a covenient way of proving these statements.  Some HoTT enthusiasts suggested that univalence was the answer, because the proof of these statements would be trivial in HoTT.  So Kevin is asking these people to \"put their money where their mouth is\" by formalizing his stuff in HoTT.</p>",
        "id": 193162245,
        "sender_full_name": "Paul Blain Levy",
        "timestamp": 1586252801
    },
    {
        "content": "<p>In my opinion it's rather strange to adopt univalence for the sole purpose of getting shorter proofs of things that were already provable without univalence.</p>",
        "id": 193162395,
        "sender_full_name": "Paul Blain Levy",
        "timestamp": 1586252886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276699\">Paul Blain Levy</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193162395\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193162395\">said</a>:</p>\n<blockquote>\n<p>In my opinion it's rather strange to adopt univalence for the sole purpose of getting shorter proofs of things that were already provable without univalence.</p>\n</blockquote>\n<p>This was arguably Voevodsky's motivation. He  didn't want to work with higher inductive types or other \"synthetic\" homotopy constructs until the models and their relation to standard constructions (e.g. standard model categories, etc) were fully worked out and understood (which now great progress has been made on).  So the system he worked in, iirc, was something like  MLTT + truncation + choice when warranted + univalence.</p>\n<p>More generally, even in the presence of higher inductive types, I think it would be pretty shocking to get proofs of things _really_ not provable without univalence with the addition of univalence. If all it lets you do is \"tighten up\" equivalences into equalities, then anything you prove with it should be able to be \"laxified\" into something nearly the same, but with some extra equivalences lying about that can be proved without it.</p>\n<p>Arguably the convenience it buys you is that once you get those equalities, then you have a straightforward way to apply transport along them.</p>",
        "id": 193165288,
        "sender_full_name": "Gershom",
        "timestamp": 1586254567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276699\">Paul Blain Levy</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193162395\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193162395\">said</a>:</p>\n<blockquote>\n<p>In my opinion it's rather strange to adopt univalence for the sole purpose of getting shorter proofs of things that were already provable without univalence.</p>\n</blockquote>\n<p>Well, if your goal is to have 'generic mathematicians' jumping on the train, it's quite crucial that trivialities don't become cumbersome. Moreover univalence reflects much of the laxity the mathematical practice regularly employ, that is identifying equivalent objects</p>",
        "id": 193172613,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1586259114
    },
    {
        "content": "<p>Hence, given the premise, it seems to be that Kevin was stressing that univalence is a great 'psychological' tool</p>",
        "id": 193172711,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1586259147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276650\">Gershom</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193165288\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193165288\">said</a>:</p>\n<blockquote>\n<p>More generally, even in the presence of higher inductive types, I think it would be pretty shocking to get proofs of things _really_ not provable without univalence with the addition of univalence. If all it lets you do is \"tighten up\" equivalences into equalities, then anything you prove with it should be able to be \"laxified\" into something nearly the same, but with some extra equivalences lying about that can be proved without it.</p>\n</blockquote>\n<p>Maybe I'm misunderstanding what you mean, but you do need univalence to show that certain higher inductive types have the expected homotopy groups. For example, without univalence it is consistent that the circle is contractible, as the set model shows.</p>",
        "id": 193172915,
        "sender_full_name": "Paolo Capriotti",
        "timestamp": 1586259253
    },
    {
        "content": "<p>Yeah, univalence is essentially making the universe a higher inductive type, and without it, there's no accessible structure to do non-trivial 'large' elimination of other higher inductive types. So you're in a similar situation to where you can't prove disjointness of constructors without the universe.</p>",
        "id": 193199237,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586271129
    },
    {
        "content": "<p>You'd probably have to laxify all the HITs involved.</p>\n<p>However, \"someone could, in principle, write down all the structure and prove things without univalence,\" is a criterion that will probably always be satisfied, which I think was the point.</p>",
        "id": 193201287,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586271905
    },
    {
        "content": "<p>My confusion is, I suppose, that it is not clear to me that one needs univalence to rule out the set model.  My understanding, which I guess may be wrong, is that the presence of certain higher inductive types with sufficient elim rules alone (maybe ad-hoc large-elims per type) suffices. I should have thought through and specified what I meant by \"HITs\" in the above though.</p>",
        "id": 193214644,
        "sender_full_name": "Gershom",
        "timestamp": 1586277240
    },
    {
        "content": "<p>Perhaps if there were a special principle for elimination into the universe that allowed you to provide equivalences for higher constructors to go to, that would technically allow you to avoid the exact univalence axiom. Although I couldn't rule out being able to prove univalence from that. It seems like that would be the same thing to a resistant mathematician, though.</p>",
        "id": 193216877,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586278330
    },
    {
        "content": "<p>looking at the fundamental group of the circle in the hott book, i suppose another point is to even state the definitions used in the proof you need univalence <a href=\"/user_uploads/21317/RI_5qsls3kWrl8P2YL_zhR7W/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/RI_5qsls3kWrl8P2YL_zhR7W/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/RI_5qsls3kWrl8P2YL_zhR7W/image.png\"></a></div>",
        "id": 193218759,
        "sender_full_name": "Gershom",
        "timestamp": 1586279185
    },
    {
        "content": "<p>Right, that's where you would need the special elimination. So that you can eliminate <code>loop</code> to <code>succ</code>.</p>",
        "id": 193218900,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586279241
    },
    {
        "content": "<p>Anyway, I shouldn't try to salvage my misstatement further :-). The point I should have stopped at is just that if one is not engaged in synthetic homotopy theory with HITs, then univalence largely just makes things \"nicer\". Once you have a richer univalent universe that you want to prove things regarding, then a priori one way or another you're going to be more with some set of axioms regarding that structure than otherwise.</p>",
        "id": 193219540,
        "sender_full_name": "Gershom",
        "timestamp": 1586279553
    },
    {
        "content": "<p>I suppose I now wonder what Voevodsky wanted to do with mainly MLTT+univalence. I guess maybe you can avoid using HITs because the constructions involving them can be encoded in other ways. Like, a family on the circle is equivalent to a type and a loop in that type, and there are encodings of sections of that family and so on.</p>",
        "id": 193221479,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586280492
    },
    {
        "content": "<p>He didn't want to do anything that different than MLTT without univalence, if I recall, just from a \"univalent\" point of view. He did make use of the fact that univalence -&gt; FunExt, and a few other things. Here's an article on the UniMath project that may or may not help: <a href=\"https://arxiv.org/pdf/1710.02723.pdf\" title=\"https://arxiv.org/pdf/1710.02723.pdf\">https://arxiv.org/pdf/1710.02723.pdf</a></p>",
        "id": 193223094,
        "sender_full_name": "Gershom",
        "timestamp": 1586281301
    },
    {
        "content": "<p>Well, I <em>guess</em> part of it is that intensional type theory can already be seen as being a setting for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoids, unlike most other systems, and univalence adds the right sort of extensionality for that. But without HITs it seems like you're probably missing most of the homotopy types people would want to talk about.</p>",
        "id": 193226521,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586283101
    },
    {
        "content": "<p>So I'm not sure what activities people would do. I guess you could use it like a pure type system, where even if there aren't any defined types other than Π and the sorts, you can talk about things in a non-empty context.</p>",
        "id": 193226763,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586283237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193221479\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193221479\">said</a>:</p>\n<blockquote>\n<p>I suppose I now wonder what Voevodsky wanted to do with mainly MLTT+univalence. I guess maybe you can avoid using HITs because the constructions involving them can be encoded in other ways. Like, a family on the circle is equivalent to a type and a loop in that type, and there are encodings of sections of that family and so on.</p>\n</blockquote>\n<p>I would argue that the purpose of HIT, beside synthetic homotopy theory, is to provide a non-axiomatic (and thus computable) definition of quotients and propositional truncations for instance. These were to some extend in previous systems : a strict version of propositional truncation is allowed in CiC by an inductive in Prop, and non-axiomatic quotients are available in Observational Type Theory if I understand what OTT is about. The  goal of HIT is then to generalize the theory of inductive data types to accomodate these examples. It happens that generalizing the theory of inductive gives us weird things like the Circle about which we may wonder the usefulness  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 193310273,
        "sender_full_name": "Sarah Reboullet",
        "timestamp": 1586348384
    },
    {
        "content": "<p>i don't know if ott had quotients—it did have funext</p>",
        "id": 193326540,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586355587
    },
    {
        "content": "<p>i guess funext + a universe w/ propext probably gets you quotients, but i dont think the original ott paper even had a universe, let alone propext</p>",
        "id": 193326681,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586355624
    },
    {
        "content": "<p>(maybe there was a followup)</p>",
        "id": 193326695,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586355630
    },
    {
        "content": "<p>ive heard reference to something called \"setoidtt\"</p>",
        "id": 193327010,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586355769
    },
    {
        "content": "<p>There was a pretty late paper or blog post on how you could add quotients to OTT. However, the work on the homotopy aspects of type theory leads to a more satisfying computational account of things like quotients (and funext) than might have been discovered for a very long time without it. </p>\n<p>But the statement above was that Voevodsky was relatively content with MLTT+truncation+choice+univalence. And he wanted to do high dimensional mathematics that he thought was infeasible in set theory. My point is, I'm not clear how he would do that without stuff like HITs, unless it was entirely by proving things about hypothetical structures (which, maybe that was the plan, I don't know).</p>",
        "id": 193332534,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586358113
    },
    {
        "content": "<p>In the case of OTT, the answer is always about the same. Props are irrelevant, and equality is a prop, so you can add any axioms to it that you want, if that helps you.</p>",
        "id": 193332710,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586358183
    },
    {
        "content": "<p>Also, the thing about OTT was that it seemed compelling that quotienting should be a <em>third</em> way to define types, like data and codata. But now quotient/higher (co)inductive types seem more compelling.</p>",
        "id": 193333568,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586358532
    },
    {
        "content": "<p>If you take a look at the linked paper, the \"higher dimensionality\" he saw was not \"synthetic\" but really in terms of h-levels. So he wanted to be able to reason up to equivalence, but he imagined, at least at first, constructing definitions of concrete mathematical objects essentially as one would in MLTT typically.</p>",
        "id": 193348810,
        "sender_full_name": "Gershom",
        "timestamp": 1586365122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282084\">Sarah Reboullet</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193310273\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193310273\">said</a>:</p>\n<blockquote>\n<p>I would argue that the purpose of HIT, beside synthetic homotopy theory, is to provide a non-axiomatic (and thus computable) definition of quotients and propositional truncations for instance. These were to some extend in previous systems : a strict version of propositional truncation is allowed in CiC by an inductive in Prop, and non-axiomatic quotients are available in Observational Type Theory if I understand what OTT is about. The  goal of HIT is then to generalize the theory of inductive data types to accomodate these examples. It happens that generalizing the theory of inductive gives us weird things like the Circle about which we may wonder the usefulness  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Of course, that's totally backwards historically.  We invented HITs in order to construct things like the circle, and later noticed that they also gave quotients and truncations.  I guess from your emoji that you're aware of that, but I wanted to emphasize it in case anyone else wasn't.</p>",
        "id": 193367440,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1586374037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276650\">Gershom</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193214644\" title=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/193214644\">said</a>:</p>\n<blockquote>\n<p>My confusion is, I suppose, that it is not clear to me that one needs univalence to rule out the set model.  My understanding, which I guess may be wrong, is that the presence of certain higher inductive types with sufficient elim rules alone (maybe ad-hoc large-elims per type) suffices.</p>\n</blockquote>\n<p>I don't know of any natural axiom that rules out the set model and doesn't imply some form of univalence.  HITs alone are perfectly consistent with set-level models, and if you add \"univalence-inspired large elims\" then you can prove univalence.  (Coincidentally, <span class=\"user-mention\" data-user-id=\"277055\">@Egbert Rijke</span> just mentioned this over in the <a href=\"https://hott.zulipchat.com/#narrow/stream/228519-general/topic/OWLS.3A.20Online.20Worldwide.20Seminar.20on.20Logic.20and.20Semantics/near/193306917\" title=\"https://hott.zulipchat.com/#narrow/stream/228519-general/topic/OWLS.3A.20Online.20Worldwide.20Seminar.20on.20Logic.20and.20Semantics/near/193306917\">HoTT zulip</a>.)</p>",
        "id": 193367789,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1586374207
    },
    {
        "content": "<p>(Although of course, in a type theory that doesn't <em>have</em> any universes you can't even state univalence, but you can still state a form of univalence-inspired large elim for HITs.)</p>",
        "id": 193367877,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1586374277
    },
    {
        "content": "<p>This is total speculation, but I could imagine not wanting to use HITs because the details hadn't been worked out. IIRC, the presentation of some of the HITs in the HoTT Book is a bit of a mess, given that some of the laws you'd expect to be definitional equalities are instead stated as mathematical equalities. I think those issues have since been fixed by moving away from globular assumptions, but I know at least <em>HIITs</em> are not really worked out yet.</p>",
        "id": 193490849,
        "sender_full_name": "James Wood",
        "timestamp": 1586456979
    },
    {
        "content": "<p>I think what the paper says was essentially what I was saying. Without HITs, you can still prove things about defined structures. Like, you can prove that all the type of groupoids in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span> is itself a 2-groupoid, even though there's no way to give an example of a groupoid in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span> (I think).</p>",
        "id": 193491713,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586457362
    },
    {
        "content": "<p>So, you can prove theorems about structures even though there aren't any examples to apply them to. If you have additional universes you can get particular examples of some things, too, but I'm not sure how far that goes.</p>",
        "id": 193491870,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586457471
    },
    {
        "content": "<p>For example, the type of groups in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal U_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.09931em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a groupoid in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal U_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.09931em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, I think. Without anything \"synthetic\" it just becomes harder to give smaller fully concrete examples of higher structure, I think.</p>",
        "id": 193492803,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586457909
    },
    {
        "content": "<p>We have a stream for <a class=\"stream\" data-stream-id=\"229952\" href=\"/#narrow/stream/229952-theory.3A-type-theory\">#theory: type theory</a>.</p>",
        "id": 193523649,
        "sender_full_name": "Christian Williams",
        "timestamp": 1586475681
    },
    {
        "content": "<p>The article title: homotopy type  theory : the logic of space. Does this article's title mean, structured category of homotopy type theory is sufficient mostly all of internalization of 'spatial space'? This mean, for example, Structured category suffice all of categorical properties which the category of smooth manifold admit?</p>",
        "id": 223039730,
        "sender_full_name": "Runlei XIAO",
        "timestamp": 1610885203
    },
    {
        "content": "<p>I don't think anyone has completely captured the category of smooth manifolds using HoTT plus extra axioms.  I could be wrong!</p>\n<p>The category of smooth manifolds lacks many nice features: it doesn't have all equalizers, it doesn't have all coequalizers, it's not cartesian closed, etc.  But there are other categories of smooth spaces that have these features:</p>\n<ul>\n<li><a href=\"https://golem.ph.utexas.edu/category/2008/05/convenient_categories_of_smoot.html\">Convenient categories of smooth spaces</a>.</li>\n</ul>",
        "id": 223051328,
        "sender_full_name": "John Baez",
        "timestamp": 1610901321
    },
    {
        "content": "<p>There was a discussion on the lean4 channel on HoTT a few days ago, where Kevin Buzzard explained what his problems with HoTT were. See the thread I started <a href=\"https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Web.20Programming.20with.20Lean.204\">Web Programming with Lean4</a>.</p>",
        "id": 223057794,
        "sender_full_name": "Henry Story",
        "timestamp": 1610910511
    },
    {
        "content": "<p>thx a lot. Let me see !</p>",
        "id": 223060638,
        "sender_full_name": "Runlei XIAO",
        "timestamp": 1610914238
    },
    {
        "content": "<p>In general you can't expect any kind of synthetic mathematics to \"completely capture\" any particular model.  Arguably, that's the whole point.  (-:</p>",
        "id": 223063389,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1610918089
    },
    {
        "content": "<p>Kevin on Lean Zulip makes some mathematical points that I cannot follow (as I am a (philosophical) engineer, not a mathematician). His argument seems to be that Undergraduate and Early Postgraduate Mathematics students don't need much more than what Lean offers. But I don't know exactly what those students learn. <br>\nCould it be that as software engineers we benefit from using tools that require more advanced maths than what they learn at that level, or that we would benefit from tools using those? For example Linear Logic is entering programming through compilers such as Rust, Idris2 and modal linear logic with Granule, ... A lot of software engineers are embracing Rust for that reason, even if they never heard about Linear Logic. Is that something that the (under)graduate mathematicians come across? If not, then it may be that Cubical HoTT is very useful for programmers using Lean as a programming language (or Cubical Agda for that matter), even if not that interesting to mathematicians (at the level he is concerned about). For example if it would allow me to prove things on simple data structures and then transport those to efficient ones for the programs I want to compile, that may be a huge thing.</p>",
        "id": 223131637,
        "sender_full_name": "Henry Story",
        "timestamp": 1610982621
    },
    {
        "content": "<p>Almost no undergrad math majors come across linear logic.</p>",
        "id": 223162876,
        "sender_full_name": "John Baez",
        "timestamp": 1611003182
    },
    {
        "content": "<p>With luck they learn classical logic: the propositional calculus and first-order predicate calculus, \"classical\" because the law of excluded middle and thus proofs by contradiction play a huge role in their thinking.   I believe most of them learn these things <em>informally</em>.  </p>\n<p>(I took courses on logic in the philosophy department as an undergrad so I actually learned about formal mathematics.  Maybe things have changed a bit, but I think formal mathematics, e.g. starting with axioms for logic, is <em>not</em> what math undergrads do.)</p>",
        "id": 223162996,
        "sender_full_name": "John Baez",
        "timestamp": 1611003253
    },
    {
        "content": "<p>A lot of math students first learning about proofs fall in love with proof by contradiction and use it even when it makes the argument longer!</p>",
        "id": 223163032,
        "sender_full_name": "John Baez",
        "timestamp": 1611003289
    },
    {
        "content": "<p>Proof by contradiction is often easier for the brain to hold onto, imo.</p>",
        "id": 223174699,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1611014555
    },
    {
        "content": "<p>Another problem is that most introductory logic courses don’t distinguish between a proof by contradiction and just proving a negation.</p>",
        "id": 223175244,
        "sender_full_name": "Fawzi Hreiki",
        "timestamp": 1611015224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275914\">Joe Moeller</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/223174699\">said</a>:</p>\n<blockquote>\n<p>Proof by contradiction is often easier for the brain to hold onto, imo.</p>\n</blockquote>\n<p>Here's one thing you'll never hear though: </p>\n<p>Proposition: This diagram commutes. </p>\n<p>Proof: Suppose it didn't...</p>",
        "id": 223175959,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1611016202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/223131637\">said</a>:</p>\n<blockquote>\n<p>it may be that Cubical HoTT is very useful for programmers using Lean as a programming language (or Cubical Agda for that matter), even if not that interesting to mathematicians (at the level he is concerned about). For example if it would allow me to prove things on simple data structures and then transport those to efficient ones for the programs I want to compile, that may be a huge thing.</p>\n</blockquote>\n<p>It's possible.  This has always been one of the things that CS HoTT people hope for, or at least say on grant applications that they say they hope for.  I don't know whether anyone has ever actually achieved some concrete benefit of this sort, though.  You should try!</p>",
        "id": 223177194,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1611017686
    },
    {
        "content": "<p>Anders Mortberg is working on examples of this sort of thing. Check out his work here: <a href=\"https://staff.math.su.se/anders.mortberg/\">https://staff.math.su.se/anders.mortberg/</a></p>",
        "id": 223177409,
        "sender_full_name": "Steve Awodey",
        "timestamp": 1611017967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277611\">Todd Trimble</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/223175959\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275914\">Joe Moeller</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/223174699\">said</a>:</p>\n<blockquote>\n<p>Proof by contradiction is often easier for the brain to hold onto, imo.</p>\n</blockquote>\n<p>Here's one thing you'll never hear though: </p>\n<p>Proposition: This diagram commutes. </p>\n<p>Proof: Suppose it didn't...</p>\n</blockquote>\n<p>Very true!   One of the charms of category theory is its simple, direct character, and diagram-chasing is all about stringing together implications between collections of equations.  I think people who like category theory tend to love how much you can do with such simple reasoning.  Maybe people who don't like category theory find it \"trivial\" or \"abstract nonsense\".</p>",
        "id": 223188950,
        "sender_full_name": "John Baez",
        "timestamp": 1611034412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276770\">Steve Awodey</span> <a href=\"#narrow/stream/229111-general/topic/Kevin.20Buzzard.20'Is.20HoTT.20the.20way.20to.20do.20mathematics.3F'/near/223177409\">said</a>:</p>\n<blockquote>\n<p>Anders Mortberg is working on examples of this sort of thing. Check out his work here: <a href=\"https://staff.math.su.se/anders.mortberg/\">https://staff.math.su.se/anders.mortberg/</a></p>\n</blockquote>\n<p>The two I have seen is the introductory article <a href=\"https://dl.acm.org/doi/abs/10.1145/3341691\">Cubical agda: a dependently typed programming language with univalence and higher inductive types</a> which starts off with how one can transport proofs from the inefficient but simple unary representation of natural numbers to the efficient binary number representation used by computers. I can see a lot of applications of this. Eg. RDF has a simple graph structure, but there are many different encodings that have better efficiency characteristics for search, updated, etc...  <br>\nAlso I found his talk on <a href=\"https://twitter.com/bblfish/status/1317560817026535424\">conatural numbers</a> very easy to follow, and there he shows how it ties in nicely with the Agda codata types.<br>\nIn programming the most important application of monads is for Input/Output and effects (where linear logic comes in).  So I look forward to some awesome tools emerging from  2-level type theories used for the development of Modal HoTT <a href=\"https://ncatlab.org/nlab/show/two-level+type+theory\">see nlab page</a>... But that is still in development, which should give me some time to catch up :-)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1317560817026535424\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1004326761608417281/HjxjS9BX_normal.jpg\"></a><p>Here is a very nice introduction on coinductive proofs of equality using Cubical Agda by <a href=\"https://twitter.com/taooftypes\">@taooftypes</a> . One can prove that an equality of streams is a stream of equalities in 2 copattern matches that mirror inductive proofs.\n<a href=\"https://t.co/WPJ8Dhdnk8\">https://www.youtube.com/watch?v=-fhaZvgDaZk</a></p><span>- The 🐟‍‍ BabelFish (@bblfish)</span></div></div>",
        "id": 223197111,
        "sender_full_name": "Henry Story",
        "timestamp": 1611044060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> / <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> </p>\n<p>I'm a CS person (an engineer, I've exactly zero formal training) who did some work to generate Agda from Rust types where we did some “proofs” in Rust's type system. One of those things was to prove some impossibilities vis-á-vis carving up the bits of a 32-bit unsigned integer as it represents fields in a register. I based most of the proofs on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> and wrote an injective proof to round trip <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to my base-2 numbers and back, but was too lazy to add the truncation (not in the HoTT sense, but literally to drop trailing zeros in the base-2 rep). This, I think, would have been made easier with univalence / HITs thanks to quotients on the base-2 side, making trailing zeros irrelevant. </p>\n<p>I'm saying this all to say, those things that we say sometimes are “just engineering” or places where we “just need to turn the crank” could be made radically easier. I'm a firm believer that Voevodsky  was right even if I lack the capacity to properly understand why!</p>",
        "id": 224136092,
        "sender_full_name": "dan pittman",
        "timestamp": 1611718077
    },
    {
        "content": "<p>How do I even LaTeX on Zulip.</p>",
        "id": 224136296,
        "sender_full_name": "dan pittman",
        "timestamp": 1611718271
    },
    {
        "content": "<p>Open and close with two dollar signs instead of just one.</p>",
        "id": 224136314,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1611718321
    },
    {
        "content": "<p>Your use cases <span class=\"user-mention\" data-user-id=\"284213\">@dan pittman</span>  in the car industry are very appealing (I watched <a href=\"https://twitter.com/bblfish/status/1354348462851108864\">a couple of your talks</a>).<br>\nIt would be very interesting to write up or give a talk where you use HoTT to transport a proof from one structure to another. Perhaps that could get the Lean4 folks to take seriously both an implementation into Rust and the development of HoTT. (I mention Lean4 as it produces C code, and so having it produce Rust may not be such a big project, and someone did produce a Cubical version of Lean2).  <br>\nAgda is far more advanced as it has an implementation of Cubical HoTT of course. (I actually wonder why Idris does not get closer to Rust as it has linear types, but it does not have Cubical). It looks like each language is missing some piece...</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1354348462851108864\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1004326761608417281/HjxjS9BX_normal.jpg\"></a><p>An appealing use case involving AI and sensors in cars using #rustlang and #Agda to blur the distinction between proof and code using Curry-Howard and Dependent types <a href=\"https://t.co/WUzrPHrLe0\">https://www.youtube.com/watch?v=jrVPB-Ad5Gc</a></p><span>- The 🐟‍‍ BabelFish (@bblfish)</span></div></div>",
        "id": 224153919,
        "sender_full_name": "Henry Story",
        "timestamp": 1611737630
    },
    {
        "content": "<p>Lean already has some form of quotients which satisfy Kevin.</p>",
        "id": 224154289,
        "sender_full_name": "James Wood",
        "timestamp": 1611737906
    },
    {
        "content": "<p>Yes, but Kevin is a mathematician, and he's not trying to write code to interact with AI in cars :-) So it may be that coinduction, cubical, and all these other features are really important in these process oriented use cases in a way that they are not in number theory.</p>",
        "id": 224154913,
        "sender_full_name": "Henry Story",
        "timestamp": 1611738337
    },
    {
        "content": "<p>To give a more specific reference to applications of Cubical Agda to programming, see the recent POPL paper of Angiuli, Cavallo, Mortberg, and Zeuner: <a href=\"https://arxiv.org/abs/2009.05547\">https://arxiv.org/abs/2009.05547</a></p>\n<p>Here they show how to apply univalence (and the structure identity principle) to programming problems. An interesting aspect of this work is the way it shows that many applications of \"parametricity\" (in the Reynolds sense) in programming are actually redundant in the presence of univalence.</p>\n<p>This is very good, because parametricity is in essence only a statement about definability (my program does the right thing because you can't use it in a way that makes it go wrong) --- hence any program correctness lemma that follows only from parametricity could in principle be invalidated if the program is interpreted in an execution environment where more \"contexts\" are possible. One answer to this problem is 'internal parametricity', but this is a priori a very .... bold direction to go because there is no reason to believe that models of internal parametricity actually say anything interesting about standard mathematics (as opposed to programming).</p>\n<p>So, by showing how far you can get with just univalence, the authors increase the unity of ideas between programming and ordinary mathematics in a way that finally pays off from the CS perspective.</p>",
        "id": 224321210,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1611838525
    }
]