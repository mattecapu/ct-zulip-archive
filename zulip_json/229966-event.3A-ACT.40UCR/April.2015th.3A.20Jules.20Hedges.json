[
    {
        "content": "<p>Next up in this seminar is <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> </p>\n<p>Open games: the long road to practical applications</p>\n<p>Abstract: I will talk about open games, and the closely related concepts of lenses/optics and open learners. My goal is to report on the successes and failures of an ongoing effort to try to realise the often-claimed benefits of categories and compositionality in actual practice. I will introduce what little theory is needed along the way. Here are some things I plan to talk about:<br>\n— Lenses as an abstraction of the chain rule<br>\n— Comb diagrams<br>\n— Surprising applications of open games: Bayesian inference, value function iteration<br>\n— The state of tool support<br>\n— Open games in their natural habitat: microeconomics<br>\n— Sociological aspects of working with economics</p>",
        "id": 193595727,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1586540036
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 193605902,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586545679
    },
    {
        "content": "<p>Send us your slides, <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span>!</p>",
        "id": 193613470,
        "sender_full_name": "John Baez",
        "timestamp": 1586550230
    },
    {
        "content": "<p>Oh right. I need to make a couple of changes from my first run. If it's urgent, I'll do it tomorrow</p>",
        "id": 193613678,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586550355
    },
    {
        "content": "<p><span aria-label=\"magnifying glass\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"magnifying glass\">:magnifying_glass:</span></p>",
        "id": 193674690,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586632048
    },
    {
        "content": "<p>optics gang</p>",
        "id": 193674693,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586632061
    },
    {
        "content": "<p>Here are the slides to Jules Hedges' talk.  Don't forget: his talk is on <strong>Wednesday April 15th</strong> at  5 pm UTC, which is 10 am Pacific Time or 1 pm Eastern Time in the United States.   To get to it, go here: <a href=\"https://ucr.zoom.us/j/607160601\" title=\"https://ucr.zoom.us/j/607160601\">https://ucr.zoom.us/j/607160601</a></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\;</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span></p>\n<ul>\n<li>Jules Hedges, <a href=\"http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf\" title=\"http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf\">Open games: the long road to practical applications</a>.</li>\n</ul>\n<p><strong>Abstract.</strong> I will talk about open games, and the closely related concepts of lenses/optics and open learners. My goal is to report on the successes and failures of an ongoing effort to try to realise the often-claimed benefits of categories and compositionality in actual practice. I will introduce what little theory is needed along the way. Here are some things I plan to talk about:</p>\n<p>— Lenses as an abstraction of the chain rule</p>\n<p>— Comb diagrams</p>\n<p>— Surprising applications of open games: Bayesian inference, value function iteration</p>\n<p>— The state of tool support</p>\n<p>— Open games in their natural habitat: microeconomics</p>\n<p>— Sociological aspects of working with economics</p>",
        "id": 193813747,
        "sender_full_name": "John Baez",
        "timestamp": 1586807725
    },
    {
        "content": "<p>Howdy <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span>, I'm looking forward to your talk on open games. You discuss lens and the chain rule. Has your work taken you to Faà di Bruno's formula and it's properties of a Hopf algebra? Faà di Bruno's formula is at the heart of my research. I'm interested in games as the ultimate abstraction of numbers and would love to hear more.</p>",
        "id": 193818578,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586810380
    },
    {
        "content": "<p>Hi!   There's a new, more user-friendly version of Jules' talk  slides here:</p>\n<p><a href=\"http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf\" title=\"http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf\">http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf</a></p>",
        "id": 194059524,
        "sender_full_name": "John Baez",
        "timestamp": 1586969291
    },
    {
        "content": "<p>Is it possible to open the zoom for web browsers?</p>",
        "id": 194060394,
        "sender_full_name": "Leah Neukirchen",
        "timestamp": 1586969718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277471\">Leah Neukirchen</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194060394\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194060394\">said</a>:</p>\n<blockquote>\n<p>Is it possible to open the zoom for web browsers?</p>\n</blockquote>\n<p>It works on Chromium, although you have to insist on not wanting to install their app.</p>",
        "id": 194060952,
        "sender_full_name": "Dan Frumin",
        "timestamp": 1586969975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"285921\">Dan Frumin</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194060952\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194060952\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277471\">Leah Neukirchen</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194060394\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194060394\">said</a>:</p>\n<blockquote>\n<p>Is it possible to open the zoom for web browsers?</p>\n</blockquote>\n<p>It works on Chromium, although you have to insist on not wanting to install their app.</p>\n</blockquote>\n<p>I don't see the direct link from Chromium, and when I edit the URL I get to a login page.</p>",
        "id": 194061080,
        "sender_full_name": "Leah Neukirchen",
        "timestamp": 1586970019
    },
    {
        "content": "<p>Is it still possible? On April 3 I tried to open a zoom meeting in my web browser and I couldn't get it to work even though it had worked for me before then.</p>",
        "id": 194061156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586970058
    },
    {
        "content": "<p>argh, deny twice works. and then i need a zoom account?</p>",
        "id": 194061175,
        "sender_full_name": "Leah Neukirchen",
        "timestamp": 1586970067
    },
    {
        "content": "<p>Hmm, maybe I just didn't try hard enough.</p>",
        "id": 194061246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586970116
    },
    {
        "content": "<p>finally</p>",
        "id": 194061779,
        "sender_full_name": "Leah Neukirchen",
        "timestamp": 1586970353
    },
    {
        "content": "<p>optics actually generalize considerably further than even just monoidal categories :)</p>",
        "id": 194062425,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586970705
    },
    {
        "content": "<p>...i think there might be a link between the stuff my talk is about and the kind of optics you want to use, jules</p>",
        "id": 194063121,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586971056
    },
    {
        "content": "<p>...well, that link might just be monoidal products <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194063229,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586971102
    },
    {
        "content": "<p>will think more later</p>",
        "id": 194063241,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586971109
    },
    {
        "content": "<p>question for after the talk: if the morphisms really are games and not strategies, then how does that example work w/ players as morphisms? in what sense is a player's behavior a game rather than a strategy?</p>",
        "id": 194064563,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586971801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194062425\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194062425\">said</a>:</p>\n<blockquote>\n<p>optics actually generalize considerably further than even just monoidal categories :)</p>\n</blockquote>\n<p>Could you elaborate what you mean by even just monoidal categories? I guess you mean mixed optics?</p>",
        "id": 194065361,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586971989
    },
    {
        "content": "<p>yeah</p>",
        "id": 194065589,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586972096
    },
    {
        "content": "<p>well, i mean, you can formulate optics in terms of a monoidal category's action even if your optics aren't mixed</p>",
        "id": 194065642,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586972126
    },
    {
        "content": "<p>but mixed optics are still more general so they <em>were</em> what i was thinking of</p>",
        "id": 194065708,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586972159
    },
    {
        "content": "<p>I'd be curious to hear further explanation of the restriction on care of counterfactuals in machine learning; i think some combination of the words gives me the impression that I misunderstand this claim.</p>",
        "id": 194065798,
        "sender_full_name": "Bryan Bischof",
        "timestamp": 1586972183
    },
    {
        "content": "<p>Right, got it.  Was just curious if there's some other generalization I'm not aware of :)</p>",
        "id": 194065803,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586972185
    },
    {
        "content": "<p>Is there a small concrete example of a typical game from game theory represented as a (closed) open game?</p>",
        "id": 194065875,
        "sender_full_name": "Dan Frumin",
        "timestamp": 1586972226
    },
    {
        "content": "<p>coend optics are equivalent to profunctor optics—i bet the latter is more popular for a reason :)</p>",
        "id": 194066554,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586972537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194066554\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194066554\">said</a>:</p>\n<blockquote>\n<p>coend optics are equivalent to profunctor optics—i bet the latter is more popular for a reason :)</p>\n</blockquote>\n<p>The reason being \"profunctor optics\" just sounds incredibly cool</p>",
        "id": 194066800,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586972649
    },
    {
        "content": "<p>On software to compile/execute string diagrams, there is also (though not graphical) Selinger and Rios' Proto-Quipper-M which can describe morphisms in any symmetric monoidal category: <a href=\"https://arxiv.org/abs/1706.02630\" title=\"https://arxiv.org/abs/1706.02630\">https://arxiv.org/abs/1706.02630</a> (I don't think its in the public view, but Selinger is happy to provide the current state to researchers interested in it).</p>",
        "id": 194203649,
        "sender_full_name": "Gershom",
        "timestamp": 1586973303
    },
    {
        "content": "<p>Ever taken a look at Nashpy? <a href=\"https://nashpy.readthedocs.io/en/stable/\" title=\"https://nashpy.readthedocs.io/en/stable/\">https://nashpy.readthedocs.io/en/stable/</a> I'd been kinda eyeing it for a possible backend. It does find equilibria.</p>",
        "id": 194207024,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586974993
    },
    {
        "content": "<p>Now that I'm think about it, the thing that <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> mentioned about doing graphical manipulations of rotating the images to get the transpose of the jacobian, pretty sure that holds. Because if we rotate the bottom wire of optics we get an \"optic\" which has both covariant wires - which correspond exactly to forward mode AD where we don't take the transpose of the jacobian :)</p>",
        "id": 194207029,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586974997
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 194207069,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586975021
    },
    {
        "content": "<p>hey!</p>",
        "id": 194207082,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586975030
    },
    {
        "content": "<p>More information about this transpose/Jacobian business <br>\ncan be found here: <a href=\"https://arxiv.org/abs/1910.07065\" title=\"https://arxiv.org/abs/1910.07065\">https://arxiv.org/abs/1910.07065</a> (Example 2.3 and Example 5.3) and <a href=\"https://arxiv.org/abs/1804.00746\" title=\"https://arxiv.org/abs/1804.00746\">https://arxiv.org/abs/1804.00746</a></p>",
        "id": 194207151,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586975053
    },
    {
        "content": "<p>This is the point where I need to figure out how to quote-reply</p>",
        "id": 194207181,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586975069
    },
    {
        "content": "<p>Also here <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span>  <a href=\"http://www.philipzucker.com/reverse-mode-differentiation-is-kind-of-like-a-lens-ii/\" title=\"http://www.philipzucker.com/reverse-mode-differentiation-is-kind-of-like-a-lens-ii/\">http://www.philipzucker.com/reverse-mode-differentiation-is-kind-of-like-a-lens-ii/</a></p>",
        "id": 194207268,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586975113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207181\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207181\">said</a>:</p>\n<blockquote>\n<p>This is the point where I need to figure out how to quote-reply</p>\n</blockquote>\n<p>Top-right of my message, hover near the timestamp</p>",
        "id": 194207418,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586975178
    },
    {
        "content": "<p>in the menu from the dropdown arrow to be precise</p>",
        "id": 194207474,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586975207
    },
    {
        "content": "<p>Yup, click on the downarrow above and to the right of the message you want to reply to.</p>",
        "id": 194207595,
        "sender_full_name": "John Baez",
        "timestamp": 1586975281
    },
    {
        "content": "<p>And get this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207181\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207181\">said</a>:</p>\n<blockquote>\n<p>This is the point where I need to figure out how to quote-reply</p>\n</blockquote>",
        "id": 194207656,
        "sender_full_name": "John Baez",
        "timestamp": 1586975299
    },
    {
        "content": "<p>So yeah, I was being a bit silly about inverses vs. transposes.</p>",
        "id": 194207700,
        "sender_full_name": "John Baez",
        "timestamp": 1586975317
    },
    {
        "content": "<p>If you have a smooth map f: X -&gt; Y and a tangent vector v to some point x of X, you map it forward via <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mo>:</mo><msub><mi>T</mi><mi>x</mi></msub><mi>X</mi><mo>→</mo><msub><mi>T</mi><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msub><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">df : T_x X \\to T_{f(x)} Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.03853em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.</p>",
        "id": 194207832,
        "sender_full_name": "John Baez",
        "timestamp": 1586975392
    },
    {
        "content": "<p>Let's say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, so we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mo>:</mo><msub><mi>T</mi><mi>x</mi></msub><mi>X</mi><mo>→</mo><msub><mi>T</mi><mi>y</mi></msub><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">df : T_x X \\to T_y Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.</p>",
        "id": 194207977,
        "sender_full_name": "John Baez",
        "timestamp": 1586975433
    },
    {
        "content": "<p>But then the adjoint of this map, which is a transpose when you write it out using matrices, gives</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>f</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>:</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>y</mi></msub><mi>Y</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>→</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>x</mi></msub><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\"> (df)^* : (T_y Y)^* \\to (T_x X)^* </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 194208019,
        "sender_full_name": "John Baez",
        "timestamp": 1586975456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194064563\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194064563\">said</a>:</p>\n<blockquote>\n<p>question for after the talk: if the morphisms really are games and not strategies, then how does that example work w/ players as morphisms? in what sense is a player's behavior a game rather than a strategy?</p>\n</blockquote>\n<p>So this is one of the things I had to skip for time. Here's the simplest example. A player who chooses an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> given no observation is modelled as a particular open game <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo>:</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal P : (1, 1) \\to (X, \\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span>. The index set of strategy profiles is defined to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Σ</mi><mi mathvariant=\"script\">P</mi></msub><mo>=</mo><mi mathvariant=\"script\">D</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma_\\mathcal P = \\mathcal D (X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathcal mtight\" style=\"margin-right:0.08222em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> is probability distributions, ie. the set of mixed strategies the player can use to make their choice. It turns out that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi>hom</mi><mo>⁡</mo></mo><mrow><mi>O</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>c</mi></mrow></msub><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>≅</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\hom_{Optic} ((1, 1), (X, \\mathbb R)) \\cong X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mop\"><span class=\"mop\">hom</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault mtight\">p</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, so we take the indexing map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Σ</mi><mi mathvariant=\"script\">P</mi></msub><mo>→</mo><msub><mo><mi>hom</mi><mo>⁡</mo></mo><mrow><mi>O</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>c</mi></mrow></msub><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma_\\mathcal P \\to \\hom_{Optic} ((1, 1), (X, \\mathbb R))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathcal mtight\" style=\"margin-right:0.08222em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mop\"><span class=\"mop\">hom</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault mtight\">p</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> to be just that. The other thing we need to supply is the best response function. It turns out that in this simple case the set of contexts (the 3 toothed combs) simplifies to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">X \\to \\mathbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, the coend vanishes. So the remaining piece of information we need to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span> is the best response function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mn>2</mn><mi mathvariant=\"normal\">Σ</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma \\times (X \\to \\mathbb R) \\to 2^\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Σ</span></span></span></span></span></span></span></span></span></span></span>. We define it by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>σ</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mi>arg</mi><mo>⁡</mo><mi>max</mi><mo>⁡</mo><mi mathvariant=\"double-struck\">E</mi><mi>k</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mi>X</mi><mo>∣</mo><mi mathvariant=\"double-struck\">E</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mo>≥</mo><mi mathvariant=\"double-struck\">E</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">∀</mi><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">(\\sigma, k) \\mapsto \\arg\\max \\mathbb E k = \\{ x \\in X \\mid \\mathbb E [k (x)] \\geq \\mathbb E [k (x')] \\forall x' \\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">ar<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">max</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">E</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">E</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">]</span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 194208052,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586975472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208019\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208019\">said</a>:</p>\n<blockquote>\n<p>But then the adjoint of this map, which is a transpose when you write it out using matrices, gives</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>f</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>:</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>y</mi></msub><mi>Y</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>→</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>x</mi></msub><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\"> (df)^* : (T_y Y)^* \\to (T_x X)^* </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>I always wondered why is this called the \"adjoint\" and is there any sense in which adjoint functors play a role :)</p>",
        "id": 194208245,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586975562
    },
    {
        "content": "<p>I could say a lot about that.   Basically it's a decategorified version of an adjoint functor.</p>",
        "id": 194208364,
        "sender_full_name": "John Baez",
        "timestamp": 1586975613
    },
    {
        "content": "<p>Adjoint functors:</p>\n<p>hom(LX, Y) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≅</mo></mrow><annotation encoding=\"application/x-tex\">\\cong</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.589em;vertical-align:0em;\"></span><span class=\"mrel\">≅</span></span></span></span> hom(X,RY)</p>\n<p>Adjoint linear maps:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> F^*(f)(x) = f(F(x)) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 194208592,
        "sender_full_name": "John Baez",
        "timestamp": 1586975686
    },
    {
        "content": "<p>Same pattern, but now both sides are numbers instead of sets!</p>",
        "id": 194208626,
        "sender_full_name": "John Baez",
        "timestamp": 1586975702
    },
    {
        "content": "<p>I'll stop here, since Jules just said something that's more relevant to open games.</p>",
        "id": 194208725,
        "sender_full_name": "John Baez",
        "timestamp": 1586975741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"285921\">Dan Frumin</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194065875\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194065875\">said</a>:</p>\n<blockquote>\n<p>Is there a small concrete example of a typical game from game theory represented as a (closed) open game?</p>\n</blockquote>\n<p>On the string diagrams side, there is the example of a 2 player imperfect information game on p11 of the slides (<a href=\"http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf\" title=\"http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf\">http://math.ucr.edu/home/baez/mathematical/ACTUCR/Hedges_Open_Games.pdf</a>). On the semantics side, it turns out that an open game <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1, 1) \\to (1, 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is defined by 2 things: (1) a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>, and (2) an endo-relation on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>. All of the other stuff vanishes. This is precisely the best response relation of your game. So say for example you wanted to model the prisoner's dilemma, you would end up with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi><mo stretchy=\"false\">}</mo><mo>×</mo><mo stretchy=\"false\">{</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{ C, D \\} \\times \\{ C, D \\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">}</span></span></span></span>, and the endo-relation on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> that relates everything to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>D</mi><mo separator=\"true\">,</mo><mi>D</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(D, D)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span></span></span></span> (which is the dominant strategy in prisoner's dilemma)</p>",
        "id": 194208818,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586975775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207700\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207700\">said</a>:</p>\n<blockquote>\n<p>So yeah, I was being a bit silly about inverses vs. transposes.</p>\n</blockquote>\n<p>well, from my perspective from Logic, not silly at all. it's the big difference between Chu and Dialectica constructions, in Dialectica we do \"true inverses\" i.e we transpose and negate the proposition, while Chu simply transposes.</p>",
        "id": 194208827,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1586975778
    },
    {
        "content": "<p>Now it turns out that closed open games really throw away too much information for some practical purposes, although you can get a long way by winging it if you don't mind a bit of weirdness. For example if you do things naively, the prisoner's dilemma as an open game turns out to be <em>equal</em> to a 1-player game with 4 strategies and 1 dominant strategy</p>",
        "id": 194209077,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586975890
    },
    {
        "content": "<p>But that's a technical problem that can be fixed in a relatively straightforward way. I present the simplest possible version of open games that still suffers from problems like that, because it's hard enough to explain already</p>",
        "id": 194209175,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586975940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276650\">Gershom</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194203649\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194203649\">said</a>:</p>\n<blockquote>\n<p>On software to compile/execute string diagrams, there is also (though not graphical) Selinger and Rios' Proto-Quipper-M which can describe morphisms in any symmetric monoidal category: <a href=\"https://arxiv.org/abs/1706.02630\" title=\"https://arxiv.org/abs/1706.02630\">https://arxiv.org/abs/1706.02630</a> (I don't think its in the public view, but Selinger is happy to provide the current state to researchers interested in it).</p>\n</blockquote>\n<p>Oh, that's an interesting idea, I never thought of trying to misuse that. I should bring it up in the <a class=\"stream\" data-stream-id=\"229125\" href=\"/#narrow/stream/229125-practice.3A-software\">#practice: software</a> stream</p>",
        "id": 194209414,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207024\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194207024\">said</a>:</p>\n<blockquote>\n<p>Ever taken a look at Nashpy? <a href=\"https://nashpy.readthedocs.io/en/stable/\" title=\"https://nashpy.readthedocs.io/en/stable/\">https://nashpy.readthedocs.io/en/stable/</a> I'd been kinda eyeing it for a possible backend. It does find equilibria.</p>\n</blockquote>\n<p>It's very, very restricted at the moment. The standard tool for computing equilibria is Gambit, which I think is for Matlab. Even that can only do mixed Nash equilibrium. To my knowledge there is no tool in existence for computing Bayesian Nash equilibria of extensive form games, which is my usual favourite setting to think about game theory</p>",
        "id": 194209632,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976177
    },
    {
        "content": "<p>Huh. Never heard of that. Interesting.</p>",
        "id": 194209860,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976266
    },
    {
        "content": "<p>Was there a conclusion to the Prakash vs Bruno saga?</p>",
        "id": 194209906,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976284
    },
    {
        "content": "<p>My usual strategy for anything to do with machine learning is to ask Bruno, so I'm a bit alarmed at the possibility that he got something wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194210021,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194209906\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194209906\">said</a>:</p>\n<blockquote>\n<p>Was there a conclusion to the Prakash vs Bruno saga?</p>\n</blockquote>\n<p>To my understanding, we were in agreement about it not being the inverse</p>",
        "id": 194210036,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586976341
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 194210049,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976349
    },
    {
        "content": "<p>A side comment: An intriguing but possibly meaningless connection to your comb diagrams is that they are graphically reminiscent of a class of Feynman diagrams called rainbow diagrams (for which I am having difficulty finding a good reference).</p>",
        "id": 194210203,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976420
    },
    {
        "content": "<p>As I recall they were an important class of diagrams for scattering of electrons in random potentials.</p>",
        "id": 194210272,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976454
    },
    {
        "content": "<p>Hmm, I should know about rainbow diagrams... I've heard of 'em.... but I don't know 'em.</p>",
        "id": 194210459,
        "sender_full_name": "John Baez",
        "timestamp": 1586976530
    },
    {
        "content": "<p>Probably important in other contexts of physics as well</p>",
        "id": 194210460,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976530
    },
    {
        "content": "<p>You can think of the forward part of a lens map as a morphism of base spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">B \\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, and the backward map as a map from the pullback of a bundle over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to a bundle over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</p>\n<p>If we just stay in the category of sets and let 'bundle' mean 'trivial bundle', like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>×</mo><mi>B</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">F\\times B \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">G \\times C \\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, then this configuration is a base map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>B</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">f: B \\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and a bundle map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo>×</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^*(G \\times C)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">F\\times B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo>×</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>G</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f^*(G \\times C)=G\\times B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> because the bundle is trivial, and to be a bundle map over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> means compatibility with the projections to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, so to give this vertical map is to give a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>B</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">G\\times B \\to F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. So this is precisely a lens map.</p>\n<p>I learned this from David Spivak.</p>\n<p>The picture is the same for general bundles in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">S</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">t</span></span></span></span></span>. These are arbitrary maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">E\\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> (instead of the trivial case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>×</mo><mi>B</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">F\\times B\\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>). Each such bundle represents a polynomial functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><msub><mo>∑</mo><mrow><mi>b</mi><mo>∈</mo><mi>B</mi></mrow></msub><msup><mi>X</mi><msub><mi>E</mi><mi>b</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">X \\mapsto \\sum_{b\\in B} X^{E_b}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1684109999999999em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">b</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:-0.05764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>. The same notion of backward bundle map is very useful for these general bundles: they represent precisely the natural transformations between polynomial functors.</p>",
        "id": 194210488,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1586976539
    },
    {
        "content": "<p>Again, I'm having a problem finding a good reference. Maybe I have the name wrong</p>",
        "id": 194210517,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976553
    },
    {
        "content": "<p>I learned about them in a mesoscopic physics class.</p>",
        "id": 194210562,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976578
    },
    {
        "content": "<p>many moons ago</p>",
        "id": 194210571,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586976584
    },
    {
        "content": "<p>Yes, I learned the same thing from David too <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194210572,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976584
    },
    {
        "content": "<p>This is one of the things I would have talked about if I'd done a theory talk about lenses</p>",
        "id": 194210781,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976666
    },
    {
        "content": "<p>I learned this from Jules who learned it from David, so I guess that's one more <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 194210836,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586976690
    },
    {
        "content": "<p>The 'chain rule' is then a general feature of pullbacks. It does not seem to be anything anything specific to cotangent bundles or derivatives.</p>",
        "id": 194210974,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1586976743
    },
    {
        "content": "<p>I think of the category of bundle morphisms as being like a completion of the category of lenses. The category of lenses is missing a bunch of limits and colimits, but bundles is complete and cocomplete and it agrees with the existing co/limits that are already in Lens. So if I'm working with lenses and I need some co/limit that isn't there, I go to bundles instead</p>",
        "id": 194210980,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194210974\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194210974\">said</a>:</p>\n<blockquote>\n<p>The 'chain rule' is then a general feature of pullbacks. It does not seem to be anything anything specific to cotangent bundles or derivatives.</p>\n</blockquote>\n<p>Yes... hence my comment that it briefly looked like computer scientists had reinvented a trivial case of bundle morphisms</p>",
        "id": 194211057,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976788
    },
    {
        "content": "<p>Question: how do dependent lenses and optics work together? As far as I understand, optics only allow us to talk about non-dependent generalizations of lenses...</p>",
        "id": 194211074,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586976801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276875\">Bruno Gavranovic</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194211074\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194211074\">said</a>:</p>\n<blockquote>\n<p>Question: how do dependent lenses and optics work together? As far as I understand, optics only allow us to talk about non-dependent generalizations of lenses...</p>\n</blockquote>\n<p>You beat me to it! This is a hard sounding question I like to ask people. Bundle morphisms and optics are 2 different generalisations of lenses, what is a common generalisation of them? This would have some applications in game theory, and possibly in programming too, and I bet the category theory would be really interesting</p>",
        "id": 194211212,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976859
    },
    {
        "content": "<p>Fun fact: the category of bundle morphisms was also completely reinvented in computer science by another name, the category of containers. There were a bunch of papers about it, I think in the 90s</p>",
        "id": 194211410,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976946
    },
    {
        "content": "<p>In any case I don't know any reference for these bundle morphisms, David told me it's just folklore. It's probably in SGA, but I'm too lazy to read it in French</p>",
        "id": 194211529,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586976995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194211212\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194211212\">said</a>:</p>\n<blockquote>\n<p>You beat me to it! This is a hard sounding question I like to ask people. Bundle morphisms and optics are 2 different generalisations of lenses, what is a common generalisation of them? This would have some applications in game theory, and possibly in programming too, and I bet the category theory would be really interesting</p>\n</blockquote>\n<p>Here at Strathclyde dependent lenses keep popping up frequently and the main thing stopping me from using them is that I don't have as nice intuitions about them as I do about optics. Optics have this nice graphical language and they're basically sets of top/bottom maps with a shared state between them</p>",
        "id": 194211659,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586977054
    },
    {
        "content": "<p>I believe surface diagrams like the one in my slides can be used to denote bundle morphisms. There's a bunch of work to do to make sure, but I sometimes work with them anyway. I also sometimes squash it into a string diagram and hope for the best, not sure I'd do that in polite company though</p>",
        "id": 194211927,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586977166
    },
    {
        "content": "<p>Specifically, I think you want to take your 3 dimensions to be composition, monoidal product and <em>coproduct</em></p>",
        "id": 194212060,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586977204
    },
    {
        "content": "<p>If you have 2 different string diagrams in Lens, you can take their coproduct in Bund and that should be the 2 string diagrams side by side in parallel sheets</p>",
        "id": 194212291,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586977322
    },
    {
        "content": "<p>Course that's for generalising string diagrams for optics, which didn't appear in my slides. I have no idea what happens to comb diagrams</p>",
        "id": 194212419,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586977372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194212291\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194212291\">said</a>:</p>\n<blockquote>\n<p>If you have 2 different string diagrams in Lens, you can take their coproduct in Bund and that should be the 2 string diagrams side by side in parallel sheets</p>\n</blockquote>\n<p>Huh, that's intriguing. I'll have to think about this for a while...</p>",
        "id": 194212463,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586977402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194211410\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194211410\">said</a>:</p>\n<blockquote>\n<p>Fun fact: the category of bundle morphisms was also completely reinvented in computer science by another name, the category of containers. There were a bunch of papers about it, I think in the 90s</p>\n</blockquote>\n<p>Not quite that old :-) The container stuff started in 2003. There was a precursor thing called <em>shapely functors</em> (Jay and Cockett) from the 1990s, but they only considered cartesian morphisms. From the viewpoint of polynomial functors, these are the natural transformations that are cartesian; from the viewpoint of bundles they are those where the backward map is invertible. The basic theory of polynomial functors and some more history can by found in [Gambino-Kock, <em>Polynomial functors and polynomial monads</em>]</p>",
        "id": 194213592,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1586977844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276875\">Bruno Gavranovic</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208245\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208245\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208019\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208019\">said</a>:</p>\n<blockquote>\n<p>But then the adjoint of this map, which is a transpose when you write it out using matrices, gives</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>f</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>:</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>y</mi></msub><mi>Y</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>→</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>x</mi></msub><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\"> (df)^* : (T_y Y)^* \\to (T_x X)^* </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>I always wondered why is this called the \"adjoint\" and is there any sense in which adjoint functors play a role :)</p>\n</blockquote>\n<p>Take a look at p.330 here: <a href=\"http://www.ams.org/publicoutreach/math-history/hmath1-maclane25.pdf\" title=\"http://www.ams.org/publicoutreach/math-history/hmath1-maclane25.pdf\">http://www.ams.org/publicoutreach/math-history/hmath1-maclane25.pdf</a></p>",
        "id": 194214406,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1586978252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276773\">Eduardo Ochs</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194214406\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194214406\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276875\">Bruno Gavranovic</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208245\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208245\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208019\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.2015th.3A.20Jules.20Hedges/near/194208019\">said</a>:</p>\n<blockquote>\n<p>But then the adjoint of this map, which is a transpose when you write it out using matrices, gives</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>f</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>:</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>y</mi></msub><mi>Y</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>→</mo><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>x</mi></msub><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\"> (df)^* : (T_y Y)^* \\to (T_x X)^* </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>I always wondered why is this called the \"adjoint\" and is there any sense in which adjoint functors play a role :)</p>\n</blockquote>\n<p>Take a look at p.330 here: <a href=\"http://www.ams.org/publicoutreach/math-history/hmath1-maclane25.pdf\" title=\"http://www.ams.org/publicoutreach/math-history/hmath1-maclane25.pdf\">http://www.ams.org/publicoutreach/math-history/hmath1-maclane25.pdf</a></p>\n</blockquote>\n<p>Great, thanks!</p>",
        "id": 194214554,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1586978334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> so the link i mentioned beforehand passes thru this <a href=\"https://www.youtube.com/watch?v=Y0OURiQAzek\" title=\"https://www.youtube.com/watch?v=Y0OURiQAzek\">https://www.youtube.com/watch?v=Y0OURiQAzek</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Y0OURiQAzek\" href=\"https://www.youtube.com/watch?v=Y0OURiQAzek\" title=\"https://www.youtube.com/watch?v=Y0OURiQAzek\"><img src=\"https://i.ytimg.com/vi/Y0OURiQAzek/default.jpg\"></a></div>",
        "id": 194221481,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586981751
    },
    {
        "content": "<p>i would have to really sit down and look at what your optics are doing to have any clue whether there's an actual coincidence or if it's just using some of the same tech, but</p>",
        "id": 194221616,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586981804
    },
    {
        "content": "<p>i wonder if maybe some of the relationships i want to express using optics, when you tweak the kind of \"separation logic\" i'm working in to be something like the above, are akin to the things your optics are expressing</p>",
        "id": 194221770,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586981879
    },
    {
        "content": "<p>okay ive tried staring at it a bit and im now thinking maybe the answer is that no they are not particularly related :T</p>",
        "id": 194225771,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586983940
    },
    {
        "content": "<p>I was really hoping that I could tune in for the talk, but missed the stream due to a conflict - I'm assuming that it will end up at the ACT youtube channel? One thing I was particularly interested in was the line \"Current working hypothesis: open games are a better setting to do machine learning anyway\" (on the open learner slide), particularly in relation to VI.</p>",
        "id": 194236531,
        "sender_full_name": "Ryan Killea",
        "timestamp": 1586989811
    },
    {
        "content": "<p>Yes, I will try to put up the video, as always for this series.</p>",
        "id": 194237070,
        "sender_full_name": "John Baez",
        "timestamp": 1586990176
    },
    {
        "content": "<p>Here is the video for Jules' talk:</p>\n<p><a href=\"https://youtu.be/Kwflmrd2AfM\" title=\"https://youtu.be/Kwflmrd2AfM\">https://youtu.be/Kwflmrd2AfM</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Kwflmrd2AfM\" href=\"https://youtu.be/Kwflmrd2AfM\" title=\"https://youtu.be/Kwflmrd2AfM\"><img src=\"https://i.ytimg.com/vi/Kwflmrd2AfM/default.jpg\"></a></div>",
        "id": 194244998,
        "sender_full_name": "John Baez",
        "timestamp": 1586996625
    },
    {
        "content": "<p>Not sure if this is a reply to your comment specifically (<span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> because I'm new to Zulip ), but thank you very much! I really appreciate the work that has been going into this series of talks (on a very interesting set of subjects, I might add)</p>",
        "id": 194245389,
        "sender_full_name": "Ryan Killea",
        "timestamp": 1586997024
    },
    {
        "content": "<p>I'm glad you're enjoying these talks!   Next week: <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>!</p>",
        "id": 194245439,
        "sender_full_name": "John Baez",
        "timestamp": 1586997078
    },
    {
        "content": "<p>Oh, Jules, I missed your talk ... I have to get used to not getting reminders via email ...</p>",
        "id": 195016052,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1587613730
    },
    {
        "content": "<p>Hi!! My video is here: <a href=\"https://www.youtube.com/watch?v=Kwflmrd2AfM\" title=\"https://www.youtube.com/watch?v=Kwflmrd2AfM\">https://www.youtube.com/watch?v=Kwflmrd2AfM</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Kwflmrd2AfM\" href=\"https://www.youtube.com/watch?v=Kwflmrd2AfM\" title=\"https://www.youtube.com/watch?v=Kwflmrd2AfM\"><img src=\"https://i.ytimg.com/vi/Kwflmrd2AfM/default.jpg\"></a></div>",
        "id": 195045221,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587639975
    },
    {
        "content": "<p>All talks at the ACT@UCR seminar are recorded and available here, along with links to slides and/or relevant papers, a schedule of forthcoming talks, etc:</p>\n<p><a href=\"https://johncarlosbaez.wordpress.com/2020/03/24/actucr-seminar/\" title=\"https://johncarlosbaez.wordpress.com/2020/03/24/actucr-seminar/\">https://johncarlosbaez.wordpress.com/2020/03/24/actucr-seminar/</a></p>\n<p>This page has a link to our YouTube channel as well as links to videos of individual talks.</p>",
        "id": 195099970,
        "sender_full_name": "John Baez",
        "timestamp": 1587665919
    }
]