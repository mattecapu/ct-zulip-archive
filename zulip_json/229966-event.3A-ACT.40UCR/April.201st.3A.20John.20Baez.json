[
    {
        "content": "<p>We can discuss the talk here.</p>",
        "id": 192039647,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585325048
    },
    {
        "content": "<p>Everyone can see slides of my talk <strong>Structured cospans and double categories</strong> here:</p>\n<p><a href=\"http://math.ucr.edu/home/baez/structured/\" title=\"http://math.ucr.edu/home/baez/structured/\">http://math.ucr.edu/home/baez/structured/</a></p>\n<p>See you on <strong>Wednesday April 1st at 5 pm UTC</strong>, which is 10 am in California, 1 pm on the east coast of the United States, or 6 pm in the UK.  It will be held online via Zoom, here:</p>\n<p><a href=\"https://ucr.zoom.us/j/607160601\" title=\"https://ucr.zoom.us/j/607160601\">https://ucr.zoom.us/j/607160601</a></p>\n<p>unless I give up due to some technical disaster and switch to YouTube.</p>",
        "id": 192149359,
        "sender_full_name": "John Baez",
        "timestamp": 1585443121
    },
    {
        "content": "<p>Looking forward to it! And we can safely assume that, as long as Zoom works, this will always be the room?</p>",
        "id": 192187370,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585506318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276830\">@Alexander Kurz</span>  Here<br>\n(And the link is: <a href=\"https://ucr.zoom.us/j/607160601\" title=\"https://ucr.zoom.us/j/607160601\">https://ucr.zoom.us/j/607160601</a>)</p>",
        "id": 192539841,
        "sender_full_name": "Vinay Madhusudanan",
        "timestamp": 1585752780
    },
    {
        "content": "<p>I'm afraid I won't manage on time, unfortunately. Can't wait for the recording!</p>",
        "id": 192554009,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1585758146
    },
    {
        "content": "<p>Sorry, Paolo.</p>",
        "id": 192555610,
        "sender_full_name": "John Baez",
        "timestamp": 1585758825
    },
    {
        "content": "<p>Okay, I'm here folks, in case anyone wants to chat.  (I'll be distracted at times gettting set up.)</p>",
        "id": 192555689,
        "sender_full_name": "John Baez",
        "timestamp": 1585758850
    },
    {
        "content": "<p>My talk will focus on less technical aspects because I want everyone to understand that structured cospans are a very simple tool.</p>",
        "id": 192555732,
        "sender_full_name": "John Baez",
        "timestamp": 1585758874
    },
    {
        "content": "<p>But for those of you who like the nuance of higher categories, there's plenty of fun along those lines too.</p>",
        "id": 192555804,
        "sender_full_name": "John Baez",
        "timestamp": 1585758910
    },
    {
        "content": "<p>For example, just as a category is \"just\" a monad in the bicategory Span(Set), I believe a <em>strict</em> double category is a monad in the bicategory Span(Cat).</p>",
        "id": 192558002,
        "sender_full_name": "John Baez",
        "timestamp": 1585759857
    },
    {
        "content": "<p>But we'll be using \"pseudo\" double categories, which are pseudomonads in the same bicategory Span(Cat).</p>",
        "id": 192558072,
        "sender_full_name": "John Baez",
        "timestamp": 1585759888
    },
    {
        "content": "<p>This means that \"horizontal composition\" is just associative up to an associator, etc.</p>",
        "id": 192558122,
        "sender_full_name": "John Baez",
        "timestamp": 1585759908
    },
    {
        "content": "<p>Well, you see, X is just Y in the category of Z</p>",
        "id": 192558533,
        "sender_full_name": "Juan Ferrer Meleiro",
        "timestamp": 1585760046
    },
    {
        "content": "<p>But in the case of pseudo double categories, this is very useful.</p>",
        "id": 192558570,
        "sender_full_name": "John Baez",
        "timestamp": 1585760069
    },
    {
        "content": "<p>(And that's beautiful)</p>",
        "id": 192558592,
        "sender_full_name": "Juan Ferrer Meleiro",
        "timestamp": 1585760080
    },
    {
        "content": "<p>Weren't we going to use this chat?</p>",
        "id": 192567162,
        "sender_full_name": "Juan Ferrer Meleiro",
        "timestamp": 1585763634
    },
    {
        "content": "<p>It seems we're chatting in Zoom for now, and when the video part is done, we'll come here.</p>",
        "id": 192567408,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585763730
    },
    {
        "content": "<p>Ok I'll ask a question here and catch up on the answer later: Has anyone figured out structured co<em>relations</em>?</p>",
        "id": 192567542,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585763785
    },
    {
        "content": "<p>I didn't even know there was something called \"span\"</p>",
        "id": 192567639,
        "sender_full_name": "Juan Ferrer Meleiro",
        "timestamp": 1585763828
    },
    {
        "content": "<p>Should've guessed</p>",
        "id": 192567698,
        "sender_full_name": "Juan Ferrer Meleiro",
        "timestamp": 1585763847
    },
    {
        "content": "<p>So a relation is a span <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>←</mo><mi>X</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A \\leftarrow X \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> so that the pairing of the morphisms is monic (so it's a subobject of a product). Then a corelation is the opposite - a cospan so that the copairing is epic.</p>",
        "id": 192568007,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585763878
    },
    {
        "content": "<p>They're sometimes called \"rooves\" by homotopy theorists.</p>",
        "id": 192568009,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585763879
    },
    {
        "content": "<p>rooves? what</p>",
        "id": 192568100,
        "sender_full_name": "philip hackney",
        "timestamp": 1585763906
    },
    {
        "content": "<p>plural of roof</p>",
        "id": 192568121,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585763917
    },
    {
        "content": "<p>ahh thanks</p>",
        "id": 192568142,
        "sender_full_name": "philip hackney",
        "timestamp": 1585763927
    },
    {
        "content": "<p>wow, the plural of roof is roofs</p>",
        "id": 192568184,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585763949
    },
    {
        "content": "<p>Yeah I guess you see them called that when describing the derived category</p>",
        "id": 192568191,
        "sender_full_name": "philip hackney",
        "timestamp": 1585763952
    },
    {
        "content": "<p>I think the plural is \"roof\"</p>",
        "id": 192568214,
        "sender_full_name": "philip hackney",
        "timestamp": 1585763964
    },
    {
        "content": "<p>:-)</p>",
        "id": 192568221,
        "sender_full_name": "philip hackney",
        "timestamp": 1585763969
    },
    {
        "content": "<p>reef :p</p>",
        "id": 192568268,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1585763996
    },
    {
        "content": "<blockquote>\n<p>Rooves is an old secondary form, and it still appears occasionally by analogy with other irregular plurals such as hooves, but it is not common enough to be considered standard.</p>\n</blockquote>",
        "id": 192568271,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585763999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> I know what a corelation is... I'm asking about whether anyone smooshed together decorated corelations with structured cospans</p>",
        "id": 192568277,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585764001
    },
    {
        "content": "<p>I was telling everyone.</p>",
        "id": 192568363,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585764016
    },
    {
        "content": "<p>ah, sorry</p>",
        "id": 192568369,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585764020
    },
    {
        "content": "<p>Short answer, I don't think so. Maybe we can ask <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> right now.</p>",
        "id": 192568373,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585764022
    },
    {
        "content": "<p>(I think he's coming here after the zoom call, and since there's lots of people and I need to leave now, I'm hoping I can come back later and find an answer)</p>",
        "id": 192568502,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585764075
    },
    {
        "content": "<p>Question 1: (Plain) Petri nets present SMC. Is there a version of this fact for Petri nets with rates? Do you get like SMC enriched in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, \\infty)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>?<br>\nQuestion 2: How do you 'close' and open Petri Net? That is, if I have an open Petri net, how do I plug in the input/outputs with, say, numbers (so to 'assign an initial value to the I/O places')?</p>",
        "id": 192569237,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1585764367
    },
    {
        "content": "<p>I noticed during the talk that is started off very close to something I know, which are Leinster's category of T-spans, for a monad T. It's all upside down, but that's just a choice. Apart from that, T-spans are spans of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mo>←</mo><mi>X</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">TA \\leftarrow X \\rightarrow B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. Leinster uses these to define T-operads, as just monoids in the category of T-spans. We can concieve them as operads whose 'entry arity' is described by T. Intuitively, it seems like structured cospan would let one describe operads with many inputs and many outputs (as opposed to only one output in Leinster's case), with various shapes of arity for the input and for the output</p>",
        "id": 192569583,
        "sender_full_name": "Thibaut Benjamin",
        "timestamp": 1585764496
    },
    {
        "content": "<p>I believe forgetting the arities, operads with many outputs are called polycategories</p>",
        "id": 192569631,
        "sender_full_name": "Thibaut Benjamin",
        "timestamp": 1585764520
    },
    {
        "content": "<p>Has anyone tried looking at things in this direction?</p>",
        "id": 192569673,
        "sender_full_name": "Thibaut Benjamin",
        "timestamp": 1585764541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\">said</a>:</p>\n<blockquote>\n<p>Question 1: (Plain) Petri nets present SMC. Is there a version of this fact for Petri nets with rates? Do you get like SMC enriched in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, \\infty)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>? </p>\n</blockquote>\n<p>Great question. That sounds right... I haven't worked with Petri nets with rates yet; would composition correspond to adding rates or multiplying?</p>",
        "id": 192569772,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585764588
    },
    {
        "content": "<p>I'm not sure it would be that immediate actually.</p>",
        "id": 192569967,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585764674
    },
    {
        "content": "<p>The category you generate comes from the token game for a Petri net. So this is like a discrete semantics for the net. The category is token markings for the objects and executions of transitions for the morphisms.</p>",
        "id": 192570116,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585764738
    },
    {
        "content": "<p>When you have rates, you think of this like a continuous semantics for the net. I'm not sure what you would have the objects and morphisms be.</p>",
        "id": 192570183,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585764774
    },
    {
        "content": "<p>Yes! We should work out what a monad in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">L</mi><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{LCsp}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">L</span><span class=\"mord mathrm\">C</span><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">p</span></span></span></span></span> is (for, say, open Petri nets).</p>",
        "id": 192570477,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585764903
    },
    {
        "content": "<p>If I want structured spans, do they fall out easily from structured cospans by taking the opposite of something?</p>",
        "id": 192570491,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585764907
    },
    {
        "content": "<p>Hi, folks!  I've got my coffee refreshed now...</p>",
        "id": 192570747,
        "sender_full_name": "John Baez",
        "timestamp": 1585765032
    },
    {
        "content": "<p>I was wondering about a \"general respresentation theorem\" in the sense that if you pick appropriate categories for your structured cospans you get different open systems. Should there be some higher category of these open systems such that you can have morphisms between them based on like 2-functors between different cospans or the like?</p>",
        "id": 192570789,
        "sender_full_name": "Gershom",
        "timestamp": 1585765061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\">said</a>:</p>\n<blockquote>\n<p>Question 1: (Plain) Petri nets present SMC. Is there a version of this fact for Petri nets with rates? Do you get like SMC enriched in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, \\infty)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>?</p>\n</blockquote>",
        "id": 192570803,
        "sender_full_name": "John Baez",
        "timestamp": 1585765072
    },
    {
        "content": "<p>Great question.</p>",
        "id": 192570926,
        "sender_full_name": "John Baez",
        "timestamp": 1585765117
    },
    {
        "content": "<p>A Petri net gives a <em>commutative</em> monoidal category, which is  a shockingly simple sort of symmetric monoidal category.</p>",
        "id": 192570979,
        "sender_full_name": "John Baez",
        "timestamp": 1585765142
    },
    {
        "content": "<p>If each transition in our Petri net is mapped to a number in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,\\infty)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>, what do we get for the morphisms in that CMC?</p>",
        "id": 192571048,
        "sender_full_name": "John Baez",
        "timestamp": 1585765173
    },
    {
        "content": "<p>If the transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is mapped to a number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is mapped to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>, what do we want to do with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>⊗</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f \\otimes g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span>?</p>",
        "id": 192571186,
        "sender_full_name": "John Baez",
        "timestamp": 1585765224
    },
    {
        "content": "<p>Ideally we'd do something that was <em>useful in applications</em>.</p>",
        "id": 192571213,
        "sender_full_name": "John Baez",
        "timestamp": 1585765238
    },
    {
        "content": "<p>We could wildly guess that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> should be mapped to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>r</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r(f) + r(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> or something, but I'd rather do something useful.</p>",
        "id": 192571284,
        "sender_full_name": "John Baez",
        "timestamp": 1585765275
    },
    {
        "content": "<p>Jules wrote: \"I'm asking about whether anyone smooshed together decorated corelations with structured cospans.\"</p>",
        "id": 192571378,
        "sender_full_name": "John Baez",
        "timestamp": 1585765318
    },
    {
        "content": "<p>Nobody has done so.</p>",
        "id": 192571392,
        "sender_full_name": "John Baez",
        "timestamp": 1585765322
    },
    {
        "content": "<p>Decorated corelations are where Brendan's work really shines, in my opinion (and his I guess).</p>",
        "id": 192571588,
        "sender_full_name": "John Baez",
        "timestamp": 1585765403
    },
    {
        "content": "<p>For example he proves that every hypergraph category is a decorated corelation category.</p>",
        "id": 192571621,
        "sender_full_name": "John Baez",
        "timestamp": 1585765418
    },
    {
        "content": "<p>Yes, I know... but when you're on \"Press Enter to Send\" it's hard to edit ones mistakes and when you're editing your previous message it's hard to get out of \"Press Enter to Send\"!    <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 192571785,
        "sender_full_name": "John Baez",
        "timestamp": 1585765488
    },
    {
        "content": "<p>You can press \"shift+enter\" to put line breaks in your message.</p>",
        "id": 192571835,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585765513
    },
    {
        "content": "<p>So understanding \"structured corelations\", or why they don't exist, would be interesting.</p>",
        "id": 192571905,
        "sender_full_name": "John Baez",
        "timestamp": 1585765546
    },
    {
        "content": "<p>(But when you're editing a previous comment that box goes away.)</p>",
        "id": 192572013,
        "sender_full_name": "John Baez",
        "timestamp": 1585765580
    },
    {
        "content": "<p>Let's talk about math, eh?</p>",
        "id": 192572049,
        "sender_full_name": "John Baez",
        "timestamp": 1585765601
    },
    {
        "content": "<p>Another interesting thing: Kenny and Christina have theorems for conditions under which decorated and structured formalisms agree.</p>",
        "id": 192572081,
        "sender_full_name": "John Baez",
        "timestamp": 1585765616
    },
    {
        "content": "<p>But there are conditions on these theorems.</p>",
        "id": 192572106,
        "sender_full_name": "John Baez",
        "timestamp": 1585765627
    },
    {
        "content": "<p>And there's <em>one</em> case of a very useful decorated cospan category that doesn't seem to be a structured cospan category.</p>",
        "id": 192572162,
        "sender_full_name": "John Baez",
        "timestamp": 1585765650
    },
    {
        "content": "<p>Namely, the category of open dynamical systems that I called \"Dynam\" in my talk.</p>",
        "id": 192572190,
        "sender_full_name": "John Baez",
        "timestamp": 1585765666
    },
    {
        "content": "<p>This was built using decorated cospans by Blake and I in <a href=\"http://math.ucr.edu/home/baez/RxNet.pdf\" title=\"http://math.ucr.edu/home/baez/RxNet.pdf\">Compositional framework for open reaction networks</a>.</p>",
        "id": 192572293,
        "sender_full_name": "John Baez",
        "timestamp": 1585765697
    },
    {
        "content": "<p>I don't see how to do it using structured cospans and I'm betting it's not possible.</p>",
        "id": 192572320,
        "sender_full_name": "John Baez",
        "timestamp": 1585765716
    },
    {
        "content": "<p>So there is a lot of fun subtlety in the decorated vs. structured business.</p>",
        "id": 192572388,
        "sender_full_name": "John Baez",
        "timestamp": 1585765738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"279935\">Thibaut Benjamin</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569583\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569583\">said</a>:</p>\n<blockquote>\n<p>I noticed during the talk that is started off very close to something I know, which are Leinster's category of T-spans, for a monad T. It's all upside down, but that's just a choice. Apart from that, T-spans are spans of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mo>←</mo><mi>X</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">TA \\leftarrow X \\rightarrow B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. Leinster uses these to define T-operads, as just monoids in the category of T-spans. </p>\n</blockquote>",
        "id": 192572467,
        "sender_full_name": "John Baez",
        "timestamp": 1585765782
    },
    {
        "content": "<p>Yes, that's interesting.  Has someone looked at things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mo>←</mo><mi>X</mi><mo>→</mo><mi>T</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">TA \\leftarrow X \\to TB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>?   I seem to recall someone building something like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>-props\" this way, though they didn't call them that.</p>",
        "id": 192572545,
        "sender_full_name": "John Baez",
        "timestamp": 1585765810
    },
    {
        "content": "<p>In the theorem that converts decorated cospans to structured cospans, what are the conditions that this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">D</mi><mi mathvariant=\"normal\">y</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">m</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Dynam}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">D</span><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">y</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">m</span></span></span></span></span> fails?</p>",
        "id": 192572565,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585765818
    },
    {
        "content": "<p>Yes, a polycategory is a monad in a <em>two-sided</em> Kleisli category.</p>",
        "id": 192572614,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585765836
    },
    {
        "content": "<p>The initial data is a \"mixed distributive law\" of a monad over a comonad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mo>:</mo><mi>T</mi><mi>D</mi><mo>⇒</mo><mi>D</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda: TD\\Rightarrow DT</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>.</p>",
        "id": 192572656,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585765858
    },
    {
        "content": "<p>The \"free symmetric monoidal category\" pseudomonad is also a pseudocomonad. This stuff was Garner's thesis.</p>",
        "id": 192572708,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585765883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276424\">Rongmin Lu</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572556\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572556\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572162\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572162\">said</a>:</p>\n<blockquote>\n<p>And there's <em>one</em> case of a very useful decorated cospan category that doesn't seem to be a structured cospan category.</p>\n</blockquote>\n<p>So I seem to recall that the motivation for structured cospans was that decorated cospans are a bit restrictive. But here, you seem to be indicating that decorated cospans are not a specialisation of structured cospans. Am I getting this right?</p>\n</blockquote>",
        "id": 192572721,
        "sender_full_name": "John Baez",
        "timestamp": 1585765890
    },
    {
        "content": "<p>The motivation was not that they were too restrictive.</p>",
        "id": 192572745,
        "sender_full_name": "John Baez",
        "timestamp": 1585765902
    },
    {
        "content": "<p>The original motivation was that the concept of \"isomorphism of decorated cospans\" was too restrictive - it didn't match what you'd intuitively want.</p>",
        "id": 192572846,
        "sender_full_name": "John Baez",
        "timestamp": 1585765932
    },
    {
        "content": "<p>Thus, decorated cospan categories typically have \"too many morphisms\" - morphisms that \"should be equal but are not\".</p>",
        "id": 192572911,
        "sender_full_name": "John Baez",
        "timestamp": 1585765965
    },
    {
        "content": "<p>We fixed this using structured cospans.</p>",
        "id": 192572950,
        "sender_full_name": "John Baez",
        "timestamp": 1585765980
    },
    {
        "content": "<p>Then Kenny and Christina generalized decorated cospans to fix it in that framework too!</p>",
        "id": 192573001,
        "sender_full_name": "John Baez",
        "timestamp": 1585766000
    },
    {
        "content": "<p>Then they proved that the two approaches agree if 1) we \"fix\" decorated cospans, and 2) some assumptions hold.</p>",
        "id": 192573071,
        "sender_full_name": "John Baez",
        "timestamp": 1585766039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572565\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572565\">said</a>:</p>\n<blockquote>\n<p>In the theorem that converts decorated cospans to structured cospans, what are the conditions that this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">D</mi><mi mathvariant=\"normal\">y</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">m</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Dynam}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">D</span><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">y</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">m</span></span></span></span></span> fails?</p>\n</blockquote>",
        "id": 192573157,
        "sender_full_name": "John Baez",
        "timestamp": 1585766058
    },
    {
        "content": "<p>Believe it or not, I haven't had time to think about this.</p>",
        "id": 192573175,
        "sender_full_name": "John Baez",
        "timestamp": 1585766068
    },
    {
        "content": "<p>Do you have an example in <strong>Dynam</strong> where dynamical systems which \"should be equal but are not\"?</p>",
        "id": 192573208,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766095
    },
    {
        "content": "<p>Although maybe this has the same answer as Christian's question :)</p>",
        "id": 192573235,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766107
    },
    {
        "content": "<p>let me try to state some basics and ask if this is correct: ok so the general setup is \"take your category of 'closed' things, now a structured cospan over that is an 'open' thing\"? and within that a vertical morphism is a remapping of the open bits (input and outputs) and a two-morphism is a remapping of \"everything at once\"?</p>",
        "id": 192573257,
        "sender_full_name": "Gershom",
        "timestamp": 1585766119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276589\">Sophie Libkind</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192573208\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192573208\">said</a>:</p>\n<blockquote>\n<p>Do you have an example in <strong>Dynam</strong> where dynamical systems which \"should be equal but are not\"?</p>\n</blockquote>\n<p>Problem 1, \"morphisms that should be equal but are not\", is quite general in decorated cospan categories; this is different from the problem 2, \"not every decorated cospan category matches a structured cospan category even after we fix that problem 1\".</p>\n<p><strong>Dynam</strong> might be a great example of the <em>second</em> problem.</p>",
        "id": 192573285,
        "sender_full_name": "John Baez",
        "timestamp": 1585766140
    },
    {
        "content": "<p>so if i have some category of \"stuff without inputs and outputs\" then in general i would hope to be able to \"hit it with structured cospans\" to get my hands on the open version?</p>",
        "id": 192573388,
        "sender_full_name": "Gershom",
        "timestamp": 1585766178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572545\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572545\">said</a>:</p>\n<blockquote>\n<p>Yes, that's interesting.  Has someone looked at things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mo>←</mo><mi>X</mi><mo>→</mo><mi>T</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">TA \\leftarrow X \\to TB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>?   I seem to recall someone building something like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>-props\" this way, though they didn't call them that.</p>\n</blockquote>\n<p>Not to my knowledge, I wanted to point out that approach to \"T-operads\", because it felt so similar, and the mental picture I have is almost the same. Also the point of studying these are very close, in both cases, it is about composing things, while putting some arities on the side. So i guess there may be a general setting that generalizes both these approaches</p>",
        "id": 192573545,
        "sender_full_name": "Thibaut Benjamin",
        "timestamp": 1585766269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> - if you want to see an example of problem 1 (see above for what I mean by that), I can easily show you one, but <strong>Dynam</strong> is not the easiest place to see it.</p>",
        "id": 192573735,
        "sender_full_name": "John Baez",
        "timestamp": 1585766375
    },
    {
        "content": "<p>I would like to see one!</p>",
        "id": 192573765,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766398
    },
    {
        "content": "<p>In fact I think problem 1 (the \"too many morphisms\" problem) does <em>not</em> occur in <strong>Dynam</strong>.</p>",
        "id": 192573818,
        "sender_full_name": "John Baez",
        "timestamp": 1585766410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span>, yeah. Critically, the functor is being thought of as encoding exactly what a \"boundary\" should consist of.</p>",
        "id": 192573838,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585766421
    },
    {
        "content": "<p>So if I'm working in a decorated cospan category and notice that it seems like I have too many morphisms that's evidence that maybe I should be working in a structure cospan category instead?</p>",
        "id": 192573931,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766478
    },
    {
        "content": "<p>Okay, <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span>.    Since pictures are really helpful for understanding problem 1, please take a look at page 11 of these slides by Kenny:  <a href=\"http://math.ucr.edu/home/baez/SYCO4/courser_syco4.pdf\" title=\"http://math.ucr.edu/home/baez/SYCO4/courser_syco4.pdf\">http://math.ucr.edu/home/baez/SYCO4/courser_syco4.pdf</a></p>",
        "id": 192574045,
        "sender_full_name": "John Baez",
        "timestamp": 1585766530
    },
    {
        "content": "<p>He's doing the example of \"open graphs\".</p>",
        "id": 192574074,
        "sender_full_name": "John Baez",
        "timestamp": 1585766542
    },
    {
        "content": "<p>Okay</p>",
        "id": 192574144,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766583
    },
    {
        "content": "<p>The punchline is that if two open graphs differ only in the <em>names</em> of some edges, they are not isomorphic in Brendan's original decorated cospan formalism.</p>",
        "id": 192574174,
        "sender_full_name": "John Baez",
        "timestamp": 1585766595
    },
    {
        "content": "<p>The isomorphisms let us rename <em>vertices</em>, but \"the decorations just go along for the ride\" - so we can't rename edges with an isomorphism in his original approach.</p>",
        "id": 192574313,
        "sender_full_name": "John Baez",
        "timestamp": 1585766647
    },
    {
        "content": "<p>I see!</p>",
        "id": 192574345,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766668
    },
    {
        "content": "<p>is this like your example with the symmetric petri net?</p>",
        "id": 192574370,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585766679
    },
    {
        "content": "<p>This is clearly a defect, and in fact it results in there being a <em>large</em> set of morphisms between any two objects - a proper class, basically!</p>",
        "id": 192574377,
        "sender_full_name": "John Baez",
        "timestamp": 1585766681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\">said</a>:</p>\n<blockquote>\n<p>Question 2: How do you 'close' and open Petri Net? That is, if I have an open Petri net, how do I plug in the input/outputs with, say, numbers (so to 'assign an initial value to the I/O places')?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> - an amazingly simple question that I never considered.</p>\n<p>Also <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> asked:</p>\n<blockquote>\n<p>If  I want structured spans, do they fall out easily from structured cospans by taking the opposite of something?</p>\n</blockquote>",
        "id": 192574474,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585766728
    },
    {
        "content": "<p>Also, in Leinster's approach, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is a monad, an the structure of a monad is used to defined the composition, but the monad appears only on one side <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mo>←</mo><mi>x</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> TA \\leftarrow x \\rightarrow B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. A monad can always be decomposed as the composition of two adjoint functors. In your approach it feels like taking half of the monad and putting it on the other leg. This reminds me a lot of the definition of adjoint functors that can be transfered from source to target (except here it is from one leg of a cospan to the other)! I have to re-read Leinster and try to see that makes sense</p>",
        "id": 192574521,
        "sender_full_name": "Thibaut Benjamin",
        "timestamp": 1585766759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276589\">Sophie Libkind</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192574370\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192574370\">said</a>:</p>\n<blockquote>\n<p>is this like your example with the symmetric petri net?</p>\n</blockquote>\n<p>Umm, not quite.</p>",
        "id": 192574577,
        "sender_full_name": "John Baez",
        "timestamp": 1585766769
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\">said</a>:</p>\n<blockquote>\n<p>Question 2: How do you 'close' and open Petri Net? That is, if I have an open Petri net, how do I plug in the input/outputs with, say, numbers (so to 'assign an initial value to the I/O places')?</p>\n</blockquote>\n<p>One thing you can do, which may not be what you want, is simply take the underlying closed Petri net of an open Petri net: that is, given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mi>X</mi><mo>→</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(A) \\leftarrow X \\to L(B)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> , just take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>\n</blockquote>",
        "id": 192574817,
        "sender_full_name": "John Baez",
        "timestamp": 1585766893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192574474\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192574474\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192569237\">said</a>:</p>\n<blockquote>\n<p>Question 2: How do you 'close' and open Petri Net? That is, if I have an open Petri net, how do I plug in the input/outputs with, say, numbers (so to 'assign an initial value to the I/O places')?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> - an amazingly simple question that I never considered.</p>\n<p>Also <span class=\"user-mention silent\" data-user-id=\"276589\">Sophie Libkind</span> asked:</p>\n<blockquote>\n<p>If  I want structured spans, do they fall out easily from structured cospans by taking the opposite of something?</p>\n</blockquote>\n</blockquote>\n<p>turn it into an endomorphism of the empty set.</p>",
        "id": 192574887,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585766928
    },
    {
        "content": "<p>Well I think the key part of the question is how to add initial values for Petri nets with rates.</p>",
        "id": 192574993,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585766984
    },
    {
        "content": "<p>Endomorphisms of the monoidal unit are always interesting. In this case, its the collection of closed nets.</p>",
        "id": 192574998,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585766985
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> asked:</p>\n<blockquote>\n<p>If  I want structured spans, do they fall out easily from structured cospans by taking the opposite of something?</p>\n</blockquote>\n<p>I guess given a left adjoint <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">L : A \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> we get a right adjoint <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup><mo>:</mo><msup><mi>A</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup><mo>→</mo><msup><mi>X</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L^{\\mathrm{op}} : A^{\\mathrm{op}} \\to X^{\\mathrm{op}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">o</span><span class=\"mord mathrm mtight\">p</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">o</span><span class=\"mord mathrm mtight\">p</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">o</span><span class=\"mord mathrm mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span></span>, and the original structured cospans are \"structured spans\" in this new setting!</p>",
        "id": 192575060,
        "sender_full_name": "John Baez",
        "timestamp": 1585767002
    },
    {
        "content": "<p>so we take op of everything!</p>",
        "id": 192575127,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585767033
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 192575143,
        "sender_full_name": "John Baez",
        "timestamp": 1585767044
    },
    {
        "content": "<p>I've never felt the need for \"structured spans\", but I probably <em>should</em>.</p>",
        "id": 192575177,
        "sender_full_name": "John Baez",
        "timestamp": 1585767060
    },
    {
        "content": "<p>I'm using spans to describe open systems in classical mechanics, but unfortunately they are more complicated than mere \"structured spans\" or \"decorated spans\".</p>",
        "id": 192575264,
        "sender_full_name": "John Baez",
        "timestamp": 1585767098
    },
    {
        "content": "<p>I started wanting spans when I was thinking about how to generalize the <strong>Dynam</strong> decorated cospan category to be over general Riemannian manifolds instead of euclidean spaces with maps induced by maps of finite sets</p>",
        "id": 192575484,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585767181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276424\">@Rongmin Lu</span> - I think the buzzword to look under is \"T-multicategory\".</p>",
        "id": 192575502,
        "sender_full_name": "John Baez",
        "timestamp": 1585767188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> I think that should come out of what are the nets you compose on either side, the ones which are one-sided.</p>",
        "id": 192575572,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585767218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> - cool!</p>",
        "id": 192575704,
        "sender_full_name": "John Baez",
        "timestamp": 1585767263
    },
    {
        "content": "<p>That's really interesting!   Now I see why you might be interested in super-technical questions about <strong>Dynam</strong>.</p>",
        "id": 192575737,
        "sender_full_name": "John Baez",
        "timestamp": 1585767277
    },
    {
        "content": "<p>Leinster's book higher operads, higher categories, is where I learnt this. Leinster uses this for defining globular operads</p>",
        "id": 192575787,
        "sender_full_name": "Thibaut Benjamin",
        "timestamp": 1585767301
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 192575818,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585767311
    },
    {
        "content": "<p>That paper is sort of a subobject of the book.</p>",
        "id": 192575988,
        "sender_full_name": "John Baez",
        "timestamp": 1585767397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276650\">Gershom</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192570789\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192570789\">said</a>:</p>\n<blockquote>\n<p>I was wondering about a \"general respresentation theorem\" in the sense that if you pick appropriate categories for your structured cospans you get different open systems. Should there be some higher category of these open systems such that you can have morphisms between them based on like 2-functors between different cospans or the like?</p>\n</blockquote>\n<p>So you're talking about going up a level to the world of initial data, the 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">R</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Rex}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">R</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">x</span></span></span></span></span> of finite-colimit preserving functors? In the paper, I think they formalize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">p</mi></mrow></mrow><annotation encoding=\"application/x-tex\">(-)\\mathrm{Csp}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">p</span></span></span></span></span> as a (double?) functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">R</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi><mo>→</mo><mi mathvariant=\"normal\">D</mi><mi mathvariant=\"normal\">b</mi><mi mathvariant=\"normal\">l</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Rex\\to Dbl}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">R</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathrm\">D</span><span class=\"mord mathrm\">b</span><span class=\"mord mathrm\">l</span></span></span></span></span>. Then if you take the \"double Grothendieck\" of that, I think you could have different kinds of open systems interacting. Is this what you mean?</p>",
        "id": 192576224,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585767487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> - I think you'd be really interested in what David Weisbart and Adam Yassine and I are doing on open systems in classical mechanics.   We're doing Hamiltonian and Lagrangian systems, not general dynamical systems (= manifolds with vector fields), so we don't need to fight for priority.</p>",
        "id": 192576237,
        "sender_full_name": "John Baez",
        "timestamp": 1585767493
    },
    {
        "content": "<p>That sounds really cool! How do I learn more?</p>",
        "id": 192576327,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585767533
    },
    {
        "content": "<p>Hmm.  David and Adam have a paper on this.  It seems they haven't put it on the arXiv yet for some reason.</p>",
        "id": 192576428,
        "sender_full_name": "John Baez",
        "timestamp": 1585767570
    },
    {
        "content": "<p>This paper is full of serious mistakes: <a href=\"https://arxiv.org/abs/1710.11392\" title=\"https://arxiv.org/abs/1710.11392\">https://arxiv.org/abs/1710.11392</a></p>",
        "id": 192576572,
        "sender_full_name": "John Baez",
        "timestamp": 1585767610
    },
    {
        "content": "<p>Adam quit being my grad student and started working with David Weisbart, another prof at UCR.</p>",
        "id": 192576621,
        "sender_full_name": "John Baez",
        "timestamp": 1585767635
    },
    {
        "content": "<p>They fixed that paper, which required some very nice brand new ideas.</p>",
        "id": 192576656,
        "sender_full_name": "John Baez",
        "timestamp": 1585767650
    },
    {
        "content": "<p>So now they have a fixed one, but I believe David wants to polish it more.</p>",
        "id": 192576737,
        "sender_full_name": "John Baez",
        "timestamp": 1585767679
    },
    {
        "content": "<p>One <em>technical</em> thing is that the category of manifolds doesn't have pullbacks, so composing spans is more delicate.</p>",
        "id": 192576790,
        "sender_full_name": "John Baez",
        "timestamp": 1585767703
    },
    {
        "content": "<p>The more <em>physically interesting</em> thing is how you combine Hamiltonians or Lagrangians when you compose open systems.  This cannot be done in the \"decorated span\" approach.</p>",
        "id": 192576947,
        "sender_full_name": "John Baez",
        "timestamp": 1585767756
    },
    {
        "content": "<p>Wow! This sounds very cool. I don't know much about the physics perspective but am excited to learn</p>",
        "id": 192577025,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585767788
    },
    {
        "content": "<p>Anyway, I could pester David to release a paper, or just talk to you, at a rate proportional to how serious you are about pursuing open dynamical system.</p>",
        "id": 192577108,
        "sender_full_name": "John Baez",
        "timestamp": 1585767834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> was interested in studying open dynamical systems, but we haven't really done it.</p>",
        "id": 192577192,
        "sender_full_name": "John Baez",
        "timestamp": 1585767857
    },
    {
        "content": "<p>Btw, I think <strong>Dynam</strong> is a case where the \"too many morphisms\" problem does <em>not</em> arise.</p>",
        "id": 192577290,
        "sender_full_name": "John Baez",
        "timestamp": 1585767897
    },
    {
        "content": "<p>The reason is that a vector field on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>X</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span></span></span></span></span></span></span> is just equipping <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with extra \"structure\", not extra \"stuff\" (in the technical sense of \"stuff\").</p>",
        "id": 192577471,
        "sender_full_name": "John Baez",
        "timestamp": 1585767969
    },
    {
        "content": "<p>Whereas equipping a set with a bunch of edges to get a graph is equipping it with extra \"stuff\" - that's where the problem starts.</p>",
        "id": 192577548,
        "sender_full_name": "John Baez",
        "timestamp": 1585768010
    },
    {
        "content": "<p>the stuff, structure, and properties was one of the first things that got me really jazzed about category theory!</p>",
        "id": 192577561,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585768021
    },
    {
        "content": "<p>Hi yes I was interested in this but have gotten seriously distracted. Here's a blog post I wrote about what the category of dynamical systems is like</p>",
        "id": 192577952,
        "sender_full_name": "Jade Master",
        "timestamp": 1585768188
    },
    {
        "content": "<p><a href=\"https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/\" title=\"https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/\">https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/</a></p>",
        "id": 192577963,
        "sender_full_name": "Jade Master",
        "timestamp": 1585768191
    },
    {
        "content": "<p>Thanks Jade!</p>",
        "id": 192578136,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585768250
    },
    {
        "content": "<p>I was thinking about dynamical systems as manifolds with and action of R...this is the integrated version of the vector space approach.</p>",
        "id": 192578185,
        "sender_full_name": "Jade Master",
        "timestamp": 1585768275
    },
    {
        "content": "<p>You're welcome :)</p>",
        "id": 192578219,
        "sender_full_name": "Jade Master",
        "timestamp": 1585768289
    },
    {
        "content": "<p>One moment...I have more to say but I g2g</p>",
        "id": 192578250,
        "sender_full_name": "Jade Master",
        "timestamp": 1585768305
    },
    {
        "content": "<p>I'd love to talk more :)</p>",
        "id": 192578347,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585768330
    },
    {
        "content": "<p>The R action sounds really interesting and much more general than the vector field approach</p>",
        "id": 192578427,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585768368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192576224\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192576224\">said</a>:</p>\n<p>\"In the paper, I think they formalize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">p</mi></mrow></mrow><annotation encoding=\"application/x-tex\">(-)\\mathrm{Csp}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">p</span></span></span></span></span> as a (double?) functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">R</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi><mo>→</mo><mi mathvariant=\"normal\">D</mi><mi mathvariant=\"normal\">b</mi><mi mathvariant=\"normal\">l</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Rex\\to Dbl}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">R</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathrm\">D</span><span class=\"mord mathrm\">b</span><span class=\"mord mathrm\">l</span></span></span></span></span>.\"</p>\n<p>In <a href=\"http://math.ucr.edu/home/baez/structured.pdf\" title=\"http://math.ucr.edu/home/baez/structured.pdf\">our paper</a>, Kenny and I show how a morphism in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">R</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Rex}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">R</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">x</span></span></span></span></span>, i.e. a finitely cocontinuous functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>:</mo><mi mathvariant=\"sans-serif\">A</mi><mo>→</mo><mi mathvariant=\"sans-serif\">X</mi></mrow><annotation encoding=\"application/x-tex\">L : \\mathsf{A} \\to \\mathsf{X}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">A</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">X</span></span></span></span></span> between categories with finite colimits, gives a symmetric monoidal double category of structured cospans.</p>\n<p>Then we show how a square in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">R</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Rex}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">R</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">x</span></span></span></span></span> commuting up to natural isomorphism gives a map between such symmetric monoidal double categories.   This result is very useful - <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> and I used it in <a href=\"http://math.ucr.edu/home/baez/petri.pdf\" title=\"http://math.ucr.edu/home/baez/petri.pdf\">our work on open Petri nets</a>.</p>\n<p>Clearly these are just steps toward the final result you're dreaming of.  I guess that'd be something like a 2-functor from the \"arrow 2-category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">R</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Rex}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">R</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">x</span></span></span></span></span>\" to a 2-category of symmetric monoidal double categories!</p>",
        "id": 192586668,
        "sender_full_name": "John Baez",
        "timestamp": 1585772081
    },
    {
        "content": "<p>We got tired before reaching the final result.</p>",
        "id": 192587162,
        "sender_full_name": "John Baez",
        "timestamp": 1585772308
    },
    {
        "content": "<p>the idea that you want your stuff to be <em>open</em> in order to facilitate compositionality—</p>",
        "id": 192590494,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585773889
    },
    {
        "content": "<p>mmm, a lot of things bubbling in my head <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 192590517,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585773901
    },
    {
        "content": "<p>so, for one thing, ive definitely seen the phenomenon before—it crops up a ton of in PL in the guise of having to extend a definition from closed terms to open terms in order to be able to do induction, because closed terms contain open terms</p>",
        "id": 192590741,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585774002
    },
    {
        "content": "<p>but another thing it's making me think about is, like...</p>",
        "id": 192590822,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585774044
    },
    {
        "content": "<p>well—i can't quite articulate what the general idea is that i have in mind, but one relevant <em>thing</em> is game semantics</p>",
        "id": 192590951,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585774108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572545\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572545\">said</a>:</p>\n<blockquote>\n<p>Yes, that's interesting.  Has someone looked at things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mo>←</mo><mi>X</mi><mo>→</mo><mi>T</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">TA \\leftarrow X \\to TB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>?   I seem to recall someone building something like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>-props\" this way, though they didn't call them that.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> basically <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572565\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192572565\">answered</a> this, but I just wanted to add some extra emphasis.  Whenever you have a distributive law between a pseudomonad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> and a pseudocomonad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> on a bicategory, you can build a two-sided Kleisli bicategory.  When <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> \"=\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is the free symmetric strict monoidal category monad on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">P</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">f</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Prof}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">P</span><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">f</span></span></span></span></span>, one choice of distributive law gives you polycategories.  But another choice of distributive law should give you properads, or props, etc.; all sorts of categorical structures that have multiple inputs and also multiple outputs.  There should be a whole theory of \"generalized polycategories\" (or \"generalized props\", I'm not sure which term is best) analogous to the theory of generalized multicategories, and in particular that works with <a href=\"http://tac.mta.ca/tac/volumes/24/21/24-21abs.html\" title=\"http://tac.mta.ca/tac/volumes/24/21/24-21abs.html\">virtual double categories</a> rather than bicategories (thereby explaining in what sense <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> can \"equal\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>).  However, to my knowledge no one has developed this idea further than Garner's <a href=\"https://arxiv.org/abs/math/0606735\" title=\"https://arxiv.org/abs/math/0606735\">paper</a> that shows how to get polycategories.</p>",
        "id": 192591165,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1585774210
    },
    {
        "content": "<p>so i had a conversation a little while ago where i argued that the point of game semantics is to describe what happens at a boundary, without regard to what <em>kind of process or object</em> gives rise to the interaction, but also that something you have to do when working with game semantics is shift where boundaries lie</p>",
        "id": 192591216,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585774241
    },
    {
        "content": "<p>(I keep mentioning generalized polycategories in hopes that someday someone <em>will</em> take them further!)</p>",
        "id": 192591864,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1585774593
    },
    {
        "content": "<p>and for a while now ive had this mental itch about the idea of stuff like... say you work in Set, in classical foundations; then the world is maximally \"closed\" and \"extensional\"—a function's domain is part of its data, and it is defined on exactly that domain, and it has a specific value that it takes for each of the inputs in its domain, and there is no question of inquiring any other information—total contrast to, say, the idea in programming that a function consists of some kind of <em>logic</em> that gives rise to the outputs you get when you apply it</p>",
        "id": 192591969,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585774652
    },
    {
        "content": "<p>whereas if you deal directly in syntax, then the world is maximally \"open\" and \"intensional\"—a function really is its logic, and if you wanted to, you could plug in anything you like, change the rules of your logic or operational semantics (depending on what kind of thing you're doing) and use it in all kinds of ways that are accounted for by the <em>intension</em> of the term, but which are lost if you take its graph in the most basic kind of semantics</p>",
        "id": 192592212,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585774770
    },
    {
        "content": "<p>and, hrmmm,,,, i dunno, something about the notion of wanting to make your systems open so that they are compositional...</p>",
        "id": 192592698,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775019
    },
    {
        "content": "<p>I vaguely remember there's some good stuff about openness and compositionality in the introduction of Brendan Fong's thesis. (And also some pretty similar ideas in the introduction of my thesis, which came out the same year)</p>",
        "id": 192592895,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585775133
    },
    {
        "content": "<p>hm</p>",
        "id": 192593004,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775185
    },
    {
        "content": "<p>(The interesting bit of my thesis introduction got turned into a blog post, <a href=\"https://julesh.com/2017/04/22/on-compositionality/\" title=\"https://julesh.com/2017/04/22/on-compositionality/\">https://julesh.com/2017/04/22/on-compositionality/</a>)</p>",
        "id": 192593052,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585775224
    },
    {
        "content": "<p>haha i saw the definition you gave of compositionality at the beginning, almost tabbed back to start complaining that i didnt think it was quite the point, then realized that you were probably about to start making the same complaints <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 192593196,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775300
    },
    {
        "content": "<p>tbh id say that compositionality has a lot to do with homomorphisms</p>",
        "id": 192593412,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775431
    },
    {
        "content": "<p>Yes, a better definition is that behaviour is functorial, I wasn't thinking about that when I wrote it. But then you have problems with all the places that compositionality appears without having category theory around, which is most of them</p>",
        "id": 192593503,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585775481
    },
    {
        "content": "<p>heh</p>",
        "id": 192593621,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775545
    },
    {
        "content": "<p>I think this is enough for the compositionality ~ openness idea, maybe</p>",
        "id": 192593656,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585775569
    },
    {
        "content": "<p>anyway, like—one thing ive been harping on lately is the idea that a lot of semantic constructions in logic and/or PL are basically trying to keep enough intension around to be able to talk about properties that would naïvely get destroyed when passing to semantics, without having to have the burden of total intensionality</p>",
        "id": 192593935,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775728
    },
    {
        "content": "<p>Nice.</p>",
        "id": 192594052,
        "sender_full_name": "John Baez",
        "timestamp": 1585775791
    },
    {
        "content": "<p>(e.g., this thread <a href=\"https://twitter.com/sarah_zrf/status/1237496653520797697\" title=\"https://twitter.com/sarah_zrf/status/1237496653520797697\">https://twitter.com/sarah_zrf/status/1237496653520797697</a>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/sarah_zrf/status/1237496653520797697\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/511991354927218688/O7IOsWWj_normal.png\"></a><p>the point of domain theoretic semantics finally clicked for me the other day and i love it tbh</p><span>- depleted sarahzrf (@sarah_zrf)</span></div></div>",
        "id": 192594136,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585775854
    },
    {
        "content": "<p>oooookay i think ive started to figure out where i initially wanted to go with this <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 192594458,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192591864\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192591864\">said</a>:</p>\n<blockquote>\n<p>(I keep mentioning generalized polycategories in hopes that someday someone <em>will</em> take them further!)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>: maybe this is going off on a tangent, but do you have a picture for how a theory of generalised polycategories/etc. in a virtual double category framework would relate to operadic categories, which were also developed to describe similar sorts of structures?</p>",
        "id": 192594636,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585776161
    },
    {
        "content": "<p>so i brought this stuff up, and the game semantics thing, because one of the big themes in it is like... making something interact with stuff that isn't originally part of the universe it lives in, but which it can still deal with as long as you have enough of the intension left to know what it would mean in this new context</p>",
        "id": 192594691,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776196
    },
    {
        "content": "<p>example: you can define what PL people call System T (i think \"System T\" is something different to logicians though?), it's a simply-typed lambda calculus with natural numbers and functions and structural recursion over the natural numbers. it is total—every well-typed term you can write in it terminates.</p>",
        "id": 192594889,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776319
    },
    {
        "content": "<p>if i write a term in system T like <code>λ(f : nat → nat). f 3</code>, that's something that exists within system T, and which i can only apply to other system T terms, which are all computable (total, even)</p>",
        "id": 192595024,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776370
    },
    {
        "content": "<p>but you can give system T naïve set-theoretic semantics—interpret the type <code>nat</code> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, and each type <code>t_1 → t_2</code> as the set of functions between the interpretations</p>",
        "id": 192595082,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776421
    },
    {
        "content": "<p>and then you can interpret terms as giving rise to elements of the sets associated to their types</p>",
        "id": 192595139,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776472
    },
    {
        "content": "<p>so the term above, <code>λ(f : nat → nat). f 3</code>, gives rise to a whole function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mi mathvariant=\"double-struck\">N</mi></msup><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^{\\mathbb{N}} \\to \\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span></p>",
        "id": 192595216,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776513
    },
    {
        "content": "<p>and you can apply it to all kinds of things that can't be defined in system T</p>",
        "id": 192595243,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776533
    },
    {
        "content": "<p>well, i guess ive kinda contradicted myself with this example since i suggested earlier that naïve set-theoretic semantics is maximally closed and syntax is maximally open...</p>",
        "id": 192595440,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776638
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 192595446,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776645
    },
    {
        "content": "<p>uh, well. anyway.</p>",
        "id": 192595459,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776651
    },
    {
        "content": "<p>i think what i wanted to bring up / ask about was like... how this kind of phenomenon plays into open system stuff</p>",
        "id": 192595625,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776745
    },
    {
        "content": "<p>e.g., i'm looking at a petri net and thinking, \"sure you can compose this with other petri nets, but what if you want to have some external mechanism adding things?\"</p>",
        "id": 192595746,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776832
    },
    {
        "content": "<p>seems like openness opens the door to that question &amp; also opens the door for answers to it—what formalisms are there for that?</p>",
        "id": 192595854,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585776877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> reference?</p>",
        "id": 192595895,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1585776906
    },
    {
        "content": "<p>Yes, that's a fun question.  You could make up lots of other \"machines\" that can hook up to an open Petri net and feed in stuff or remove it.  You could try to create a kind of framework for describing all possible such machines, or at least a large class.</p>",
        "id": 192596251,
        "sender_full_name": "John Baez",
        "timestamp": 1585777102
    },
    {
        "content": "<p>I haven't tried that!</p>",
        "id": 192596266,
        "sender_full_name": "John Baez",
        "timestamp": 1585777117
    },
    {
        "content": "<p>I thought about a question that might be the same question, if you have an open system <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, what's a context/hole that you can plug the system into?</p>",
        "id": 192596325,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777161
    },
    {
        "content": "<p>You mean, what's the fully general kind of contexts that it can be plugged into?</p>",
        "id": 192596430,
        "sender_full_name": "John Baez",
        "timestamp": 1585777208
    },
    {
        "content": "<p>A generic but usually not adequate answer is: a pair consisting of a state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">I \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and a costate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>→</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">Y \\to I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span></p>",
        "id": 192596456,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>: <em>Operadic categories and Duoidal Deligne's conjecture</em> (<a href=\"https://arxiv.org/abs/1404.3886\" title=\"https://arxiv.org/abs/1404.3886\">https://arxiv.org/abs/1404.3886</a>) is the one I'm thinking of, but <em>Koszul duality in operadic categories</em> (<a href=\"https://arxiv.org/abs/1812.02935\" title=\"https://arxiv.org/abs/1812.02935\">https://arxiv.org/abs/1812.02935</a>) also goes into some detail</p>",
        "id": 192596460,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585777228
    },
    {
        "content": "<p>anyway i chewed on some similar stuff a little while ago</p>",
        "id": 192596568,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777292
    },
    {
        "content": "<p>to do with like</p>",
        "id": 192596574,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777296
    },
    {
        "content": "<p>gaps and plugging in and formal duality</p>",
        "id": 192596580,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777302
    },
    {
        "content": "<p>I might actually have an <em>axiomatic</em> answer to that question completely by accident, as a side effect of something I did with open games. Coming up with any interesting examples is a whole other thing though</p>",
        "id": 192596590,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777312
    },
    {
        "content": "<p>and i keep. having this nagging feeling. of analogy to möbius inversions.</p>",
        "id": 192596601,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> - okay, that's a pretty easy answer: or a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">A \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">Y \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.  We can compose these with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and get a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</p>",
        "id": 192596602,
        "sender_full_name": "John Baez",
        "timestamp": 1585777318
    },
    {
        "content": "<p>i feel kind of silly but i swear im not joking <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 192596657,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777334
    },
    {
        "content": "<p>But I thought you were looking for a much more cosmic answer, <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span>.   Like: we have an open system, which is a morphism in <em>some</em> category, but we want to know what morphisms in <em>other</em> categories we might meaningfully compose it with.  That's harder!</p>",
        "id": 192596682,
        "sender_full_name": "John Baez",
        "timestamp": 1585777362
    },
    {
        "content": "<p>errr, not the \"möbius inversion formula\" which google pulls up if you search \"möbius inversions\", i mean like a plane being turned inside out as a kind of möbius transformation</p>",
        "id": 192596711,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777378
    },
    {
        "content": "<p>anyway i bet the answer to the question is something to do with profunctors</p>",
        "id": 192596776,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777425
    },
    {
        "content": "<p>the most obvious case seems to be if you have a functor from open petri nets to some other category, like you gave an example of, and then you compose the image of a petri net w/ a morphism there</p>",
        "id": 192596879,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777474
    },
    {
        "content": "<p>but that's just a representable profunctor, im pretty sure</p>",
        "id": 192596884,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777482
    },
    {
        "content": "<p>or, uh, something</p>",
        "id": 192596907,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777498
    },
    {
        "content": "<p>I might be going off on a total tangent here. In <a href=\"https://arxiv.org/abs/1904.11287\" title=\"https://arxiv.org/abs/1904.11287\">https://arxiv.org/abs/1904.11287</a> I defined a thing called a \"monoidal category with contexts\". If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> is your category of systems, for objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X, Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> you have a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">F : X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> of contexts into which you can plug a morphism of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>. It wants to have type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi mathvariant=\"script\">C</mi><mo>×</mo><msup><mi mathvariant=\"script\">C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>→</mo><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">F : \\mathcal C \\times \\mathcal C^{op} \\to \\mathbf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">S</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">t</span></span></span></span></span></p>",
        "id": 192596913,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777502
    },
    {
        "content": "<p>Being a functor tells you how you can take a system and consider it part of the context of another system</p>",
        "id": 192596961,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777539
    },
    {
        "content": "<p>It's interaction with a monoidal product is less obvious, it's not just a monoidal profunctor, I work it out in that paper</p>",
        "id": 192597034,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777567
    },
    {
        "content": "<p>In any case, I haven't come up with any example outside of game theory. Maybe it's a useful definition, maybe not</p>",
        "id": 192597057,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777585
    },
    {
        "content": "<p>This sounds closer to the \"more cosmic\" version of the question you raised.</p>",
        "id": 192597061,
        "sender_full_name": "John Baez",
        "timestamp": 1585777589
    },
    {
        "content": "<p>someone read this and tell me the answer, please <a href=\"https://twitter.com/sarah_zrf/status/1230320321871450112\" title=\"https://twitter.com/sarah_zrf/status/1230320321871450112\">https://twitter.com/sarah_zrf/status/1230320321871450112</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/sarah_zrf/status/1230320321871450112\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/511991354927218688/O7IOsWWj_normal.png\"></a><p>something seems fishy about the profunctors that get used as the bodies of coends</p><span>- depleted sarahzrf (@sarah_zrf)</span></div></div>",
        "id": 192597072,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777598
    },
    {
        "content": "<p>Oh yeah, and I proved that if your category of systems is traced (which at least includes all the compact closed examples), defining the contexts for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> to be the morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">Y \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> satisfies the conditions I wrote</p>",
        "id": 192597260,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777714
    },
    {
        "content": "<p>ooooh this looks VERY similar in vibe to the kind of thing im talking about</p>",
        "id": 192597482,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777858
    },
    {
        "content": "<p>look at this too <a href=\"https://twitter.com/sarah_zrf/status/1230509512769011719\" title=\"https://twitter.com/sarah_zrf/status/1230509512769011719\">https://twitter.com/sarah_zrf/status/1230509512769011719</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/sarah_zrf/status/1230509512769011719\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/511991354927218688/O7IOsWWj_normal.png\"></a><p>picking this stuff up again:\n\nseems to me like, for Set-valued functors at least, coends would be more naturally phrased as being of things C × C^op → Set, because the thing on the \"left\" is the start of the gap and the thing on the \"right\" is the end of the gap <a href=\"https://t.co/fQvUvL1oQx\" title=\"https://t.co/fQvUvL1oQx\">https://twitter.com/sarah_zrf/status/1230320321871450112</a></p><span>- depleted sarahzrf (@sarah_zrf)</span></div></div>",
        "id": 192597488,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585777861
    },
    {
        "content": "<p>Cool! Let's talk about this.... but tomorrow, I need to go to sleep first</p>",
        "id": 192597596,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585777955
    },
    {
        "content": "<p>man they werent kidding when they said that the notion of \"inside\" and \"outside\" is actually really tricky, gg camille jordan @_@</p>",
        "id": 192597884,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585778173
    },
    {
        "content": "<p>It is really tricky indeed. But lately I'm finding the notion of input and output, or of \"boundary\" altogether, more problematic <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192599014,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585778966
    },
    {
        "content": "<p>So I guess something I really am wrestling with at the moment is that we are trying to develop tools to \"compose things together\" and to \"open systems\" that are very general, and often abstract over the underlying systems themselves</p>",
        "id": 192599346,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779202
    },
    {
        "content": "<p>At Statebox we needed a way to glue Petri nets with each other, and I tried different methods for a couple of years, and basically no method ended up doing what we really needed. Then I finally realized that, for our applications, ports were actually an hindrance and not a feature (!!!)</p>",
        "id": 192599474,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779291
    },
    {
        "content": "<p>._.</p>",
        "id": 192599490,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585779302
    },
    {
        "content": "<p>See it this way: A Petri net is not an open object per sé. It doesn't know anything about ways to merge and compose with other nets. That's a notion that you basically impose on it, but it doesn't come natural</p>",
        "id": 192599546,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779349
    },
    {
        "content": "<p>So in the end I realized that everything that I needed was taking coequalizers on the places and transitions of the net. So I was able to restate things in terms of functorial mappings between free SMCs and to classify the functors that gave me exactly the glue behavior I wanted</p>",
        "id": 192599651,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779427
    },
    {
        "content": "<p>But this has nothing to do with ports. You can definitely plug ports on top of this and impose the composition to follow these rules I was talking about above, but that's an arbitrary step which is \"extrinsic\"  from the net itself</p>",
        "id": 192599701,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779481
    },
    {
        "content": "<p>In other words, it's you that decide which places/transitions are open and which are closed. The net doesn't know anything about this and if you are able to merge places/transitions, you are able to merge all of them, not only the open ones.</p>",
        "id": 192599787,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779525
    },
    {
        "content": "<p>It's still quite difficult for me to explain clearly what I mean I guess... xD</p>",
        "id": 192599818,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779550
    },
    {
        "content": "<p>oh, i mean sure that's true</p>",
        "id": 192599848,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585779596
    },
    {
        "content": "<p>One thing you can do is just say \"The category of Petri nets has finite colimits, therefore we are able to glue them together\".</p>",
        "id": 192599853,
        "sender_full_name": "John Baez",
        "timestamp": 1585779600
    },
    {
        "content": "<p>That's more or less what I ended up doing. Precisely, I classfied the colimits that give me gluings that model asynchronous behavior (glue along places) and synchronous behavior (glue along transitions). What complicates things a bit is that not each colimit works. When you consider nets in \"context\" (that is, with a functor to a semantics attached to them), then things become a bit more complicated</p>",
        "id": 192600016,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779717
    },
    {
        "content": "<p>But the point is that when you then put ports on the net, and define the behavior in terms of such colimits, the behavior of the ports is less imposed and more organic. I guess this turns out to be similar, more or less, to what the structured cospans approach gives you</p>",
        "id": 192600099,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585779777
    },
    {
        "content": "<p>I don't understand \"synchronizing along transitions\" very well yet, alas.</p>",
        "id": 192600313,
        "sender_full_name": "John Baez",
        "timestamp": 1585779970
    },
    {
        "content": "<p>I'm sorta hoping <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> will think about those and enhance our open Petri net stuff to include those.  It's probably quite nice.</p>",
        "id": 192600353,
        "sender_full_name": "John Baez",
        "timestamp": 1585780015
    },
    {
        "content": "<p>So my interpretation of synchronizing along transition is the following (and it's weird): Imagine you have the following net:<br>\nO -&gt; | -&gt; O -&gt; | -&gt; O<br>\n(I hope my poor ascii drawing skills are understandable enough). Now I want to synchronize the two transitions. This intuitively means \"Each time the one on the left fires, the one on the right fires instantly after\". The synchronized net is then <br>\nO -&gt; | -&gt; O      O<br>\nThe place in the middle becomes detached from the main net because no token really stays there anymore, it gets immediately consumed after</p>",
        "id": 192600513,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780129
    },
    {
        "content": "<p>So basically this amounts to go back to the work of Montanari in 1990 and start thinking again about functors that are not \"transition-preserving\", that is, functors that map a transition of a net to a sequence of transition of another net. The transitions in the first net represent the synchronization of the transitions in the second.</p>",
        "id": 192600584,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780196
    },
    {
        "content": "<p>Filippo Bonchi, Pawel Sobocinski and others gave a port-based, observational-behavior version of this in some papers around 2013 I believe. But really allowing this more general class of functors just encompasses both place and transition gluings quite easily. But then you get \"too much stuff\", so it's a matter to classify the functors that actually correspond to place and transition gluings. Both can be characterized as equalizers of some other stuff, which would be a nightmare to define here</p>",
        "id": 192600752,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780312
    },
    {
        "content": "<p>But really, this idea of synchronization becomes clear imagining a \"message layer\" on top of the net, that is, you can attach little message wires between transitions that say things like \"this firing event happened\". This may be pointless from a chemistry point of view but it's extremely needed if you want to use petri nets in programming</p>",
        "id": 192600855,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780375
    },
    {
        "content": "<p>Hmm, your example is (as you warned me) a bit weird because it seems to involving \"breaking\" things, not just gluing them.</p>",
        "id": 192601174,
        "sender_full_name": "John Baez",
        "timestamp": 1585780567
    },
    {
        "content": "<p>In the end the real insight for me is that transitions gluings are synchronous events. You can just \"conflate\" multuple firings into one saying (this chain of firings happens instantly). On the countrary, place gluings are asynchronous: when you glue places you are conflating \"bags of resources\", but said resources do not have to be consumed instantly. This is also the main reason why gluing along places is more problematic wrt the reachability relation of the net, while transition-gluing is usually a bit friendlier</p>",
        "id": 192601201,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192601174\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192601174\">said</a>:</p>\n<blockquote>\n<p>Hmm, your example is (as you warned me) a bit weird because it seems to involving \"breaking\" things, not just gluing them.</p>\n</blockquote>\n<p>Indeed when you spell things out this gluing amounts to a double pushout rewrite in the category of free symmetric strict monoidal categories and functors between them, so there is definitely an \"erasing\" part going on</p>",
        "id": 192601252,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780662
    },
    {
        "content": "<p>You first introduce a new transition representing the synchronization of the two, and then erase the old ones. This seems absurd when you consider the net as is, but when you consider it along with a semantics it makes more sense, since this new transition is mapped exactly in the composition of the images of the two old generators in the semantics</p>",
        "id": 192601327,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780724
    },
    {
        "content": "<p>I guess this is related to what <span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> was saying. I always work with nets connected to some sort of semantics (usually types and functions in some programming language), so for me a transition always corresponds to \"doing a thing\" in this target category, and all the net operations I do need to preserve this assignment of meaning</p>",
        "id": 192601443,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780821
    },
    {
        "content": "<p>Anyway it's super late here and I'm going to sleep. All this stuff is explained in a new version of a paper I put on the arXiv some time ago. I wanted to submit it somewhere before updating the arXiv version but then the apocalypse happened, so I'm a bit confused wrt what to do <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 192601607,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585780977
    },
    {
        "content": "<p>You could submit it to the journal <em>Mathematical Structures in Computer Science</em>; they seem pretty good.   Or are all journals beneath contempt for computer scientists?</p>",
        "id": 192609397,
        "sender_full_name": "John Baez",
        "timestamp": 1585787940
    },
    {
        "content": "<p>yes</p>",
        "id": 192609493,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585788011
    },
    {
        "content": "<p>Okay.   There will also be a proceedings for ACT2020... but that conference is probably less prestigious than older ones.  Are the older ones too stodgy to switch to meeting online?</p>",
        "id": 192609638,
        "sender_full_name": "John Baez",
        "timestamp": 1585788193
    },
    {
        "content": "<p>i only posted that as a joke ;p</p>",
        "id": 192609659,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585788220
    },
    {
        "content": "<p>although now that i think about it, i feel like ive heard of there being a stereotype of cs people always going for conferences and not journals, so maybe it wasnt entirely wrong</p>",
        "id": 192609720,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585788254
    },
    {
        "content": "<p>Fabrizio must fit that stereotype at least a <em>little</em>, since he doesn't know what to do with a paper now that coronavirus has struck!  As a mathematician my reaction would be \"publish it, of course\" - the journals haven't shut down.</p>",
        "id": 192609860,
        "sender_full_name": "John Baez",
        "timestamp": 1585788383
    },
    {
        "content": "<p>afaik most conferences are proceeding just going virtual</p>",
        "id": 192609909,
        "sender_full_name": "Gershom",
        "timestamp": 1585788469
    },
    {
        "content": "<p>I'm not sure it's a stereotype rather than publishing in conferences being the de facto norm for CS</p>",
        "id": 192610101,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585788651
    },
    {
        "content": "<p>for whatever reason, there's a culture of conference publications in CS</p>",
        "id": 192610114,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585788674
    },
    {
        "content": "<p>oh oops</p>",
        "id": 192610116,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585788675
    },
    {
        "content": "<p>Stereotypes can be true.</p>",
        "id": 192610137,
        "sender_full_name": "John Baez",
        "timestamp": 1585788713
    },
    {
        "content": "<p>what's a presheaf on petri nets like?</p>",
        "id": 192610800,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585789392
    },
    {
        "content": "<p>i'm imagining, like...</p>",
        "id": 192610879,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585789455
    },
    {
        "content": "<p>a presheaf on petri nets should correspond to a \"type of object that can act as a sink for tokens\"</p>",
        "id": 192610926,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585789523
    },
    {
        "content": "<p>actually no, not just a sink i guess, but something that \"drives the output end\"</p>",
        "id": 192611002,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585789598
    },
    {
        "content": "<p>yoneda-embedding a set S of places gives you the presheaf where the type of object is \"petri nets with output places S\"</p>",
        "id": 192611034,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585789662
    },
    {
        "content": "<p>hmm, presheaves have <del>always</del> for a while felt rather coinductive to me</p>",
        "id": 192612817,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585792061
    },
    {
        "content": "<p>I've thought a bit about this question of into which contexts can I plug an open Petri net or other open gizmo. It is definitely the case that for a closed Petri net, you get to decide which places to think of as 'inputs' or 'outputs' and so you have a lot of freedom if you start with a closed Petri net or two and ask if you can 'open' them in a way that they can be composed. Similarly, in hypergraph categories, or whenever you can duplicate input/outputs, the interfaces seem to lack a little luster, as you can just copy (or delete?) things as needed to get interfaces to match up. </p>\n<p>I guess I was more of coming from the perspective of given some 'typed' hole with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X, Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> as interfaces, I'd like to 'query' my Petri net library for something to stick in there, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> Hom(X,Y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> in these setups is 'big.' You can add some conditions on the legs of your cospans, but it is a bit unsatisfying.  I'm not sure if it was a motivation, but I gather it is related to the stuff Pawel's group was doing at ACT Leiden with bicategories for open systems and later, the stuff David and Brendan were doing with po-categories where you have some posetal structure on the morphisms, and you can just ask for one of the best ones, whichever end that is for you.</p>",
        "id": 192615463,
        "sender_full_name": "Blake Pollard",
        "timestamp": 1585795813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276438\">@Fabrizio Genovese</span> I like this idea about working with free symmetric monoidal categories to do gluings rather than pushouts. Symmetric monoidal categories are what Petri nets are <em>really</em> trying to get at in some sense so you can make things work better by just working with what you're morally describing.</p>",
        "id": 192616503,
        "sender_full_name": "Jade Master",
        "timestamp": 1585797412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> I bet presheafs on Petri nets are probably pretty cool. <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> wrote this blog post about the depleted version of presheaves on Petri nets: <a href=\"https://johncarlosbaez.wordpress.com/2019/10/06/quantales-from-petri-nets/\" title=\"https://johncarlosbaez.wordpress.com/2019/10/06/quantales-from-petri-nets/\">https://johncarlosbaez.wordpress.com/2019/10/06/quantales-from-petri-nets/</a></p>",
        "id": 192616575,
        "sender_full_name": "Jade Master",
        "timestamp": 1585797507
    },
    {
        "content": "<p>In this post the depleted presheafs on the free category on a Petri net is a downset. It is a set of markings which is closed under reachability.</p>",
        "id": 192616683,
        "sender_full_name": "Jade Master",
        "timestamp": 1585797662
    },
    {
        "content": "<p>I assume that \"presheaf on the free category of a petri net\" is what you meant by \"presheaf on a petri net\"</p>",
        "id": 192616766,
        "sender_full_name": "Jade Master",
        "timestamp": 1585797795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> The R-action is more general but the way I was thinking about it was probably too ambitious. Being able to glue R-actions together like this would mean being able to do things like combine two \"2-body problems\" together to a get a \"3-body problem\". This is a lot to ask for because the dynamics of the 3-body problem is much more complicated than the 2-body problems.</p>",
        "id": 192616941,
        "sender_full_name": "Jade Master",
        "timestamp": 1585798062
    },
    {
        "content": "<p>When I naively tried to go ahead and make structured cospans of dynamical systems, I ran into an issue.</p>",
        "id": 192616995,
        "sender_full_name": "Jade Master",
        "timestamp": 1585798111
    },
    {
        "content": "<p>ahhh actually i meant presheaves on the category of open petri nets john talked about in this talk</p>",
        "id": 192617077,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798224
    },
    {
        "content": "<p>To compose two open dynamical systems you need a span from the output of the first system to the input of the second system. To compose them you want to take their pushout. Finding such a span in Dynam to take a pushout over seems very/rare difficult. It would mean finding a dynamical system which simulates the behavior of both the left and right open system. If you could find something like this you would be good but I don't think that is possible.</p>",
        "id": 192617176,
        "sender_full_name": "Jade Master",
        "timestamp": 1585798355
    },
    {
        "content": "<p>Oh okay Sarah</p>",
        "id": 192617183,
        "sender_full_name": "Jade Master",
        "timestamp": 1585798379
    },
    {
        "content": "<p>like... say we have some notion of \"device that can be hooked up to a petri net's output places to drive them\"</p>",
        "id": 192617205,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798419
    },
    {
        "content": "<p>then this defines a presheaf—</p>",
        "id": 192617212,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798426
    },
    {
        "content": "<p>F(S) for a place set S is the set of devices that can be hooked up to the set of output places S</p>",
        "id": 192617268,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798462
    },
    {
        "content": "<p>Right. There's a lot of them. Let me just watch that part real quick <span aria-label=\"nervous\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"nervous\">:nervous:</span></p>",
        "id": 192617287,
        "sender_full_name": "Jade Master",
        "timestamp": 1585798498
    },
    {
        "content": "<p>&amp; then we can hook up a petri net with output places S to such a thing to get the action on morphisms</p>",
        "id": 192617292,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798504
    },
    {
        "content": "<p>say the elements of F(∅) can be seen as fully-autonomously-functioning systems</p>",
        "id": 192617388,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> i mean a category of structured cospans whose morphisms are petri nets</p>",
        "id": 192617408,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798633
    },
    {
        "content": "<p>im not too picky beyond that</p>",
        "id": 192617411,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585798636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>  In 1986 I had several long discussions with Stephen Wolfram who commented that unifying physics could require the underlying mathematics to be unified. I was working on extending tetration to the complex numbers. Wolfram was interested in generalizing my work to fractionally iterated dynamics. [BPIF.pdf] I'm writing up my research that deals with a combinatorial analysis of smooth iterated functions.  (<a href=\"user_uploads/21317/NXh9pqM9V6ykkx-TelXJ-OYM/BPIF.pdf\" title=\"user_uploads/21317/NXh9pqM9V6ykkx-TelXJ-OYM/BPIF.pdf\">https://categorytheory.zulipchat.com/user_uploads/21317/NXh9pqM9V6ykkx-TelXJ-OYM/BPIF.pdf</a>)</p>",
        "id": 192620064,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1585802146
    },
    {
        "content": "<p>Hm interesting. What connection do you think this has with dynamical systems?</p>",
        "id": 192620453,
        "sender_full_name": "Jade Master",
        "timestamp": 1585802643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>  I have a very general extension of iterated functions, more general than dynamical systems in physics. I'm using combinatorics to express the Taylor series of a general dynamical system.</p>",
        "id": 192620780,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1585803067
    },
    {
        "content": "<p>Oh. I see how discrete dynamical systems are iterated functions but I'm not sure how continuous ones would be.</p>",
        "id": 192620865,
        "sender_full_name": "Jade Master",
        "timestamp": 1585803211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>  Yes, that is my unique research. Given a map and add a symmetry results in a flow. I'm claiming all maps are also flows, except for superattracting fixed points. Consider how extending tetration to the complex numbers raised the same sort of issues as going from discrete dynamics to continuous dynamics.</p>",
        "id": 192621015,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1585803434
    },
    {
        "content": "<p>I'm afraid this is far from my expertise.</p>",
        "id": 192622731,
        "sender_full_name": "Jade Master",
        "timestamp": 1585805829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192609397\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192609397\">said</a>:</p>\n<blockquote>\n<p>You could submit it to the journal <em>Mathematical Structures in Computer Science</em>; they seem pretty good.   Or are all journals beneath contempt for computer scientists?</p>\n</blockquote>\n<p>Do you remember that tweet of mine when I said that I was appalled by the latex class the journal used, that wasted 4 hours of my time with no success whatsoever? Well... <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192645718,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585822897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192617268\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192617268\">said</a>:</p>\n<blockquote>\n<p>F(S) for a place set S is the set of devices that can be hooked up to the set of output places S</p>\n</blockquote>\n<p>In my experience, the difficult part of using (pre)sheaves is not defining what they do on objects, that's usually intuitive. But what they do on morphisms. They need to be functors after all, and in many context the intepretation saying \"I attach to this thing the set of things that...\" doesn't have a clear interpretation in terms of what functions between these sets should do, and how they are related with the underlying topology.</p>",
        "id": 192645986,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585823105
    },
    {
        "content": "<p>I'm working with <span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci</span> on stuff that can be extended to sheaves of petri nets,  but the focus is the opposite. It's much more fun to have petri nets as the codomain of your presheaf. This represents something akin to \"attaching a computation device to this point in space\". This is also a context where you really need open nets to make sense of how morphisms in the underlying topology are transported to the net layer.</p>",
        "id": 192646164,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585823223
    },
    {
        "content": "<p>We're going a bit slow with this lately, we'll probably open a topic in <a class=\"stream\" data-stream-id=\"229156\" href=\"/#narrow/stream/229156-applied-category-theory\">#applied category theory</a> about this</p>",
        "id": 192646207,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585823263
    },
    {
        "content": "<p>well yes, note that i said \"can be hooked up\", and then added</p>",
        "id": 192675438,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585838753
    },
    {
        "content": "<blockquote>\n<p>&amp; then we can hook up a petri net with output places S to such a thing to get the action on morphisms</p>\n</blockquote>",
        "id": 192675451,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585838760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192645718\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192645718\">said</a>:</p>\n<blockquote>\n<p>Do you remember that tweet of mine when I said that I was appalled by the latex class the journal used, that wasted 4 hours of my time with no success whatsoever? Well... :)</p>\n</blockquote>\n<p>No, I don't remember that.  When <span class=\"user-mention\" data-user-id=\"275914\">@Joe Moeller</span> published there he found out that the latex class used by the journal doesn't work; I  believe he emailed an editor and found out that you shouldn't bother trying to use it.  </p>\n<p>I can't even remember how I dealt with this issue when <em>I</em> published in this journal... but whatever I did, it apparently wasn't painful enough for me to remember it!</p>\n<p>The University of California has a deal with this journal that lets us publish papers there open-access for free.  That's worth something.</p>",
        "id": 192690307,
        "sender_full_name": "John Baez",
        "timestamp": 1585844134
    },
    {
        "content": "<p>Yes, I wrestled with the MSCS class for a bit, but then I told the editor I was having problems and he said to just send it as is, and they took care of it. So I didn't end up having to do anything.</p>",
        "id": 192691337,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585844544
    },
    {
        "content": "<p>Also yes, UC and CUP have a deal so UC authors get open access fees covered. As far as I can tell, I was the second paper published open access in MSCS at all!<br>\n<a href=\"https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/open-access\" title=\"https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/open-access\">https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/open-access</a></p>",
        "id": 192691662,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1585844685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275914\">Joe Moeller</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192691662\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192691662\">said</a>:</p>\n<blockquote>\n<p>Also yes, UC and CUP have a deal so UC authors get open access fees covered. As far as I can tell, I was the second paper published open access in MSCS at all!<br>\n<a href=\"https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/open-access\" title=\"https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/open-access\">https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/open-access</a></p>\n</blockquote>\n<p>Then I'll probably mail them and do the same! Thanks!</p>",
        "id": 192692624,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585845082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192616941\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192616941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276589\">Sophie Libkind</span> The R-action is more general but the way I was thinking about it was probably too ambitious. Being able to glue R-actions together like this would mean being able to do things like combine two \"2-body problems\" together to a get a \"3-body problem\". This is a lot to ask for because the dynamics of the 3-body problem is much more complicated than the 2-body problems.</p>\n</blockquote>\n<p>This reminds me of something I've been running up against. If I only know the behaviors of two systems, then if I try to compose them by identifying part of their state spaces then I really don't know what the total system is doing; the interaction could completely change the behavior of the individual systems! On the other hand, if I know something about the mechanism of why the behaviors arise (say I have a vector field on the state space), then if I compose dynamical systems I can \"add\" the effects of the two systems on the shared states.</p>",
        "id": 192745915,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585874047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192617176\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192617176\">said</a>:</p>\n<blockquote>\n<p>To compose two open dynamical systems you need a span from the output of the first system to the input of the second system. To compose them you want to take their pushout. Finding such a span in Dynam to take a pushout over seems very/rare difficult. It would mean finding a dynamical system which simulates the behavior of both the left and right open system. If you could find something like this you would be good but I don't think that is possible.</p>\n</blockquote>\n<p>What are you taking to be Dynam here?</p>",
        "id": 192745975,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585874113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> wrote:</p>\n<blockquote>\n<p>This reminds me of something I've been running up against. If I only know the behaviors of two systems, then if I try to compose them by identifying part of their state spaces then I really don't know what the total system is doing; the interaction could completely change the behavior of the individual systems! </p>\n</blockquote>\n<p>So you're trying to compose systems by, for starters, doing a pushout of their state spaces?   It's interesting that in physics people never try to compose systems this way (as far as I know).   They typically use a pullback.  So I have almost no intuition for how I'd do a pushout... or under what circumstances I'd want to.   Do you have examples in mind?</p>\n<p>In a sense, the formalisms of classical mechanics (the Hamiltonian and Lagrangian formalisms) can be seen as providing rules for making it pretty easy to compose physical systems.  But these rules are largely left informal.   In my work with Adam Yassine and David Weisbart we are trying to formalize these.</p>",
        "id": 192753781,
        "sender_full_name": "John Baez",
        "timestamp": 1585883772
    },
    {
        "content": "<p>i wonder if there's a miscommunication here somewhere? like</p>",
        "id": 192753900,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585883951
    },
    {
        "content": "<p>often state spaces arise from contravariant constructions such as homming from some sort of base object into a fixed codomain, so you might do a pushout on that base object and that corresponds to a pullback of the state spaces or something</p>",
        "id": 192753960,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585884005
    },
    {
        "content": "<p>e.g., you're doing pushouts of petri nets, but i imagine the spaces of markings are getting pullback'd</p>",
        "id": 192753975,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585884028
    },
    {
        "content": "<p>or, say, dont you get quantum state spaces from classicl ones in a way like this?</p>",
        "id": 192754017,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585884111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> I am thinking of pullbacks (as in the Dynam category you define in the Rx network paper)! I am interested in where else we might find this kind of construction</p>",
        "id": 192754157,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585884244
    },
    {
        "content": "<p>And also how to think about composition in this \"sharing reasources/states\" way vs. an input/output approach</p>",
        "id": 192754199,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585884308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192753960\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192753960\">said</a>:</p>\n<blockquote>\n<p>often state spaces arise from contravariant constructions such as homming from some sort of base object into a fixed codomain, so you might do a pushout on that base object and that corresponds to a pullback of the state spaces or something</p>\n</blockquote>\n<p>Yes! Perhaps that was the miscommunication since I'm often thinking of state spaces are euclidean spaces induced by Finset</p>",
        "id": 192754272,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585884393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span>  - okay; when you write:</p>\n<blockquote>\n<p>if I try to compose them by identifying part of their state spaces then I really don't know what the total system is doing</p>\n</blockquote>\n<p>that sounds like a pushout.   To do a pushout of spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X,Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> we take their disjoint union <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X+Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and then identify some points of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with some points of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.   To do a pullback we take the product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and then take a subspace of that.</p>",
        "id": 192754366,
        "sender_full_name": "John Baez",
        "timestamp": 1585884565
    },
    {
        "content": "<p>I was imagining that if  I have state spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> which are identified along <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> via <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>M</mi><mo>←</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to M \\leftarrow Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, then the total system is the pullback <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><msub><mo>×</mo><mi>M</mi></msub><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times_M Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">×</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>",
        "id": 192754471,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585884686
    },
    {
        "content": "<p>Another way of saying my previous comment is if I have a vector field on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> (Riemannian spaces) individually then I can pullback the vector field on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> to a vector field on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><msub><mo>×</mo><mi>M</mi></msub><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times_M Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">×</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> by \"adding along <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>\". However if I only have behaviors on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> then it is not clear how to pullback the behaviors to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><msub><mo>×</mo><mi>M</mi></msub><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times_M Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">×</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.</p>",
        "id": 192755012,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585885325
    },
    {
        "content": "<p>Okay, so we're doing pullbacks, not \"identifying parts of state spaces\".   Then yes, I agree this is a fun thing to think about.  It would be cool if one could prove there's <em>no good solution to this problem</em> unless one uses some of the tricks physicists use - namely, to not consider all dynamical systems, but only certain specially nice ones.</p>",
        "id": 192755233,
        "sender_full_name": "John Baez",
        "timestamp": 1585885657
    },
    {
        "content": "<p>i still think \"identifying parts\" is going on, it's just not that the <em>state spaces</em> are what are having parts identified</p>",
        "id": 192755296,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585885721
    },
    {
        "content": "<p>is there a good name for the thing that gets turned into a state space thru a contravariant construction?</p>",
        "id": 192755309,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585885752
    },
    {
        "content": "<p>\"object space\", maybe?</p>",
        "id": 192755316,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585885764
    },
    {
        "content": "<p>perhaps that's biased toward the classical mech case</p>",
        "id": 192755331,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585885779
    },
    {
        "content": "<p>I like classical mechanics.  So yes, if you take two gizmos made of rocks and springs and identify a rock in one with a rock in another, we need to do a pullback of their state spaces to get the new state space.</p>",
        "id": 192755443,
        "sender_full_name": "John Baez",
        "timestamp": 1585885890
    },
    {
        "content": "<p>I guess it's because the state space of a finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of points sitting in a space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mi>S</mi></msup></mrow><annotation encoding=\"application/x-tex\">M^S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span></span></span></span>, which is contravariant in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 192755504,
        "sender_full_name": "John Baez",
        "timestamp": 1585885967
    },
    {
        "content": "<p>I don't know much about classical mechanics, but can you give an example or idea of a rule that makes physical systems easy to compose?</p>",
        "id": 192755515,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585885979
    },
    {
        "content": "<p>that's what i said, john :p</p>",
        "id": 192755543,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585886034
    },
    {
        "content": "<p>Well, one rule is \"add the Hamiltonians and then add in some interaction terms to get the Hamiltonian of the composite system\".   I</p>",
        "id": 192755546,
        "sender_full_name": "John Baez",
        "timestamp": 1585886038
    },
    {
        "content": "<p>I know it's what you said, Sarah.</p>",
        "id": 192755588,
        "sender_full_name": "John Baez",
        "timestamp": 1585886050
    },
    {
        "content": "<p>I do this thing where if I don't completely understand what someone said at first, I try to say it in a way I understand.</p>",
        "id": 192755630,
        "sender_full_name": "John Baez",
        "timestamp": 1585886135
    },
    {
        "content": "<p>In these systems is it typically a vector field that's driving the dynamics?</p>",
        "id": 192755639,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585886142
    },
    {
        "content": "<p>yeah ok i live in a glass house here</p>",
        "id": 192755688,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585886172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span>  classical mechanics the dynamics is given by a vector field, but the vector field is in turn determined by a function on the state space, the \"Hamiltonian\".</p>\n<p>And then there's another approach, the \"Lagrangian\" approach, which works a bit differently, but similar.</p>",
        "id": 192755969,
        "sender_full_name": "John Baez",
        "timestamp": 1585886610
    },
    {
        "content": "<p>Oh interesting! I would like to learn more about this. Do you have a recommendation for where to start?</p>",
        "id": 192756042,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585886709
    },
    {
        "content": "<p>I've also been wondering about circuits. From what I can tell many of the equations like Kirchoff's and Ohm's laws govern the behavior of the circuit, but don't explicitly give how the dynamics flow in the way that a vector field would. Do you know if there more explicit ways of describing a circuit?</p>",
        "id": 192756168,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585886863
    },
    {
        "content": "<p>interesting</p>",
        "id": 192756242,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585886963
    },
    {
        "content": "<p>i think one of the things about circuits is that youve squished your system down to being largely 1-dimensional, so you dont need vector fields as much</p>",
        "id": 192756250,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585886987
    },
    {
        "content": "<p>...is the comforting lie i believe as someone who has never had to do enough electronics to deal with the realities of EM phenomena <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 192756309,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887017
    },
    {
        "content": "<p>but if you idealize your circuit as really lying within 1-dimensional wires, you can largely make do with scalars if you squint</p>",
        "id": 192756344,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887080
    },
    {
        "content": "<p>uh, i guess that's not quite what you asked, i'll stop since this is far from my specialty <span aria-label=\"zip it\" class=\"emoji emoji-1f910\" role=\"img\" title=\"zip it\">:zip_it:</span></p>",
        "id": 192756362,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887119
    },
    {
        "content": "<p>I guess I am imagining that if you have say a NOT gate at a steady state. Then you flip the input. The current and voltage must flow to a new steady state and I am wondering what governs the dynamics of that flowing</p>",
        "id": 192756407,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585887141
    },
    {
        "content": "<p>This is certainly not my specialty either :)</p>",
        "id": 192756418,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585887159
    },
    {
        "content": "<p>i mean, you <em>can</em> use ohm and kirchoff along with some other ones to get diffeqs to solve for continuous dynamics of a circuit involving, say, capacitors</p>",
        "id": 192756446,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887200
    },
    {
        "content": "<p>but you're asking about if there's formulations of that which make the dynamic quality more evident, right?</p>",
        "id": 192756449,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887216
    },
    {
        "content": "<p>Well, the state space of a circuit with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> wires is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mn>2</mn><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{2n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 192756698,
        "sender_full_name": "John Baez",
        "timestamp": 1585887505
    },
    {
        "content": "<p>sure, that's 2n scalars ;)</p>",
        "id": 192756840,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887719
    },
    {
        "content": "<p>But dynamics for the circuit is given by a vector field on <span class=\"tex-error\">$$\\mathbb{R]^{2n}$$</span></p>",
        "id": 192756888,
        "sender_full_name": "John Baez",
        "timestamp": 1585887750
    },
    {
        "content": "<p>actually, here's a question</p>",
        "id": 192756906,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887782
    },
    {
        "content": "<p>when i was mucking around with kirchoff's laws a bit a while back, i was thinking there seemed to be some arbitrary choices of orientation involved in order to make current direction a signed quantity</p>",
        "id": 192756924,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887825
    },
    {
        "content": "<p>seemed more natural to regard stuff like that as an abstract vector space associated to the wire, or something</p>",
        "id": 192756968,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887845
    },
    {
        "content": "<p>is there a nice formalism for that kind of thing in the context of stuff like kirchoff's current law?</p>",
        "id": 192756973,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585887867
    },
    {
        "content": "<p>Yes.</p>",
        "id": 192757014,
        "sender_full_name": "John Baez",
        "timestamp": 1585887958
    },
    {
        "content": "<p>There's a huge pile of stuff about electrical circuits from a categorical point of view here:</p>\n<ul>\n<li>John Baez and Brendan Fong, <a href=\"http://math.ucr.edu/home/baez/circuits.pdf\" title=\"http://math.ucr.edu/home/baez/circuits.pdf\">A compositional framework for passive linear networks</a>.</li>\n</ul>",
        "id": 192757092,
        "sender_full_name": "John Baez",
        "timestamp": 1585888021
    },
    {
        "content": "<p>It's probably rather tiring to read it all, but it's full of fun stuff.</p>",
        "id": 192757104,
        "sender_full_name": "John Baez",
        "timestamp": 1585888065
    },
    {
        "content": "<p>I've read some of it and certainly had a lot of fun!</p>",
        "id": 192757134,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585888082
    },
    {
        "content": "<p>54 pages <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 192757199,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585888196
    },
    {
        "content": "<p>As far as I can tell it takes behavioral perspective, and I think this prevents me from doing the pullback to compose systems that I can do with physical systems</p>",
        "id": 192757201,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585888198
    },
    {
        "content": "<p>Is there some analogous hamiltonian or lagrangian formalism for circuits?</p>",
        "id": 192757257,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1585888255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192755309\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192755309\">said</a>:</p>\n<blockquote>\n<p>is there a good name for the thing that gets turned into a state space thru a contravariant construction?</p>\n</blockquote>\n<p>Maybe ‘effect’.</p>",
        "id": 192758609,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585890201
    },
    {
        "content": "<p>heuh</p>",
        "id": 192759054,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585890762
    },
    {
        "content": "<p>not sure i see it—what example do you have in mind?</p>",
        "id": 192759075,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585890801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192755233\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192755233\">said</a>:</p>\n<blockquote>\n<p>Okay, so we're doing pullbacks, not \"identifying parts of state spaces\".   Then yes, I agree this is a fun thing to think about.  It would be cool if one could prove there's <em>no good solution to this problem</em> unless one uses some of the tricks physicists use - namely, to not consider all dynamical systems, but only certain specially nice ones.</p>\n</blockquote>\n<p>I am curious about such tricks. Is it about dynamical systems that are nice individually, or is it about two systems relating nicely, like a transversality condition or something?</p>",
        "id": 192759226,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585890963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192759075\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192759075\">said</a>:</p>\n<blockquote>\n<p>not sure i see it—what example do you have in mind?</p>\n</blockquote>\n<p>I was thinking of quantum mechanics where ‘kets’ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>ϕ</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|\\phi\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">ϕ</span><span class=\"mclose\">⟩</span></span></span></span> are states and ‘bras’ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>ψ</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\langle \\psi|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mord\">∣</span></span></span></span> are effects.<br>\nBut thinking a bit more about it, I think it was a bad answer and a misguided analogy, as this takes place inside the state space, without answering the question what it is the state space of.</p>",
        "id": 192760327,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585892479
    },
    {
        "content": "<p>yeah, in QM the relevant thing would be the space of classical states i believe</p>",
        "id": 192760502,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585892755
    },
    {
        "content": "<p>well, configurations, perhaps, not states?</p>",
        "id": 192760554,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585892785
    },
    {
        "content": "<p>For circuits made of capacitors and inductors there's an equivalent Hamiltonian and Lagrangian formalism, since capacitors are analogous to \"mass\" in classical mechanics and inductors are analogous to \"springs\".  But resistors are analogous to \"friction\", and systems with friction don't have a good Hamiltonian formalism.</p>",
        "id": 192762060,
        "sender_full_name": "John Baez",
        "timestamp": 1585894832
    },
    {
        "content": "<p>But our framework for circuits does have a lot of pullbacks lurking in it.  Admittedly, we emphasize the pushouts - that's how you compose decorated cospans.  But if you prefer pullbacks, just work in the opposite categories!  They're actually fairly natural in here.</p>",
        "id": 192762257,
        "sender_full_name": "John Baez",
        "timestamp": 1585895140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192762060\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192762060\">said</a>:</p>\n<blockquote>\n<p>For circuits made of capacitors and inductors there's an equivalent Hamiltonian and Lagrangian formalism, since capacitors are analogous to \"mass\" in classical mechanics and inductors are analogous to \"springs\".  But resistors are analogous to \"friction\", and systems with friction don't have a good Hamiltonian formalism.</p>\n</blockquote>\n<p>I don't really know what I'm saying, but could Poisson geometry be of any use?</p>",
        "id": 192769997,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1585901517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192762060\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192762060\">said</a>:</p>\n<blockquote>\n<p>For circuits made of capacitors and inductors there's an equivalent Hamiltonian and Lagrangian formalism, since capacitors are analogous to \"mass\" in classical mechanics and inductors are analogous to \"springs\".  But resistors are analogous to \"friction\", and systems with friction don't have a good Hamiltonian formalism.</p>\n</blockquote>\n<p>This surprises me a bit: I've always considered capacitors and inductors as sort of duals of each other. Especially considering that in AC regime capacitors shift frequencies 90 degrees forward and inductors 90 degrees backwards (or it was the opposite, I can't recall). I can understand more or less the intuitive idea of capacitors = mass, but inductors = springs doesn't really click for me. Also, I've always drawn relationships between circuits and hydrodynamics: difference of potential is difference of potential energy  (how high your water tank is), resistance is friction, intensity is flow, a capacitor is like a dam, etc etc etc. Is the spring interpretation of indcutors related to this as well?</p>",
        "id": 192781933,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585908161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> I was talking about the category of dynamical systems I talked about in this blog post: <a href=\"https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/\" title=\"https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/\">https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/</a><br>\nIt is the category where objects are actions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> on a diffeological space (a generalization of manifold which has better categorical properties, In particular, they have internal hom's and are self-enriched).  Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">D</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">f</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Diff}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">D</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span></span></span></span></span> be the category of diffeological spaces.  Then it turns out that an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> action on a manifold is the same as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">D</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">f</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Diff}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">D</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span></span></span></span></span>-enriched functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">D</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">f</mi></mrow></mrow><annotation encoding=\"application/x-tex\"> \\mathbb{R} \\to \\mathsf{Diff}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">D</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> is regarded as a one object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">D</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">f</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Diff}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">D</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span></span></span></span></span>-category.</p>",
        "id": 192847166,
        "sender_full_name": "Jade Master",
        "timestamp": 1585939114
    },
    {
        "content": "<p>Then morphisms will be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">D</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">f</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Diff}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">D</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span></span></span></span></span>-enriched natural transformations. It turns out that this is the same thing as an equivariant map.</p>",
        "id": 192847248,
        "sender_full_name": "Jade Master",
        "timestamp": 1585939170
    },
    {
        "content": "<p>It's true. When I was thinking about pushouts of these sort of dynamical systems I was trying to compose behaviors rather than sources of those behaviors. There's no natural way to do that like \"adding vector fields\". That's why I didn't get very far.</p>",
        "id": 192847503,
        "sender_full_name": "Jade Master",
        "timestamp": 1585939284
    },
    {
        "content": "<p>It seems like you ran into the same problem when trying to do the same thing but with pullbacks instead of pushouts.</p>",
        "id": 192847685,
        "sender_full_name": "Jade Master",
        "timestamp": 1585939365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276867\">@Daniel Geisler</span> might be interested in the category I wrote about in this blog post. It seems closer to the category of dynamical systems that they are looking for maybe.</p>",
        "id": 192847942,
        "sender_full_name": "Jade Master",
        "timestamp": 1585939501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192769997\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192769997\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192762060\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192762060\">said</a>:</p>\n<blockquote>\n<p>For circuits made of capacitors and inductors there's an equivalent Hamiltonian and Lagrangian formalism, since capacitors are analogous to \"mass\" in classical mechanics and inductors are analogous to \"springs\".  But resistors are analogous to \"friction\", and systems with friction don't have a good Hamiltonian formalism.</p>\n</blockquote>\n<p>I don't really know what I'm saying, but could Poisson geometry be of any use?</p>\n</blockquote>\n<p>Hamiltonian mechanics has the law of conservation of energy built in, so it's not good for handling friction (unless you want to keep track of the position of every molecule, where it becomes clear that friction is just transferring energy to molecular motion).    Symplectic geometry and more generally Poisson geometry are forms of geometry designed for Hamiltonian physics.  So they are not good for handling friction.  </p>\n<p>Attempts to handle friction in a nice geometrical way include the <a href=\"https://en.wikipedia.org/wiki/GENERIC_formalism\" title=\"https://en.wikipedia.org/wiki/GENERIC_formalism\">GENERIC formalism</a>, where you have a manifold equipped with both a Poisson structure and a Riemannian metric, and dynamics is described using two functions: a Hamiltonian (describing the energy) and an entropy function.</p>\n<p>I keep meaning to study this more.</p>",
        "id": 192849232,
        "sender_full_name": "John Baez",
        "timestamp": 1585940152
    },
    {
        "content": "<p>John wrote:</p>\n<blockquote>\n<p>For circuits made of capacitors and inductors there's an equivalent Hamiltonian and Lagrangian formalism, since capacitors are analogous to \"mass\" in classical mechanics and inductors are analogous to \"springs\".  But resistors are analogous to \"friction\", and systems with friction don't have a good Hamiltonian formalism.</p>\n</blockquote>\n<p>Fabrizio wrote:</p>\n<blockquote>\n<p>I can understand more or less the intuitive idea of capacitors = mass, but inductors = springs doesn't really click for me.</p>\n</blockquote>\n<p>Good, because I got it backwards!   Capacitors are like springs: the electrons bunch up against the capacitor and push back.  Inductors are like mass: a current creates a magnetic field that creates an electric field that pushes the electrons along, giving the current \"inertia\".    And resistors are like friction.  You can see this from the equation describing the position <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span> of a mass <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> attached to a spring with a spring constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> experiencing friction with damping constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span>, which is</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mover accent=\"true\"><mi>q</mi><mo>¨</mo></mover><mo>+</mo><mi>r</mi><mover accent=\"true\"><mi>q</mi><mo>˙</mo></mover><mo>+</mo><mi>k</mi><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> m \\ddot{q} + r \\dot{q} + k q = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8623000000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">¨</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8623000000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.055550000000000016em;\"><span class=\"mord\">˙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> </p>\n<p>This is just like the equation describing the current <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">I(t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span> on a loop of wire containing an inductor of inductance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span>, a resistor of resistance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and a capacitor of capacitance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mover accent=\"true\"><mi>Q</mi><mo>¨</mo></mover><mo>+</mo><mi>R</mi><mover accent=\"true\"><mi>Q</mi><mo>˙</mo></mover><mo>+</mo><msup><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>Q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> L \\ddot Q + R \\dot Q + C^{-1} Q = 0 </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.11463em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9201900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\">Q</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">¨</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.11463em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9201900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\">Q</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.055550000000000016em;\"><span class=\"mord\">˙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>except note that we define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>=</mo><mover accent=\"true\"><mi>Q</mi><mo>˙</mo></mover></mrow><annotation encoding=\"application/x-tex\">I = \\dot Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.11463em;vertical-align:-0.19444em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9201900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\">Q</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.055550000000000016em;\"><span class=\"mord\">˙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span></span> and capacitance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is analogous to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">1/k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.</p>\n<blockquote>\n<p>Also, I've always drawn relationships between circuits and hydrodynamics...</p>\n</blockquote>\n<p>The analogy between mechanics, electronics and hydraulics is famous, and it's part of a bigger set of analogies:</p>\n<p><a href=\"/user_uploads/21317/HXEi18bmMyzMYi7CDEFRMxVt/analogy_chart.jpg\" title=\"analogy_chart.jpg\">https://arxiv.org/abs/1504.05625</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/HXEi18bmMyzMYi7CDEFRMxVt/analogy_chart.jpg\" title=\"https://arxiv.org/abs/1504.05625\"><img src=\"/user_uploads/21317/HXEi18bmMyzMYi7CDEFRMxVt/analogy_chart.jpg\"></a></div>",
        "id": 192849654,
        "sender_full_name": "John Baez",
        "timestamp": 1585940336
    },
    {
        "content": "<p>Wouldn't friction in an open system be equivalent to a dynamical system that is not measure preserving?</p>",
        "id": 192850119,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1585940544
    },
    {
        "content": "<p>I think the word \"equivalent\" is a bit too strong, but it's true that time evolution is measure-preserving in the symplectic approach to Hamiltonian mechanics - this is <a href=\"https://en.wikipedia.org/wiki/Liouville%27s_theorem_(Hamiltonian)\" title=\"https://en.wikipedia.org/wiki/Liouville%27s_theorem_(Hamiltonian)\">Liouville's theorem</a> - and no longer measure-preserving when we generalize classical mechanics to systems with friction.</p>",
        "id": 192857859,
        "sender_full_name": "John Baez",
        "timestamp": 1585944633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192759226\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192759226\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192755233\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192755233\">said</a>:</p>\n<blockquote>\n<p>Okay, so we're doing pullbacks, not \"identifying parts of state spaces\".   Then yes, I agree this is a fun thing to think about.  It would be cool if one could prove there's <em>no good solution to this problem</em> unless one uses some of the tricks physicists use - namely, to not consider all dynamical systems, but only certain specially nice ones.</p>\n</blockquote>\n<p>I am curious about such tricks. Is it about dynamical systems that are nice individually, or is it about two systems relating nicely, like a transversality condition or something?</p>\n</blockquote>\n<p>Physicists focus on Hamiltonian and Lagrangian systems, and focus on how the many ways in which they nice <em>individually</em>: e.g. they automatically have a conserved quantity called 'energy', and more generally have a conserved quantity for each 1-parameter group of symmetries (Noether's theorem).    </p>\n<p>But physicists describe complicated multi-part systems by describing each part separately and then 'gluing together' the descriptions in a way that's not been fully formalized: part of the point of all the homework problems in physics classes is to pick up the knack for doing this.  E.g. \"you have a ball rolling down an inclined plane, which sits on a wheeled cart...\"  </p>\n<p>With Weisbart and Yassine I'm working how this 'gluing together' works.  Part of it involves composing spans of manifolds, or symplectic manifolds, and this requires a suitable transversality condition.   But the more 'physicsy' part is to get the Lagrangian or Hamiltonian for the whole system from the Lagrangian or Hamiltonians from the parts.</p>",
        "id": 192858915,
        "sender_full_name": "John Baez",
        "timestamp": 1585945262
    },
    {
        "content": "<p>Before Stephen Wolfram wanted a <em>New Kind of Science</em>, he wanted a unified science, discrete and continuous, different descriptions for different types of systems and could model both chaotic and non chaotic systems.  The result of our conversations is my work in dynamics, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>, using combinatorics an it's Taylor series. The combinatoric take was inspired by <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> and Flajolet's work. The advantage of this view of a dynamical system is it can be hierarchically stacked by associating it with addition, multiplication, exponentiation and the hyperoperators.</p>",
        "id": 192861798,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1585946869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192858915\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192858915\">said</a>:</p>\n<blockquote>\n<p>With Weisbart and Yassine I'm working how this 'gluing together' works.  Part of it involves composing spans of manifolds, or symplectic manifolds, and this requires a suitable transversality condition.   But the more 'physicsy' part is to get the Lagrangian or Hamiltonian for the whole system from the Lagrangian or Hamiltonians from the parts.</p>\n</blockquote>\n<p>Thanks! This is very helpful. I have found a paper by Yassine on this, which I will look into. (I am interested generally in conditions required sometimes for composition, such as transversality, orthogonality, disjointness, independence, and the algebraic structure of such conditions. That I am interested does not mean I understand it (yet). Tricks from physics is always a good source of insight.)</p>",
        "id": 192871504,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585952925
    },
    {
        "content": "<p>That paper is full of serious mistakes, which the forthcoming papers by Weisbart, Yassine and myself will correct.</p>",
        "id": 192877011,
        "sender_full_name": "John Baez",
        "timestamp": 1585957506
    },
    {
        "content": "<p>As far as transversality goes, the trick is simply to look at spans whose legs are submersions.</p>",
        "id": 192877106,
        "sender_full_name": "John Baez",
        "timestamp": 1585957568
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 192877346,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1585957824
    },
    {
        "content": "<p><strong>Iterated Entire Function Theorem</strong> The Taylor series of an iterated entire function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> can be constructed given a fixed point and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">N</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">t \\in \\mathbb{N^+}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65418em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p><strong>Proof:</strong><br>\nAssume the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is an entire function. Assume a fixed point at zero. As an entire function under composition, the Taylor series of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> can be constructed for radius <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">0 &lt; |x| &lt; \\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mi>n</mi></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^n f^t(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> can be constructed for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. </p>\n<p><strong>Prove by strong induction.</strong></p>\n<p><em>Basis Steps:</em></p>\n<p><strong>Case</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. By definition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mn>0</mn></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">D^0 f^t(0) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mn>0</mn></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^0 f^t(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> can be constructed.</p>\n<p><strong>Case</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mn>1</mn></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>λ</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">D^1 f^t(0) = \\lambda^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mn>1</mn></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^1 f^t(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> can be constructed.</p>\n<p><strong>Case</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=k-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. Assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mi>k</mi></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^k f^t(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> can be constructed for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>k</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leq k &lt; n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>. (Induction Hypothesis) </p>\n<p><em>Induction Step:</em></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">n=k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.<br>\nUsing Eq. Dynamical Recurrance Equation, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mi>k</mi></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>D</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><msup><mi>D</mi><mi>k</mi></msup><msup><mi>f</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^k f^t(0)=\\sigma(k) + D'f(0) D^k f^{t-1}(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>. The function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> in only dependent on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mn>0</mn></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msup><mi>D</mi><mi>k</mi></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^0 f(0), \\ldots, D^k f(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mi>k</mi></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msup><mi>D</mi><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D^k f^t(0), \\ldots, D^{(k-1)} f^t(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>. By the strong induction hypothesis, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> can be constructed. Therefore Eq. Dynamical Recurrence Equation can be reduced to a geometrical progression based on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D'f(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> that can be represented by a summation. </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mi>k</mi></msup><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><msup><mi>λ</mi><mi>j</mi></msup></mrow><annotation encoding=\"application/x-tex\">D^k f^t(0) = \\sum_{j=0}^{k-1} \\sigma(k) \\lambda^j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.424826em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9890079999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>This completes the induction step that $D^n f^t(0)$ can be constructed for all whole numbers $n$. <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">■</mi></mrow><annotation encoding=\"application/x-tex\">\\blacksquare</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;vertical-align:0em;\"></span><span class=\"mord amsrm\">■</span></span></span></span></p>\n<p><strong>Dynamical Equation</strong><br>\nThe Taylor series for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>λ</mi><mi>j</mi></msup><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^t(x) = x_0+ \\sum_{n=1}^\\infty \\sum_{j=0}^{n-1} \\sigma(n) \\lambda^j x^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.389826em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954008em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 192896842,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1585988783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276867\">Daniel Geisler</span> <a href=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192896842\" title=\"#narrow/stream/229966-ACT.40UCR-seminar/topic/April.201st.3A.20John.20Baez/near/192896842\">said</a>:</p>\n<blockquote>\n<p><strong>Iterated Entire Function Theorem</strong> The Taylor series of an iterated entire function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> can be constructed given a fixed point and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">N</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">t \\in \\mathbb{N^+}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65418em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>Here is a combinatorial reformulation, using the Faà di Bruno bialgebra of surjections.</p>\n<p>We consider formal power series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> without constant term. The coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> are given by the Faà di Bruno formula and involves the Bell numbers, which in turn count partitions of given shapes. For higher iteration of substitution of power series, I think it is fruitful to pass to the coalgebraic side of duality. Let me briefly recall how that goes.</p>\n<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k\\geq 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> be the linear form on the vector space of power series that returns the $$k$$th coefficient. The <em>Faà di Bruno bialgebra</em> is the polynomial ring spanned by the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with comultiplication dual to substitution. Precisely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo>⊗</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo>∘</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Delta(A_n) (f \\otimes g) := A_n (g\\circ f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>. The point is now that the Faà di Bruno bialgebra is the incidence bialgebra of the lattice of partitions modulo 'type equivalence' (Doubilet), or even better: it is the incidence bialgebra of the category of finite sets and surjections (Joyal). In this interpretation, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the isoclass of the surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k\\to 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. So, for example: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>A</mi><mn>3</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>2</mn></msub><mo>+</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\Delta(A_3) = A_3\\otimes A_1 + 3 A_2 A_1 \\otimes A_2 + A_1 A_1 A_1 \\otimes A_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> because the possible factorisations of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">3\\to 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> are: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>→</mo><mn>1</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">3 \\to 1 \\to 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (one such); <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>→</mo><mn>2</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">3 \\to 2 \\to 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (three such); and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>→</mo><mn>3</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">3 \\to 3 \\to 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (one such).</p>\n<p>Now we are in position to deal with the higher iterations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mo>⋯</mo><mo>∘</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ \\cdots \\circ f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span>. Its coefficients are given by iteration of the Faà di Bruno comultiplication. Precisely, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> th coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9879959999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span> is given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Δ</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Delta^{t-1}(A_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. This is about counting composable strings of surjections <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>→</mo><msub><mi>n</mi><mrow><mi>t</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n_{t-1} \\to n_{t-2} \\to \\cdots \\to n_0=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, and then multiplying the coefficients corresponding to the surjections in the string. For example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Δ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>A</mi><mn>3</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><mo>+</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>3</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>2</mn></msub><mo>+</mo><mn>3</mn><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>2</mn></msub><mo>+</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>A</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\Delta^2(A_3) = A_3 \\otimes A_1 \\otimes A_1 + 3 A_2 A_1 \\otimes A_2 \\otimes A_1 + A_1 A_1 A_1 \\otimes A_3 \\otimes A_1 + 3 A_2 A_1 \\otimes A_1 A_1 \\otimes A_2 + 3 A_1 A_1 A_1 \\otimes A_2 A_1 \\otimes A_2 + A_1 A_1 A_1 \\otimes A_1 A_1 A_1 \\otimes A_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, because these are the possible factorisations of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">3\\to 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> into three surjections. So the third coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>f</mi><mo>∘</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f\\circ f \\circ f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> are given by multiplying the tensor factors in each term.</p>\n<p>(Fine print: we are talking coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>k</mi></msup><mi mathvariant=\"normal\">/</mi><mi>k</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">x^k/k!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">!</span></span></span></span> (like in exponential generating functions), and when counting surjections (or composable strings), we are counting isoclasses, not individual surjections.)</p>\n<p>(For anyone interested in the Faà di Bruno bialgebra, I think it is very nicely explained in the survey [Figueroa--Gracia-Bondía: <em>Combinatorial Hopf algebras in quantum field theory, I</em>, Rev. Math. Phys. 2005]. The part about FdB can be read without background in QFT.)</p>",
        "id": 192904512,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1586001739
    },
    {
        "content": "<p>I just recently heard about Faà di Bruno. Where should I read about it?</p>",
        "id": 192926613,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1586033669
    },
    {
        "content": "<p>Why are you posting your question here?  Anyway, Wikipedia ain't bad, particularly this version of Faà di Bruno's formula:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Fa%C3%A0_di_Bruno%27s_formula#Combinatorial_form\" title=\"https://en.wikipedia.org/wiki/Fa%C3%A0_di_Bruno%27s_formula#Combinatorial_form\">https://en.wikipedia.org/wiki/Fa%C3%A0_di_Bruno%27s_formula#Combinatorial_form</a></p>",
        "id": 192926682,
        "sender_full_name": "John Baez",
        "timestamp": 1586033780
    },
    {
        "content": "<p>Only because it was just mentioned.</p>",
        "id": 192926751,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1586033887
    },
    {
        "content": "<p>Oh, I see.  I usually don't see posts on a topic right <em>above</em> the latest post.</p>",
        "id": 192926781,
        "sender_full_name": "John Baez",
        "timestamp": 1586033953
    },
    {
        "content": "<p>I often narrow down to the particular stream.</p>",
        "id": 192926955,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1586034178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276625\">@Joachim Kock</span> this is wonderful. It is the first time I have seen someone else use  Faà di Bruno with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9879959999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>. I've seen the Combinatorial Hopf article but I need to upgrade my math education.</p>",
        "id": 192926984,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586034237
    }
]