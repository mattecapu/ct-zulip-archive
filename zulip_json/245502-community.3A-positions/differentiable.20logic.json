[
    {
        "content": "<p>Someone has probably announced this funded PhD position somewhere already, but since I just saw it <a href=\"https://mathstodon.xyz/@Jose_A_Alonso/112778642520177703\">on Mathstodon</a> I'll pass it on:</p>\n<blockquote>\n<h1><a href=\"https://coq.discourse.group/t/phd-opportunity-coq-formalisation-of-differentiable-logics/2375\">PhD opportunity: Coq Formalisation of Differentiable Logics</a></h1>\n<p>Hello, we are looking for a PhD student to work on Coq formalisation of Differentiable Logics, the full details are below.</p>\n<p>Vacancy: PhD in Computer Science</p>\n<p>Title: Formal Verification of AI Interfaces</p>\n<p>Advisors: Ekaterina Komendantskaya (Southampton University, UK), Alessandro Bruni (IT University of Copenhagen, Denmark), Reynald Affeldt (AIST, Japan)<br>\nStart Date: As soon as the right candidate is found</p>\n<p>Location: Southampton University, UK; with collaborative visits involving researchers at AIST, Japan and IT University of Copenhagen, Denmark.</p>\n<p>Description: The field of computing is facing a conundrum caused by a clash in two opposing trends: on the one hand, the growth and proliferation of machine learning (ML) in software, and on the other hand, ever-growing concerns that, with ML models being a black-box technology, the safety, security and explainability of software that uses ML diminish. To address these concerns, we need tools and languages that can serve as safe interfaces to ML components. Such safe ML interfaces will allow to specify the desired properties of ML models, train ML models to satisfy such properties, and verify that these desired properties do in fact hold in the final artifact. For example, one language that supports the safe ML interfaces approach is the Haskell DSL Vehicle [1]; and one iconic application for safe ML interfaces is in verifying autonomous car controllers [1]. At the moment, we use the Coq proof assistant and the recent MathComp-Analysis library to study the formalization of Differentiable Logics that allow to specify certain safety properties of ML models, and then compile them down into loss functions for training. We are looking for a PhD applicant with keen interest in mathematics, logic and/or Coq programming to join this team, to extend the initial study of [2] to a richer language such as [1]. The conditions of this PhD funding come with no restrictions on nationality but assume that a successful PhD candidate will have a competitive CV.</p>\n<p>Please forward this advertisement to any interested individuals, and address any questions to: <a href=\"mailto:e.komendantskaya@soton.ac.uk\">e.komendantskaya@soton.ac.uk</a></p>\n<p>[1] Matthew L. Daggitt, Wen Kokke, Robert Atkey, Natalia Slusarz, Luca Arnaboldi, Ekaterina Komendantskaya<br>\nVehicle: Bridging the Embedding Gap in the Verification of Neuro-Symbolic Programs. CoRR abs/2401.06379 , 2024.</p>\n<p>[2] R. Affeldt, A. Bruni, E. Komendantskaya, N. Slusarz, and K. Stark.<br>\nTaming Differentiable Logics with Coq Formalisation. In Interactive Theorem Proving (ITP) 2024, 2024.</p>\n</blockquote>",
        "id": 451163718,
        "sender_full_name": "John Baez",
        "timestamp": 1720871314
    },
    {
        "content": "<p>Ekatarina Komendantskaya has some really interesting papers on machine learning in Coq.</p>",
        "id": 453037547,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1721594332
    },
    {
        "content": "<p>I'm not familiar with Reynald Affeldt's publications but he is one of the most prominent contributors to the Coq math-comp library, and you can probably talk to him in the Coq zulip chat if you want to learn more about the post.</p>",
        "id": 453037588,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1721594399
    },
    {
        "content": "<p>Some of Prof. Komendantskaya's papers that I happened to have read or bookmarked to read later:<br>\n\"Recycling Proof Patterns in Coq; Case Studies\"<br>\n\"Proof-pattern recognition and lemma discovery in ACL2\"<br>\n\"ML4PG (Machine Learning for Proof General)\"<br>\n\"Machine Learning in Proof General (ML4PG): Interfacing Interfaces\"<br>\n\"Proof-relevant horn clauses for dependent type inference and term synthesis\"<br>\n\"ML4PG in Computer Algebra Verification\"</p>",
        "id": 453037704,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1721594479
    },
    {
        "content": "<p>(Proof General is an Emacs major mode for Coq.)</p>",
        "id": 453037716,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1721594511
    }
]