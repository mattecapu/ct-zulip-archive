[
    {
        "content": "<p>i updated this draft book on arxiv:<br>\n<a href=\"https://arxiv.org/abs/2208.03817\">https://arxiv.org/abs/2208.03817</a><br>\nthe TITLE CHANGED to:<br>\n<em>Programs as Diagrams: From Categorical Computability to Computable Categories</em><br>\ni think i improved the text, not just the grammar but also the explanations. i am not a good writer, but i am doing my best. the story deserves it. </p>\n<p>maybe i should mention that this string diagram approach evolved through <em>teaching</em>. it makes it possible to prepare students to study crypto within a term. the standard approach takes at least 3, in most places 4 terms of prerequisites.</p>\n<p>the last two chapters are not for teaching, but the POINT of it all. while computability is normally presented as the Church-Turing equivalence of the various computer <em>structures</em> (abacus, turing machines, lambda calculus, etc), computability in a monoidal category becomes a <em>property</em>. and then the categories themselves become computable.</p>\n<p>ok, i hate to advertise, but i keep coming back to advertise this not as my work, but as a law of nature.</p>",
        "id": 298666166,
        "sender_full_name": "dusko",
        "timestamp": 1663102618
    },
    {
        "content": "<p>I'm only ~2 1/2 chapters in, but I'm loving it! The pictures clarify some of the diagonalization that is hard to keep track of in substitution-based syntax. I am working with an undergrad at UMD this semester who will be tackling (part of) it.</p>",
        "id": 298687730,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1663116724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/dusko.3A.20computable.20categories/near/298687730\">said</a>:</p>\n<blockquote>\n<p>I'm only ~2 1/2 chapters in, but I'm loving it! The pictures clarify some of the diagonalization that is hard to keep track of in substitution-based syntax. I am working with an undergrad at UMD this semester who will be tackling (part of) it.</p>\n</blockquote>\n<p>nice! if it is useful, i can send a link to the version with exercises and background. and pointing me to the places where things are still not clear or don't come across would be great.</p>",
        "id": 298903817,
        "sender_full_name": "dusko",
        "timestamp": 1663219854
    },
    {
        "content": "<p>Typos at the bottom of 12th page (stRict monoidal laws) and 11th (cartesian functionS can be paired).loving it so far as well-could be an intro this monoidality stuff for CS background people.I'm not graphically minded but this makes the diagrammatic stuff easy to understand</p>",
        "id": 299100100,
        "sender_full_name": "Simonas Tutlys",
        "timestamp": 1663310490
    },
    {
        "content": "<p>thanks much! i appreciate this on any channel, but if anyone wants to reach me directly, it's <a href=\"mailto:dusko@hawaii.edu\">dusko@hawaii.edu</a> or <a href=\"mailto:dusko@dusko.org\">dusko@dusko.org</a> :)</p>",
        "id": 299116921,
        "sender_full_name": "dusko",
        "timestamp": 1663318162
    },
    {
        "content": "<p>Hi Dusko, I'm looking at it now. </p>\n<p>At the beginning of section 1.2 you say \"We assume that any type is equipped with such operations\", i.e., in your category every object is a commutative comonoid in a canonoical way. Is this assumption meant to be enforced throughout the entire book? Where does this assumption apply?</p>\n<p><a href=\"https://ncatlab.org/nlab/show/cartesian+monoidal+category\">https://ncatlab.org/nlab/show/cartesian+monoidal+category</a> </p>\n<blockquote>\n<p>Moreover, one can show (e.g. Fox 1976 or Heunen-Vicary 2012, p. 79 (p. 85 of the pdf)) that any symmetric monoidal category equipped with suitably well-behaved diagonals and augmentations must in fact be cartesian monoidal. More precisely: suppose C is a symmetric monoidal category equipped with monoidal natural transformations (...)</p>\n</blockquote>\n<p>The paragraph I highlighted  from the linked nlab page seems to suggest that any symmetric monoidal category where every object is a comonoid in a natural way is a Cartesian monoidal category. Later on that you will be considering both arbitrary maps and Cartesian maps (i.e. comonoid homomorphisms) between two objects. Now this seems to suggest that you are not actually working in a Cartesian monoidal category because every morphism between objects in a Cartesian monoidal category is always a comonoid homomorphism. There is some subtlety here, you are working in a category where every object has a comonoid structure but yet the category is not Cartesian monoidal, so maybe you could discuss which hypotheses of the theorems I mentioned are not satisfied.</p>",
        "id": 299360551,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1663446154
    },
    {
        "content": "<p>There are no examples of categories given in the section titled \"Categories.\" I would like to see a short list of the most representative examples of categories which are semantic models. What are you thinking of, the category of pointed sets, the category of dcpo's? What categories model the salient features of permitting nontotal functions or functions which are not single valued?</p>\n<p>I understand that the book is meant to be accessible to undergraduate students and so the examples might complicate things. For example maybe the Kleisli category of the finite powerset monad is an example of a category which models nondeterministic computation but it would be unfair to expect undergraduate students to understand this comment. Perhaps you can mark the examples with a warning saying it's OK if this is not understood upon first read and one can come back to it later.</p>",
        "id": 299361038,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1663446676
    },
    {
        "content": "<p>Similarly I think the book is made harder to read because it chooses to avoid some established terminology to avoid intimidating students. I understand that the phrase \"morphism of comonoids\" may be intimidating for students who are not familiar with the terminology but I find it more understandable to say \"A Cartesian map is a map which is a morphism with respect to the canonical comonoid structure\" than to say \"A Cartesian map is a map which is both total and single valued.\" Again, I am not sure how to handle the issue of intimidating students with scary algebra terminology but you could say in a footnote / aside \"Different books use different terminology. So-and-so would call our Cartesian maps a \"morphism of comonoids\". The book by XYZ refers to our program evaluators as \"ABC's.\" \"</p>",
        "id": 299361383,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1663447050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/299360551\">said</a>:</p>\n<blockquote>\n<p>Hi Dusko, I'm looking at it now. </p>\n<p>At the beginning of section 1.2 you say \"We assume that any type is equipped with such operations\", i.e., in your category every object is a commutative comonoid in a canonoical way. Is this assumption meant to be enforced throughout the entire book? Where does this assumption apply?</p>\n<p><a href=\"https://ncatlab.org/nlab/show/cartesian+monoidal+category\">https://ncatlab.org/nlab/show/cartesian+monoidal+category</a> </p>\n<blockquote>\n<p>Moreover, one can show (e.g. Fox 1976 or Heunen-Vicary 2012, p. 79 (p. 85 of the pdf)) that any symmetric monoidal category equipped with suitably well-behaved diagonals and augmentations must in fact be cartesian monoidal. More precisely: suppose C is a symmetric monoidal category equipped with monoidal natural transformations (...)</p>\n</blockquote>\n<p>The paragraph I highlighted  from the linked nlab page seems to suggest that any symmetric monoidal category where every object is a comonoid in a natural way is a Cartesian monoidal category. </p>\n</blockquote>\n<p>Fox 1976 constructs the cofree cartesian category over a given symmetric monoidal. That is the category of abelian comonoids and <em>comonoid homomorphisms</em>. Heunen and Vicary surely mention somewhere that the hierarchy of categories of comonoids and of Frobenius algebras in monoidal categories with various kinds of homomorphisms was studied in detail in <a href=\"https://arxiv.org/abs/0904.1997\">https://arxiv.org/abs/0904.1997</a><br>\n(unless they forgot to mention it :)))</p>\n<p>Look at the monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mi>e</mi><mi>l</mi><mo separator=\"true\">,</mo><mo>×</mo><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Rel,\\times,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>. Every set comes with various data services. One is inherited from the cartesian structure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo separator=\"true\">,</mo><mo>×</mo><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Set,\\times,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>. Moreover, for any set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, any abelian group structure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>+</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mi>A</mi><mo>×</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">(+):A\\times A\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">+</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> induces an additional data service <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>A</mi><mo>×</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta:A\\to A\\times A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Rel</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi mathvariant=\"normal\">Δ</mi><mo stretchy=\"false\">⟨</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">x\\Delta \\langle y,z\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">Δ</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">⟩</span></span></span></span> whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x=y+z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>. See <a href=\"https://arxiv.org/abs/0812.2266\">https://arxiv.org/abs/0812.2266</a>. There are lots of data services in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Rel</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>, supporting nondeterministic computation. And <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mi>e</mi><mi>l</mi><mo separator=\"true\">,</mo><mo>×</mo><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Rel,\\times,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> isn't a cartesian category. </p>\n<p>It is a general phenomenon. In <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mi>e</mi><mi>c</mi><mo separator=\"true\">,</mo><mo>⊗</mo><mo separator=\"true\">,</mo><mi>I</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Vec,\\otimes,I)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">ec</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⊗</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span></span></span></span>, the data services are provided by the bases (<a href=\"https://arxiv.org/abs/0810.0812\">https://arxiv.org/abs/0810.0812</a>) but the linear operators do not preserve the bases. The subcategory of the linear operators that are cartesian in the sense that they preserve the bases is the category of sets.</p>\n<p>(Btw, why are you calling them \"cartesian monoidal categories\". Isn't cartesian structure always monoidal? I.e., are ther cartesian non-monoidal categories?)</p>\n<p>The confusion probably stems from the \"<em>suitably well-behaved</em>\" part of the \"suitably well-behaved diagonals and augmentations must in fact be cartesian monoidal\". The <em>natural</em> diagonals and projections are a part of the standard definition of cartesian categories. I think I specifically define the <em>cartesian</em> functions to be those with respect to which the data services are natural. That is the cartesian subcategory, in which the programs live. The outputs of computation are deletable when they exist, and copiable when they are unique, so there are data services. But computations may not terminate, and they may not be deterministic, so the data services may not be natural with respect to the computations. There are lots of interesting \"well-behaved\" structures that are not natural, and many natural structures that are neither interesting nor \"well-behaved\". </p>\n<p>But thank you for reading. While I don't think this is an error, I am sure that there are some to be found  :)</p>",
        "id": 299376745,
        "sender_full_name": "dusko",
        "timestamp": 1663462963
    },
    {
        "content": "<p>\"Cartesian category\" is (unfortunately) ambiguous and sometimes refers to categories with not only finite products but also finite limits.</p>",
        "id": 299377317,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1663463654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/299377317\">said</a>:</p>\n<blockquote>\n<p>\"Cartesian category\" is (unfortunately) ambiguous and sometimes refers to categories with not only finite products but also finite limits.</p>\n</blockquote>\n<p>oh my. is there anyone except peter freyd who used the term \"cartesian\" to include equalizers? Cartesius certainly didn't.  even freyd i think used \"cartesian\" in the usual sense until a certain point. in any case, he would be the last person to say \"call categories with products but no equalizers cartesian <em>monoidal</em>\".  should we use the word \"monoidal\" whenever we want to avoid the assumption that a category has equalizers?</p>",
        "id": 299377892,
        "sender_full_name": "dusko",
        "timestamp": 1663464391
    },
    {
        "content": "<p>PTJ uses it throughout the Elephant...</p>",
        "id": 299377909,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1663464417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/299361383\">said</a>:</p>\n<blockquote>\n<p>Similarly I think the book is made harder to read because it chooses to avoid some established terminology to avoid intimidating students. I understand that the phrase \"morphism of comonoids\" may be intimidating for students who are not familiar with the terminology but I find it more understandable to say \"A Cartesian map is a map which is a morphism with respect to the canonical comonoid structure\" than to say \"A Cartesian map is a map which is both total and single valued.\" Again, I am not sure how to handle the issue of intimidating students with scary algebra terminology but you could say in a footnote / aside \"Different books use different terminology. So-and-so would call our Cartesian maps a \"morphism of comonoids\". The book by XYZ refers to our program evaluators as \"ABC's.\" \"</p>\n</blockquote>\n<p>these are all completely fair points. they are not just a matter of who we talk to, but also of personal taste. it is well-documented that mine is not always good. but running from it is futile. </p>\n<p>i tried to do some of the referencing that you are suggesting in the earlier versions. the cost of adding more words is that the text becomes longer. some people who would find it all easier to read with more references end up never touching it because it is too long, and trying to do to many things. </p>\n<p>the way i see this book is that it is telling the story that absolutely needs to be told, and all i can do is my best to make it tolearbly readable for good writers, who will then produce better versions.</p>",
        "id": 299378491,
        "sender_full_name": "dusko",
        "timestamp": 1663465129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/299377909\">said</a>:</p>\n<blockquote>\n<p>PTJ uses it throughout the Elephant...</p>\n</blockquote>\n<p>ah why did they remove the emoji where a nuclear bomb explodes out of my head?</p>",
        "id": 299378597,
        "sender_full_name": "dusko",
        "timestamp": 1663465272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/299378597\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/299377909\">said</a>:</p>\n<blockquote>\n<p>PTJ uses it throughout the Elephant...</p>\n</blockquote>\n<p>ah why did they remove the emoji where a nuclear bomb explodes out of my head?</p>\n</blockquote>\n<p>i think the reasoning behind calling pullbacks the \"cartesian squares\" was that they are the cartesian liftings with respect to the principal fibration. they are the slice-wise cartesian products. in a topos theory book, all structures should be slice-wise, shouldn't they? but if \"cartesian\" is a slice-wise concept, then \"cartesian closed\" should also be slice-wise, i.e. what used to be called <em>locally</em> closed cartesian closed. the old <em>relatively</em> closed cartesian categories should presumably be cartesian relatively closed. and it goes on... (\"man gave name to all the animals\" comes to mind. the Little Mo' McCoury version comes to my twisted mind :)))</p>",
        "id": 299415039,
        "sender_full_name": "dusko",
        "timestamp": 1663496615
    },
    {
        "content": "<blockquote>\n<p>but if \"cartesian\" is a slice-wise concept, then \"cartesian closed\" should also be slice-wise, i.e. what used to be called locally closed cartesian closed.</p>\n</blockquote>\n<p>This is something that particularly irritates me about the terminology in the Elephant. (Johnstone even acknowledges his terminology is inconsistent, but justifies it by saying the terminology \"cartesian closed\" is \"well-established\", entirely ignoring the fact that \"cartesian\" was also well-established for categories with finite products.)</p>",
        "id": 299422842,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1663501351
    },
    {
        "content": "<p><span aria-label=\"anguish\" class=\"emoji emoji-1f62b\" role=\"img\" title=\"anguish\">:anguish:</span></p>",
        "id": 299430014,
        "sender_full_name": "John Baez",
        "timestamp": 1663505251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/298903817\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/dusko.3A.20computable.20categories/near/298687730\">said</a>:</p>\n<blockquote>\n<p>I'm only ~2 1/2 chapters in, but I'm loving it! The pictures clarify some of the diagonalization that is hard to keep track of in substitution-based syntax. I am working with an undergrad at UMD this semester who will be tackling (part of) it.</p>\n</blockquote>\n<p>nice! if it is useful, i can send a link to the version with exercises and background. and pointing me to the places where things are still not clear or don't come across would be great.</p>\n</blockquote>\n<p>Over the past 5 years I have been growing to the underserstanding of the importance of symmetric monoidal categories, so I am enjoying this already (just read chapter 1). The examples are likely going to be much more accessible  than those in Coeke's \"Picturing Quantum Processes\".</p>\n<p>I guess my interest started when I found your <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-32784-1_11\">Tracing the Man in the Middle in Monoidal Categories</a> article some 5 years ago (which I should soon be able to really understand when I get through this book). Then finding that monoidal categories maps to RDF with the \"Bicategories of relations\" article,  and recent work on the pi calculus,  indicating that those should indeed be the right space to massively parallel systems like the Web... Also <a href=\"https://twitter.com/bblfish/status/1397962748429062145\">the non-maathematical introduction by Baez</a> on monoidal categories linking them to open systems helped a lot. So now I know it's important and why I won't have trouble learning it :-). </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1397962748429062145\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>Great introduction from examples to Symmetric Monoidal Categories by <a href=\"https://twitter.com/johncarlosbaez\">@johncarlosbaez</a> : their use in electrical engineering, quantum theory, programming, logic, ecology and other *open* systems with some thoughts on the 3rd law of thermodynamics.\n<a href=\"https://t.co/FRAnRwSDl4\">https://www.youtube.com/watch?v=DAGJw7YBy8E&amp;t=18s</a></p><span>- The 🐠 BabelFish (@bblfish)</span></div></div><p>I am surprised that the arxiv has size limits on books (I read that in the thread somewhere). I would be happy if you could send me the link to the full version ( <a href=\"mailto:henry.story@bblfish.net\">henry.story@bblfish.net</a> ).</p>",
        "id": 300305803,
        "sender_full_name": "Henry Story",
        "timestamp": 1663919807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/300305803\">said</a>:</p>\n<blockquote>\n<p>I would be happy if you could send me the link to the full version ( <a href=\"mailto:henry.story@bblfish.net\">henry.story@bblfish.net</a> ).</p>\n</blockquote>\n<p>done. comments appreciated</p>",
        "id": 300599097,
        "sender_full_name": "dusko",
        "timestamp": 1664070118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> I'm surprised you don't find the examples in Picturing Quantum Processes accessible. Is it because they rely on too much physics intuition?</p>",
        "id": 301466396,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1664465173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296293\">John van de Wetering</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/301466396\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> I'm surprised you don't find the examples in Picturing Quantum Processes accessible. Is it because they rely on too much physics intuition?</p>\n</blockquote>\n<p>Actually I think I read all the way up to chapter 3 or so without problem. But from time to time there are ties to quantum theory made - completely reasonable given the name of the book - which is teaching me something about quantum mechanics, rather than drawing on my knowledge of it. <br>\nDusko's book on computing on the other hand, draws on knowledge from computing which I should know about, so that it is helping me build from something I know. (or fill in unavowable gaps in my knowledge).</p>\n<p>Reading Dusko's book should give me a good basis to then later learn about quantum physics. :-)</p>",
        "id": 301468847,
        "sender_full_name": "Henry Story",
        "timestamp": 1664465795
    },
    {
        "content": "<p>But the \"Picturing quantum Processes\" book was particularly useful in that it makes really clear the relation of symmetric monoidal categories to quantum mechanics. </p>\n<p>This reminds me: It was whispered in my ear that some think Carl Hewitt the author of the Actor model was going crazy with age. Reading his 2012 article \"Actor Model of Computation: Scalable Robust information Systems\" I think I can guess where the suspicion could  come from. He writes:</p>\n<blockquote>\n<p>• The Actor Model is founded on physics whereas the π–calculus is founded<br>\non algebra.<br>\n•  Semantics of the Actor Model is based on message orderings in the<br>\nComputational Representation Theorem. Semantics of the π–calculus is based on structural congruence in various kinds of bi-simulations and equivalences.</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p>The Actor Model was inspired by the laws of physics and depends on them for its fundamental axioms in contrast with the process calculi being inspired by algebra [Milner 1993].</p>\n</blockquote>\n<p>But it looks like recent work discussed here on Zulip on the pi-calculus does bring in symmetric monoidal categories into the mix. So perhaps Hewitt's intuitions were right all along...</p>\n<p><a href=\"https://twitter.com/bblfish/status/1567089378010304514\">https://twitter.com/bblfish/status/1567089378010304514</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1567089378010304514\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>2018 paper comparing two different game semantics approaches to the non-deterministic lambda calculus and the pi calculus using string diagrams and showing how they come together. <a href=\"https://t.co/JjxdR7rCGg\">https://twitter.com/bblfish/status/1567089378010304514/photo/1</a></p><span>- The 🐠 BabelFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/JjxdR7rCGg\"><img src=\"https://uploads.zulipusercontent.net/dc929411a423e58c34c72937432acc8a6ae5c347/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46623971456c6e5749414146386a562e706e673a7468756d62\"></a></div></div></div>",
        "id": 301472443,
        "sender_full_name": "Henry Story",
        "timestamp": 1664466857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/301468847\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296293\">John van de Wetering</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/301466396\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> I'm surprised you don't find the examples in Picturing Quantum Processes accessible. Is it because they rely on too much physics intuition?</p>\n</blockquote>\n<p>Actually I think I read all the way up to chapter 3 or so without problem. But from time to time there are ties to quantum theory made - completely reasonable given the name of the book - which is teaching me something about quantum mechanics, rather than drawing on my knowledge of it. <br>\nDusko's book on computing on the other hand, draws on knowledge from computing which I should know about, so that it is helping me build from something I know. (or fill in unavowable gaps in my knowledge).</p>\n<p>Reading Dusko's book should give me a good basis to then later learn about quantum physics. :-)</p>\n</blockquote>\n<p>the only objective way to compare the two is to say that the author of one of the books is much better looking than the first author of the other one. beyond that, everything else is a matter of taste. and even that changes when the first author of the other book is considered with a guitar.</p>",
        "id": 301736175,
        "sender_full_name": "dusko",
        "timestamp": 1664573090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/301472443\">said</a>:</p>\n<blockquote>\n<p>But the \"Picturing quantum Processes\" book was particularly useful in that it makes really clear the relation of symmetric monoidal categories to quantum mechanics. </p>\n<p>This reminds me: It was whispered in my ear that some think Carl Hewitt the author of the Actor model was going crazy with age. Reading his 2012 article \"Actor Model of Computation: Scalable Robust information Systems\" I think I can guess where the suspicion could  come from. He writes:</p>\n<blockquote>\n<p>• The Actor Model is founded on physics whereas the π–calculus is founded<br>\non algebra.<br>\n•  Semantics of the Actor Model is based on message orderings in the<br>\nComputational Representation Theorem. Semantics of the π–calculus is based on structural congruence in various kinds of bi-simulations and equivalences.</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p>The Actor Model was inspired by the laws of physics and depends on them for its fundamental axioms in contrast with the process calculi being inspired by algebra [Milner 1993].</p>\n</blockquote>\n<p>But it looks like recent work discussed here on Zulip on the pi-calculus does bring in symmetric monoidal categories into the mix. </p>\n</blockquote>\n<p>the person who brought symmetric monoidal categories into the mix with the pi-calculus was robin milner, sometime in the 90s. he first developed <em>action calculus</em> which was sort of an algebraic/coalgebraic framework for specifying process calculi where messages can create and shut channels (the first of which was the pi-calculus), and then formalized it in fully monoidal framework, with john power... was it called <em>action structures</em>?  forgetting things is not too bad if it makes room for inventing something else.</p>\n<p>re the physics roots, maybe carl hewitt was inspired by the fact that carl-adam petri was definitely talking about physics when he presented the petri nets. in almost every paper. but programmers want to program processes, and few people besides petri himself interpreted petri nets as physical systems.</p>\n<p>the physics of aging is that the amount of time behind you is getting bigger whereas the amount of time in front of you is getting smaller. that disturbs the symmetry of hawking's question \"why is it that we don't remember future the same way we remember past?\" as you age, the amount of stuff that you forgot surpasses the amount of stuff that you will every learn. it can happen halfway if you don't pay attention. some people give up on the future and start pumping up the past. if you let them, they blow up both.</p>",
        "id": 301738661,
        "sender_full_name": "dusko",
        "timestamp": 1664574347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/301738661\">said</a>:</p>\n<blockquote>\n<p>but programmers want to program processes, and few people besides petri himself interpreted petri nets as physical systems.</p>\n</blockquote>\n<p>this is also not completely true. i think samson had a paper about petri nets as physical systems. and i am probably unaware of most petri net research. and also of most of physics :)) so i shouldn't have said that.</p>",
        "id": 301740005,
        "sender_full_name": "dusko",
        "timestamp": 1664574964
    },
    {
        "content": "<blockquote>\n<p>(Btw, why are you calling them \"cartesian monoidal categories\". Isn't cartesian structure always monoidal? I.e., are ther cartesian non-monoidal categories?)</p>\n</blockquote>\n<p>I'm not sure anyone gave the answer to this that I'd give.  There are two subtly different but roughly equivalent notions: </p>\n<ul>\n<li>a category with finite products</li>\n<li>a monoidal category where the tensor product is the cartesian product and the unit object is terminal</li>\n</ul>\n<p>To get from the former to the latter we have to choose a terminal object and a specific cartesian product for each pair of objects.  We might do this using the axiom of choice, for example.</p>\n<p>The latter is called a <a href=\"https://ncatlab.org/nlab/show/cartesian+monoidal+category\">cartesian monoidal category</a>.</p>",
        "id": 312021304,
        "sender_full_name": "John Baez",
        "timestamp": 1669298240
    },
    {
        "content": "<p>As most people here know, there are a couple of nice ways to characterize which monoidal categories are cartesian without saying the word \"cartesian product\".   They are described <a href=\"https://ncatlab.org/nlab/show/cartesian+monoidal+category#properties\">here</a>.</p>",
        "id": 312021874,
        "sender_full_name": "John Baez",
        "timestamp": 1669298405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/312021304\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>(Btw, why are you calling them \"cartesian monoidal categories\". Isn't cartesian structure always monoidal? I.e., are ther cartesian non-monoidal categories?)</p>\n</blockquote>\n<p>I'm not sure anyone gave the answer to this that I'd give.  There are two subtly different but roughly equivalent notions: </p>\n<ul>\n<li>a category with finite products</li>\n<li>a monoidal category where the tensor product is the cartesian product and the unit object is terminal</li>\n</ul>\n<p>To get from the former to the latter we have to choose a terminal object and a specific cartesian product for each pair of objects.  We might do this using the axiom of choice, for example.</p>\n<p>The latter is called a <a href=\"https://ncatlab.org/nlab/show/cartesian+monoidal+category\">cartesian monoidal category</a>.</p>\n</blockquote>\n<p>thanks for explaining this, john.</p>\n<p>a couple of people responded this earlier, but differently. they said that the difference between cartesian and cartesian monoidal was that cartesian categories have all finite <em>limits</em>. (back in the 90s, there was precisely one person who used the term in that sense: peter freyd. apparently ptj also adopted it in the elephants, to keep all structures slicewise as they are in toposes. but then the cartesian closed structure is also slicewise and becomes what used to be called locally cartesian closed and all hell breaks loose...)</p>\n<p>now you go back to cartesian = existence of finite products  (a property) and cartesian monoidal = choice of finite product functors (a structure). fair enough. the idea that we should signal whenever we use the AC to pick representatives of a universal construction is something that many of us would subscribe to. </p>\n<p>an equivalence of categories is a functor that is full and faithful and essentially surjective. it is also a pair of adjoint functors where the unit and the counit are invertible. getting from one to the other requires that we choose representatives of the equivalence classes along the essential surjection and prove a lemma. should we distinguish the two notions of equivalence? it might be ok.</p>\n<p>but the thread goes deeper into the sweater.</p>\n<p>in cartesian closed categories, the finite product <em>functors</em> have right adjoints. so the 50 years of books and papers about cartesian closed categories were not about cartesian categories but about cartesian monoidal closed categories. to talk about cartesian closed categories, we should never say \"functor\" only that this and that is representable.</p>\n<p>on the other hand, in cartesian monoidal closed categories, presumably not only the products but also the exponents should be chosen as functors. maclane worked out the coherences for the closed structure and found pairs of non-canonical isomorphisms. very clumsy to carry around. did he even state it as a failure of coherence? but they arise from using universal constructions in different orders.  so if the closure is treated as a property, whenever you encounter the noncoherence, the construction tells you which of the isomorphisms you are using. someone at the time claimed that this was <em>necessary</em> when working with triangulations... </p>\n<p>should we somehow signal that the cartesian monoidal structure in cartesian monoidal closed categories is chosen structure, but that its closure is not cartesian monoidal but only cartesian, since it is treated as a property (representability of some functors)?</p>\n<p>god probably invented math when he was fed up with giving things names. naming things can get risky. that is why the lambda-calculus people say that the world is modulo the alpha-conversion :))</p>",
        "id": 323459665,
        "sender_full_name": "dusko",
        "timestamp": 1674645787
    },
    {
        "content": "<p>For me it's a matter of perspective. 'Cartesian monoidal category' is not telling me something more about a 'Cartesian category', but something more about a 'monoidal category'. Simply put, if I'm working with a monoidal category and you tell me 'oh, actually this is cartesian monoidal' then I know I get natural copy and delete for free on every object.</p>",
        "id": 323485944,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1674653616
    },
    {
        "content": "<p>So, in this sense, I find it like a useful notation for people working heavily with monoidal categories. This is especially important in categorical quantum mechanics, as having copy and delete around is usually taken to signify that whatever you are dealing with behaves classically <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 323486196,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1674653691
    },
    {
        "content": "<p>Along similar lines, I think that it's usually good practice if phrases like \"gobbledygook category\" specify a <em>2-category</em> of such categories. In other words, every such term comes with a canonical notion of functor between them. For cartesian categories, I would think that the canonical notion of functor is just a plain functor; while for cartesian monoidal categories, I would think that you actually want to consider them as monoidal categories, so the relevant functors are strong monoidal functors.</p>",
        "id": 323493236,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1674655629
    },
    {
        "content": "<blockquote>\n<p>For cartesian categories, I would think that the canonical notion of functor is just a plain functor</p>\n</blockquote>\n<p>The appropriate notion of functor is one that preserves finite products.</p>",
        "id": 323497008,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1674656489
    },
    {
        "content": "<p>For most kinds of structured category, there are three different kinds of \"appropriate\" morphism between them: lax, colax, and strong/pseudo.  For cartesian categories, the colax morphisms are arbitrary functors (abstractly this is because the monad for cartesian structure is \"colax-idempotent\"), while the lax and strong morphisms are product-preserving functors.</p>",
        "id": 323500249,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1674657262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Dusko.20Pavlovic/near/323497008\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>For cartesian categories, I would think that the canonical notion of functor is just a plain functor</p>\n</blockquote>\n<p>The appropriate notion of functor is one that preserves finite products.</p>\n</blockquote>\n<p>That's certainly true in many situations, but it seems like an overly restrictive moral provision to me. For example, it already precludes considering functors of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">A \\times -</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span></span></span></span> as functors between cartesian categories (on sufficiently nontrivial cartesian categories that is).</p>\n<p>But yes, I should weaken my claim a bit and just say that \"cartesian monoidal category\" makes it clear that you consider the category under consideration explicitly as a <em>monoidal</em> category. When you merely say \"cartesian category\", then it doesn't have that connotation; and if somewhere else you use the term \"monoidal category\" to refer to the same category, then I will not assume that the monoidal structure is the cartesian one. In both cases, there are several natural choices of functor, and the terminology can also be used to reflect which one you have in mind.</p>",
        "id": 323525337,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1674662998
    }
]