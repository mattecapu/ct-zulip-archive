[
    {
        "content": "<p>I'm looking to equip some objects that at least sometimes are made of cells with two kinds of subtly interrelated structure.  One of the kinds of structure basically amounts to \"having degeneracies, in a nonalgebraic way\".  I was hoping to get objects with this particular structure as cofibrant objects, and also obtain in some related way the class of morphisms that preserve the structure.  Can model categories do this?  Does the standard model structure on semi-simplicial sets do something like this already?</p>",
        "id": 321264058,
        "sender_full_name": "James Deikun",
        "timestamp": 1673646668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438995\">James Deikun</span> <a href=\"#narrow/stream/241590-theory.3A-algebraic-topology-.26-homological-algebra/topic/Can.20model.20categories.20do.20this.3F/near/321264058\">said</a>:</p>\n<blockquote>\n<p>I'm looking to equip some objects that at least sometimes are made of cells with two kinds of subtly interrelated structure.  One of the kinds of structure basically amounts to \"having degeneracies, in a nonalgebraic way\".  I was hoping to get objects with this particular structure as cofibrant objects, and also obtain in some related way the class of morphisms that preserve the structure.  Can model categories do this?  Does the standard model structure on semi-simplicial sets do something like this already?</p>\n</blockquote>\n<p>You may want to give us a precise definition of the category on which you want to construct a model structure.  The above description is way too vague to offer any concrete advice.</p>",
        "id": 322647140,
        "sender_full_name": "Dmitri Pavlov",
        "timestamp": 1674263651
    },
    {
        "content": "<p>I've come to think it's probably impossible after all, but since you asked: The category is a category of generalized multicategories.  It is defined as the vertical category of the category of monoids in a double category of Burroni T-spans where the T-spans are set in some locally Cartesian closed category E and T is any Cartesian monad.  E is also equipped with a left adjoint strongly Cartesian monad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span>, and a distributive law between the right adjoint comonad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi></mrow><annotation encoding=\"application/x-tex\">\\nabla</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">∇</span></span></span></span> and T.  These ingredients are enough to lift <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi></mrow><annotation encoding=\"application/x-tex\">\\nabla</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">∇</span></span></span></span> and thereby <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span> from E to the category of multicategories.  Being a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span>-algebra or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi></mrow><annotation encoding=\"application/x-tex\">\\nabla</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">∇</span></span></span></span>-coalgebra is enough to equip a multicategory with \"specified units\", but I would like to equip them with simply \"units\".</p>\n<p>But it seems that just as using a monad or comonad is too strong, using a model structure is too weak.  Although I would be glad if you could prove me wrong.</p>",
        "id": 322650744,
        "sender_full_name": "James Deikun",
        "timestamp": 1674266554
    }
]