[
    {
        "content": "<p>Anyone have recommendations for software (like say Prover9) that might let me experiment with for conjectures in category theory?  More precisely, say I have a conjecture about equality of some morphisms in a new kind of category (ex: with a couple of monoidal structures, an involution, a couple more gadgets), and fiddling on paper leads nowhere. I'd like to throw this at an automated tool, just to see.</p>\n<p>Most automated provers are untyped, which makes reasoning about morphisms hell (partiality is not fun, especially when you know for a fact that it's all total). Advice?</p>\n<p>I've been thinking of seeing if something like one of Isabelle's sledgehammers might help. At least that would mostly hide the lack of types from me. But I find encoding category theory in HOL tedious, compared with doing it in dependent type theory, so I'm a little loath to pursue that route. [Plus I can only read Isabelle/HOL right now, I've never written any!]</p>",
        "id": 307360004,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667322467
    },
    {
        "content": "<p>Have you seen the work of Hamana on SOL (one paper with several examples is <a href=\"https://www.cambridge.org/core/journals/journal-of-functional-programming/article/how-to-prove-decidability-of-equational-theories-with-secondorder-computation-analyser-sol/82CDDB6C015422563D5043CFABC677BC\">this one</a>)? I've not yet tried it myself, but it seems pretty powerful.</p>",
        "id": 307398251,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1667334615
    },
    {
        "content": "<p>I had not! Thanks, that does look intriguing.</p>",
        "id": 307406806,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667338222
    },
    {
        "content": "<p>I've experimented with using Prover9  (and mace4) to prove category theory statements. You can see some of my mace files <a href=\"https://github.com/punkdit/pyfinder/tree/master/pyfinder/theories\">here</a>. I was aiming to formalize rig categories, but I eventually gave up. It's pretty tricky, mainly because composition is a partial operation. The usual way to get around this is to have an \"undefined\" object, and this ends up polluting every (or most) predicates...</p>",
        "id": 307727628,
        "sender_full_name": "Simon Burton",
        "timestamp": 1667481953
    },
    {
        "content": "<p>I think the Connexus tool <em>can</em> be used in this way, as a theorem prover for working with finite presentations of categories</p>",
        "id": 307763153,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1667491159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277321\">@Simon Burton</span> you do know that <code>agda-categories</code> does have a formalization of rig categories?</p>\n<p>I was definitely afraid that \"losing the types\" would end up being a nightmare. This is what I learned from <span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> 's experience <a href=\"https://www.philipzucker.com/category-theory-in-the-e-automated-theorem-prover/\">with E</a> and experiments <a href=\"https://www.philipzucker.com/notes-on-synthesis-and-equation-proving-for-catlab-jl/\">around Catlab</a>.   Christoph Benzmuller's <a href=\"http://aitp-conference.org/2018/slides/CBDS.pdf\">experiments</a> did not fill me with hope either!  But then, this morning, I saw the paper <a href=\"https://hal.inria.fr/hal-03814635/document\">Seventeen Provers under the Hammer</a> which gave me renewed hope.</p>",
        "id": 307800101,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667496724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> Thanks - but I'm not really working on presentations of categories, rather I'm trying to prove some equalities in something akin to special dagger rig categories. Specifically whether a model we've constructed satisfies axioms C1-C20 that Selinger et al enumerate on p.3 of <a href=\"https://arxiv.org/abs/2204.02217\">this paper</a>.</p>",
        "id": 307800996,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667496975
    },
    {
        "content": "<p>FYI The line of thinking that was kicked off by those experiments is still progressing. There is a new system in the works <a href=\"https://github.com/mwillsey/egg-smol\">https://github.com/mwillsey/egg-smol</a> (publication in progress, still not really intended for external users quite yet) that can be seen as a much more powerful and performant version of this prototype <a href=\"https://www.philipzucker.com/egglog/\">https://www.philipzucker.com/egglog/</a> in collaboration with some of the egg people at UW. The system is heavily based in the idea of partial functions, datalog, and equational (egraph based) rewriting with sophisticated guard conditions. Proof production is definitely in the roadmap and people are flirting with the question of how to do a sound CAS. I've also been wondering if I should revisit my E/Vampire encodings in light of a year or two of more experience. I think heavily leaning into a Maybe monad style encoding to make everything partial could work, especially with a metaprogramming environment to make it  less burdensome. I know of a group of people attempting to integrate egg1 into lean and another into coq, but I am unaware of anyone trying to do something similar for Agda, which I know is your playground. Would be interested to understand good example problems in rig categories or otherwise if they are digestible by a mere mortal like myself, as we are always seeking more good applications of these systems.</p>",
        "id": 307810856,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1667499936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> We're in the middle of a paper where we need to see if C1-C20 of Selinger's paper (see link in response to Jules) hold. I think you'll get a good idea of the scope by just reading pages 1-3 of that paper.</p>",
        "id": 307830847,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667506683
    },
    {
        "content": "<p>If I'm reading this correctly, It is a pure group? Do you need n&gt;2 or where n changes?</p>",
        "id": 307833962,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1667507762
    },
    {
        "content": "<p>For that part, yes, actually, it is just the group. I've been so used to the general case that I did not notice that for this part, that's all we need. [We eventually want n&gt;2, but n=2  is already hard.]</p>",
        "id": 307898091,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667547377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/307800101\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277321\">Simon Burton</span> you do know that <code>agda-categories</code> does have a formalization of rig categories?<br>\n...</p>\n</blockquote>\n<p>Thanks for that overview. I did review the work done in agda. One thing that's fun about using Prover9 is that the sister program mace4 looks for models that provide a counterexample to statements. But I see now that I ran into many of the same issues that <span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> <a href=\"https://www.philipzucker.com/category-theory-in-the-e-automated-theorem-prover/\">had</a>: \"<em>Just because it says proved is not very convincing. It is very easy to have your axioms and/or conjecture stated incorrectly. Forall ! and Exists ? bind tighter than I naively expect them to in the syntax. I ended up putting parenthesis nearly everywhere. I had a lot of very difficult to debug problems due to bad binding assumptions.</em>\"</p>\n<p>Proving things in CT is often as easy as falling off a log. The arrows already tell you what to do. So the feeling is that a prover tailored to CT should work well. Even classical logic seems to be overkill for most CT, we only need very weak logic. Coherence results are more subtle, those are more like proving confluence of a rewrite system. But otherwise, we should be able to solve the word problem in various free higher-categories, such as a monoidal bicategory. Using stuff like Lean just seems like an impedance mismatch. So anyway, I'm pretty excited to see other people are working on this. I should probably let the professionals sort it out and stop shooting myself in the foot repeatedly, even though I still have some foot leftover...</p>",
        "id": 307928736,
        "sender_full_name": "Simon Burton",
        "timestamp": 1667559047
    },
    {
        "content": "<p>Yeah, I might get around to working on that. Might happen in the second quarter of 2023 even.</p>",
        "id": 307944355,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667564640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296322\">@Jacques Carette</span> The KWARC research group has implemented an IDE for an extensional dependent type theory which translates the dependent type theory to HOL under the hood and then uses the automated theorem prover Leo III to try and solve theorems automatically. <a href=\"https://arxiv.org/abs/2305.15382\">https://arxiv.org/abs/2305.15382</a></p>",
        "id": 411524958,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704563694
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"424412\">@Patrick Nicodemus</span> . I guess neither Florian nor Christoph had seen my query here, as I would have expected to mention this when we were all in the same place last October. But test results of section 6.1 of the paper do not leave me optimistic.</p>",
        "id": 411530805,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1704568889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296322\">@Jacques Carette</span> The tests don't reflect the way I imagine the software being most useful to category theorists. A more modest goal would be to assess only the purely equational reasoning involved in category theory. For example, the category theorist should supply the definition of a functor on objects and morphisms and let the HOL prover check that the functor preserves identity and composition. Equational reasoning should be trivial indeed but in Coq and Agda category theory libraries there are long chains of equational reasoning that require user knowledge of the library to solve, it would be good if this could be limited. Really by this point equational reasoning in a category should be a solved problem and there should be off the shelf tooling available.</p>",
        "id": 411545353,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704582094
    },
    {
        "content": "<p>The tests in the paper all involve existential reasoning, which I think is a high bar to clear in general - there <em>exists</em> an isomorphism... I would be more than happy with a formal proof system which realistically allows us to only define things and takes care of the coherence conditions for us automatically.<br>\nFor a more complex example, when building a bifunctor i think it's realistic for the user to manually supply the unitor and associator isomorphisms and ask that the coherence isomorphisms like the mac lane pentagon are manually checked.</p>",
        "id": 411545482,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704582232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277321\">Simon Burton</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/307928736\">said</a>:</p>\n<blockquote>\n<p>Using stuff like Lean just seems like an impedance mismatch.</p>\n</blockquote>\n<p>Yes, I really agree. It's strange that category theory is at once so simple and so complicated. Simple in that it is merely equational reasoning in large part, and seems to not need too many alternating quantifiers at its worst - universal properties are usually \"for all, there exist\".<br>\nYet because we talk about classes we want type theories with universes, and because we talk about partially defined functions like composition we reach for dependent types as a principled solution to this, and now we stumble into all the problems with intensional equality.</p>",
        "id": 411545870,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704582658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> Do you think that the Connexus software could prove the simplicial identities for the simplex category automatically if i specified it as the free monoidal category with distinguished monoid and wrote down the presentation by the generating object and the rules for a monoid</p>",
        "id": 411546073,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704582863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277321\">Simon Burton</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/307928736\">said</a>:</p>\n<blockquote>\n<p>Thanks for that overview. I did review the work done in agda. One thing that's fun about using Prover9 is that the sister program mace4 looks for models that provide a counterexample to statements. </p>\n</blockquote>\n<p>Isabelle has <code>nitpick</code> now, which is a very good counterexample tool. Honestly, I don't know much about automated theorem proving but why not use Isabelle instead of Prover9? this is uninformed here but I would expect to be able to do anything you can do in Prover9 in Isabelle and Sledgehammer's portfolio strategy seems like it would work better than using a single theorem prover.</p>",
        "id": 411546206,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704582981
    },
    {
        "content": "<p>More generally my uninformed assumption is that Isabelle probably has a more developed interface for specifying your theory. And I don't find the syntax confusing generally. (Well, using <code>=</code> for iff results in weird binding conventions.)</p>",
        "id": 411546354,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704583155
    },
    {
        "content": "<p>Conexus CQL provides decision procedures for the word problem in finitely presented categories using an algorithm that is complete for equational theories which admit length non-decreasing re-write systems.  It also provides decision procedures for the word problem in product categories, for example \"entropic groupoid presentations\", although those are a lot tougher.  I'd be happy to work together to try to formalize the result about simplex categories you are looking for</p>",
        "id": 411559820,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1704593664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281326\">@Ryan Wisnesky</span> I guess what I'm asking is whether it would be reasonable to extend this to finitely presented monoidal categories, where \"finitely presented\" refers to the fact that only finitely many objects and morphisms need to be specified, although the category may have infinitely many objects.</p>",
        "id": 411571363,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704605379
    },
    {
        "content": "<p>I think the completion algorithm in question throws the sorts/objects away, so that seems reasonable, you'd need to provide an equational theory over a single sort.  The monoidal aspect you'd similarly need to encode, using e.g. extra morphisms.  I don't know much about the simplex equations but I was able to write and have CQL decide a toy theory that looks like my erroneous understanding of it for a small N:</p>\n<blockquote>\n<p>schema simplicial = literal : empty {<br>\n    entities<br>\n        S<br>\n    foreign_keys<br>\n        d1 d2 s0 s1 : S -&gt; S<br>\n    path_equations<br>\n        S.d2.d1 = S.d1.d1   <br>\n        S.s1.s0 = S.s0.s0<br>\n        S.d2.s1 = S.s0.d2<br>\n}</p>\n</blockquote>",
        "id": 411572028,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1704606156
    },
    {
        "content": "<p>fwiw, to decide the word problem CQL generated a system that includes length-preserving re-write rules, so this isn't an \"easy\" theory to decide</p>",
        "id": 411572041,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1704606182
    },
    {
        "content": "<p>Using software for mere categorical reasoning wouldn't really help that much - it's so easy humans can do it easily too.</p>\n<p>Where things get hairy are when you get to bicategories and (separately) to say symmetric rig groupoids. The number of coherences (i.e. rewrites) get crazy (somewhat over 100). That's what I'd like automation for!</p>",
        "id": 411627275,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1704656615
    },
    {
        "content": "<p>When we deploy CQL at companies to do data integration, it routinely decides equational theories with thousands of equations or more in seconds.  Most of these theories are never seen by people, they are induced by e.g. SQL schemas and OWL ontologies and datalog programs and ... .</p>",
        "id": 411630541,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1704659994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/411627275\">said</a>:</p>\n<blockquote>\n<p>Using software for mere categorical reasoning wouldn't really help that much - it's so easy humans can do it easily too.</p>\n<p>Where things get hairy are when you get to bicategories and (separately) to say symmetric rig groupoids. The number of coherences (i.e. rewrites) get crazy (somewhat over 100). That's what I'd like automation for!</p>\n</blockquote>\n<p>Sure, I meant bicategories and stuff like that. The point is it's equational.</p>",
        "id": 411636355,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704665680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/411636355\">said</a>:</p>\n<blockquote>\n<p>Sure, I meant bicategories and stuff like that. The point is it's equational.</p>\n</blockquote>\n<p>It's <em>typed</em> equational - I think if you throw away the types, might it not be an inequivalent theory?</p>",
        "id": 411733788,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1704718799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/411733788\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/411636355\">said</a>:</p>\n<blockquote>\n<p>Sure, I meant bicategories and stuff like that. The point is it's equational.</p>\n</blockquote>\n<p>It's <em>typed</em> equational - I think if you throw away the types, might it not be an inequivalent theory?</p>\n</blockquote>\n<p>Yeah it's a good question. I alluded to this earlier when I said that it was \"simple in some ways and complicated in others.\" I would really like to know what kind of soundness theorems exist for trying to embed an equational theory with partially defined functions into an untyped theory as it's obviously relevant here. Note that of course all equations of category theory are well typed and so one side is well typed iff the other one is. This suggests to me that equational rewriting between two well typed expressions of category theory will not go wrong in an untyped logic, as you should be able to carefully express the rewriting rules so that well typed terms are always rewritten to well typed terms and maybe you can get a soundness theorem this way</p>",
        "id": 411743024,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704722334
    },
    {
        "content": "<p>Goguen studied the reduction of many-sorted FOL to single-sorted FOL and gave conditions for when that is sound <a href=\"https://dl.acm.org/doi/pdf/10.1145/24714.24719\">https://dl.acm.org/doi/pdf/10.1145/24714.24719</a> .  FWIW, dealing with empty sorts in current FOL provers that are singly typed is pretty annoying</p>",
        "id": 411774048,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1704731726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/411627275\">said</a>:</p>\n<blockquote>\n<p>Where things get hairy are when you get to bicategories and (separately) to say symmetric rig groupoids. The number of coherences (i.e. rewrites) get crazy (somewhat over 100). That's what I'd like automation for!</p>\n</blockquote>\n<p>How are you getting the figure of over 100 coherence laws?</p>",
        "id": 411776633,
        "sender_full_name": "John Baez",
        "timestamp": 1704732604
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊕</span></span></span></span> as bifunctors add a few, that they are in fact part of a monoidal structure a bunch more,  braiding + symmetry some more, that the various equational laws of rigs are not just natural transformations but natural isomorphisms add quite a few more, then a whole bunch more for the Laplaza coherences.</p>\n<p>In other words, you get that many when you 'flatten out' everything you need, separate out the structure from the things that need to commute - you end up with &gt; 100 conditions.</p>",
        "id": 411787298,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1704735499
    }
]