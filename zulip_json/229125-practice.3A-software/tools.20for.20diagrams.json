[
    {
        "content": "<p>Per Jules' request to shift streams: <br>\n<a href=\"#narrow/stream/229111-general/topic/Tools.20for.20diagrams/near/191786550\" title=\"#narrow/stream/229111-general/topic/Tools.20for.20diagrams/near/191786550\">https://categorytheory.zulipchat.com/#narrow/stream/229111-general/topic/Tools.20for.20diagrams/near/191786550</a></p>",
        "id": 191787236,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1585159098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span> I was thinking more about graph drawing with symmetry and found this paper <a href=\"https://link.springer.com/content/pdf/10.1007/3-540-36151-0_9.pdf\" title=\"https://link.springer.com/content/pdf/10.1007/3-540-36151-0_9.pdf\">https://link.springer.com/content/pdf/10.1007/3-540-36151-0_9.pdf</a></p>",
        "id": 191964220,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1585267553
    },
    {
        "content": "<p>Thanks James, this paper looks extremely relevant. I've even seen commutative diagrams that look like the second panel of Fig 1. The 2D version of it appears in Fong &amp; Spivak's paper on supply, for example.</p>",
        "id": 191968104,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1585271334
    },
    {
        "content": "<p>Their implementation is in Magma, but nauty is used under the hood.</p>",
        "id": 191968178,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1585271424
    },
    {
        "content": "<p>I'll have to read the paper carefully but I really like the idea of this approach.</p>",
        "id": 191968200,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1585271468
    },
    {
        "content": "<p>This is a basic question: I've been playing with a made-up notation for a language I care about, and I was just wondering what software would be the best way to draw things like this:<br>\n<a href=\"/user_uploads/21317/sGZ-3U24Lkep_JO0CnYJWaB7/rho-notation.jpg\" title=\"rho-notation.jpg\">rho-notation.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/sGZ-3U24Lkep_JO0CnYJWaB7/rho-notation.jpg\" title=\"rho-notation.jpg\"><img src=\"/user_uploads/21317/sGZ-3U24Lkep_JO0CnYJWaB7/rho-notation.jpg\"></a></div>",
        "id": 191980604,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585290592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229125-software/topic/tools.20for.20diagrams/near/191980604\" title=\"#narrow/stream/229125-software/topic/tools.20for.20diagrams/near/191980604\">said</a>:</p>\n<blockquote>\n<p>This is a basic question: I've been playing with a made-up notation for a language I care about, and I was just wondering what software would be the best way to draw things like this:<br>\n<a href=\"/user_uploads/21317/sGZ-3U24Lkep_JO0CnYJWaB7/rho-notation.jpg\" title=\"rho-notation.jpg\">rho-notation.jpg</a></p>\n</blockquote>\n<p>they look like trees? do you just need to draw a few for a paper?</p>",
        "id": 192025928,
        "sender_full_name": "Jelle Herold",
        "timestamp": 1585319760
    },
    {
        "content": "<p>I would go for TikzIt intuitively.</p>",
        "id": 192044168,
        "sender_full_name": "Antonin Delpeuch",
        "timestamp": 1585326687
    },
    {
        "content": "<p>I use a python package called PyX for most of my diagrams... <a href=\"https://pyx-project.org/\" title=\"https://pyx-project.org/\">https://pyx-project.org/</a></p>",
        "id": 192069636,
        "sender_full_name": "Simon Burton",
        "timestamp": 1585337803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277920\">@Jelle Herold</span> yes, they are just trees with red/green/blue/black/white nodes. plus a bit more complexity, because they are really \"operads with binding\"... but I'm still working on a good notation for that.</p>\n<p>initially I want to just draw a few for a paper, but in the long run I would love to have a something like what y'all have done for string diagrams, where you can really code with it.</p>",
        "id": 192069940,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585337981
    },
    {
        "content": "<p>thanks, that looks nice.</p>",
        "id": 192070048,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585338034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span>, if you like the idea of editing these trees in ascii art I can extend dednat6 to produce these kinds of diagrams very quickly... take a look at <a href=\"http://angg.twu.net/dednat6.html#a-big-example\" title=\"http://angg.twu.net/dednat6.html#a-big-example\">http://angg.twu.net/dednat6.html#a-big-example</a> and <a href=\"http://angg.twu.net/dednat6/demo-underbrace.pdf\" title=\"http://angg.twu.net/dednat6/demo-underbrace.pdf\">http://angg.twu.net/dednat6/demo-underbrace.pdf</a> - btw, I need to fix that PDF! Doing that now!!!</p>",
        "id": 192099118,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1585359858
    },
    {
        "content": "<p>wow this looks <em>exactly</em> like one of the figures in brent yorgey's thesis <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 192141449,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429350
    },
    {
        "content": "<p>ok wait it wasnt quite as exact as i was thinking <a href=\"/user_uploads/21317/NNRqEeBy_667IVHEkUA3XZy_/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/NNRqEeBy_667IVHEkUA3XZy_/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/NNRqEeBy_667IVHEkUA3XZy_/image.png\"></a></div>",
        "id": 192141462,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429401
    },
    {
        "content": "<p>but! regardless! use his <code>diagrams</code> library!!!!</p>",
        "id": 192141511,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429447
    },
    {
        "content": "<p>(if you like writing code to generate this kind of thing)</p>",
        "id": 192141517,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429460
    },
    {
        "content": "<p>i went on a ramble about that library just yesterday over in another stream</p>",
        "id": 192141520,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429485
    },
    {
        "content": "<p>see here <a href=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192079928\" title=\"#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192079928\">https://categorytheory.zulipchat.com/#narrow/stream/229199-basic-questions/topic/functional.20programming.20101/near/192079928</a></p>",
        "id": 192141532,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> i would not be surprised if you could get a working prototype of something that programmatically generates such trees from abstract syntax in under a few hours, playing around with <code>diagrams</code> in <code>ihaskell</code>—uh, well, if you already knew how to use <code>diagrams</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 192141751,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429880
    },
    {
        "content": "<p>initial learning carries some overhead.</p>",
        "id": 192141760,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585429906
    },
    {
        "content": "<p>In Julia, the package Compose.jl offers similar capabilities. Its authors say it is partly inspired by the Haskell diagrams package.</p>\n<p><a href=\"https://giovineitalia.github.io/Compose.jl/latest/tutorial/\" title=\"https://giovineitalia.github.io/Compose.jl/latest/tutorial/\">https://giovineitalia.github.io/Compose.jl/latest/tutorial/</a></p>\n<p>I've used this package a bit, and I like it.</p>",
        "id": 192142103,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1585430470
    },
    {
        "content": "<p>hmm, it looks nice but probably a lot less powerful</p>",
        "id": 192142216,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585430664
    },
    {
        "content": "<p>yeah this is a ton more limited in scope</p>",
        "id": 192142290,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585430795
    },
    {
        "content": "<p>but ill keep it in mind if i ever have to use julia instead of haskell c:</p>",
        "id": 192142296,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585430813
    },
    {
        "content": "<p>Out of curiosity, what does Diagrams have that Compose.jl doesn't? I have never used Diagrams.</p>",
        "id": 192142360,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1585430979
    },
    {
        "content": "<p>well, it does have a whole little ecosystem, but even if we just restrict ourselves to the core library—like, the library <code>diagrams-core</code>... (actually, the <code>diagrams</code> package itself pulls in a bunch of extra stuff besides that too)</p>",
        "id": 192142493,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431155
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/diagrams-core\" title=\"https://hackage.haskell.org/package/diagrams-core\">https://hackage.haskell.org/package/diagrams-core</a></p>",
        "id": 192142497,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431161
    },
    {
        "content": "<p>so like, diagrams is fundamentally built on a bunch of abstractions for geometry</p>",
        "id": 192142509,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431205
    },
    {
        "content": "<p>a diagram has spatial extent and stuff</p>",
        "id": 192142511,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431215
    },
    {
        "content": "<p>it has an origin</p>",
        "id": 192142561,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431286
    },
    {
        "content": "<p>well ok, i think compose has an origin too</p>",
        "id": 192142571,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431310
    },
    {
        "content": "<p>but it doesnt look to me like it has an envelope or a trace</p>",
        "id": 192142576,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431317
    },
    {
        "content": "<p>yeah, this is awesome. I'm not yet much of a programmer, but I'll try it out</p>",
        "id": 192142579,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585431324
    },
    {
        "content": "<p>also, diagrams's approach to applying properties seems to be different from Compose.jl's, and I'm not sure I like the latter's as much</p>",
        "id": 192142632,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431398
    },
    {
        "content": "<p>this is a topic for another time, but I am amazed that people have not developed a standard notation for operads with binding. rather than just monoids and other algebraic gadgets, you can use this stuff for actual programming languages.</p>",
        "id": 192142641,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585431415
    },
    {
        "content": "<p>ooh!</p>",
        "id": 192142653,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431441
    },
    {
        "content": "<p>that sounds really cool <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 192142654,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431448
    },
    {
        "content": "<p>actually i remember one of the talks i went to at POPL was about generalized theories of syntax using monads and stuff and i <em>think</em> maybe binding was part of it</p>",
        "id": 192142663,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431476
    },
    {
        "content": "<p>I talked with somebody about building a string diagrams tool around <code>diagrams</code> (I don't remember who... was it <span class=\"user-mention\" data-user-id=\"277920\">@Jelle Herold</span>?) Idea is that if the data structure you use to represent morphisms is proof trees with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span> and cut (aka kd trees) then turning the proof tree into a diagram is just a fold, more or less out of the box using the things provided by <code>diagrams</code></p>",
        "id": 192142702,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585431484
    },
    {
        "content": "<p>but. i dont remember super well :|</p>",
        "id": 192142703,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431487
    },
    {
        "content": "<p>yeah jules i started doing something like that once</p>",
        "id": 192142708,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431503
    },
    {
        "content": "<p>but it was kinda broken</p>",
        "id": 192142711,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431513
    },
    {
        "content": "<p>and i petered out</p>",
        "id": 192142712,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431517
    },
    {
        "content": "<p>take a look: <a href=\"https://github.com/sarahzrf/compact-closed/blob/master/StringDiagrams2.ipynb\" title=\"https://github.com/sarahzrf/compact-closed/blob/master/StringDiagrams2.ipynb\">https://github.com/sarahzrf/compact-closed/blob/master/StringDiagrams2.ipynb</a></p>",
        "id": 192142722,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> , I implemented something very much like that using Compose.jl. It's a nice approach.</p>",
        "id": 192142733,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1585431584
    },
    {
        "content": "<p>Cool! Looks like what I had in mind</p>",
        "id": 192142795,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585431606
    },
    {
        "content": "<p>anyway check out the index for <code>diagrams-lib</code>, which gets pulled in as part of the <code>diagrams</code> package <a href=\"https://hackage.haskell.org/package/diagrams-lib-1.4.3/docs/doc-index-All.html\" title=\"https://hackage.haskell.org/package/diagrams-lib-1.4.3/docs/doc-index-All.html\">https://hackage.haskell.org/package/diagrams-lib-1.4.3/docs/doc-index-All.html</a></p>",
        "id": 192142796,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431607
    },
    {
        "content": "<p>it's a hell of a lot more extensive than Compose.jl!</p>",
        "id": 192142797,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431614
    },
    {
        "content": "<p>oh wait actually a bunch of this is probably re-exports lol</p>",
        "id": 192142802,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> the other thing i did in this repo was uh</p>",
        "id": 192142872,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431746
    },
    {
        "content": "<p>abstract index notation @_@</p>",
        "id": 192142875,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431756
    },
    {
        "content": "<p>idea being you can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">[</span><span class=\"n\">tensor</span><span class=\"o\">|</span> <span class=\"n\">tens</span><span class=\"o\">^</span><span class=\"n\">a_x</span> <span class=\"ow\">=</span> <span class=\"n\">s</span> <span class=\"n\">w</span><span class=\"o\">^</span><span class=\"n\">ba</span> <span class=\"n\">v_xb</span> <span class=\"o\">|</span><span class=\"p\">]</span>\n</pre></div>",
        "id": 192142884,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431776
    },
    {
        "content": "<p>where <code>s</code>, <code>w</code>, and <code>v</code> are identifiers in scope</p>",
        "id": 192142890,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431801
    },
    {
        "content": "<p>and this generates a binding for <code>tens</code></p>",
        "id": 192142897,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431818
    },
    {
        "content": "<p>purely in terms of compact closed category operations</p>",
        "id": 192142899,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431828
    },
    {
        "content": "<p>i copied and pasted that line from an actual example that compiles <a href=\"https://github.com/sarahzrf/compact-closed/blob/master/src/CompactClosed/Test.hs\" title=\"https://github.com/sarahzrf/compact-closed/blob/master/src/CompactClosed/Test.hs\">https://github.com/sarahzrf/compact-closed/blob/master/src/CompactClosed/Test.hs</a></p>",
        "id": 192142938,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431848
    },
    {
        "content": "<p>or, well, compiled at one point, good luck figuring out my dependencies <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 192142941,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431859
    },
    {
        "content": "<p>put the two together and you get this<br>\n<a href=\"/user_uploads/21317/9s8pr5f3lC0v5YgSuXGq-emj/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/9s8pr5f3lC0v5YgSuXGq-emj/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/9s8pr5f3lC0v5YgSuXGq-emj/image.png\"></a></div>",
        "id": 192142964,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585431912
    },
    {
        "content": "<p>the code for the index notation is here, but don't ask me to try to figure out how black magic i hacked together 2 years ago works or i'll melt <a href=\"https://github.com/sarahzrf/compact-closed/blob/master/src/CompactClosed/AIN.hs\" title=\"https://github.com/sarahzrf/compact-closed/blob/master/src/CompactClosed/AIN.hs\">https://github.com/sarahzrf/compact-closed/blob/master/src/CompactClosed/AIN.hs</a></p>",
        "id": 192143014,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585432013
    },
    {
        "content": "<p>Cooool!</p>",
        "id": 192144048,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585433715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229125-software/topic/tools.20for.20diagrams/near/192142641\" title=\"#narrow/stream/229125-software/topic/tools.20for.20diagrams/near/192142641\">said</a>:</p>\n<blockquote>\n<p>this is a topic for another time, but I am amazed that people have not developed a standard notation for operads with binding. rather than just monoids and other algebraic gadgets, you can use this stuff for actual programming languages.</p>\n</blockquote>\n<p>it seems less surprising when you consider that people don't really use such operads in the first place, and you don't need to represent what you don't use</p>",
        "id": 192144698,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585434741
    },
    {
        "content": "<p>but I'd like to see a suggestive notation!</p>",
        "id": 192144699,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1585434758
    },
    {
        "content": "<p>Yes, the real surprise is that there is not yet public awareness that the notion of \"substitution structure\" (the monoid definition of operad) has binding implicit in it from the start.</p>\n<p>Discussing this with the community is a priority for me; rather than waiting for one of us to blog about it, perhaps you and I should start a thread about it tomorrow. Probably in <a class=\"stream\" data-stream-id=\"229136\" href=\"/#narrow/stream/229136-category-theory\">#category theory</a> , I guess.</p>",
        "id": 192158201,
        "sender_full_name": "Christian Williams",
        "timestamp": 1585461184
    },
    {
        "content": "<p>Early on when thinking about diagrams software I thought about the idea of letting users define and work in an arbitrary operad, rather than hard coding in certain structured monoidal categories. Gave up on that pretty quickly, I still have no idea how the user could communicate an operad to a computer</p>",
        "id": 192167030,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585477212
    },
    {
        "content": "<p>I guess you partly get that with systems like <a href=\"http://homotopy.io\" title=\"http://homotopy.io\">homotopy.io</a> where you can just truncate n-categories to get the right flavour of monoidal category, but you are still limited to what arises in this way (for instance you do not get traced monoidal categories afaik).</p>",
        "id": 192173194,
        "sender_full_name": "Antonin Delpeuch",
        "timestamp": 1585486857
    },
    {
        "content": "<p>Yeah, traced monoidal categories not fitting in anybody's tool was the main thing that motivated me. In the end I decided life's too short, traces should just be hard-coded as a weird but important special case</p>",
        "id": 192176735,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585491547
    },
    {
        "content": "<p>Here's something I've been thinking about that I think is kind of interesting. <a href=\"http://www.philipzucker.com/uniform-continuity-is-kind-of-like-a-lens/\" title=\"http://www.philipzucker.com/uniform-continuity-is-kind-of-like-a-lens/\">http://www.philipzucker.com/uniform-continuity-is-kind-of-like-a-lens/</a></p>",
        "id": 192185523,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1585503670
    },
    {
        "content": "<p>I might just be suffering from Lens Madness though</p>",
        "id": 192185547,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1585503712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/229125-software/topic/tools.20for.20diagrams/near/192185523\" title=\"#narrow/stream/229125-software/topic/tools.20for.20diagrams/near/192185523\">said</a>:</p>\n<blockquote>\n<p>Here's something I've been thinking about that I think is kind of interesting. <a href=\"http://www.philipzucker.com/uniform-continuity-is-kind-of-like-a-lens/\" title=\"http://www.philipzucker.com/uniform-continuity-is-kind-of-like-a-lens/\">http://www.philipzucker.com/uniform-continuity-is-kind-of-like-a-lens/</a></p>\n</blockquote>\n<p>This is very cool!</p>",
        "id": 192194327,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1585516171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276320\">@Antonin Delpeuch</span>  what do you use to latex surface diagrams? Is there some macro for them?</p>",
        "id": 192527278,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585747857
    },
    {
        "content": "<p>Something that isn't quite ready to be released yet, so moving to a PM :)</p>",
        "id": 192527456,
        "sender_full_name": "Antonin Delpeuch",
        "timestamp": 1585747937
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 192527514,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1585747966
    },
    {
        "content": "<p>oh yeah <span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> did you ever talk about operads &amp; binding?</p>",
        "id": 192527745,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585748065
    },
    {
        "content": "<p>There was a suggestion by <span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> after my talk on wednesday when I brought up the question of string diagram compilers, to try hacking on Proto-Quipper-M to take out the quantum and make it general purpose..... I don't remember that suggestion ever coming up before, does anyone have any thoughts?</p>",
        "id": 194420347,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587118894
    },
    {
        "content": "<p>We looked into Proto-Quipper. It's already not quantum and way more general (Proto-Quipper != Quipper)</p>",
        "id": 194422000,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587119921
    },
    {
        "content": "<p>It's also written in Haskell, so it could be a good choice if you want to hook it up with your backend</p>",
        "id": 194422057,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587119958
    },
    {
        "content": "<p>Cool! Any idea how feasible/difficult that would be? I saw Vlad talking about it once or twice, but i never looked at the thing itself</p>",
        "id": 194422099,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587119996
    },
    {
        "content": "<p>If I remember correctly tho, the point of protoquipper wasn't to \"compile string diagrams\" (whatever this means), but have a programming language to specify classes of string diagrams, and perform operations on them at once</p>",
        "id": 194422146,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120003
    },
    {
        "content": "<p>I think your best bet is to ask directly to vlad or to <span class=\"user-mention\" data-user-id=\"276023\">@Francisco Rios</span></p>",
        "id": 194422165,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120027
    },
    {
        "content": "<p>If you already looked into it at Statebox, why did you choose not to go with it?</p>",
        "id": 194422196,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587120052
    },
    {
        "content": "<p>Various reasons. One of them is that we need formally verified code, so Haskell doesn't cut it</p>",
        "id": 194422243,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120084
    },
    {
        "content": "<p>But then again the main reason is that as I said protoquipper seems suited to talk about string diagrams in a general setting, while we needed a way to map selected string diagrams to some category</p>",
        "id": 194422293,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120119
    },
    {
        "content": "<p>so the application domain is different</p>",
        "id": 194422341,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120126
    },
    {
        "content": "<p>Ah, it also doesn't function as a compiler? I thought part of the point was it could compile to instructions to control quantum hardware...</p>",
        "id": 194422404,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587120175
    },
    {
        "content": "<p>So our core is literally the formally verified implementation of the idea that every free symmetric strict monoidal category has a free functor to some other category if you specify some stuff.</p>",
        "id": 194422423,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120194
    },
    {
        "content": "<p>I guess so, but there is not such thing as \"a compiler\", there is a compiler to a very specific domain</p>",
        "id": 194422458,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120231
    },
    {
        "content": "<p>So if the target is compiling to quantum hardware I don't know how useful will this be to you. It really depends on the implementation strategy adopted, but there is a possibility that you'll have to rewrite parts of it by yourself</p>",
        "id": 194422532,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120271
    },
    {
        "content": "<p>So, for instance, if protoquipper compiles to Haskell in a way that is useful to you (and then from there there's a way to compile Haskell to quantum stuff), then you could just take that bit</p>",
        "id": 194422595,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120326
    },
    {
        "content": "<p>I never looked into the implementation stategy of it tho, I merely read the protoquipper paper. So I'd really wait for Francisco to chime in.</p>",
        "id": 194422635,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120356
    },
    {
        "content": "<p>Definitely sounds like something worth looking into more closely. For my open games DSL specifically, it might be much less effort to build on top of Proto-Quipper-M than to start from my language and add the missing parts to make it nice, like hooking into the haskell compiler properly</p>",
        "id": 194422699,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587120378
    },
    {
        "content": "<p>If you like the idea of coding in idris you may also use our implementation of free smc :P</p>",
        "id": 194422737,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120414
    },
    {
        "content": "<p>Personally I'd rather run the risk of having bugs. If anyone ever wants to use open games to support business decisions, they can pay for a provably-correct rewrite if they want it.....</p>",
        "id": 194422906,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587120519
    },
    {
        "content": "<p>I can't blame you xD</p>",
        "id": 194422937,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587120547
    },
    {
        "content": "<p>Anyone know whether anyone is using Quipper or Proto-Quipper-M in industry right now? (Is anyone from CQC hanging out here?)</p>",
        "id": 194423587,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587121055
    },
    {
        "content": "<p>Two years ago I remember Francisco was under NDA with an undisclosed party regarding Quipper. I don't know if this is still the case but for sure there'interest in industry for this sort of tech.</p>",
        "id": 194423674,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587121106
    },
    {
        "content": "<p>.<br>\nHi Jules,</p>\n<p>Thanks for your interest in Proto-Quipper-M!  Certainly, the language does not compile<br>\nto instructions to control quantum hardware. Rather, Proto-Quipper-M is a language for<br>\ndescribing families of morphisms in an arbitrary symmetric monoidal category, of which<br>\nquantum circuits are but one example. And, indeed, as Fab mentioned, there has been<br>\ninterest (and support) for Quipper and Proto-Quipper-M from industry and government<br>\nagencies for a while now.</p>\n<p>Cheers!<br>\n.</p>",
        "id": 194527438,
        "sender_full_name": "Francisco Rios",
        "timestamp": 1587187994
    },
    {
        "content": "<p>Hi! I'm the only weirdo here who uses Lua and LuaLaTeX to typeset diagrams, but</p>\n<p>1) I believe that it shouldn't be hard to integrate my package (that is called \"Dednat6\") with the other ones that people use here - including the ones in Haskell and Scala, and<br>\n2) I just made a video about Dednat6! It is here:</p>\n<p><a href=\"http://angg.twu.net/dednat6.html#hacking\" title=\"http://angg.twu.net/dednat6.html#hacking\">http://angg.twu.net/dednat6.html#hacking</a></p>\n<p>A good part of the video is about how Dednat6 can be used outside lualatex as a bunch of Lua libraries, and how I wrote its libraries for planar Heyting Algebras... I started by the code that displayed my HAs and my constructions on them as ASCII art, and I only implemented LaTeX output much, much later.</p>\n<p>Cheers! =)</p>",
        "id": 194530092,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1587193120
    },
    {
        "content": "<p>This might be cool: <a href=\"http://penrose.ink/media/Penrose_SIGGRAPH2020_Supplemental_Grammars.pdf\">http://penrose.ink/media/Penrose_SIGGRAPH2020_Supplemental_Grammars.pdf</a></p>",
        "id": 199688366,
        "sender_full_name": "Blake Pollard",
        "timestamp": 1591225799
    },
    {
        "content": "<p>People, where are the good places for asking questions about Tikz?<br>\nIs it ok to ask one question about Tikz here besides the meta-question above?</p>\n<p>Here it goes... I am working (veeery slowly) on a Tikz back-end for this package for generating categorical diagrams, &lt;<a href=\"http://angg.twu.net/dednat6.html#a-big-example\">http://angg.twu.net/dednat6.html#a-big-example</a>&gt;, and I discovered that I can use &lt;<a href=\"https://tikzcd.yichuanshen.de/\">https://tikzcd.yichuanshen.de/</a>&gt; to learn the Tikz syntax for all the modifiers for arrows that I use in the current back-end, that uses diagxy... but <a href=\"http://tikzcd.yichuanshen.de\">tikzcd.yichuanshen.de</a> generates code for tikzcd, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>\\begin{tikzcd}\nA \\arrow[r, &quot;foo&quot;] \\arrow[rd, &quot;plic&quot;&#39;, maps to]\n  &amp; B \\arrow[d, &quot;bar&quot;, Rightarrow] \\\\\n  &amp; C                             \n\\end{tikzcd}\n</code></pre></div>\n\n\n<p>and to port that I need to convert these \"\\arrow\"s to something like the \"\\draw\"s below, that connect nodes that I've defined previously and that can be in arbitrary positions... How do I do that? Or: where should I ask that?</p>\n<div class=\"codehilite\"><pre><span></span><code>\\begin{tikzpicture}\n  \\node (nodeA) at (0.0,0.0) {$A$};\n  \\node (nodeB) at (2.0,0.0) {$B$};\n  \\node (nodeC) at (2.0,-1.5) {$C$};\n  \\draw [-&gt;]            (nodeA) -- (nodeB);\n  \\draw [{}-{&gt;},double] (nodeB) -- (nodeC);\n  \\draw [{|}-{&gt;}]       (nodeA) -- (nodeC);\n\\end{tikzpicture}\n</code></pre></div>",
        "id": 200841610,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1592182928
    },
    {
        "content": "<p>I would have thought the <a href=\"http://ctan.math.washington.edu/tex-archive/graphics/pgf/contrib/tikz-cd/tikz-cd-doc.pdf\">tikz-cd documentation</a> might be a better place to start than generating output from a tool. You can find the <a href=\"https://github.com/astoff/tikz-cd/blob/master/tikzlibrarycd.code.tex\">source code for tikz-cd</a> here, which will tell you what TikZ tikz-cd is outputting, presuming you're already familiar with TikZ itself.</p>",
        "id": 200841981,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1592183651
    },
    {
        "content": "<p>I am not familiar with Tikz.</p>",
        "id": 200845697,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1592190574
    },
    {
        "content": "<p>People, what do you use to draw string diagrams like these ones?<br>\n<a href=\"/user_uploads/21317/9asu5fIKxtb1Q6THwWPwoUGS/marsden.png\">marsden.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/9asu5fIKxtb1Q6THwWPwoUGS/marsden.png\" title=\"marsden.png\"><img src=\"/user_uploads/21317/9asu5fIKxtb1Q6THwWPwoUGS/marsden.png\"></a></div>",
        "id": 203748062,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1594663226
    },
    {
        "content": "<p>Most likely tikz</p>",
        "id": 203748214,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1594663284
    },
    {
        "content": "<p>Ooops, sorry! My question has a second half... here it is.</p>\n<p>Those diagrams are from Dan Marsden's \"Category Theory Using String Diagrams\", that is at &lt;<a href=\"https://arxiv.org/abs/1401.7220\">https://arxiv.org/abs/1401.7220</a>&gt;, and its source code can be downloaded from there. The code for those diagrams is a series of \"tikzpicture\"s in the section \"Universality from Representables\" in string.tex. Most of its coordinates are hardcoded.</p>\n<p>I sort of know how to draw this things in Tikz - I am not proficient yet, so drawing a diagram like that still takes me an evening, but let's pretend that I did not confess this...</p>\n<p>The question - to the people here who use string diagrams a lot - is: what is your workflow for drawing them? Do you start with a draft on paper, then program it in Tikz by guessing first approximations the coordinates, then adjust them by changing them in the code and recompiling several times until happy? Do you draw the first version on something like Inkscape instead of on paper? Is there a graphics editor \"for Tikz\"?</p>",
        "id": 203751196,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1594664615
    },
    {
        "content": "<blockquote>\n<p>Is there a graphics editor \"for Tikz\"?</p>\n</blockquote>\n<p>I've heard <a href=\"https://tikzit.github.io/\">TikZiT</a> is pretty good.</p>",
        "id": 203751409,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1594664725
    },
    {
        "content": "<p>I would guess they were built in TikZit, which generates TikZ code that looks like it wasn't written by a human</p>",
        "id": 203751433,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1594664741
    },
    {
        "content": "<p>Thanks!!!</p>",
        "id": 203751619,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1594664819
    },
    {
        "content": "<p>They were built manually using just raw tikz and no tools other than a text editor. The reason for this is I care about the layout of the diagrams more than just the topology, as some depictions help with understanding more than others. I've drawn 1000s of these by now for papers and book projects, so I've got quite comfortable doing them from scratch. I only use a small handful of \"tricks\" to get nice layout, so it's not actually that hard to draw them quickly with a bit of practice. I chose not to use tikzit as it produces quite low level tikz code that is harder to make aesthetic adjustments on later. I made that decision a long time ago, so tikzit output may have changed since then. If you're doing research, rather than focused on exposition, your emphasis might be different. So my workflow, with coauthors, is simply draw on paper, layout in tikz in an editor, adjust until happy, done.</p>",
        "id": 203817907,
        "sender_full_name": "Dan Marsden",
        "timestamp": 1594722414
    },
    {
        "content": "<p>I'm equal parts impressed and horrified</p>",
        "id": 203818207,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1594722629
    },
    {
        "content": "<p>I mean I always write raw TikZ too, but you make a lot more diagrams than I do</p>",
        "id": 203818251,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1594722680
    },
    {
        "content": "<p>Well I should probably mention one other thing. We figured out how to use tikz more effectively to parameterise diagrams, for example by colours or labels. You often end up drawing nearly the same diagram again and again, so being able to instantiate a \"template\" diagram with a few details reconfigured is a good technique to save typing. You can bundle up these template diagrams as macros or something similar. I also used to be a programmer, so coding stuff up like this is very natural to me.</p>",
        "id": 203818771,
        "sender_full_name": "Dan Marsden",
        "timestamp": 1594723088
    },
    {
        "content": "<p>I saw your macros!!! They are super-neat!</p>",
        "id": 203862353,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1594747767
    },
    {
        "content": "<p>I am working with a diagrammatic language that is sort of the opposite of string diagrams - I've drawn thousands of diagrams in it, too -, and at this moment I just need to 1) typeset a handful of string diagrams similar to yours to show how to translate between your diagrams and mine, 2) make the Tikz back-end of my package for drawing diagrams a bit better...</p>",
        "id": 203862381,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1594747785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276773\">@Eduardo Ochs</span> sounds interesting! Is it a DSL?</p>",
        "id": 203879379,
        "sender_full_name": "Simon Burton",
        "timestamp": 1594756462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277321\">Simon Burton</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/203879379\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276773\">Eduardo Ochs</span> sounds interesting! Is it a DSL?</p>\n</blockquote>\n<p>Take a look:<br>\n<a href=\"http://angg.twu.net/dednat6.html\">http://angg.twu.net/dednat6.html</a><br>\n<a href=\"https://tug.org/TUGboat/tb39-3/tb123ochs-dednat.pdf\">https://tug.org/TUGboat/tb39-3/tb123ochs-dednat.pdf</a><br>\n<a href=\"http://angg.twu.net/dednat6/tug-slides.pdf\">http://angg.twu.net/dednat6/tug-slides.pdf</a></p>",
        "id": 203887454,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1594760343
    },
    {
        "content": "<p>very nice.</p>",
        "id": 203891472,
        "sender_full_name": "Simon Burton",
        "timestamp": 1594762491
    },
    {
        "content": "<p>I generated my diagrams for <a href=\"https://arxiv.org/abs/2002.11480\">https://arxiv.org/abs/2002.11480</a> using some custom haskell code that takes a morphism as input and lays out the diagram automatically. Would anyone be interested if I put the effort of making it usable?</p>",
        "id": 205585226,
        "sender_full_name": "Guillaume Boisseau",
        "timestamp": 1596198898
    },
    {
        "content": "<p>I was thinking it might use <a href=\"https://github.com/statebox/monmor-spec\">https://github.com/statebox/monmor-spec</a> as input format, and of course the wonderful Haskell diagrams library</p>",
        "id": 205585253,
        "sender_full_name": "Guillaume Boisseau",
        "timestamp": 1596198929
    },
    {
        "content": "<p>Or actually, if someone else has already done that I would love not to have to do it myself</p>",
        "id": 205585475,
        "sender_full_name": "Guillaume Boisseau",
        "timestamp": 1596199132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282822\">@fosco</span> was also working on a modular string diagram library: it might be worth discussing with him to see if there's overlap in the use cases.</p>",
        "id": 205585700,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1596199329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"309293\">@Guillaume Boisseau</span> , I am interested!</p>",
        "id": 205587705,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1596200698
    },
    {
        "content": "<p>I will never end writing the documentation <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205590544,
        "sender_full_name": "fosco",
        "timestamp": 1596202611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"309293\">Guillaume Boisseau</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/205585226\">said</a>:</p>\n<blockquote>\n<p>I generated my diagrams for <a href=\"https://arxiv.org/abs/2002.11480\">https://arxiv.org/abs/2002.11480</a> using some custom haskell code that takes a morphism as input and lays out the diagram automatically. Would anyone be interested if I put the effort of making it usable?</p>\n</blockquote>\n<p>What do you think of starting by making the source code of  <a href=\"https://arxiv.org/abs/2002.11480\">https://arxiv.org/abs/2002.11480</a> available and explaining how to compile it? Arxiv only has the \"LaTeX source\" for the paper with the diagrams already in Tikz - it doesn't have the source for the diagrams in the DSL that you invented, and neither the Haskell code needed to compile them...</p>",
        "id": 205625134,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1596220392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276773\">@Eduardo Ochs</span>  It's there: <a href=\"https://github.com/Nadrieril/stridi\">https://github.com/Nadrieril/stridi</a></p>",
        "id": 205729206,
        "sender_full_name": "Guillaume Boisseau",
        "timestamp": 1596377791
    },
    {
        "content": "<p>But right now you need to write Haskell code to generate diagrams, which is both suboptimal and extremely slow to recompile all of the time. That's why I want to rewrite it to just be a binary, and decouple the DSL from the representation to allow more tools</p>",
        "id": 205729350,
        "sender_full_name": "Guillaume Boisseau",
        "timestamp": 1596378076
    },
    {
        "content": "<p>Let me introduce yet another string diagram renderer: SheetShow, which works for sheet diagrams in bimonoidal categories. <a href=\"https://wetneb.github.io/sheetshow/\">https://wetneb.github.io/sheetshow/</a><br>\n<a href=\"user_uploads/21317/Q7nZC3cEjjrAUhGDdB6oW-IR/sheet_diagram.png\">sheet_diagram.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/21317/Q7nZC3cEjjrAUhGDdB6oW-IR/sheet_diagram.png\" title=\"sheet_diagram.png\"><img src=\"user_uploads/21317/Q7nZC3cEjjrAUhGDdB6oW-IR/sheet_diagram.png\"></a></div>",
        "id": 214667263,
        "sender_full_name": "Antonin Delpeuch",
        "timestamp": 1603783270
    },
    {
        "content": "<p>I am trying to compile a list of graphical calculi and their associated tools for manipulating/rewriting and rendering/typesetting them. A quick Google search for \"graphical calculi survey\" turns up</p>\n<blockquote>\n<p><a href=\"https://arxiv.org/abs/0908.3347\">A survey of graphical languages for monoidal categories</a></p>\n</blockquote>\n<p>which was written in 2009 and seems to cover a wide variety of string diagrams (I have only skimmed it). Is that all there is? I'm sure I've seen different-looking diagrams for e.g. operads, Petri nets or open games, but maybe they were just string diagrams with bells and whistles. Also, I would like my list to include plain old diagrams with (labeled) dots as objects, (labeled) arrows as morphisms, (labeled) double arrows as 2-morphisms, etc. Am I using the term \"graphical calculus\" too liberally if I do this?</p>\n<p>On the rewriting front, I am only aware of <a href=\"https://github.com/Quantomatic/pyzx\">pyzx</a>. Maybe catlab.jl has this too? Is there anything else?</p>\n<p>Any help appreaciated!</p>",
        "id": 219589979,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607684216
    },
    {
        "content": "<p>A tool for rewriting with string diagrams: <a href=\"http://cartographer.id/\">cartographer</a><br>\nA tool for drawing opetopic shapes (for higher categories I believe): <a href=\"http://opetopic.net/\">Opetopic</a></p>",
        "id": 219608180,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1607694893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276060\">@Javier Prieto</span> I think it would be great to have an updated version of Selinger's survey. Adding the associated tools to manipulate them would be very useful too. I am not sure to which extent a static paper is the best format for this. Perhaps a wiki could be better suited for that, so that people can add their tool at the appropriate place when it is released, for instance. Perhaps the nLab could be used for that? The page about string diagrams is pretty poor, it lacks a lot of images to illustrate (not too long ago there was not a single image on this page!): <a href=\"https://ncatlab.org/nlab/show/string+diagram\">https://ncatlab.org/nlab/show/string+diagram</a></p>",
        "id": 219618806,
        "sender_full_name": "Antonin Delpeuch",
        "timestamp": 1607700300
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"276060\">@Javier Prieto</span>,<br>\nif by \"plain old diagrams\" you mean \"plain old categorical diagrams (with double arrows as 2-morphisms)\" then these notes may be useful to you...<br>\n<a href=\"http://angg.twu.net/math-b.html#favorite-conventions\">http://angg.twu.net/math-b.html#favorite-conventions</a></p>",
        "id": 219682852,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1607738085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276320\">@Antonin Delpeuch</span> An \"updated version of Sellinger's survey\" is perhaps too big a task for me. I was going more for something like a summary table with lots of hyperlinks for those who want to go deeper and minimal text around it, maybe something like a glossary plus examples of diagrams.</p>\n<p>I agree that a website would be a much better format. I will have to produce a pdf at some point because I'm doing this as final project for an undergrad course, but I'm confident I can just produce a website and then take the text and tikz code and stick it in Overleaf.</p>",
        "id": 219698101,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607762626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276773\">@Eduardo Ochs</span> thank you! I'm going through it now and it looks very relevant indeed.</p>",
        "id": 219698147,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607762686
    },
    {
        "content": "<p>On the rewriting front there is also Quantomatic (which is no longer actively developed). There is also <a href=\"http://homotopy.io\">homotopy.io</a>, which I haven't used myself</p>",
        "id": 219718461,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1607794412
    },
    {
        "content": "<p>I don't know what you mean by \"graphical calculi\", but there is a whole barrage of graphical languages for reasoning about quantum computation: the ZX-calculus, ZH-calculus, ZW-calculus. You can learn more about this at <a href=\"https://zxcalculus.com\">https://zxcalculus.com</a></p>",
        "id": 219718514,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1607794470
    },
    {
        "content": "<p>I'm not a hundred percent sure, but I thought <span class=\"user-mention\" data-user-id=\"277391\">@Cole Comfort</span> was working on a similar project of cataloging PROPs.</p>",
        "id": 219718530,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1607794511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296293\">John van de Wetering</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/219718514\">said</a>:</p>\n<blockquote>\n<p>I don't know what you mean by \"graphical calculi\"</p>\n</blockquote>\n<p>Honestly, neither do I! I was using the term very loosely to refer to anything that \"looks like a diagram\" and comes with some rewriting rules attached. If there is a (perhaps narrower) rigorous definition, I'd be keen to hear it.</p>",
        "id": 219760571,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607864315
    },
    {
        "content": "<p>I'm writing a thesis with many string diagrams for 2-categories and equipments. <a href=\"/user_uploads/21317/XCo6neyiuI4f3a1pprWvaPRE/mates-to-equip-square.png\">mates-to-equip-square.png</a> From what I've seen, I have to use <a href=\"https://tikzit.github.io/\">TikZit</a> or write macros for TikZ and make them from scratch. There isn't a big difference, and both options are very time-consuming. I wish there were a better option, because string diagrams are very simple.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/XCo6neyiuI4f3a1pprWvaPRE/mates-to-equip-square.png\" title=\"mates-to-equip-square.png\"><img src=\"/user_uploads/21317/XCo6neyiuI4f3a1pprWvaPRE/mates-to-equip-square.png\"></a></div><p>Does anyone have advice for mass-producing string diagrams? (Also, does anyone have a .tikzstyles file with useful macros? I think Dan Marsden has something similar... I'll be making one.) When will someone make a <a href=\"https://q.uiver.app/\">Quiver</a> for strings?</p>",
        "id": 265866262,
        "sender_full_name": "Christian Williams",
        "timestamp": 1640215730
    },
    {
        "content": "<p>We could host TikZit online, and start building a library of TikZ figures and macros.</p>",
        "id": 265866876,
        "sender_full_name": "Christian Williams",
        "timestamp": 1640216179
    },
    {
        "content": "<p>Then if you want to make the proof \"right adjoints preserve right extensions\", you can open Adjunction.tikz and RightExtension.tikz and combine them at the various steps of the proof. (and then upload that proof to the library!)</p>",
        "id": 265866984,
        "sender_full_name": "Christian Williams",
        "timestamp": 1640216292
    },
    {
        "content": "<p>I think this is a low-tech solution that could make drawing more accessible.</p>",
        "id": 265867021,
        "sender_full_name": "Christian Williams",
        "timestamp": 1640216338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295673\">@Aleks Kissinger</span> What do you think about this idea? Do you have any advice for making such a site?</p>",
        "id": 265867698,
        "sender_full_name": "Christian Williams",
        "timestamp": 1640216907
    },
    {
        "content": "<p>(sent an email)</p>",
        "id": 265868794,
        "sender_full_name": "Christian Williams",
        "timestamp": 1640217841
    },
    {
        "content": "<p>Please tell me when you get a prototype working - I would love to play with it!</p>",
        "id": 265880693,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1640231233
    },
    {
        "content": "<p>A github repo with a public collection of <code>.tikzstyle</code> files would be low hanging fruit, presumably anybody could create this and then make a pull request against the TikZit documentation to add a link to it</p>",
        "id": 265916019,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640265960
    },
    {
        "content": "<p>I first talked a few years ago about how nice it would be to port (in practice totally rewriting from OCaml to Javascript) TikZit to run in browser for purposes of being a plugin of a \"1CatLab\" (which is what I used to call the combination pedagogical wiki + ACT wiki, an idea that I'm no longer very attached to). This would be a <em>massive</em> undertaking for a programmer...</p>",
        "id": 265921767,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640270068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/265921767\">said</a>:</p>\n<blockquote>\n<p>I first talked a few years ago about how nice it would be to port (in practice totally rewriting from OCaml to Javascript) TikZit to run in browser for purposes of being a plugin of a \"1CatLab\" (which is what I used to call the combination pedagogical wiki + ACT wiki, an idea that I'm no longer very attached to). This would be a <em>massive</em> undertaking for a programmer...</p>\n</blockquote>\n<p>I guess that's something different from <a href=\"https://1lab.dev/\">https://1lab.dev/</a> ? :)</p>",
        "id": 265922394,
        "sender_full_name": "Alex Gryzlov",
        "timestamp": 1640270493
    },
    {
        "content": "<p>Yeah, I know about that, it's just the same name (probably more people than the 2 of us came up with it independently, it's kind of obvious), otherwise I think a totally different idea</p>",
        "id": 265922660,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640270651
    },
    {
        "content": "<p>Also : <a href=\"https://www.irif.fr/~greta/gretaexact/\">GReTA ExACT</a></p>",
        "id": 265923262,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1640271094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/265921767\">said</a>:</p>\n<blockquote>\n<p>I first talked a few years ago about how nice it would be to port (in practice totally rewriting from OCaml to Javascript) TikZit to run in browser</p>\n</blockquote>\n<p>From what I can see it’s written in C++/QT rather than OCaml and QT has some amount of support for compiling to WASM. That would probably still be quite a lot of work, but probably not as much as completely rewriting it</p>",
        "id": 265924037,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640271655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/265866984\">said</a>:</p>\n<blockquote>\n<p>Then if you want to make the proof \"right adjoints preserve right extensions\", you can open Adjunction.tikz and RightExtension.tikz and combine them at the various steps of the proof. (and then upload that proof to the library!)</p>\n</blockquote>\n<p>My two cents about this: I have worked on papers with hundreds of string diagrams. The problem with reusing them, is that you need to <em>find</em> them first. Sure you might have a adjunction.tikz, but this doesn't tell you what the exact diagram is. The only way I've found that is feasible is to find the diagram I want in the paper and see what the tikz file is called in the latex source. I don't really know how you would make a \"tikz diagram browser\" where you can search for the diagram you want. The only solution I can think of is to train one of those fancy neural networks that can learn to find a text description of a picture, then you could give a natural language search query to find it. But of course this requires a massive library of annotated tikz diagrams.</p>",
        "id": 266103091,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1640514712
    },
    {
        "content": "<p>That being said, having a GitHub repo with several common style files and macros would certainly be useful</p>",
        "id": 266103133,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1640514728
    },
    {
        "content": "<p>What about something more like <a href=\"http://detexify.kirelabs.org/classify.html\">detexify</a> where you draw the general shape of what you want and it find diagrams that are close to that.</p>",
        "id": 266103994,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1640516085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/265866262\">said</a>:</p>\n<blockquote>\n<p>Does anyone have advice for mass-producing string diagrams? (Also, does anyone have a .tikzstyles file with useful macros? I think Dan Marsden has something similar... I'll be making one.) When will someone make a <a href=\"https://q.uiver.app/\">Quiver</a> for strings?</p>\n</blockquote>\n<p>For what it's worth, if I remember correctly Aleks wrote TikZit version 2 <em>specifically</em> for writing Picturing Quantum Processes, which contains maybe thousands of string diagrams</p>",
        "id": 266105522,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640518291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296293\">John van de Wetering</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/266103091\">said</a>:</p>\n<blockquote>\n<p>The only solution I can think of is to train one of those fancy neural networks that can learn to find a text description of a picture, then you could give a natural language search query to find it.</p>\n</blockquote>\n<p>Very much easier solution: take an open source TeX editor of your choice that supports sync between code and pdf (eg. TeXshop, which is the one I use), fork it and hack it to open files generated by TikZit (or whatever) in TikZit, instead of opening the raw code itself</p>",
        "id": 266106242,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640519491
    },
    {
        "content": "<p>An emacs wizard could probably hack the emacs TeX mode to do that in 5 minutes</p>",
        "id": 266106294,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640519545
    },
    {
        "content": "<p>Cf. the standard flowchart <code>Do I need a neural network?</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span> <code>No.</code></p>",
        "id": 266106330,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1640519632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/266106242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296293\">John van de Wetering</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/tools.20for.20diagrams/near/266103091\">said</a>:</p>\n<blockquote>\n<p>The only solution I can think of is to train one of those fancy neural networks that can learn to find a text description of a picture, then you could give a natural language search query to find it.</p>\n</blockquote>\n<p>Very much easier solution: take an open source TeX editor of your choice that supports sync between code and pdf (eg. TeXshop, which is the one I use), fork it and hack it to open files generated by TikZit (or whatever) in TikZit, instead of opening the raw code itself</p>\n</blockquote>\n<p>I have this set-up but it doesn't solve the problem I was raising, which is \"I know I have the diagram of this thing I want somewhere in this folder with thousands of other diagrams, how do I find it if I don't know the filename\"?</p>",
        "id": 266110178,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1640526111
    },
    {
        "content": "<p>As long as the diagram is already in a file I am using, it is fine, because I can just search through the PDF to find it, but if I say comment it out because I don't need it at that moment, the diagram is essentially lost forever to me, because there is no way to find it back (unless I remember where I commented it out)</p>",
        "id": 266110284,
        "sender_full_name": "John van de Wetering",
        "timestamp": 1640526270
    },
    {
        "content": "<p>Just copy paste all your diagams into a huge pdf in the form <br>\ndiagram<br>\nfilename</p>",
        "id": 266361640,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1640797721
    },
    {
        "content": "<p>You can use any ordering you want. Then it's just a matter of scrolling the file</p>",
        "id": 266361658,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1640797737
    }
]