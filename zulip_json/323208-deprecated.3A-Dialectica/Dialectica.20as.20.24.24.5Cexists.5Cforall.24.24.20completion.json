[
    {
        "content": "<p>Hi everyone,<br>\nI'm <em>loving</em> the paper <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> pointed out re the question about dialectica being monadic over lenses that Bruno relayed in his last email! Such a pity Hofstra left us so untimely :(<br>\nHere's the paper: <a href=\"/user_uploads/21317/JqTz58SMX9fSs4t_mybgjn0G/hofstra-dialectica.pdf\">hofstra-dialectica.pdf</a> <br>\nLater in the week I'll write more about why and how I think this is cool :)</p>",
        "id": 282133478,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652373079
    },
    {
        "content": "<p>Great <span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci (he/him)</span> ! I really think you  guys should add here the note <span class=\"user-mention\" data-user-id=\"276875\">@Bruno Gavranovic</span>  wrote, as it will facilitate the conversation! </p>\n<p>And in connection to Hofstra's work I'd like to also point out my work with Davide Trotta and Matteo Spadetto in the arxiv <a href=\"https://arxiv.org/abs/2104.14021\">https://arxiv.org/abs/2104.14021</a> and <a href=\"https://arxiv.org/abs/2109.08064\">https://arxiv.org/abs/2109.08064</a> as well as in  MFCS2021 and LFCS2022 conferences, now submitted to journals. Note that we generalize the work of Hofstra to get the coproduct-product completion  corresponding to the logical Dialectica.</p>",
        "id": 282135235,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652373813
    },
    {
        "content": "<p>and indeed, you're absolutely right!<br>\n<span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/323208-practice.3A-Dialectica/topic/Dialectica.20as.20.24.24.5Cexists.5Cforall.24.24.20completion/near/282133478\">said</a>:</p>\n<blockquote>\n<p>Such a pity Hofstra left us so untimely :(<br>\n</p>\n</blockquote>\n<p>Such a shame indeed! <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 282177380,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652392949
    },
    {
        "content": "<p>Ha, right, I know that paper of</p>",
        "id": 282220105,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652432457
    },
    {
        "content": "<p>yours!</p>",
        "id": 282220113,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652432462
    },
    {
        "content": "<p>Sometimes you know something but don't realize what it means for a while</p>",
        "id": 282220168,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652432511
    },
    {
        "content": "<p>Coproduct completions are something we studied here in Glasgow too in order to tackle the dependent optics problem</p>",
        "id": 282220269,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652432546
    },
    {
        "content": "<p>Very suspicious...</p>",
        "id": 282220282,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652432560
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci (he/him)</span>  but the paper is much more Davide Trotta's and Matteo Spadetto's than mine.</p>\n<p>Anyways, I recap what <span class=\"user-mention\" data-user-id=\"276875\">@Bruno Gavranovic</span>  wrote plus my replies. Bruno wrote:</p>\n<p>#1 Dialectica seems to be a category of lenses with extra structure: objects are endowed with a relation and lenses are asked to preserve that. Does this make Dial a category of algebras of some monad on lenses?</p>\n<p>#2 If dialectica categories are lenses with extra structura, and lenses are cartesian version of optics, can we use this insight to obtain \"monoidal Dialectica categories\", i.e. a category of optics with extra structure?</p>\n<p>#3. In compositional game theory there is a notion of \"selection functions\" which interplay with the underlying lenses, telling us what the Nash equilibria of agents/players in a games are. Are winning conditions of Dialectica related to selection functions? Can we obtain one from the other?</p>\n<p>I've replied:</p>\n<p>for #1 there is a relevant paper by Pieter Hofstra, The Dialectica Monad and its cousins<br>\nHofstra, P in Makkai Festschrifft, 2011 The dialectica monad and its cousins, Pieter J. W. Hofstra, <br>\n<a href=\"http://mysite.science.uottawa.ca/phofstra/dialectica.pdf\">http://mysite.science.uottawa.ca/phofstra/dialectica.pdf</a> <br>\nthis is probably not the answer you want, but it is a kind of answer.</p>\n<p>for #2 I have a version of Dialectica over an smcc (symmetric monoidal closed category) described in<br>\n \"Dialectica and Chu constructions: cousins?\", Theory and Applications of Categories, Vol. 17, No. 7, pp 127-152, 2006. <br>\n<a href=\"http://www.tac.mta.ca/tac/volumes/17/7/17-07abs.html\">http://www.tac.mta.ca/tac/volumes/17/7/17-07abs.html</a>. </p>\n<p>But this is for the second kind of Dialectica categories (chapters 3 and 4 of my thesis). <br>\none should be able to adapt it? I don't know.</p>\n<p>for #3 the question I asked in our first meeting was related, but slightly different.<br>\n I asked if we simply added Hedges' notion of Nash equilibrium to Dialectica what we would get? <br>\nwhat does the notion of Nash equilibrium buy us?</p>\n<p>I can also ask questions and my first question is about the real applications of lenses.</p>\n<p>#4.  What are the real applications of lenses? do we have a list showing best applications and what they use of the categorical structure?</p>\n<p>#5 One can always generalize notions beyond their utility: this is why finding the right kind of abstraction for a type of problem is hard.<br>\nSure we can do Dial_2 (CAT) or Dial_2 (Cat) instead of Dial_2 (Set), if you prefer. but unless this generalization buys me results that I don't have for Set, I'm not very interested. What can we do with lenses over Cat that I cannot do with usual lenses? what kind of structure I am preserving and why?</p>\n<p>#6 the same idea applies to games with bidding: what can we do with these games? could we do it with dialectica spaces instead?<br>\nif yes, why do we want to do it? if not, why not?</p>\n<p>I think it's important for the MRC that we have a healthy/long collection of questions to work over the week.</p>",
        "id": 282246703,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652448724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci (he/him)</span> wrote</p>\n<blockquote>\n<p>Sometimes you know something but don't realize what it means for a while</p>\n</blockquote>\n<p>so true!</p>",
        "id": 282247327,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652449010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276875\">@Bruno Gavranovic</span>  wrote:</p>\n<blockquote>\n<p>#1 Dialectica seems to be a category of lenses with extra structure: objects are endowed with a relation and lenses are asked to preserve that. </p>\n</blockquote>\n<p>well, I assume we're talking about bimorphic lenses here.  </p>\n<p>So given an object of  Dial(Set)  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(U, X, \\alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span>  we can `forget' <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>. <br>\nThen the domain and codomain of the morphism of  Dial (Set), that is a map, <br>\n <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>U</mi><mo>→</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">f:U\\to V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>U</mi><mo>×</mo><mi>Y</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">F:U\\times Y\\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> are like the domain and codomain of lenses morphisms.</p>\n<p>So we have a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">g</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo>:</mo><mi>D</mi><mi>i</mi><mi>a</mi><msub><mi>l</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>L</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">{\\sf{forget}}: Dial_2(Set) \\to Lenses</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">forget</span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">ia</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">ses</span></span></span></span>--where the lenses here are the bimorphic ones in Spivak's paper that Bruno suggested.</p>\n<p>One neat thing that I have not seen written (but I have not read all the stuff in Bruno's directory)  is that the conditions of  the Dialectica category<br>\nmaps force the Law Lenses to be true. This is a small proposition that can be proved (if I remember correctly) relatively easy.</p>\n<p>So I think the lenses are not asked to preserve the structure:  if the lenses come from a dialectica category then they preserve the relations naturally  and this implies they satisfy the law lenses. so \"Dialectica  lenses\" are somewhat better behaved. </p>\n<p>Now instead of \"forgetting\" via a forgetful functor the third component of a dialectica object, you can forget the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> component by mapping objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>×</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">U\\times X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to 1 the terminal object in the category Set (i.e any singleton). Now this gives you directly an object of the construction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>a</mi><msub><mi>l</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Dial_1(Set)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">ia</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> that I mentioned in my first message about the Dialectica for friends video, namely:</p>\n<blockquote>\n<p>If we do Dial (Set) but have objects (U,X, alpha) mapping to 1, instead of 2,  what happens to the structure defined in chapter 1 of the thesis?</p>\n</blockquote>\n<p>So now we have two  ways to take an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(U, X, \\alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span> to an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(U,X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>, but they're different methods and maybe we end up in different categories. do we? any insights that we can extract from this situation?</p>",
        "id": 282587730,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652757257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276656\">Valeria de Paiva</span> <a href=\"#narrow/stream/323208-practice.3A-Dialectica/topic/Dialectica.20as.20.24.24.5Cexists.5Cforall.24.24.20completion/near/282587730\">said</a>:</p>\n<blockquote>\n<p>One neat thing that I have not seen written (but I have not read all the stuff in Bruno's directory)  is that the conditions of  the Dialectica category<br>\nmaps force the Law Lenses to be true. This is a small proposition that can be proved (if I remember correctly) relatively easy.</p>\n</blockquote>\n<p>Uhm, I'm a bit puzzled by this. Lens laws are usually stated for monomorphic lenses, otherwise they do not make sense 'on the nose'. Can you clarify this point?</p>",
        "id": 282611311,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1652778521
    },
    {
        "content": "<p>my bad,  you're right. one  needs to take the diagonal subcategory of Dial(Set) to do the calculations I mentioned.</p>",
        "id": 282635795,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652792362
    },
    {
        "content": "<p>And another \"my bad\" from today's  MRC-meeting conversation: <br>\nI misremembered Sean's slides (<a href=\"http://url\">https://topos.site/p-func-workshop/slides/Moss.pdf</a>).<br>\nHe says:</p>\n<p>Cf. Lens ⊆ Poly and (in slide 12) Poly ≃ ΣΠ(1).</p>\n<p>Moss is interested in the general properties of ΣΠ(C),  which he calls the ‘polynomials in C’, is given by formally/freely adding sums<br>\nand products to the category C.</p>\n<p>I'm interested in Dial ⊆ ΣΠ(2)  as in his slide 26. He calls ΣΠ(2)= the dialectica polynomials, which seems a good name.</p>",
        "id": 282685181,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652811909
    }
]