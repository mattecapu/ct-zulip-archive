[
    {
        "content": "<p>Here is an Agda proof that Dial(Set)(2) is a category. <br>\n(assuming Agda Set + functions as Set)</p>\n<p><a href=\"https://github.com/bond15/Dialectica/blob/4e5f83e053d77db1367839677f3f6ee3193b0cb3/DialSets.agda#L131\">https://github.com/bond15/Dialectica/blob/4e5f83e053d77db1367839677f3f6ee3193b0cb3/DialSets.agda#L131</a></p>\n<p>There are 2 holes that are Cubical Agda related. I'm still filling those in.  (showing that the hom set has the homotopy level set and a hole in equality of morphisms in dial)</p>",
        "id": 282811107,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652890251
    },
    {
        "content": "<p>I have now read your file, thanks!  I don't quite follow the proof that Dial(Set)(2) is a category.</p>\n<p>I was expecting proofs of associativity of composition, and of the identity triangles.<br>\n Are these subsumed into the sequence of assertions between lines 137and 139?</p>\n<p>I'm guessing that line 135 is the definition of identity map in DialSet, but it looks a bit strange.</p>\n<p>and I don't understand line 136, because I don't know what are compositions C and  D in this case. <br>\nis this the hole you've mentioned?</p>\n<p>I expect this is just me not knowing how the import of modules works in agda, but more pointers would be appreciated.</p>",
        "id": 282840348,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652903774
    },
    {
        "content": "<p>Line 135 is the definition of the identity map. </p>\n<div class=\"codehilite\"><pre><span></span><code>(λ u → u) ∧ (λ u x → x) st (λ u x → ≤-refl)\n</code></pre></div>\n<p>So we need</p>\n<div class=\"codehilite\"><pre><span></span><code>(U , X ,  α) -&gt; (U, X ,  α)\n</code></pre></div>\n<p>The first map <code>(λ u → u) </code> is  the identity map for <code>U</code>.<br>\nThe second map <code>(λ u x → x)</code> is a \"projection\" from <code>U \\x X</code> to <code>X</code> (but in curried/uncurried form).<br>\nThe last term <code>(λ u x → ≤-refl)</code> is of type <code>(u : U)(x :X)  →   α  u x  ≤² α  u x</code>  so the condition holds by reflexivity of <code>≤²</code></p>\n<p>The unity/identity laws are lines 137 and 138. </p>\n<p>The type of the right identity is <code>m ∘ᶜ id = m</code>.  <br>\nBut to prove this we need to consider what it means for two morphisms to be equal.</p>\n<p>Morphism consist of three components (f , F, and the condition). It suffices to show that if you have 2 morphisms, then they are equal if they are equal in the first 2 components (f and F). This is where <code>cong-dial :  f ≡ f' → F ≡ F' → m₁ ≡ m₂</code> comes from.  So then we just need to look component wise at what the composition in the identity law is doing. </p>\n<p>so in <code>m∘ᶜ id = m</code> The first component is <code>f ∘ id = f</code> where <code>∘</code> and <code>id</code> are from <code>Set</code>. This holds by definitional equality so it is dispatched with <code>refl</code><br>\nThe second component is a bit more involved.  </p>\n<div class=\"codehilite\"><pre><span></span><code>f₁ := (λ u → u)\nF₁ := (λ u x → x)\nfrom the definition of the identity morphism\n\nand we have some\nF₂  :  U → X → X\n\nNow we consider what composition does on F\nF&#39; : U → X → X\nF&#39; u x = let\n                 u = f₁ u\n                 x&#39; = F₂ u x\n                 x&#39; = F₁ u x&#39;\n                 in x&#39;\n\nso F₂  is equivalent to F&#39; and so this holds by definitional equality\n</code></pre></div>",
        "id": 282847322,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652906883
    },
    {
        "content": "<p>The same reasoning applies for left identity and associativity. They hold by definitional equality once you define the right notion of equality of morphisms (homotopy type theory is paying dividends here)</p>",
        "id": 282847501,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652906985
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>and I don&#39;t understand line 136, because I don&#39;t know what are compositions C and D in this case.\n</code></pre></div>\n<p>_∘ᶜ_ is the name for composition in the type of PreCategories.<br>\n_∘ᴰ_ is the name of the operation defined on line 76 which is composition of morphisms in Dial(Set)(2).<br>\nSo in total, line 136 is saying for the PreCategory <code>DialSetCat</code> , composition <code>_∘ᶜ_</code> is <code>_∘ᴰ_</code></p>\n<p>And for completeness <code>_∘_</code> is regular function composition in Agda.</p>",
        "id": 282849095,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652907759
    },
    {
        "content": "<p>great! but then where is the hole?<br>\nalso when I said line 135 looked a bit strange as identity, I could see the two functions and I know this is how the identity works. <br>\nBut I was expecting it to be an instance of the code in lines 49--58, not to be part of the proof, by what I expect is the import  of some PreCat module. but things are much clearer now, thanks a bunch!</p>",
        "id": 282849530,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652908019
    },
    {
        "content": "<p>nice to see  the obs</p>\n<blockquote>\n<p>homotopy type theory is paying dividends here</p>\n</blockquote>\n<p>even if in this case the equality on f and F is on the nose, but the condition is a kind of lax equality (in Chu spaces it would be a real equality too!)</p>",
        "id": 282849944,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652908214
    },
    {
        "content": "<p>Oh yes! That is a good point. It would be useful to not 'inline' the definition of Identity morphism since It could be used in other contexts. I'll fix that.</p>\n<p>There are 2 holes. Holes look like this <code>{!   !}</code> <br>\nSee lines 126 and 134. <br>\nThe hole on 126 is in the definition of <code>cong-dial : f ≡ f' → F ≡ F' → m₁ ≡ m₂</code> where I just need to use the proof <code>eq-maps-cond</code> and some clever path definitions to complete the definition.</p>\n<p>The hole on 134 is Is saying that the HomSets in <code>DialSetCat</code> are <code>Sets</code> w.r.t homotopy level.<br>\nIt is missing a proof of this condition <code> (x y : Ob) → is-set (x ⇒ y)</code>. <br>\nFor folks who haven't seen this before it is basically saying that if you have two morphisms <code>f</code> and <code>g</code> and two proofs of equivalence of those morphisms <code>p : f ≡ g</code> and  <code>q : f ≡ g</code>, then it is the case that  <code>p ≡ q</code>.</p>\n<p>This condition could be left out. It's an artifact of the HoTT book and some folks think it is easier to leave that condition elsewhere.<br>\n<a href=\"https://github.com/agda/cubical/issues/625\">https://github.com/agda/cubical/issues/625</a></p>",
        "id": 282850848,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652908738
    },
    {
        "content": "<p>oh, ok. many thanks for the explanation  of the hole then! (the other one is not a hole anymore, right?</p>",
        "id": 282851488,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652909099
    },
    {
        "content": "<p>I'm going to remove the <code>is-set</code> condition for now so hole 134 will go away. <br>\nThe hole in <code>cong-dial</code> is still a TODO.</p>",
        "id": 282851955,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652909402
    },
    {
        "content": "<p>newbie question: can we have a promissory note to fill the hole and carry on working on the monoidal structures of DialSet or without filling the holes things do not compile?</p>",
        "id": 282852276,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652909606
    },
    {
        "content": "<p>That is a good question. The way Agda is implemented, you can usually continue working normally while there are holes and the file will still type check. for example.<br>\n<a href=\"/user_uploads/21317/FKTOE_-RgPs2rcYQp1rCNwSO/Screen-Shot-2022-05-18-at-2.36.57-PM.png\">Screen-Shot-2022-05-18-at-2.36.57-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/FKTOE_-RgPs2rcYQp1rCNwSO/Screen-Shot-2022-05-18-at-2.36.57-PM.png\" title=\"Screen-Shot-2022-05-18-at-2.36.57-PM.png\"><img src=\"/user_uploads/21317/FKTOE_-RgPs2rcYQp1rCNwSO/Screen-Shot-2022-05-18-at-2.36.57-PM.png\"></a></div>",
        "id": 282852652,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652909879
    },
    {
        "content": "<p>This file type checks. <a href=\"/user_uploads/21317/m3z6ZEjd-KM6SnTtjXqFnFMV/Screen-Shot-2022-05-18-at-2.38.17-PM.png\">Screen-Shot-2022-05-18-at-2.38.17-PM.png</a> <br>\nIt just tells you at the bottom that you still need to fill this in, but can continue working</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/m3z6ZEjd-KM6SnTtjXqFnFMV/Screen-Shot-2022-05-18-at-2.38.17-PM.png\" title=\"Screen-Shot-2022-05-18-at-2.38.17-PM.png\"><img src=\"/user_uploads/21317/m3z6ZEjd-KM6SnTtjXqFnFMV/Screen-Shot-2022-05-18-at-2.38.17-PM.png\"></a></div><p>I can even normalize/evaluate the term <code>b</code> in this case. It reduces to <code>?0 tt</code> where <code>?0</code> is supposed to be a function from <code>Bool -&gt; Bool</code> defined in <code>not</code>, but it has not been defined.</p>",
        "id": 282852730,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652909923
    },
    {
        "content": "<p>However if we had a file that depended on this file and I left holes on it, there would be errors in the new file. <br>\nYou have some control over the behavior of this. For instance if you add the flag <code>{-# OPTIONS --allow-unsolved-metas #-}</code> then you could bypass this check and continue working.</p>",
        "id": 282853007,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652910094
    },
    {
        "content": "<p>Caveats are if you leave holes \"at the type level\" or if you leave a hole in a term Agda needs to deduce a type. Then it complains. Generally you can leave holes at the \"term level\" and sometimes at the \"type level\".</p>",
        "id": 282853183,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652910203
    },
    {
        "content": "<p>For the specific case you mentioned.. yes the hole for <code>cong-dial</code> will not prevent the file from type checking and can be left as a TODO while the monodial structure is developed.</p>",
        "id": 282853687,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652910503
    },
    {
        "content": "<p>Yay! thanks! for <span class=\"user-mention\" data-user-id=\"496984\">@Charlotte Aten</span> we will need to do the file lineale.agda properly: starting with the  definition of One, Two,  Three (Kleene-style)--sets of truth-values, Nat, closed interval [0,1], etc. and it's fairly independent from Dialset, because it's just a parameter in the more complicated version of DialSet.</p>",
        "id": 282854180,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652910808
    },
    {
        "content": "<p>While I'm rambling away, and in case any lurkers are interested, holes are not just a TODO in a proof.. they are interactive.<br>\n<a href=\"/user_uploads/21317/vAwf3ijnViHIPDscqyfyGpsR/Screen-Shot-2022-05-18-at-2.58.02-PM.png\">Screen-Shot-2022-05-18-at-2.58.02-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/vAwf3ijnViHIPDscqyfyGpsR/Screen-Shot-2022-05-18-at-2.58.02-PM.png\" title=\"Screen-Shot-2022-05-18-at-2.58.02-PM.png\"><img src=\"/user_uploads/21317/vAwf3ijnViHIPDscqyfyGpsR/Screen-Shot-2022-05-18-at-2.58.02-PM.png\"></a></div><p>for instance if my cursor is in this hole there are a few different commands I can run<br>\nctrl+c, ctrl+t - this will tell me my current \"goal\" or what Type  of term I need to fill the hole with</p>\n<p>ctrl+c, ctrl+a  - this will begin a \"proof search\" where Agda will try to fill the hole with a term from the local context</p>\n<p>ctrl+c, ctrl+n - this evaluates the current term in the hole and shows the result </p>\n<p>ctrl+c, ctrl+d - this infers the Type of the term in the hole</p>\n<p>ctrl+c, ctrl+e - this tells you the terms and their types in the local proof context<br>\nand many more</p>",
        "id": 282854579,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652911042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276656\">Valeria de Paiva</span> <a href=\"#narrow/stream/323208-practice.3A-Dialectica/topic/Implementation/near/282854180\">said</a>:</p>\n<blockquote>\n<p>Yay! thanks! for <span class=\"user-mention silent\" data-user-id=\"496984\">Charlotte Aten</span> we will need to do the file lineale.agda properly: starting with the  definition of One, Two,  Three (Kleene-style)--sets of truth-values, Nat, closed interval [0,1], etc. and it's fairly independent from Dialset, because it's just a parameter in the more complicated version of DialSet.</p>\n</blockquote>\n<p>I started a version of this 3 weeks ago.<br>\n<a href=\"https://github.com/bond15/Dialectica/blob/4e5f83e053d77db1367839677f3f6ee3193b0cb3/Lineale.agda\">https://github.com/bond15/Dialectica/blob/4e5f83e053d77db1367839677f3f6ee3193b0cb3/Lineale.agda</a><br>\n It's mostly a rewrite of <br>\n<a href=\"https://github.com/heades/cut-fill-agda/blob/master/lineale.agda\">https://github.com/heades/cut-fill-agda/blob/master/lineale.agda</a><br>\nfrom the FILL paper.<br>\nAlthough this is the definition of lineale and does not have any instances of lineales as you've listed above.</p>",
        "id": 282855659,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652911574
    },
    {
        "content": "<blockquote>\n<p>Although this is the definition of lineale and does not have any instances of lineales as you've listed above.</p>\n</blockquote>\n<p>yes, I know. we need the definition(s) and then the examples from \"Dialectica Petri Nets\" <a href=\"https://arxiv.org/abs/2105.12801\">https://arxiv.org/abs/2105.12801</a><br>\nnone of these have been automated</p>",
        "id": 282856027,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1652911828
    },
    {
        "content": "<p>sounds good :) <br>\nI'm context switching back to my 9 to 5 which is currently hardware verification using Isabelle HOL <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 282856940,
        "sender_full_name": "Eric Bond",
        "timestamp": 1652912434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> I still have two questions about the proof that DialSet is a category.</p>\n<p>About the equality of maps I was expecting you to say:</p>\n<blockquote>\n<p>(f,F, cond)=(g,G, cond') iff  f=g and F=G and cond=cond'</p>\n</blockquote>\n<p>but I am not seeing the 3rd conjunct cond=cond'.<br>\ninstead of </p>\n<blockquote>\n<p>cong-dial : f ≡ f' → F ≡ F' → m₁ ≡ m₂</p>\n</blockquote>\n<p>I was expecting cong-dial to be more like: f ≡ f' → F ≡ F' →  cond ≡ cond' →  m₁ ≡ m₂</p>\n<p>I also don't understand what the extensionality of functions has to do with swapping the arguments in </p>\n<blockquote>\n<p>funext : {o : Level}{A B : Set o}{f g : A → B} → (∀ (a : A) → f a ≡ g a) → f ≡ g <br>\n    funext p i x = p x i</p>\n</blockquote>\n<p>but I kind of expect that this is how it  goes.</p>",
        "id": 283013240,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653009957
    },
    {
        "content": "<p>The explanation for the derivation of function extensionality turned into a wall of text. <br>\nI've decided to just make it available here.</p>\n<p><a href=\"https://gist.github.com/bond15/be2f38461a6b24ce84468cfc8b37f355\">https://gist.github.com/bond15/be2f38461a6b24ce84468cfc8b37f355</a></p>",
        "id": 283097453,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653065603
    },
    {
        "content": "<hr>\n<p>For the other question you are asking about <code>eq-cond</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>cong-dial : f ≡ g → F ≡ G → m₁ ≡ m₂\ncong-dial p q i = (p i)  ∧ (q i)  st (eq-cond p q i)\n</code></pre></div>\n<p>Observe when <br>\n<code>i := i0</code>, <code>(p i)  ∧ (q i)  st (eq-cond p q i)  := f ∧ F st cond</code><br>\n              and    <br>\n<code>i := i1</code>, <code>(p i)  ∧ (q i)  st (eq-cond p q i)  := g ∧ G st cond'</code></p>\n<p><code>eq-cond</code> has an ugly type because it requires Dependent Path Types <code>PathP</code>.<br>\nThe gist is </p>\n<div class=\"codehilite\"><pre><span></span><code>eq-cond : (p : f ≡ g) → (q : F ≡ G) →  PathP &lt;ugly mess&gt;  cond cond&#39;\n</code></pre></div>\n<p>The full type is</p>\n<div class=\"codehilite\"><pre><span></span><code>eq-cond : (p : f ≡ g) → (q : F ≡ G) →\n        PathP (λ i → (u : U)(y : Y) → α u ((q i) u y) ≤² β ((p i) u) y) cond cond&#39;\n</code></pre></div>",
        "id": 283099771,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653066691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> <br>\nTo get the ball rolling, here is a partial implementation of <code>2</code> as a <code>Lineale</code><br>\n<a href=\"https://github.com/bond15/Dialectica/blob/main/Lineales.agda\">https://github.com/bond15/Dialectica/blob/main/Lineales.agda</a></p>\n<p>Looking to see what the \"loli\" operation for <code>2</code> is.</p>",
        "id": 283134438,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653086060
    },
    {
        "content": "<p>thanks for the long explanation about paths and extensionality!</p>",
        "id": 283148651,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653101744
    },
    {
        "content": "<blockquote>\n<p>Looking to see what the \"loli\" operation for 2 is.</p>\n</blockquote>\n<p>well, it's just the intuitionistic implication in Two, right?</p>",
        "id": 283148750,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653101867
    },
    {
        "content": "<p>patched holes in DialSets and finished Lineale 2.</p>",
        "id": 283209440,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653192517
    },
    {
        "content": "<p>Great!   this way  they can go in parallel, as the next step in DialSets is the monoidal  closed structure.  Need to add the parallel tensor and its internal-hom.</p>",
        "id": 283209733,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653192990
    },
    {
        "content": "<p><a href=\"https://github.com/bond15/Dialectica/blob/fe0a110d83ed8c1656e224ebadb780e145efdb06/DialSets.agda#L203\">https://github.com/bond15/Dialectica/blob/fe0a110d83ed8c1656e224ebadb780e145efdb06/DialSets.agda#L203</a></p>\n<p>starting that here with the tensor bifunctor</p>",
        "id": 283212203,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653196251
    },
    {
        "content": "<p>cool! as I wrote about the tensor in lineales one, I think we need to show functoriality in both coordinates, as we shouldn't rely on symmetry.<br>\nso I expect you to need another compat-like  function</p>\n<blockquote>\n<p>compat' : {a b : Two} → a ≤² b → ({c : Two} → (a ⊗² c) ≤² (b ⊗² c)) </p>\n</blockquote>\n<p>of shape perhaps something like compat : {c : Two} → ({a b: Two} → a ≤² b → (c ⊗² a) ≤² (c ⊗² b))</p>",
        "id": 283213445,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653197775
    },
    {
        "content": "<p>Finished the tensor bifunctor. <br>\nNext up, monoidal structure. So far <code>CatLib.agda</code> is a spartan version of the <code>agda-categories</code> library but It might make sense to just use <code>agda-categories</code>. Thoughts?  I can also merge the new developments into your repo.</p>",
        "id": 283240508,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653237474
    },
    {
        "content": "<p>Not many thoughts here (very tired after 2 days of intense workshopping at CSLI). do whatever  you think works for us as a group. thanks!<br>\nbut yes, please do merge the developments to <a href=\"https://github.com/vcvpaiva/Dialectica/\">https://github.com/vcvpaiva/Dialectica/</a>.</p>",
        "id": 283270556,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653280516
    },
    {
        "content": "<p>I think I managed to sync things correctly.</p>",
        "id": 283780716,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653413878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span>  the github repo is not working for me, because we need to have the \"proof-irrelevant\" structures (the several lineales) separated from the dual-sided structures DialSet, DialPos, DialTop, DialHask, etc. maybe we need another 15 min chat?</p>",
        "id": 283787751,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653417332
    },
    {
        "content": "<p>How about 4pm PT?</p>",
        "id": 283804850,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653426157
    },
    {
        "content": "<p>works for me, thanks!</p>",
        "id": 283805369,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653426445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span>  Can I get write access to <a href=\"https://github.com/vcvpaiva/Dialectica\">https://github.com/vcvpaiva/Dialectica</a>?</p>",
        "id": 283955849,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653523669
    },
    {
        "content": "<p>Sure, if you tell me what setting you want me to tweak.</p>",
        "id": 283955947,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653523744
    },
    {
        "content": "<p>Sure! Should be a <code>Settings</code> button near the top right under <code>watch</code> and <code>fork</code>. within settings, on the left there is a <code>Collaborators</code> tab.  In that you should see a <code>Manage Access</code> page with <code>Add people</code>.  My username is bond15 but if that doesn't show up then <a href=\"mailto:bond.eric.23@gmail.com\">bond.eric.23@gmail.com</a> should work.</p>",
        "id": 283956167,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653523967
    },
    {
        "content": "<p>invitation to the repo sent.</p>",
        "id": 283957160,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653524891
    },
    {
        "content": "<p>got it! Thanks!<br>\nIs there a source that lays out the definitions of the lineales that are desired?</p>",
        "id": 283971814,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653543201
    },
    {
        "content": "<p>yes, the Dialectica Petri Net paper describes some. But it would be good to \"find\" also existing libraries for Boolean algebra, Heyting algebra</p>",
        "id": 284007852,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653572922
    },
    {
        "content": "<p>I was going to ask about this via email but I figured the current topic of this chat is related so...</p>\n<p>I see you are jointly organizing a trimester at HIM on the topic of Prospects of Formal Mathematics.<br>\nI was wondering if you could share more details about that :). <br>\n(Who should join,  costs, what to expect, online or in person...etc)</p>\n<p><a href=\"https://topos.site/blog/2022/04/the-many-facets-of-networked-mathematics/\">Topos Inst. blog</a> <br>\n<a href=\"https://www.him.uni-bonn.de/programs/future-programs/future-trimester-programs/prospects-of-formal-mathematics/description/\">HIM page</a></p>",
        "id": 284038876,
        "sender_full_name": "Eric Bond",
        "timestamp": 1653587765
    },
    {
        "content": "<p>ha, finally found this message again! </p>\n<p><span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> I don't know much more than what is in the HIM page, which was our proposal. I have organized a Dugstuhl meeting before, but have not been to a HIM meeting ever, so again this is all new to me too.<br>\n Repeating the information from the HIM  page here, we have 3 thematic workshops planned. But the rest is still fluid, to be decided.</p>\n<p>Planned Activities: The trimester will organize work into:<br>\n    Regular get-togethers: e.g. weekly seminars, informal workshops, and open problem sessions<br>\n    Formalization Schools (both F2F and online) to get participants into the practice of formalizing mathematical knowledge</p>\n<p>Thematic Workshops:<br>\n    Formalizations in Modern Mathematics (June 2024)<br>\n    Bridging Between Informal and Formal Mathematics (July 2024)<br>\n    Libraries of Digitized Mathematics (August 2024)</p>",
        "id": 284310840,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1653866568
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> , I've finally gotten the internet back and wanted to check in about the status of our project. What's been going on has been documented in the summaries and photos in the Dialectica Google drive to some extent but I will add some comments here as well. I'd like to invite you to the Overleaf document that <span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> and I have for this project. Can you supply me with an appropriate email to use?</p>",
        "id": 284667349,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654116514
    },
    {
        "content": "<p>Sure, Charlotte. Either <a href=\"mailto:valeria.depaiva@gmail.com\">valeria.depaiva@gmail.com</a> or <a href=\"mailto:valeria@topos.institute\">valeria@topos.institute</a> work.  I can see in the Google Drive the summaries Day 1 and Day 2 that Jeremie posted, but I cannot see pictures at all. where are they?</p>",
        "id": 284667599,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654116668
    },
    {
        "content": "<p>Great, you should have an invitation at the gmail address! I just uploaded the photos from today to the folder called \"2022 June 1 notes - Calculations\". There is a similar folder for May 30 containing photos from that day.</p>",
        "id": 284669314,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654117555
    },
    {
        "content": "<p>On Monday I discussed the relationship between extrinsic game semantics and Negulescu's processes with the games group, which turned out to be pretty strong. There were two pretty natural ways (using the notions of strategies and coherence spaces, respectively) to view games as being included in the process space lattice Neglescu described. Moreover, we found that Negulescu's lattice embeds into the poset G(2^E) where G is the Girard variant of the Dialectica construction and 2^E is the poset of subsets of the collection of all executions in question.</p>",
        "id": 284669955,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654117870
    },
    {
        "content": "<p>Oh and I should mention <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> that the comments on that Overleaf document give a slightly more detailed outline of what <span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> and I have been planning/working on for the past two days. We have a way of playing the token game for Dialectica Petri nets which generalizes what seems to be natural when the lineale in question is 2 or Z. Part of the motivation for this is based on a general algebraic consideration about lineales which is kind of a separate conversation that I will make a new conversation for.</p>",
        "id": 284670562,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654118255
    },
    {
        "content": "<p>Jeremy asked me something about Dialectica Petri nets which I am still planning to try to understand myself but would like to ask here just in case there's a quick answer. Is there a natural way to view the category M_L(Set) used in the definition of the Petri net category Net_L as an example of the Girard variant GC for some appropriate choice of C? It seems like either there is a fundamental reason why it shouldn't be possible or there is some relatively trivial pairing that can be done and it was just written this way in the original paper in order to make the exposition cleaner. This is also of interest since reformulating M_L(Set) as GC for some C paves the way for a «modal» version of the constructions at play here, which is something I haven't really thought about myself much yet but know that <span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> and <span class=\"user-mention\" data-user-id=\"343715\">@Nelson Niu</span> have expressed interest in.</p>",
        "id": 284675178,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654120904
    },
    {
        "content": "<p>Sure, M_2(Set) is just GSet,exactly. It was just written as M_L(Set) to show that we can vary the L's, as it's done in the Petri nets paper.</p>",
        "id": 284675459,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654121046
    },
    {
        "content": "<p>So the preprint  about \"multi\"-relations is a tiny generalization of Chapter 3, where we change 2= {true, false} into a lineale L, a linear version of a Boolean-algebra or of a Heyting algebra.</p>",
        "id": 284675919,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654121324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276656\">Valeria de Paiva</span> <a href=\"#narrow/stream/323208-practice.3A-Dialectica/topic/Implementation/near/284675919\">said</a>:</p>\n<blockquote>\n<p>So the preprint  about \"multi\"-relations is a tiny generalization of Chapter 3, where we change 2= {true, false} into a lineale L, a linear version of a Boolean-algebra or of a Heyting algebra.</p>\n</blockquote>\n<p>Awesome, I will have to check that out now. Thanks so much for explaining! I'm glad I finally had a chance to get back online and ask some questions.</p>",
        "id": 284676866,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654121865
    },
    {
        "content": "<p>I'm really glad too!! I wasn't expecting issues with the internet, I must say. I am now home so able to talk, if you guys want to.</p>",
        "id": 284676988,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654121926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276656\">Valeria de Paiva</span> <a href=\"#narrow/stream/323208-practice.3A-Dialectica/topic/Implementation/near/284676988\">said</a>:</p>\n<blockquote>\n<p>I'm really glad too!! I wasn't expecting issues with the internet, I must say. I am now home so able to talk, if you guys want to.</p>\n</blockquote>\n<p>That sounds great! People are going to be collecting for dinner soon so I'll head over there now and maybe we can put together a meeting afterwards and use the videoconferencing device that we were given if you'd like.</p>",
        "id": 284677274,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654122110
    },
    {
        "content": "<p>Good morning <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> ! We were wondering whether you have a particular reason for not trying to define the token game in the original Dialectica Petri nets paper. Eric and I gave a quite natural definition but found that it clashes with the notion that a 0 element of the base lineale L represents \"no arc\" as opposed to \"an arc with cost 0\". More  amusingly, the dependent Dialectica construction actually fixes this problem by creating a distinction between arcs of value 0 and the absence of an arc, so we're thinking we should redo the basic setup from your paper with dependent M_L(Set) in order to be able to use tokens how we want in our construction.</p>",
        "id": 284757623,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1654182106
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"496984\">@Charlotte Aten</span>  this might be a good idea. I don't do the token game simply bc I was following Winskel, who was my PN expert then. But the dependent Dialectica is problematic, I don't know how to provide structure for it--maybe Tamara's function-space works as desired, maybe it doesn't. I don't know,  I'm trying to read, but going slowly.</p>",
        "id": 284759852,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654182942
    },
    {
        "content": "<p>For dependent Dialectica in Set with L.. perhaps these could be shown to be adjoint?</p>\n<div class=\"codehilite\"><pre><span></span><code>    _⊗_ : DDial → DDial → DDial\n    (pos₁ ▹ dir₁ c α₁) ⊗ (pos₂ ▹ dir₂ c α₂) = (pos₁ × pos₂) ▹ (λ { (p₁ , p₂) → dir₁ p₁ × dir₂ p₂}) c λ{ (p₁ , p₂) (d₁ , d₂) → α₁ p₁ d₁ ⊙ α₂ p₂ d₂}\n        where\n            open MonProset mon\n\n    [_,_] : DDial → DDial → DDial\n    [ pos₁ ▹ dir₁ c α₁ , pos₂ ▹ dir₂ c α₂ ] =\n        Σ (pos₁ → pos₂) (λ f → (p₁ : pos₁)→ dir₂ (f p₁) → dir₁ p₁) ▹ (λ{ (f , F) → Σ pos₁ (λ p₁ → dir₂ (f p₁))}) c\n            λ{ (f , F) (u , y) → α₁ u (F u y) ⊸ α₂ (f u) y}\n        where\n            open Lineale.Lineale lin\n</code></pre></div>",
        "id": 284813000,
        "sender_full_name": "Eric Bond",
        "timestamp": 1654208704
    },
    {
        "content": "<p>^ confirmed</p>",
        "id": 284816707,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1654211444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span>  this would be nice, but come to think of it, an exercise in Bart Jacob's book. <br>\nI had totally forgotten about that! I am sorry! Jacobs, \"Categorical Logic and Type Theory\", page 117, exercise 1.10.11.<br>\nbut I didn't know how to do the exercise, now I have a function, thanks!!</p>\n<p>However, what we want is a cartesian closed category and this is what took Bodil Biering, Tamara von Glehn and Sean Moss theses to produce, I expect. at least in the non-dependent case tensor product is not a cartesian product. and I think the same is true in the dependent case.</p>",
        "id": 284817829,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654212327
    },
    {
        "content": "<p>I meant to reply to this much earlier when I first saw it, but—what Eric is calling DDial is his Agda code above (dependent Dialectica in Set with L, indeed with any locally small category C) <em>is</em> also Cartesian closed, no? The formula for the Cartesian closure is just quite a bit messier…</p>",
        "id": 285797916,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1654981702
    },
    {
        "content": "<p>I find this hard to believe <span class=\"user-mention\" data-user-id=\"343715\">@Nelson Niu</span> . I think the structure we do have on DDial is symmetric monoidal closed, but not cartesian closed. but a proof would be good. my proof is for non-dependent objects only.</p>",
        "id": 285799151,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1654983656
    },
    {
        "content": "<p>Just checking—what do you mean by “structure”? I’m taking “monoidal closed” to mean a specific monoidal product has a closure operation—then “Cartesian closed” just means the Cartesian product is closed, so these would be for different monoidal “structures” on DDial</p>",
        "id": 285799207,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1654983745
    },
    {
        "content": "<p>There’s a proof in Sean Moss’s talk; there’s also a way to compute it directly that I have handwritten somewhere, I can write it up soon</p>",
        "id": 285801901,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1654986136
    },
    {
        "content": "<p>but we know that the cartesian product in DDial is (I\\times J, A_i+ B_j, the right relation), right?</p>\n<p>so saying the category is cartesian closed would mean finding an internal-hom (or exponent) for this monoidal structure. this is what I do find difficult, the monoidal structure we have  an internal-hom for  is the parallel product, not the cartesian product.</p>",
        "id": 285824200,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1655014345
    },
    {
        "content": "<p>Okay, then we’re talking about the same thing! There is in fact an internal-hom for the Cartesian product in DDial. Unlike the parallel product’s internal-hom, the full subcategory of nondependent objects is not closed under this operation, which is why the Cartesian closure doesn’t exist in the nondependent Dial setting. But it <em>does</em> exist in DDial. The formula is not very pretty, but (with the benefit of hindsight…) there’s a fairly natural way to derive it just by shifting around some sums and products</p>",
        "id": 285824394,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655014577
    },
    {
        "content": "<p>excellent news then!</p>",
        "id": 285824426,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1655014638
    },
    {
        "content": "<p>looking forward to the formula!</p>",
        "id": 285824489,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1655014769
    },
    {
        "content": "<p>(Incidentally, in my mind this is a heuristic benefit of thinking about all this literally in terms of “polynomials”—computations then become as easy as expanding sums and products the way you’d expect them to work)</p>",
        "id": 285824491,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655014780
    },
    {
        "content": "<p>This very likely won’t make sense without more context, but here’s the derivation of the formula from my notes in any SigmaPiC:</p>",
        "id": 285824619,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655014976
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/H-llkIUYsZK3pSars7m0eJNT/3FE4B83A-B2F1-4262-A3C4-B3C02B57516E.jpg\">3FE4B83A-B2F1-4262-A3C4-B3C02B57516E.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/H-llkIUYsZK3pSars7m0eJNT/3FE4B83A-B2F1-4262-A3C4-B3C02B57516E.jpg\" title=\"3FE4B83A-B2F1-4262-A3C4-B3C02B57516E.jpg\"><img src=\"/user_uploads/21317/H-llkIUYsZK3pSars7m0eJNT/3FE4B83A-B2F1-4262-A3C4-B3C02B57516E.jpg\"></a></div>",
        "id": 285824726,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655015160
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"343715\">@Nelson Niu</span> !.  I was not doubting the cartesian closure of SigmaPiC, but of DDial, in the terminology we just established. SigmaPiC is defined from the completions, from above as it were, I totally believe that it's cartesian closed. DDial is defined from objects and maps, from the ground up, so I was expecting a formula in terms of A_i's and B_j's that we then would prove equivalent to SigmaPiC. </p>\n<p>so we were talking about the same problem, but about different potential solutions all along.</p>",
        "id": 285840151,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1655037525
    },
    {
        "content": "<p>When we’ve been working with SigmaPiC, we’ve also been using the explicit ground-up, objects-and-maps construction for it (which has been shown to be the completion already). So we know everything is equivalent already, and the formulas are the same</p>",
        "id": 285849948,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655050833
    },
    {
        "content": "<p>Here’s the formula for the Cartesian closure in more familiar (I, A_i, P) notation:</p>",
        "id": 285850429,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655051519
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/615kozmRlF3oYAjbLpteTk_K/61B3D644-A220-4B57-AF22-3C9B703CD24F.jpg\">61B3D644-A220-4B57-AF22-3C9B703CD24F.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/615kozmRlF3oYAjbLpteTk_K/61B3D644-A220-4B57-AF22-3C9B703CD24F.jpg\" title=\"61B3D644-A220-4B57-AF22-3C9B703CD24F.jpg\"><img src=\"/user_uploads/21317/615kozmRlF3oYAjbLpteTk_K/61B3D644-A220-4B57-AF22-3C9B703CD24F.jpg\"></a></div>",
        "id": 285850467,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655051525
    },
    {
        "content": "<p>thanks! but here you've lost me!  what's s_i? what's the bar? why the product of b's in B_ji minus(??) s_i?</p>",
        "id": 285855884,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1655059343
    },
    {
        "content": "<ul>\n<li>\n<p>The bar is my naming convention to distinguish between an element (like i in I) vs. a function/indexed element (like jbar : I -&gt; J); it doesn’t mean any specific operation, it’s just a label. You can ignore it if you’d like, and everything should still parse correctly</p>\n</li>\n<li>\n<p>S ranges over a product over i’s in I of 2^B_ji—equivalently the power set of B_ji. So each Si is a subset of B_ji. If you think about it that way, taking a product over b’s in the complement of Si, namely B_ji minus Si, makes total sense</p>\n</li>\n</ul>",
        "id": 285856151,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655059779
    },
    {
        "content": "<p>I warned you the formula isn’t pretty 😅</p>",
        "id": 285856221,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655059863
    },
    {
        "content": "<p>In fact, a “reason” for the lack of prettiness is that writing objects in DDial in this way, as two sets and a predicate on them, forces you to write them in “normal” form, as Jeremie and the games co. call it. We know every object can be written in this compact, normal form, involving two sets—one you sum over, one you take a product over—because distributively lets you shift sums and products around, but that doesn’t mean that’s always the most natural way to think about them or write them down, especially if they originated from an “extensive” form consisting of a product of sums or something more complicated</p>",
        "id": 285856478,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1655060260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496984\">@Charlotte Aten</span> <span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> In case you hadn't seen it over at the chemistry stream: <a href=\"#narrow/stream/322714-practice.3A-chemistry/topic/invariants.20of.20Petri.20nets/near/286927239\">https://categorytheory.zulipchat.com/#narrow/stream/322714-practice.3A-chemistry/topic/invariants.20of.20Petri.20nets/near/286927239</a></p>",
        "id": 286936722,
        "sender_full_name": "Jonathan Weinberger",
        "timestamp": 1655827452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277106\">Jonathan Weinberger</span> <a href=\"#narrow/stream/323208-practice.3A-Dialectica/topic/implementation/near/286936722\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"496984\">Charlotte Aten</span> <span class=\"user-mention silent\" data-user-id=\"380293\">Eric Bond</span> In case you hadn't seen it over at the chemistry stream: <a href=\"#narrow/stream/322714-practice.3A-chemistry/topic/invariants.20of.20Petri.20nets/near/286927239\">https://categorytheory.zulipchat.com/#narrow/stream/322714-practice.3A-chemistry/topic/invariants.20of.20Petri.20nets/near/286927239</a></p>\n</blockquote>\n<p>Thanks for pointing this out! :)</p>",
        "id": 286938543,
        "sender_full_name": "Charlotte Aten",
        "timestamp": 1655828247
    },
    {
        "content": "<p><a href=\"https://github.com/vcvpaiva/Dialectica/blob/f8f8486895406c7dfba40700aff1d07fe5f08e63/Petri.agda#L175\">https://github.com/vcvpaiva/Dialectica/blob/f8f8486895406c7dfba40700aff1d07fe5f08e63/Petri.agda#L175</a></p>\n<p>Implementation of Petri Nets from the Dialectica Petri Nets paper using Dependent Dialectica.<br>\n<a href=\"https://arxiv.org/pdf/2105.12801.pdf\">https://arxiv.org/pdf/2105.12801.pdf</a></p>\n<p>Contains the examples on page 8 as well.<br>\n<a href=\"https://github.com/vcvpaiva/Dialectica/blob/f8f8486895406c7dfba40700aff1d07fe5f08e63/Petri.agda#L368\">https://github.com/vcvpaiva/Dialectica/blob/f8f8486895406c7dfba40700aff1d07fe5f08e63/Petri.agda#L368</a></p>\n<p>One note: The graphic in the paper is drawing <code>f</code> on transitions instead of places. This is inconsistent with what the paper describes where <code>f</code> is a map on places and <code>F</code> is a map on transitions. (I chose to implement the latter)</p>",
        "id": 288184770,
        "sender_full_name": "Eric Bond",
        "timestamp": 1656689394
    },
    {
        "content": "<p>thanks for the links, Eric. I'm reading slowly.</p>",
        "id": 288268095,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1656765825
    },
    {
        "content": "<blockquote>\n<p>The graphic in the paper is drawing f on transitions instead of places. This is inconsistent with what the paper describes where f is a map on places and F is a map on transitions</p>\n</blockquote>\n<p>I emailed Elena and Wilmer, who will correct the typo, thanks!</p>",
        "id": 288408181,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1656940377
    },
    {
        "content": "<p>So I've been learning (Cubical) Agda from the <a href=\"https://uwo.ca/math/faculty/kapulkin/seminars/hottest_summer_school_2022.html\">HoTT summer school</a> and figured I'd try proving Poly (and eventually Dial etc.) is a category myself. I finally learned enough by yesterday to do it, and finished it up today here!</p>\n<p><a href=\"/user_uploads/21317/E1v8DAQAEOqYzegWniKzv0a4/Poly.agda\">Poly.agda</a></p>\n<p>Of course Eric has done most of this already, but the key difference (please correct me if I'm wrong, <span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span>!) is that what we'd think of as a category is what the HoTT folks call a <em>precategory</em>. Agda with HoTT makes a distinction between more general <em>types</em> (think ∞-groupoid) and more specific <em>sets</em> (think an ∞-groupoid that is provably a 0-groupoid). So what they call a <em>category</em> has a further requirement that hom-<em>types</em> really are hom-<em>sets</em> that needs to be proven. Eric's already shown that Poly forms a precategory, with hom-types; what I've done here (with a great deal of help from lemmas from the Cubical Agda library) is further show that the category of polynomials where every position-type is a position-set and every direction-type is a direction-set forms a category, with hom-sets. (I don't think this should be too hard to generalize to Dialectica.)</p>\n<p>(There's something to be said about these constructions not really being Poly(Sets) or Dial(Sets) if we're coding them up this way—really, these are Dial([whatever category gives Agda its HoTT semantics]). This is a little too much type theory for me to think about in one sitting, though, so I'll just leave this vague parenthetical remark in case anyone finds musing on that interesting...)</p>",
        "id": 293311862,
        "sender_full_name": "Nelson Niu",
        "timestamp": 1660416907
    },
    {
        "content": "<p>We’ve been discussing if we want to use a precategory for simplicity or not. In Dial this boils down to: for (a b : L), does the type a &lt;= b contain multiple inhabitants/witnesses? For natural numbers and the usual definition of &gt;= ordering, this can be shown to be a Set (in the HoTT sense)</p>",
        "id": 293400935,
        "sender_full_name": "Eric Bond",
        "timestamp": 1660484265
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 293401142,
        "sender_full_name": "Eric Bond",
        "timestamp": 1660484395
    },
    {
        "content": "<p>And yes, using Set on the nose is a temporary simplification. You can implement this using a displayed category or parameterizing the module with a category C with the appropriate structure. I might have a version of this somewhere. </p>\n<p>This opens up a can of worms where you need a lot more infrastructure to reason about definitions. See MorphismsReasoning in Agda-categories.</p>",
        "id": 293402136,
        "sender_full_name": "Eric Bond",
        "timestamp": 1660485098
    },
    {
        "content": "<p>The record to sigma reflection tactic is so nice <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span>. Not aware that existed</p>",
        "id": 293407329,
        "sender_full_name": "Eric Bond",
        "timestamp": 1660488127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380293\">@Eric Bond</span> </p>\n<blockquote>\n<p>I was wondering if you could share more details about that :).<br>\n(Who should join, costs, what to expect, online or in person...etc)</p>\n</blockquote>\n<p>about HIM I know very little at this point. I hope to know some more soon.</p>",
        "id": 297022409,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1662228542
    },
    {
        "content": "<p>Hello! I’d like to get back on track with formalizing things. I’ve had the good fortune of being distracted with fellowship things and getting set for PhD applications. However, I miss yelling at my computer screen because Agda won’t typecheck something.</p>",
        "id": 301267413,
        "sender_full_name": "Eric Bond",
        "timestamp": 1664380282
    },
    {
        "content": "<p>I plan on refreshing my memory later today by going over the repo and overleaf. I haven’t had a debrief for the Cupertino activities yet.</p>",
        "id": 301268047,
        "sender_full_name": "Eric Bond",
        "timestamp": 1664380461
    },
    {
        "content": "<p>hi, I'm glad you miss yelling at your computer screen! I was going to write asking whether you saw Jacques Caretter talk in the Topos Colloquium last week when he discussed some of the things that make him yell at Agda.</p>",
        "id": 301329443,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1664399640
    },
    {
        "content": "<p>I need to finish one thing before I try to open my roll of big paper stickers to try to get a debrief for myself, but working on it.</p>",
        "id": 301329640,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1664399727
    },
    {
        "content": "<p>Yes! I caught the first half before a meeting. I also picked up some tricks from the Homotopy Type Theory Summer School.</p>",
        "id": 301363548,
        "sender_full_name": "Eric Bond",
        "timestamp": 1664424208
    }
]