[
    {
        "content": "<p>Are there any models of type theory in which function extensionality fails (well, except for the syntactic one)? In categorical semantics it is always true. Is there some version of the categorical semantics in which it does not hold?</p>",
        "id": 249532492,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1629064966
    },
    {
        "content": "<p>In her thesis <a href=\"https://www.repository.cam.ac.uk/handle/1810/254394\">Polynomials and Models of Type Theory</a>, Tamara von Glehn constructs a model of dependent type theory that does not satisfy function extensionality, using polynomial functors.</p>",
        "id": 249532593,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1629065115
    },
    {
        "content": "<p>And some models from game semantics.</p>",
        "id": 249535687,
        "sender_full_name": "Sam Speight",
        "timestamp": 1629070309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/Semantics.20of.20function.20extensionality/near/249532593\">said</a>:</p>\n<blockquote>\n<p>In her thesis <a href=\"https://www.repository.cam.ac.uk/handle/1810/254394\">Polynomials and Models of Type Theory</a>, Tamara von Glehn constructs a model of dependent type theory that does not satisfy function extensionality, using polynomial functors.</p>\n</blockquote>\n<p>Formalised by András Kovács here: <a href=\"https://github.com/AndrasKovacs/polynomial-model\">https://github.com/AndrasKovacs/polynomial-model</a> if you're into that kind of thing.</p>",
        "id": 249536759,
        "sender_full_name": "Mitchell Riley",
        "timestamp": 1629072017
    },
    {
        "content": "<p>There's a somewhat trivial model that violates function extensionality in Garner's <a href=\"https://arxiv.org/abs/0803.4466\">On the strength of dependent products in the type theory of Martin-Löf</a> (section 4): replace the \"real\" exponential by two copies of itself.</p>",
        "id": 249538556,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629074958
    },
    {
        "content": "<p>Whether this rule \"always\" holds in categorical semantics depends on the definition of \"categorical semantics\" -- if by the latter you mean semantics where exponentials are interpreted by categorical exponentials, then of course funext always holds by definition, but you can also write down what a categorical semantics of type theory without funext would be, and then build models of it as have been mentioned.</p>",
        "id": 249538617,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629075020
    },
    {
        "content": "<p><a href=\"https://hal.inria.fr/hal-01445835/document\">The next 700 syntactical models of type theory</a> uses a similar method to obtain models of type theory satisfying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\neg \\mathrm{funext}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord\"><span class=\"mord mathrm\">funext</span></span></span></span></span> and various other forms of anti-extensionality.</p>",
        "id": 249576424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1629113471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276480\">Reid Barton</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/Semantics.20of.20function.20extensionality/near/249576424\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://hal.inria.fr/hal-01445835/document\">The next 700 syntactical models of type theory</a> uses a similar method to obtain models of type theory satisfying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\neg \\mathrm{funext}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord\"><span class=\"mord mathrm\">funext</span></span></span></span></span> and various other forms of anti-extensionality.</p>\n</blockquote>\n<p>I seem to recall that the \"function\" types in this paper are not actually exponentials (i.e. don't have an eta law). To me it is more interesting to try and violate function extensionality where functions types are actually exponentials.</p>",
        "id": 251472348,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630450030
    },
    {
        "content": "<p>(Hope I am not mixing up the papers I'm referring to!)</p>",
        "id": 251472362,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630450044
    },
    {
        "content": "<p>I think Garner's models fail the eta-rule too.  I don't know of any models that satisfy eta but not funext, do you?</p>",
        "id": 251483632,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1630457382
    },
    {
        "content": "<p>I think I might know one... I have to go and check if it does what I think.</p>",
        "id": 251486157,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630459301
    },
    {
        "content": "<p>I believe there is a realizability model due to Van Oosten (?), where you can generate a notion of homotopy using the codiscrete interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\nabla{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∇</span><span class=\"mord\"><span class=\"mord\">2</span></span></span></span></span> --- this models the identity type, but function extensionality fails. If I recall correctly, this would satisfy our constraints. But I hope I'm not mis-remembering.</p>",
        "id": 251486271,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630459412
    },
    {
        "content": "<p>I always felt that the other \"counter-models\" should be referred to as violating \"non-function extensionality\" rather than \"function extensionality\" (-:</p>",
        "id": 251486348,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630459482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297784\">Jonathan Sterling</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/Semantics.20of.20function.20extensionality/near/251486271\">said</a>:</p>\n<blockquote>\n<p>I believe there is a realizability model due to Van Oosten (?), where you can generate a notion of homotopy using the codiscrete interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\nabla{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∇</span><span class=\"mord\"><span class=\"mord\">2</span></span></span></span></span> --- this models the identity type, but function extensionality fails. If I recall correctly, this would satisfy our constraints. But I hope I'm not mis-remembering.</p>\n</blockquote>\n<p>There was some improvement to this by Dan Frumin (IIRC) that did model funext. Anyway, both were interesting to me for different reasons.</p>",
        "id": 251486441,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630459568
    },
    {
        "content": "<p>A relatively simple model of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"monospace\">MLTT</mtext><mo>+</mo><mi>η</mi><mo>+</mo><mi mathvariant=\"normal\">¬</mi><mtext mathvariant=\"monospace\">funext</mtext></mrow><annotation encoding=\"application/x-tex\">\\texttt{MLTT} + \\eta + \\neg\\texttt{funext}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944400000000001em;vertical-align:-0.08333em;\"></span><span class=\"mord text\"><span class=\"mord texttt\">MLTT</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61111em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord text\"><span class=\"mord texttt\">funext</span></span></span></span></span> is the parametric exceptional model from <a href=\"https://www.pédrot.fr/articles/exceptional.pdf\">this paper</a> (section 4.2)</p>",
        "id": 251514143,
        "sender_full_name": "Kenji Maillard",
        "timestamp": 1630480838
    },
    {
        "content": "<p>The polynomial functors/containers model from <a href=\"https://www.repository.cam.ac.uk/handle/1810/254394\">Tamara von Glehn's thesis</a> has eta but not funext. I formalised it in Agda <a href=\"https://gist.github.com/bobatkey/0d1f04057939905d35699f1b1c323736\">https://gist.github.com/bobatkey/0d1f04057939905d35699f1b1c323736</a> and <span class=\"user-mention\" data-user-id=\"277388\">@András Kovács</span> made a tidier formalisation <a href=\"https://github.com/AndrasKovacs/polynomial-model\">https://github.com/AndrasKovacs/polynomial-model</a></p>",
        "id": 251532416,
        "sender_full_name": "Bob Atkey",
        "timestamp": 1630490024
    },
    {
        "content": "<p>Oh, I see it linked to above. But the point is that it does support <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Π</span></span></span></span>-types.</p>",
        "id": 251532741,
        "sender_full_name": "Bob Atkey",
        "timestamp": 1630490159
    },
    {
        "content": "<p>Awesome, thanks everyone!</p>",
        "id": 251591047,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1630514666
    },
    {
        "content": "<p>Someone should record this somewhere, maybe on the <a href=\"https://ncatlab.org/nlab/show/function+extensionality\">nlab</a>.</p>",
        "id": 251594347,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1630515930
    }
]