[
    {
        "content": "<p>There’s the paper <em>Do we Need Dependant Types</em> by Daniel Fridlender and Mia Indrika which gives a neat “trick” for constructing something that looks like a dependent type, but without actually using dependant types. Is this an example of a more general method? I’m guessing that this can be used to construct types dependent on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> in lots of situations, but I have no idea what’s really going on behind the scenes here!</p>",
        "id": 203093424,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1594123401
    },
    {
        "content": "<p>(For reference, this is the paper <a href=\"https://pdfs.semanticscholar.org/7e66/7dd0515e4f674e42c0b0860644fee3dd5846.pdf\">https://pdfs.semanticscholar.org/7e66/7dd0515e4f674e42c0b0860644fee3dd5846.pdf</a>)</p>",
        "id": 203593358,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1594468347
    },
    {
        "content": "<p>Maybe you can generalize that to Turing categories, in which you have a form of self-encoding  resembling Godelization</p>",
        "id": 203593478,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1594468523
    },
    {
        "content": "<p>But I don't know. Plus, what the purpose? Circumventing Haskell's limitations? (honest question)</p>",
        "id": 203593485,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1594468551
    },
    {
        "content": "<p>Most of the machinery in that paper is a special case of what is now called <code>Applicative</code> in Haskell. Their <code>(&lt;&lt;)</code> is written <code>(&lt;*&gt;) :: Applicative f =&gt; f (a -&gt; b) -&gt; f a -&gt; f b</code>. <code>repeat</code> is a special case of <code>pure :: Applicative f =&gt; a -&gt; f a</code>. You can generalize their functions to work for any <code>Applicative</code> that way, and their example is obtained by using <code>ZipList</code>.</p>",
        "id": 203600542,
        "sender_full_name": "Dan Doel",
        "timestamp": 1594480319
    },
    {
        "content": "<p>And of course it's well known that instead of trying to do some dependently typed <code>lift n</code> you can just write <code>f &lt;$&gt; x &lt;*&gt; y &lt;*&gt; z</code>, where <code>(&lt;$&gt;) :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</code>, which isn't really that bad, and so this isn't a very good example of why dependent types are worth while. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 203600747,
        "sender_full_name": "Dan Doel",
        "timestamp": 1594480563
    },
    {
        "content": "<p>The rest is kind of messing with continuation passing and polymorphic types to get something that looks like numerals, but actually has a complex type. I think another example is the <a href=\"http://okmij.org/ftp/typed-formatting/\">printf DSL</a> that Oleg Kiselyov came up with.</p>",
        "id": 203601615,
        "sender_full_name": "Dan Doel",
        "timestamp": 1594482017
    }
]