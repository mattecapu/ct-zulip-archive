[
    {
        "content": "<p>Based on this post, I'd like to implement the stuff <span class=\"user-mention\" data-user-id=\"277446\">@David Jaz</span>  discussed in the MIT seminar. <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/petri.20nets/near/193605154\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/petri.20nets/near/193605154\">https://categorytheory.zulipchat.com/#narrow/stream/229156-practice.3A-applied.20ct/topic/petri.20nets/near/193605154</a></p>",
        "id": 193610860,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586548575
    },
    {
        "content": "<p>If anyone has ideas or references that would be a good place to start I'd really appreciate it.</p>",
        "id": 193611523,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586548957
    },
    {
        "content": "<p>I still need to watch that seminar. But I can guess roughly what you have in mind, and in my opinion it's one of the most exciting things in all of ACT</p>",
        "id": 193611711,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586549075
    },
    {
        "content": "<p>I imagine a 21st century version of the programming language Dynamo for systems dynamics: <a href=\"https://en.wikipedia.org/wiki/DYNAMO_(programming_language)\" title=\"https://en.wikipedia.org/wiki/DYNAMO_(programming_language)\">https://en.wikipedia.org/wiki/DYNAMO_(programming_language)</a></p>",
        "id": 193611807,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586549149
    },
    {
        "content": "<p>Yeah if we have an ACT approach to dynamical systems that yielded useful technology for engineers and scientists, that would be awesome. The types of knowledge representation and computation you can do in Catlab + Dynamical Systems would be a huge \"killer app\" for ACT.</p>",
        "id": 193612671,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586549732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span> <a href=\"https://github.com/epatters/Catlab.jl/issues/154\" title=\"https://github.com/epatters/Catlab.jl/issues/154\">https://github.com/epatters/Catlab.jl/issues/154</a></p>",
        "id": 193612761,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586549782
    },
    {
        "content": "<p>Or if you want to <em>really</em> get people's attention, make a better Simulink</p>",
        "id": 193612860,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586549849
    },
    {
        "content": "<p>This table of constructions tho. If you could build software for engineers that was able to manipulate all of these systems in the appropriate way. <a href=\"/user_uploads/21317/OikkfNgGr3zJDAMPipLTnAQ1/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/OikkfNgGr3zJDAMPipLTnAQ1/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/OikkfNgGr3zJDAMPipLTnAQ1/image.png\"></a></div>",
        "id": 193612897,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586549873
    },
    {
        "content": "<p>Yes. I think this is realistically feasible</p>",
        "id": 193613113,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586549988
    },
    {
        "content": "<p>I too found both <span class=\"user-mention\" data-user-id=\"277446\">@David Jaz</span> 's talks extremely elegant and well-thought. I was super excited whatching them, such a beautiful formalism!</p>",
        "id": 193613117,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1586549994
    },
    {
        "content": "<p>Yeah simulink is a modeling tool that is specialized for signal flow graphs. You can shove a lot of stuff into a signal flow graphs if you are willing to hack it in there. What if the tool knew the CT representations of the modeling language?</p>",
        "id": 193613179,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586550005
    },
    {
        "content": "<p>(Spoken from my comfortable position of not really a programmer)</p>",
        "id": 193613196,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586550013
    },
    {
        "content": "<p>Yeah I think it is feasible (spoken as a someone who writes scientific software semi-pro)</p>",
        "id": 193613279,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586550081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275927\">James Fairbanks</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/193611523\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/193611523\">said</a>:</p>\n<blockquote>\n<p>If anyone has ideas or references that would be a good place to start I'd really appreciate it.</p>\n</blockquote>\n<p>David Spivak has a paper with some of the beginnings of the formalism here: <a href=\"https://arxiv.org/abs/1908.02202\" title=\"https://arxiv.org/abs/1908.02202\">https://arxiv.org/abs/1908.02202</a></p>",
        "id": 193616192,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1586551760
    },
    {
        "content": "<blockquote>\n<p>Arnold and Avez (1968), Perspectives of nonlinear dynamics, Vol 1, E. Atlee Jackson, p 51.<br>\nLet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> be a measure preserving manifold, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> a measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> defined by a continuous positive density, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo>:</mo><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">f^t:M \\to M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9879959999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> a one -parameter group of measure-preserving diffeomorphisms. The collection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>μ</mi><mo separator=\"true\">,</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(M,\\mu,f^t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is called a <em>classical dynamical system</em>.</p>\n</blockquote>",
        "id": 193620002,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586554285
    },
    {
        "content": "<p>I am intrigued by the concept of implementing open dynamical systems but I don't understand the idea well enough to do so. So suppose I take an automaton with and update function (SxI) -&gt; S'  and readout function S -&gt; O.  What is composition here? If I follow what I think of as the lens composition of sys1 and sys2, the output 1 becomes the state 2 of the next piece. and the updated state 2  becomes the input 1 to update sys 1. This doesn't really make sense to me. I could imagine horizontally composing the lens in parallel for independent systems, but the actual composition of lens doesn't match anything that I can intuitively identify in a dynamical system</p>",
        "id": 193623515,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586556431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> and I were talking about composing automata <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/petri.20nets/near/193492015\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/petri.20nets/near/193492015\">just yesterday here on Zulip</a>.</p>",
        "id": 193624135,
        "sender_full_name": "John Baez",
        "timestamp": 1586556849
    },
    {
        "content": "<p>I told her I'd ask Moggi to remind me about what he knows about that.</p>",
        "id": 193624160,
        "sender_full_name": "John Baez",
        "timestamp": 1586556874
    },
    {
        "content": "<p>I think the basic idea is that we need a bit more structure for our automata than you described.  Let me explain....</p>",
        "id": 193624187,
        "sender_full_name": "John Baez",
        "timestamp": 1586556903
    },
    {
        "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Moore_machine\" title=\"https://en.wikipedia.org/wiki/Moore_machine\">Moore machine</a> has a set of states <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, an update function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi mathvariant=\"normal\">Σ</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S \\times \\Sigma \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and a read-out function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>→</mo><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">S \\to O</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span></span></span></span>, but also a bit more...</p>",
        "id": 193624329,
        "sender_full_name": "John Baez",
        "timestamp": 1586557017
    },
    {
        "content": "<p>It also has a \"start state\".  But I think it'd be more symmetrical to have not just a single start state but a bunch, which can described using a \"read-in function\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">I \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 193624452,
        "sender_full_name": "John Baez",
        "timestamp": 1586557113
    },
    {
        "content": "<p>So, you can \"read-in\", then keep updating, and then \"read-out\".</p>",
        "id": 193624472,
        "sender_full_name": "John Baez",
        "timestamp": 1586557134
    },
    {
        "content": "<p>Then I can imagine composing such machines if the read-out set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span></span></span></span> of the first one is the read-in set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>I</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">I'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> of the second one.  But the result is not another of the same sort of machine.</p>",
        "id": 193624576,
        "sender_full_name": "John Baez",
        "timestamp": 1586557208
    },
    {
        "content": "<p>Hmm, I need to ask Moggi what he was telling me.  It worked better than this.</p>",
        "id": 193624603,
        "sender_full_name": "John Baez",
        "timestamp": 1586557237
    },
    {
        "content": "<p>James, this sounds like an exciting idea. I need to watch the talk, but my initial impression is that this seems doable and very much worth doing.</p>",
        "id": 193625599,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1586558036
    },
    {
        "content": "<p>Yeah I th</p>",
        "id": 193626166,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586558427
    },
    {
        "content": "<p>ink that it will connect Catlab to a proper CAS for describing the smooth functions for like Continuous Time Continuous Space Systems</p>",
        "id": 193626216,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586558464
    },
    {
        "content": "<p>On the differential equation front, what I imagine what one would build is a categorical flavored frontend to off the shelf ODE solvers. ODE solvers basically take in a function f, such that xdot = f(x) , initial conditions, and find a single trajectory. There are some that will also take in constraint equations g(x,xdot)=0 in addition. I can perhaps begin to see how you can compositionally talk about building up the total system f out of the f of the subpieces basically using functional programming style combinators. I don't really understand if or how this relates at all to the ideas presented in the talk.</p>",
        "id": 193626444,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586558625
    },
    {
        "content": "<p>In 1986 I had several conversations with Stephen Wolfram. I was working on extending tetration to the complex numbers. Wolfram was interested in how I moved from a discrete dynamical system to a continuous one. I was fascinated by Wolfram's typification of PDE and iterated functions as the two mathematical systems capable of serving as a foundation for physics. Wolfram was interested in unifying physics by unifying the underlying mathematics. Also he wanted to unify chaotic and non-chaotic phenomena. <br>\nI have been been interested in the idea of a universal dynamical system. A single system complex enough to emulate any other basic dynamical system, but simple otherwise. That is why I focus on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> and it's Taylor series. I focus on the most general \"data\" that make sense to me, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"double-struck\">G</mi><mi mathvariant=\"double-struck\">L</mi></mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{GL}(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"mord mathbb\">L</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>. I hope to be able to show the unity of maps and flows. In <em>A New Kind of Science</em> Wolfram showed that iterated smooth functions were capable of the same behaviors as cellular automata.</p>",
        "id": 193632005,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586563658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> Conal Elliot’s concat library has an implementation of a Symmetric Monoidal Category of Mealy machines.</p>\n<p>Here’s what the update function and the inputs and outputs look like. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- State transition function</span>\n<span class=\"kr\">type</span> <span class=\"kt\">X</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">=</span> <span class=\"n\">a</span> <span class=\"kt\">:*</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kt\">:*</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- Combine Mealy machines</span>\n<span class=\"nf\">op2</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">con</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">.</span> <span class=\"kt\">CartCon</span> <span class=\"n\">con</span>\n    <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">con</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">con</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">X</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">X</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">X</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"kt\">:*</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Mealy</span> <span class=\"n\">con</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Mealy</span> <span class=\"n\">con</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Mealy</span> <span class=\"n\">con</span>  <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"nf\">op2</span> <span class=\"n\">op</span> <span class=\"p\">(</span><span class=\"kt\">Mealy</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:*</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kt\">:*</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"n\">s0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Mealy</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"ow\">::</span> <span class=\"n\">c</span> <span class=\"kt\">:*</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">d</span> <span class=\"kt\">:*</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Mealy</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"p\">`</span><span class=\"n\">op</span><span class=\"p\">`</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s0</span><span class=\"p\">,</span><span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">&lt;+</span> <span class=\"n\">inOp</span> <span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">:*</span><span class=\"p\">)</span> <span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">Sat</span> <span class=\"n\">con</span><span class=\"p\">)</span> <span class=\"o\">@</span><span class=\"n\">s</span> <span class=\"o\">@</span><span class=\"n\">t</span>\n</pre></div>\n\n\n<p>Would the resulting machine from e to f count as the same sort of machine given that there’s an operation that combines the state transition functions from X s a b and X t c d together to act over a pair of starting states? And does such a pairing construction equal the bunch of starting states you’re describing?</p>",
        "id": 193641820,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1586579310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275927\">@James Fairbanks</span> I was very excited about the potential for combining the formalism with Julia’s excellent support for neural ODEs </p>\n<p><a href=\"https://julialang.org/blog/2019/01/fluxdiffeq/\" title=\"https://julialang.org/blog/2019/01/fluxdiffeq/\">https://julialang.org/blog/2019/01/fluxdiffeq/</a></p>\n<p>Do you have thoughts in this direction?</p>",
        "id": 193642004,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1586579661
    },
    {
        "content": "<p>(By the way, <span class=\"user-mention\" data-user-id=\"277630\">@Faez Shakil</span>, you can wrap Haskell code between <code> ```hs </code> and <code> ``` </code> on separate lines to make it a little easier to read.)</p>",
        "id": 193642093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586579818
    },
    {
        "content": "<p>(Thanks <span class=\"user-mention\" data-user-id=\"276480\">@Reid Barton</span>, much prettier now)</p>",
        "id": 193642348,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1586580276
    },
    {
        "content": "<p>Also is anyone thinking about how modern Reinforcement Learning ties into all of this? i.e is a Markov Decision Process straightforwardly reducible into a mealy machine with some hand-waviness about function approximation or would a compositional explanation of it also take into account the dynamics of gradient-based updates to said function approximators and how to put them together while still preserving the semantics of the learning problem?</p>",
        "id": 193644131,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1586584022
    },
    {
        "content": "<p>Conal Elliot fanboy here. Thanks for pointing out that section of concat. <a href=\"https://github.com/conal/concat/blob/838b5a866c9932dc85996ba1391e72177df94cd7/examples/src/ConCat/Synchronous.hs#L58\" title=\"https://github.com/conal/concat/blob/838b5a866c9932dc85996ba1391e72177df94cd7/examples/src/ConCat/Synchronous.hs#L58\">https://github.com/conal/concat/blob/838b5a866c9932dc85996ba1391e72177df94cd7/examples/src/ConCat/Synchronous.hs#L58</a> It appears he is defining composition of two machines as a new machine with the product of the states where the output of machine 1 is fed as the input of machine 2. This is a reasonable definition I think and makes sense. It doesn't obviously match the form given for the open dynamical system.</p>",
        "id": 193664190,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586617070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277630\">@Faez Shakil</span> yes I think that the Julia ODE and AutoDiff Ecosystems are the most exciting place to be doing this kind of work. Combining it with Catlab is definitely the way to go.</p>",
        "id": 193669327,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586624352
    },
    {
        "content": "<p>We have been using OpenPetriNets to combine systems and then giving them Mass Action Kinetics to model Epidemics and Biochemistry. If you can do that for arbitrary Dynamical Systems via the readout and update functions. That would be awesome.</p>",
        "id": 193669401,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586624438
    },
    {
        "content": "<p>Petri.jl and SemanticModels.PetriCospans are the relevant Julia modules.</p>",
        "id": 193669418,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586624470
    },
    {
        "content": "<p>I agree that a lot of ML esp. active and reinforcement learning looks like dynamical systems.</p>",
        "id": 193669441,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586624520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/193664190\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/193664190\">said</a>:</p>\n<blockquote>\n<p>Conal Elliot fanboy here. Thanks for pointing out that section of concat. </p>\n<p>It appears he is defining composition of two machines as a new machine with the product of the states where the output of machine 1 is fed as the input of machine 2. This is a reasonable definition I think and makes sense. It doesn't obviously match the form given for the open dynamical system.</p>\n</blockquote>\n<p>Hello Hi that happens to be my primary identity these days as well! There really should be a separate thread to gush about concat somewhere - have you been using it for realwork™?</p>\n<p>So my impression was that op2 is just the function defining sequential composition. There are also instances for Monoidal Sums and Products, as well as Braiding of both Sums and Products. Doesn't that capture almost all of the ways that you can compose open dynamical systems (boxes inside boxes etc wired together under the rules given in the talk)?</p>",
        "id": 193700052,
        "sender_full_name": "Faez Shakil",
        "timestamp": 1586678102
    },
    {
        "content": "<p>I haven't ever actually used concat. It does seem like a reasonable way to compose stateful machines. Maybe this is an exact representation of what is presented in the talk, but I don't personally understand the translation. I don't see explicit readout and update functions. I don't really see a Lens structure. I don't think the talk was about just the idea of having an open dynamical system that can be plugged together. I thought he was getting at some specific organization or formalism that I don't understand</p>",
        "id": 193715495,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586701953
    },
    {
        "content": "<p>I'm not stating facts, what I'm doing is trying to say what things I understand and what things I don't and hoping someone might provide helpful clarification, because this is a topic that is interesting to me.</p>",
        "id": 193715553,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586702053
    },
    {
        "content": "<p>I'm not sure that open dynamical systems are a mature subject. Consider the following graph, [tetration.png]. Tests of an open dynamical systems could be their ability to transform multiplication into exponentiation, exponentiation into tetration, or Lie algebras into Lie groups. The limited information published on tetration indicates the limits of current open dynamical systems due  to chaos. My research is extending the Ackermann function or hyperoperators from the natural numbers to invertible matrices. So I have to use a mature version of dynamical systems. <a href=\"https://www.overleaf.com/read/zjwkzgftsqkm\" title=\"https://www.overleaf.com/read/zjwkzgftsqkm\">https://www.overleaf.com/read/zjwkzgftsqkm</a></p>\n<p>A simple yet complete? description of open dynamical systems take a time input as a matrix function, and manifolds described by matrix function as an input and an output. Quantum mechanics considers matrix multiplication as capable of transferring the universe from one instant to the next. Matrix multiplication is the composition of matrices, so matrix multiplication of possibly infinite matrices could be important. A comment was made that dynamics is like ML. I would say that ML is like dynamics as that is what ML must emulate. </p>\n<p>(<a href=\"user_uploads/21317/WcKza1nthyKLduSrtD9Vj7Hf/tetration.png\" title=\"user_uploads/21317/WcKza1nthyKLduSrtD9Vj7Hf/tetration.png\">https://categorytheory.zulipchat.com/user_uploads/21317/WcKza1nthyKLduSrtD9Vj7Hf/tetration.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/21317/WcKza1nthyKLduSrtD9Vj7Hf/tetration.png\" title=\"https://categorytheory.zulipchat.com/user_uploads/21317/WcKza1nthyKLduSrtD9Vj7Hf/tetration.png\"><img src=\"user_uploads/21317/WcKza1nthyKLduSrtD9Vj7Hf/tetration.png\"></a></div>",
        "id": 193731529,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586727811
    },
    {
        "content": "<p>A simple open dynamical system is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(0)=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>D</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><msup><mo stretchy=\"false\">)</mo><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^t(0)=Df(0)^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>. But that is just the first term of the Taylor series of an open dynamical system.</p>",
        "id": 193783493,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586791796
    },
    {
        "content": "<p>Since I'm professionally a programmer, I am learning Julia to implement an open dynamical system. Place your orders for features or let me know what is flawed in my model.</p>",
        "id": 193843899,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1586829961
    },
    {
        "content": "<p>See <a href=\"http://tetration.org/Combinatorics/Julia/index.html\" title=\"http://tetration.org/Combinatorics/Julia/index.html\">http://tetration.org/Combinatorics/Julia/index.html</a></p>",
        "id": 195155941,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1587714905
    },
    {
        "content": "<p>Cool. What features of an open dynamical system are you hoping to simulate?</p>",
        "id": 195292776,
        "sender_full_name": "Jade Master",
        "timestamp": 1587833312
    },
    {
        "content": "<p>I'm hoping that I have all the features down. This isn't meant to be a partial simulation of a dynamical system, it is the Taylor series of a dynamical system of smooth functions. So it is even more general that the <strong><em>classical dynamical system</em></strong> because it has no constraint to be measure preserving. </p>\n<p>The following constraints were added to enable my assertions to be clearly proven. I should mention that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=x+O(2)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is an EGF. The benefit of this dynamical system is that all computations can be done in rational arithmetic proving that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>a</mi></msup><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mi>b</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>f</mi><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f^a(f^b(x))-f^{(a+b)}(x)==0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">b</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.  I have two different dynamical systems, OFG and EFG with the EFG converted to Julia to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mn>9</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(9)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span><span class=\"mopen\">(</span><span class=\"mord\">9</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 195292969,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1587833610
    },
    {
        "content": "<p>What's \"open\" about this?  What you're writing about here sounds like dynamical systems.</p>",
        "id": 195305105,
        "sender_full_name": "John Baez",
        "timestamp": 1587852699
    },
    {
        "content": "<p>i cant read this at all <a href=\"/user_uploads/21317/RtI8Q3adODPY2fs9u1Mmzndq/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/RtI8Q3adODPY2fs9u1Mmzndq/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/RtI8Q3adODPY2fs9u1Mmzndq/image.png\"></a></div>",
        "id": 195306619,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587855652
    },
    {
        "content": "<p>what do you mean by constructing an iterated function at a fixed point, and what does it mean that a composition can do it?</p>",
        "id": 195306638,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587855691
    },
    {
        "content": "<p>Yes, mathematical language is not being used in the way we usually do, here.</p>",
        "id": 195306717,
        "sender_full_name": "John Baez",
        "timestamp": 1587855808
    },
    {
        "content": "<p>Dynamical system means many things (but not everything); here's a pretty general treatment:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Dynamical_system_(definition)\" title=\"https://en.wikipedia.org/wiki/Dynamical_system_(definition)\">https://en.wikipedia.org/wiki/Dynamical_system_(definition)</a></p>\n<p><em>Open</em> dynamical systems are what we category theorists are interested in.  These are more general than dynamical systems.  Roughly, they allow \"inputs\" and \"outputs\" that can influence the dynamics of the system.  I could point you to some formal definitions, but they'd be tentative: <em>open</em> dynamical systems have not been hammered out for the last 50 years the way dynamical systems have!   Doing it right seems to require category theory.  That's why we're interested.</p>",
        "id": 195310926,
        "sender_full_name": "John Baez",
        "timestamp": 1587863800
    },
    {
        "content": "<p>Anyway, I think you'll have trouble getting people here interested in your work on \"implementing open dynamical systems\" until you really tackle open dynamical systems.</p>",
        "id": 195310978,
        "sender_full_name": "John Baez",
        "timestamp": 1587863917
    },
    {
        "content": "<p>reading up this thread is making me wanna work on some of this stuff once i have some more free time in a couple weeks...</p>",
        "id": 195311585,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587865200
    },
    {
        "content": "<p>well honestly what i want to do is implement some kind of modal type theory that lets you do a more thorough \"compiling to categories\", like ive probably rambled about here before</p>",
        "id": 195311632,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587865246
    },
    {
        "content": "<p>in parallel: i'm wondering, what relation do open dynamical systems bear to frp?</p>",
        "id": 195311684,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587865346
    },
    {
        "content": "<p>or perhaps DCTP, if you wanna get all conal about it? :-)</p>",
        "id": 195311685,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587865357
    },
    {
        "content": "<p>i bet it's a close one!</p>",
        "id": 195311827,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587865666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> i found a paper you coauthored that formulates open dynamical systems using decorated cospans—can it be done using structured cospans instead?</p>",
        "id": 195312843,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587867579
    },
    {
        "content": "<p>well: mostly i'm wondering what the category would be that the cospan is in if you did it that way</p>",
        "id": 195312864,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587867602
    },
    {
        "content": "<p>That's one of the few decorated cospan categories that I don't know how to also do using structured cospans!</p>\n<p>The problem, briefly, is that there appears to be no \"free dynamical system on a finite set\" - no left adjoint from the category of finite sets to the category of finite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> for which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>S</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span></span></span></span> is equipped with a vector field.</p>",
        "id": 195313185,
        "sender_full_name": "John Baez",
        "timestamp": 1587868240
    },
    {
        "content": "<p>Kenny Courser and Christina Vasilakopoulou and I are writing a paper \"Structured vs Decorated Cospans\", about when you can switch viewpoints, and sometime I need to figure out exactly why you can't in this case.   I've been putting it off.</p>",
        "id": 195313236,
        "sender_full_name": "John Baez",
        "timestamp": 1587868337
    },
    {
        "content": "<p>It's possible I'm not being creative enough about what to take as the category of finite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> for which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>S</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span></span></span></span> is equipped with a vector field - the category you're mostly wondering about.  There's a sort of \"obvious\" choice, and I'm pretty sure that one doesn't give you the necessary left adjoint.</p>",
        "id": 195313256,
        "sender_full_name": "John Baez",
        "timestamp": 1587868435
    },
    {
        "content": "<p>what would the morphisms in that category be, though?</p>",
        "id": 195313867,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587869614
    },
    {
        "content": "<p>just functions between finite sets?</p>",
        "id": 195313868,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587869621
    },
    {
        "content": "<p>oh wait... functions between finite sets, <em>that induce the right vector field</em>?</p>",
        "id": 195313910,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587869655
    },
    {
        "content": "<p>what relation does this stuff bear to open dynamical systems btw? <a href=\"https://arxiv.org/abs/1405.6881\" title=\"https://arxiv.org/abs/1405.6881\">https://arxiv.org/abs/1405.6881</a></p>",
        "id": 195315792,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587873261
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> <a href=\"/user_uploads/21317/dmv-k5NpSL9ECXSxij1X93cl/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/dmv-k5NpSL9ECXSxij1X93cl/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/dmv-k5NpSL9ECXSxij1X93cl/image.png\"></a></div>",
        "id": 195316107,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587873949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195313867\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195313867\">said</a>:</p>\n<blockquote>\n<p>what would the morphisms in that category be, though?<br>\njust functions between finite sets?</p>\n</blockquote>\n<p>Then it'd just be equivalent to the category of finite sets: structure not preserved by morphisms is ignorable \"fluff\" that doesn't affect the category (up to equivalence).</p>\n<blockquote>\n<p>oh wait... functions between finite sets, that <em>induce the right vector field?</em></p>\n</blockquote>\n<p>Yes, that's what I'd call the obvious choice.</p>",
        "id": 195317861,
        "sender_full_name": "John Baez",
        "timestamp": 1587877615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195315792\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195315792\">said</a>:</p>\n<blockquote>\n<p>what relation does this stuff bear to open dynamical systems btw? <a href=\"https://arxiv.org/abs/1405.6881\" title=\"https://arxiv.org/abs/1405.6881\">https://arxiv.org/abs/1405.6881</a></p>\n</blockquote>\n<p>Fun question!  There should be a functor from this category to open dynamical systems.   But it's a bit subtle because signal flow diagrams give you higher-order linear systems of ODE, not first-order nonlinear systems of ODE.  Any higher-order linear system of ODE can can be rewritten as a first-order system by introducing extra variables.  I've never tried to work this out as a kind of functor, though!</p>\n<p>I'm glad you're getting interested in this stuff.  You're asking good questions.</p>",
        "id": 195318020,
        "sender_full_name": "John Baez",
        "timestamp": 1587877976
    },
    {
        "content": "<p>I was wondering about this recently. It would be really nice if you could just add nonlinear elements to the same kinds of networks in that paper, to get nonlinear odes. On one level it seems like that should correspond to replacing linear relations with nonlinear ones (i.e. replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">R</mi><mi mathvariant=\"normal\">e</mi><msub><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{FinRel_k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">F</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">R</span><span class=\"mord mathrm\">e</span><span class=\"mord\"><span class=\"mord mathrm\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> with some other category of 'nice' relations that includes the graphs of nonlinear functions as well as linear ones). It seems like maybe getting all the details to work out might be hard, but do you think something like that might be possible?</p>",
        "id": 195322837,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587887652
    },
    {
        "content": "<p>I guess conceptually it would work like this: consider a set of variables and functions of them over time, e.g. x(t), y(t), z(t). Consider a category whose objects are indexed by sets of variables, and are to be thought of as the set of all 'nice' functions of those variables over time. Then morphisms would just be 'nice' relations between those. (The work is in figuring out what nice means.)</p>\n<p>So, e.g. a diode can be modeled as a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mtext>in</mtext></msub><mo>⊗</mo><msub><mi>I</mi><mtext>in</mtext></msub><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mi>f</mi></mpadded></mover><msub><mi>V</mi><mtext>out</mtext></msub><mo>⊗</mo><msub><mi>I</mi><mtext>out</mtext></msub></mrow><annotation encoding=\"application/x-tex\">V_\\text{in}\\otimes I_\\text{in}\\xrightarrow{f} V_\\text{out}\\otimes I_\\text{out}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2581079999999998em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.010999999999999899em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> given by a relation like this (a nonlinear relation in which time doesn't play a role)</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><mtext>in</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>i</mi><mtext>out</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mi>exp</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mfrac><mi>B</mi><mrow><msub><mi>v</mi><mtext>in</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msub><mi>v</mi><mtext>out</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>−</mo><mn>1</mn><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">i_\\text{in}(t) = i_\\text{out}(t) = A \\exp\\left(\\frac{B}{v_\\text{in}(t)-v_\\text{out}(t)} -1\\right)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.80002em;vertical-align:-0.65002em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">exp</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3340428571428572em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29634285714285713em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span></p>\n<p>and a capacitor would be a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mtext>in</mtext></msub><mo>⊗</mo><msub><mi>I</mi><mtext>in</mtext></msub><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mi>g</mi></mpadded></mover><msub><mi>V</mi><mtext>out</mtext></msub><mo>⊗</mo><msub><mi>I</mi><mtext>out</mtext></msub></mrow><annotation encoding=\"application/x-tex\">V_\\text{in}\\otimes I_\\text{in}\\xrightarrow{g} V_\\text{out}\\otimes I_\\text{out}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.073392em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> something like this (a linear relation in which time enters through the derivative)</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><mtext>in</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>i</mi><mtext>out</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>C</mi><mrow><mo fence=\"true\">(</mo><mfrac><mrow><mi>d</mi><msub><mi>v</mi><mtext>in</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>−</mo><mfrac><mrow><mi>d</mi><msub><mi>v</mi><mtext>out</mtext></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">i_\\text{in}(t) = i_\\text{out}(t) = C\\left( \\frac{dv_\\text{in}(t)}{dt} - \\frac{dv_\\text{out}(t)}{dt}\\right).</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.80002em;vertical-align:-0.65002em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3340428571428572em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29634285714285713em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">out</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span></span></span></span></p>\n<p>Since they're relations you should just be able to draw cups and caps and have them behave like signal flow diagrams, just like in the control systems paper. So if they're electrical components like in this example, the strings would just behave like wires in a circuit diagram.</p>\n<p>Does this work? Or am I reinventing something? It would be great to read about it if I am.</p>",
        "id": 195324419,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587890401
    },
    {
        "content": "<p>(Hmm, I guess the electronics example adds an extra complication, because the cups and caps and copy/add etc. have to treat current and voltage differently from each other. But that can be ignored if we're just interested in dynamical systems. At least I think it can. I can explain the issue in more detail if someone's interested.)</p>",
        "id": 195324922,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587891221
    },
    {
        "content": "<p>As a non-electronics example, here's what the logistic growth equation ought to look like, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>t</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo>−</mo><mi>k</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dx/dt = x(r-kx)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>:<br>\n<a href=\"/user_uploads/21317/ISd-1t6xWipJL9irm3ZhqzIN/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/ISd-1t6xWipJL9irm3ZhqzIN/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/ISd-1t6xWipJL9irm3ZhqzIN/image.png\"></a></div><p>The black dots and the cup constrain all their inputs and outputs to be equal at all times, the nodes with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span> constrain their output to be a function of their inputs at every time, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mrow><mi>d</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>t</mi></mrow></mpadded></mover><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\xrightarrow{d/dt} Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.158em;vertical-align:-0.010999999999999899em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.147em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.010999999999999899em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is the relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>t</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dy(t)/dt = x(t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">I</mi><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><msub><mi>x</mi><mn>0</mn></msub></mpadded></mover><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{I} \\xrightarrow{x_0} X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934392em;vertical-align:-0.01100000000000001em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">I</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is the relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋆</mo><mo>∼</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\star \\sim x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">⋆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">x(0) = x_0.</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></p>\n<p>I guess you could draw the d/dt as an integral pointing the other way - then it would look more like the signal is flowing around the loop. But that's just a style thing.</p>",
        "id": 195329535,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587899016
    },
    {
        "content": "<p>Just an observation: One possible way to make this precise may be using non-standard analysis. There you work with non-standard reals/complex numbers, meaning that infinitesimals are numbers as any other. So you could have boxes standing for \"divide by dx', and basically work with calculus leibniz style</p>",
        "id": 195330621,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587900925
    },
    {
        "content": "<p>We used something similar to extend categorical quantum mechanics to infinite dimensions. I don't know if this technique would actually buy you something in this setting, but looking at that diagram you posted the first thing I'd like to do is making dy/dx into a box like any other</p>",
        "id": 195330675,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587900995
    },
    {
        "content": "<p>Differential geometry needs a better PR department, everyone's first thought is to jump to nonstandard analysis when differential geometry can do the job just as well</p>",
        "id": 195330759,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1587901149
    },
    {
        "content": "<p>I think it's more a phylosophical thing for me, I really don't like the idea of infinity as \"something you can get arbitrarily close to but never reach\". It has a very clear geometric intuition but I come from algebra, so...</p>",
        "id": 195330832,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587901230
    },
    {
        "content": "<p>I wonder if we really need either in this case, though. If we're restricted to smooth functions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>, then \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∼</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\sim y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>t</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dy(t)/dt = x(t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>\" is already a well-defined relation on that set. (If we're considering a more general class of functions, maybe \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is differentiable and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>t</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dy(t)/dt = x(t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>\" would do the job.) It might have looked suspicious to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">d/dt</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span></span></span></span>, but that's just a label. I may well be missing some subtlety here, though.</p>\n<p>It seems like the trickier thing is to decide what class of relations to allow in general - we want to be more general than linear relations, but \"any relations at all\" seems like it would lead to weirdness.</p>",
        "id": 195337521,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587912203
    },
    {
        "content": "<p>The short answer, <span class=\"user-mention\" data-user-id=\"276071\">@Nathaniel Virgo</span> , is that a lot of this stuff in that paper, <a href=\"http://math.ucr.edu/home/baez/control.pdf\" title=\"http://math.ucr.edu/home/baez/control.pdf\">Categories in control</a>, can be generalized to nonlinear situations, but doing so requires some choices.  The people who are experts at making such choices are differential geometers and analysts - mathematicians who study analysis.  </p>\n<p>We hadn't wanted to study nonlinear control theory in our paper, because there are whole books, very wonderful books, on linear control theory, and it's very useful.  When you're trying to control a system you can often arrange to keep it in a regime where a linear approximation is good.  An example is the classic problem of balancing a long stick on your finger: as long as it's almost vertical you can approximate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\sin \\theta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>, and that's what they do when writing programs for robots that do this trick.</p>\n<p>The math of linear control theory uses the Laplace transform: this allows you to reduce systems of linear ordinary differential equations to systems of linear equations over a larger field.   So, linear control theory is applied linear algebra... but in the category of linear <em>relations</em> over a field that's not just the real or complex numbers.  The challenge of understanding this category gave us a nice math paper.</p>\n<p>The nonlinear generalization will be a bit more complicated, it will involve making some choices (which would best be done after reading up on nonlinear control theory and seeing what the experts in that subject do!), and it won't use the Laplace transform so it won't lead to such an elegant mathematical subject (which is, by the way, the reason control theory puts a lot of focus on the linear case: you can use the elegant math to do a lot of amazing things).   Still, it's definitely worth doing!</p>",
        "id": 195339433,
        "sender_full_name": "John Baez",
        "timestamp": 1587915283
    },
    {
        "content": "<p>I'll mention something <span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> was already talking about: in <a href=\"http://math.ucr.edu/home/baez/RxNet.pdf\" title=\"http://math.ucr.edu/home/baez/RxNet.pdf\">A compositional framework for reaction networks</a>, <span class=\"user-mention\" data-user-id=\"275953\">@Blake Pollard</span> and I came up with a nice categorical framework for a special class of nonlinear ordinary differential equations, namely polynomial-coefficient first-order ODE.   This is not general enough for nonlinear control theory, but it's good enough for the \"rate equation of a reaction network\".</p>",
        "id": 195339599,
        "sender_full_name": "John Baez",
        "timestamp": 1587915526
    },
    {
        "content": "<p>The limitation to polynomials offers some extra power (as these limitations tend to do); for example we used the Tarski-Seidenberg theorem, which says that relations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>:</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>m</mi></msup><mo>↛</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R : \\mathbb{R}^m \\nrightarrow \\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">↛</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> definable using polynomials and inequalities are closed under composition.</p>",
        "id": 195339725,
        "sender_full_name": "John Baez",
        "timestamp": 1587915795
    },
    {
        "content": "<p>These are called <strong>semialgebraic relations</strong>, and they're a nice manageable class of relations that lies between \"linear relations\" and \"all relations\".</p>",
        "id": 195339739,
        "sender_full_name": "John Baez",
        "timestamp": 1587915839
    },
    {
        "content": "<p>I guess one question is, what's the relationship between the relation-based view of dynamical systems and the open dynamical systems view? An open dynamical system imposes a relation between its inputs and outputs (as functions of time), so they connect in that way, but how do the cospan-based ways of sticking things together relate to just composing relations as morphisms in a symmetric monoidal category? I keep getting puzzled by versions of that question.</p>",
        "id": 195340147,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587916410
    },
    {
        "content": "<p>seems like a lot of this has to do with relations vs spans vs cospans</p>",
        "id": 195346173,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587925125
    },
    {
        "content": "<p>something ive seen that's relevant in some work <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> is doing w/ objects like this is that if u have a cospan u can get a span instead by taking the pullback, if pullbacks exist in your category</p>",
        "id": 195346384,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587925484
    },
    {
        "content": "<p>wait no that's not quite right, what's the construction i'm thinking of...</p>",
        "id": 195346457,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587925650
    },
    {
        "content": "<p>ack right it was the comma category, which was fairly specific to the fact that we were working in Cat...</p>",
        "id": 195346674,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587926002
    },
    {
        "content": "<p>i'll take tentative formal definitions for 10 please john.</p>",
        "id": 195363248,
        "sender_full_name": "eric brunner",
        "timestamp": 1587950985
    },
    {
        "content": "<p>I think I have some picture of how spans and relations compare for finite linear relations at least, which is an extremely concrete and computable arena. A linear dynamical system has behaviors that are constrained by it's equations of motion to be in a linear subspace of all behaviors. Open linear dynamical systems have behavior on \"input\" and \"output\" ports that live in linear subspaces. So you need to have a way to describe linear subspaces. Two usual ways are as a linear combination of generators (range of matrix) or as the space obeying a set of constraints (nullspace of matrix). The apex of a span corresponds to the vector space of generators.  The two spaces on the end of the span are the two spaces of ports. Composing two spans by taking the pullback construction amounts to finding a new minimal set of generators for which the interior port is consistently solved out. Alternatively using the other representation, the bottom of the cospan corresponds to the vector space of constraints. The pushout construction finds a new minimal set of constraints that similarly behavor consistently on the interior port. I don't think that necessarily one has to parametrize or think about linear relations this way, but it does seem nice. All of these things are calculable using standard linear algebra packages. I had sort of a more blobby picture of linear relations <a href=\"http://www.philipzucker.com/linear-relation-algebra-of-circuits-with-hmatrix/\" title=\"http://www.philipzucker.com/linear-relation-algebra-of-circuits-with-hmatrix/\">http://www.philipzucker.com/linear-relation-algebra-of-circuits-with-hmatrix/</a>  just being a thing not composed out of linear maps originally, until <span class=\"user-mention\" data-user-id=\"275927\">@James Fairbanks</span> and <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>  explained the pullback thing in a way I could understand <a href=\"http://www.philipzucker.com/computational-category-theory-in-python-ii-numpy-for-finvect/\" title=\"http://www.philipzucker.com/computational-category-theory-in-python-ii-numpy-for-finvect/\">http://www.philipzucker.com/computational-category-theory-in-python-ii-numpy-for-finvect/</a> .</p>",
        "id": 195366813,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1587955821
    },
    {
        "content": "<p>If something seems off about this picture I'd be delighted to know. I'm trying to interpret out of language more abstract than I am comfortable in</p>",
        "id": 195366881,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1587955933
    },
    {
        "content": "<p>I don't think I understand really what structured or decorated does on top of this</p>",
        "id": 195366934,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1587956043
    },
    {
        "content": "<blockquote>\n<p>Open linear dynamical systems have behavior on \"input\" and \"output\" ports that live in linear subspaces. </p>\n</blockquote>\n<p>I'm not sure I agree, but maybe I just don't understand.  What if our open dynamical system is described by </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mrow><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mi>I</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>7</mn><mi>O</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\"> \\displaystyle{ \\frac{d f}{d t} = I(t) - 7 O(t) }</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:2.0574399999999997em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">7</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f : \\mathbb{R} \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> describes our system, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">I : \\mathbb{R} \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> is the \"input\", and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">O:  \\mathbb{R} \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> describes the \"output\".  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span></span></span></span> are arbitrary smooth functions of time, specified by the \"outside world\".   </p>\n<p>Would you say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span></span></span></span> live in linear subspaces?   Do you count this as an open linear dynamical system or not?   Most things I consider open linear dynamical systems, like signal-flow graphs or circuits made of resistors, allow behavior of this sort.</p>",
        "id": 195370073,
        "sender_full_name": "John Baez",
        "timestamp": 1587960665
    },
    {
        "content": "<p>I use structured or decorated cospans to describe systems of this sort (and many others).</p>",
        "id": 195370085,
        "sender_full_name": "John Baez",
        "timestamp": 1587960705
    },
    {
        "content": "<p>[it occurred to me earlier that i think one conceptual stumbling block that made physics inscrutable to me for a long time <em>might have been</em> the fact that it's <del>all</del> mostly formulated as closed systems, which makes it rly hard to apply intuition about like \"what do the laws say would happen if i poked it?\"]</p>",
        "id": 195371081,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587961727
    },
    {
        "content": "<p>Good point.  Physicists <em>do</em> know how to calculate what systems would do if you poked them, since experiments are all about 'poking' things in various ways.   So, for example, it's typical to study what happens if an 'external force' is applied to a system of particles, or an 'external magnetic field' - the buzzword is 'external'.   But a lot of the most formal formalisms of physics are for closed systems.</p>",
        "id": 195375151,
        "sender_full_name": "John Baez",
        "timestamp": 1587966802
    },
    {
        "content": "<p>This is something I'm trying to put an end to.  I'm all for 'opening things up'.</p>",
        "id": 195375206,
        "sender_full_name": "John Baez",
        "timestamp": 1587966850
    },
    {
        "content": "<p>Engineers already use formalisms like signal-flow diagrams for studying open systems, because they <em>really</em> can't afford to focus on closed systems.  For an engineer, a system that doesn't interact with an unpredictable external environment is completely useless!</p>",
        "id": 195375239,
        "sender_full_name": "John Baez",
        "timestamp": 1587966951
    },
    {
        "content": "<p>I feel like that system could be included in my description. My mental model is to discretize and finitize everything, although I do understand that fourier/Laplace methods could supply a different perspective and lift this restriction. Approximate df/dt by finite difference and only talk about a finite time horizon so that time only has N slices. Then the combined system of O,f,I is 3N numbers and the equation of motion is an (N-1) x 3N   finite difference matrix.  If O and I are truly allowed to be arbitrary and the only port by which you can view the system, then the subspace they live in is their entire subspace of size 2N, so these equations of motion are not that interesting. If you somehow have a mathematical peephole that you can open up to see f (which I've vacillated upon whether that should be ok or not) , then the subspace being talked about is 2N+1 dimensional.</p>",
        "id": 195421745,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1587996362
    },
    {
        "content": "<p>Discretizing is perfectly fine, though we don't want to be <em>forced</em> to do that when studying open systems.</p>",
        "id": 195434521,
        "sender_full_name": "John Baez",
        "timestamp": 1588001599
    },
    {
        "content": "<p>Okay, so I see that O and I are allowed to be arbitrary.  I don't know what you mean by saying \"these equations of motion are not that interesting\", though.  It's true that when we <em>blackbox</em> the open system - that is, extract the relation between inputs and outputs, we get the \"always true\" relation, which is not that interesting.   (I study blackboxing in most of my papers on categories of open systems.)  But there's more to a system than it's inputs and outputs: there is also its \"internal state\", here given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 195434946,
        "sender_full_name": "John Baez",
        "timestamp": 1588001812
    },
    {
        "content": "<p>Anyway, it seems our viewpoints are compatible except that you may be more inclined to treat an open system as <em>only</em> providing a relation between its inputs and outputs, while I develop categories where morphisms are open systems and extract the relation between inputs and outputs by applying a functor (\"blackboxing\") that goes to a category of relations.</p>",
        "id": 195435153,
        "sender_full_name": "John Baez",
        "timestamp": 1588001913
    },
    {
        "content": "<p>It has been convenient to start from the blackbox from an implementation perspective. It allows you to eagerly project out interior information. Unfortunately, from a usage perspective, this interior information is often exactly what you're interested in. One can thread the information out through output ports, but this is ungainly.</p>",
        "id": 195436089,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1588002346
    },
    {
        "content": "<p>Is this blackboxing where decorated or structured comes in or is that a separate thing?</p>",
        "id": 195436165,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1588002366
    },
    {
        "content": "<p>Decorated/structured cospans allow you to construct categories where the \"body\" of a system has more structure than its \"interfaces\" (its input and output).</p>",
        "id": 195436998,
        "sender_full_name": "John Baez",
        "timestamp": 1588002781
    },
    {
        "content": "<p>Like this:</p>\n<p><a href=\"/user_uploads/21317/qER3Z7NKHBkQ068CFOqsEyHA/open_petri_4.png\" title=\"open_petri_4.png\">open_petri_4.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/qER3Z7NKHBkQ068CFOqsEyHA/open_petri_4.png\" title=\"open_petri_4.png\"><img src=\"/user_uploads/21317/qER3Z7NKHBkQ068CFOqsEyHA/open_petri_4.png\"></a></div>",
        "id": 195437137,
        "sender_full_name": "John Baez",
        "timestamp": 1588002847
    },
    {
        "content": "<p>The input X and the output Z are just finite sets: X = {1,2,3} and Z = {6}.</p>",
        "id": 195437184,
        "sender_full_name": "John Baez",
        "timestamp": 1588002876
    },
    {
        "content": "<p>But the \"body\" of this system (not a technical term) is something more complicated: it's a Petri net.</p>",
        "id": 195437254,
        "sender_full_name": "John Baez",
        "timestamp": 1588002910
    },
    {
        "content": "<p>That's the yellow and aqua stuff, and the edges between them.</p>",
        "id": 195437285,
        "sender_full_name": "John Baez",
        "timestamp": 1588002928
    },
    {
        "content": "<p>This thing is a morphism in a structured cospan category.</p>",
        "id": 195437322,
        "sender_full_name": "John Baez",
        "timestamp": 1588002946
    },
    {
        "content": "<p>What this means, in practice, is that we can take one of these things:</p>\n<p><a href=\"/user_uploads/21317/Xc7CmMtKbykPwLuub5fjigVQ/open_petri_1.png\" title=\"open_petri_1.png\">open_petri_1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Xc7CmMtKbykPwLuub5fjigVQ/open_petri_1.png\" title=\"open_petri_1.png\"><img src=\"/user_uploads/21317/Xc7CmMtKbykPwLuub5fjigVQ/open_petri_1.png\"></a></div>",
        "id": 195437595,
        "sender_full_name": "John Baez",
        "timestamp": 1588003060
    },
    {
        "content": "<p>and another one, whose input Y equals the output of the first one:</p>\n<p><a href=\"/user_uploads/21317/vYzpj8essCfsJGSgrjc4J-p3/open_petri_2.png\" title=\"open_petri_2.png\">open_petri_2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/vYzpj8essCfsJGSgrjc4J-p3/open_petri_2.png\" title=\"open_petri_2.png\"><img src=\"/user_uploads/21317/vYzpj8essCfsJGSgrjc4J-p3/open_petri_2.png\"></a></div><p>and <em>compose</em> them by gluing them together, getting this:</p>\n<p><a href=\"/user_uploads/21317/svoC4pD_v6QvI1Zh3d3fMyJL/open_petri_4.png\" title=\"open_petri_4.png\">open_petri_4.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/svoC4pD_v6QvI1Zh3d3fMyJL/open_petri_4.png\" title=\"open_petri_4.png\"><img src=\"/user_uploads/21317/svoC4pD_v6QvI1Zh3d3fMyJL/open_petri_4.png\"></a></div><p>That's an example of what we do with structured cospan categories.</p>",
        "id": 195437718,
        "sender_full_name": "John Baez",
        "timestamp": 1588003110
    },
    {
        "content": "<p>So for a circuit example, is it something like a labelling variables in a circuit using finset, but then having the linear relations connecting the variables hovering over the thing?</p>",
        "id": 195437743,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1588003129
    },
    {
        "content": "<p>The <em>objects</em> in a category of open circuits could be finite sets.</p>",
        "id": 195438003,
        "sender_full_name": "John Baez",
        "timestamp": 1588003242
    },
    {
        "content": "<p>Instead of taking the morphisms to be mere linear relations connecting variables, I'd prefer to have them be actual circuits, like this:</p>\n<p><a href=\"/user_uploads/21317/wjwEGGBJAA02TfG0a5x_jq6r/two-resistor_circuit.jpg\" title=\"two-resistor_circuit.jpg\">two-resistor_circuit.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/wjwEGGBJAA02TfG0a5x_jq6r/two-resistor_circuit.jpg\" title=\"two-resistor_circuit.jpg\"><img src=\"/user_uploads/21317/wjwEGGBJAA02TfG0a5x_jq6r/two-resistor_circuit.jpg\"></a></div>",
        "id": 195438143,
        "sender_full_name": "John Baez",
        "timestamp": 1588003311
    },
    {
        "content": "<p>We can then describe the \"behavior\" of circuits by using various functors to other categories.</p>",
        "id": 195438273,
        "sender_full_name": "John Baez",
        "timestamp": 1588003363
    },
    {
        "content": "<p>For example, a category where a morphism is a linear relation involving inputs or outputs, or a category where a morphism is a linear relation involving <em>all</em> wires in the circuit, even the \"internal\" ones.</p>",
        "id": 195438391,
        "sender_full_name": "John Baez",
        "timestamp": 1588003441
    },
    {
        "content": "<p>What is an \"actual circuit\" then? A physical circuit I hold in my hand? A graph with labelled notes and edges?</p>",
        "id": 195438537,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1588003510
    },
    {
        "content": "<p>The drawing?</p>",
        "id": 195438553,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1588003521
    },
    {
        "content": "<p>I ask because I was willing to call linear relations one representation of the actual circuit.</p>",
        "id": 195438740,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1588003598
    },
    {
        "content": "<p>Some mathematical representation of an actual circuit.  The simplest one would be a graph with labelled nodes and edges - that's been good enough for me so far.</p>",
        "id": 195438840,
        "sender_full_name": "John Baez",
        "timestamp": 1588003643
    },
    {
        "content": "<p>Well, the linear relation says what the circuit <em>does</em> - you could say it \"is\" the circuit, but there are lots of famous examples of different bunches of wires and resistors that gives the same linear relation.</p>",
        "id": 195438991,
        "sender_full_name": "John Baez",
        "timestamp": 1588003707
    },
    {
        "content": "<p>These examples are important in circuit theory, and we can't talk about them if we say the circuit <em>is</em> the linear relation.</p>",
        "id": 195439042,
        "sender_full_name": "John Baez",
        "timestamp": 1588003732
    },
    {
        "content": "<p>So linear relations are great, but we also need other categories, that give other views on what circuits \"are\".</p>",
        "id": 195439109,
        "sender_full_name": "John Baez",
        "timestamp": 1588003761
    },
    {
        "content": "<p>Structured and decorated cospan categories are supposed to be general frameworks that can handle <em>lots</em> of these different categories.</p>",
        "id": 195439276,
        "sender_full_name": "John Baez",
        "timestamp": 1588003811
    },
    {
        "content": "<p>In my differential equation sketch above, <a href=\"/user_uploads/21317/c78YXJ3GaczG2-dKmLdybeT7/image.png\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/c78YXJ3GaczG2-dKmLdybeT7/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/c78YXJ3GaczG2-dKmLdybeT7/image.png\"></a></div><p>I guess one could say the diagram is the circuit, so I guess circuits would be free symmetric monoidal categories with a specific set of generators, and then you'd have a functor from there to Rel, or to some specific category of nice relations. Is that roughly how it would work?</p>",
        "id": 195444158,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1588006000
    },
    {
        "content": "<p>Yes.</p>",
        "id": 195451140,
        "sender_full_name": "John Baez",
        "timestamp": 1588009047
    },
    {
        "content": "<p>I've moved my material from the Open Dynamical System topic to my website at  <a href=\"http://iteratedfunctions.com/index.php?title=Open_Dynamical_Systems\" title=\"http://iteratedfunctions.com/index.php?title=Open_Dynamical_Systems\">http://iteratedfunctions.com/index.php?title=Open_Dynamical_Systems</a> . The problem is the material is not currently appropriate for the Zuplip Category Theory forum because of concerns it is only relevant to dynamical systems and not open dynamical systems. I've spent decades deriving the most general dynamical systems I could, so I'm surprised that open dynamical systems are even more general than what I've been working on. Anyhow, dynamical systems are important in their own right, but I'd appreciate any insights of how to get to an open dynamical system. Feel free to drop on by. - Daniel</p>",
        "id": 195460147,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588013625
    },
    {
        "content": "<p>Okay!</p>",
        "id": 195460277,
        "sender_full_name": "John Baez",
        "timestamp": 1588013688
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <br>\nWhat's \"open\" about this? What you're writing about here sounds like dynamical systems.</p>\n</blockquote>\n<p>What is open is the iterator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>, but I'm building up to explain how to generalize it to invertible matrices. Perhaps some challenges of what an open dynamical system can do that you think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> can't would be nice. My model is connected to the definition of quantum mechanics using matrix multiplication to advance in time from one instant to the next, so it should be valid for any system described by QM, including the Universe. </p>\n<p>I'm not gearing up to discuss the <strong><em>classical dynamical system</em></strong> because the core my work focuses on providing a solid foundation for extending tetration and the higher hyperoperators  to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}, \\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.88333em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"double-struck\">G</mi><mi mathvariant=\"double-struck\">L</mi></mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{GL}(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"mord mathbb\">L</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>. I questioned whether my derivation of hyperoperators was compositional  and thus open.</p>",
        "id": 195467306,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588017471
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> : what do you mean by constructing an iterated function at a fixed point, and what does it mean that a composition can do it?</p>\n</blockquote>\n<p>When dealing with dynamical systems it is typical, without loss of generality, to move a fixed point to the origin. Going back to Ernst Schröder's originating paper on iterated functions; taking the dynamics at a fixed point provides great simplification.</p>\n<p>I'm building a case to view iterated functions as the iterated composition of a function. Also I want to build towards showing that because the composition of entire functions is convergent, that iterated entire functions are convergent. Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exp(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is entire it serves as the foundation for building a countably infinite hierarchy of entire functions. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>→</mo><mi>b</mi><mo>→</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">a\\to b \\to k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is finite where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">N</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">a,b,k \\in \\mathbb{N^+}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 195471221,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588019423
    },
    {
        "content": "<p>It just occurred to me that one of my uses of matrices is for handling an open ended number of inputs and outputs. Does that make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> an open dynamical system?</p>",
        "id": 195475213,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588021674
    },
    {
        "content": "<p>Consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">{</mo><mo>…</mo><mo separator=\"true\">,</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">g(x)\\in\\{\\ldots,f^{-1}(f^{-1}(x)),f^{-1}(x),x,f(x),f(f(x)),\\ldots \\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is a category as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(g(x))=g(x)=g(id(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> and as an iterated functions it satisfies composition. </p>\n<p>This is great if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>t</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">f^t(x), t \\in \\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>, but in the <strong><em>classical dynamical system</em></strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">t \\in \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65418em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>.</p>\n<p>My question is that with two inputs and one output, how is the identity function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> applied to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 195521385,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588052895
    },
    {
        "content": "<p>i don't follow—what are the objects and morphisms of the category?</p>",
        "id": 195522768,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588054842
    },
    {
        "content": "<p>and is that set supposed to be a set of states x, f(x), etc, or a set of functions id, f, f ∘ f, etc?</p>",
        "id": 195522844,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588054930
    },
    {
        "content": "<p>(my impression is that you mean the latter, but idk if you have a particular x in mind or something)</p>",
        "id": 195522861,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588054965
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span>: i don't follow—what are the objects and morphisms of the category?</p>\n</blockquote>\n<p>The objects are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> and the morphisms are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9879959999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span>: and is that set supposed to be a set of states x, f(x), etc, or a set of functions id, f, f ∘ f, etc?</p>\n</blockquote>\n<p>I was trying to point out that when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">t\\in\\mathbb{Z}, f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65418em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(f^t(x))=f^t(x)=f^t(id(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 195524347,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588056472
    },
    {
        "content": "<p>the objects are x? do you mean the objects are the points of the state space, or do you mean that there's one object, which is called x?</p>",
        "id": 195524471,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588056580
    },
    {
        "content": "<p>The objects I feel comfortable working with are matrices and my interpretation is based on physics cannon. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> is the matrix representation of the initial state of the system and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>x</mi><mo>=</mo><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">Hx=x'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the next instant.</p>",
        "id": 195525534,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588057476
    },
    {
        "content": "<p>that sounds an answer to a different question from the one i meant to ask</p>",
        "id": 195525734,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588057627
    },
    {
        "content": "<p>OK, one object called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>.</p>",
        "id": 195525877,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588057725
    },
    {
        "content": "<p>alright, so the morphisms are the iterations of f? and they are all endomorphisms of x?</p>",
        "id": 195525911,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588057760
    },
    {
        "content": "<p>it sounds to me like f is already an endomorphism of the state space, probably in the category of smooth manifolds or something, and you're taking the subcategory generated by that one morphism <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 195526172,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588057950
    },
    {
        "content": "<p>er, that one morphism and its inverse, if you're including negative powers—so we need it to be an <em>auto</em>morphism</p>",
        "id": 195526207,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588057984
    },
    {
        "content": "<p>Yes. I am talking roughly about what <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> discussed in the paper of the definition of dynamical systems showing it's connection with automorphism.</p>",
        "id": 195526531,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588058228
    },
    {
        "content": "<p>i'm not sure which discussion you're referencing, but i think it's tangential anyway :)</p>",
        "id": 195526695,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588058357
    },
    {
        "content": "<p>i'm not really sure what you mean about<br>\n<span class=\"user-mention silent\" data-user-id=\"276867\">Daniel Geisler</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195521385\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195521385\">said</a>:</p>\n<blockquote>\n<p>My question is that with two inputs and one output, how is the identity function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> applied to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>.</p>\n</blockquote>",
        "id": 195526806,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588058429
    },
    {
        "content": "<p>can you rephrase the question?</p>",
        "id": 195526811,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588058436
    },
    {
        "content": "<p>by \"two inputs\" do you mean x and t? but if so, how is that different from the discrete case?</p>",
        "id": 195526843,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588058472
    },
    {
        "content": "<p>I'm building from the discrete to the continuous case. <br>\nOK I get the need for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(f(x))=f(x)=f(id(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>, but what about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(f^t(x))=f^t(x)=f^t(id(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>? What does <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">id(f^t(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> even mean?</p>",
        "id": 195527335,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588058874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>'s article on dynamical systems is at <a href=\"https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/\" title=\"https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/\">https://jadeedenstarmaster.wordpress.com/2019/03/31/dynamical-systems-with-category-theory-yes/</a> .</p>\n<blockquote>\n<p>Definition: A dynamical system or flow on a manifold <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a group homomorphism</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mo>+</mo><mo stretchy=\"false\">)</mo><mo>→</mo><mrow><mi mathvariant=\"normal\">A</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">t</mi></mrow><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi : (\\mathbb{R}, + ) \\to \\mathrm{Aut}(M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">A</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">t</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">A</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">t</mi></mrow><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Aut}(M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">A</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">t</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> is the group of diffeomorphisms from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to itself.  The idea is that your system of ordinary differential equations is given by some vector field on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. </p>\n</blockquote>",
        "id": 195542737,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588068917
    },
    {
        "content": "<p>I think maybe you're saying that you have a category with on object given by your manifold and with morphisms given by some set of automorphisms of that manifold</p>",
        "id": 195570993,
        "sender_full_name": "Jade Master",
        "timestamp": 1588083766
    },
    {
        "content": "<p>In which case your question will probably be answered by figuring out exactly what you mean by x...</p>",
        "id": 195571125,
        "sender_full_name": "Jade Master",
        "timestamp": 1588083823
    },
    {
        "content": "<p>If it's the whole manifold then Id is the identity function on that manifold</p>",
        "id": 195571224,
        "sender_full_name": "Jade Master",
        "timestamp": 1588083847
    },
    {
        "content": "<p>So id(f^t(x)) =f^t(x)</p>",
        "id": 195571315,
        "sender_full_name": "Jade Master",
        "timestamp": 1588083875
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <br>\nIn which case your question will probably be answered by figuring out exactly what you mean by x...</p>\n</blockquote>\n<p>Yes, exactly! The symmetry of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> comes from the symmetry of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>. Consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(z)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">z\\in\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>. The Taylor series of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(z)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> can simplify based on it's symmetry at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> and results in the <strong>Classification of Fixed Points</strong>.</p>",
        "id": 195580901,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588087740
    },
    {
        "content": "<p>okay, here's a thought: maybe open dynamical systems should be <em>spans</em>, not cospans</p>",
        "id": 195631187,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588110264
    },
    {
        "content": "<p>i'm remembering that time when <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> and <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> were talking past each other regarding pullbacks vs pushouts, &amp; my take was that state spaces are often constructed by a contravariant construction, so the issue was that the construction was either a pushout or a pullback depending on whether you applied that contravariant thing first</p>",
        "id": 195631457,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588110409
    },
    {
        "content": "<p>in the case of something like a petri net, taking the state space is passing to finite multisets of places, right? that's nearly like homming into N (and it <em>is</em> homming into N if your set of places is finite, as is typical aiui)<br>\nEDIT: i know you can also make it <em>co</em>variant but that's not how i wanna think about it rn<br>\naltho i do wonder what the relationship is</p>",
        "id": 195631720,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588110518
    },
    {
        "content": "<p>but dynamical systems are usually formulated where you already have the state space in front of you, instead of the outline that gets contravariantly turned into a state space</p>",
        "id": 195631766,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588110569
    },
    {
        "content": "<p>if you have an open petri net as a structured cospan, passing to markings gives you a span—the space of markings on the whole net has projections that forget everything but how the in ports are marked and how everything but the out ports are marked</p>",
        "id": 195632255,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588110795
    },
    {
        "content": "<p>so how about an open dynamical system is a span of smooth manifolds or something, where the apex is the state space of the system and we have projections that give the components of the state that are externally visible?</p>",
        "id": 195632666,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588111007
    },
    {
        "content": "<p>(what i wrote there ofc does not account for the dynamics, but)</p>",
        "id": 195635986,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588112674
    },
    {
        "content": "<p>after some double checking, since i do not actually know diff geo: how about we use spans of submersions, and then we have nice pullbacks for composition of systems</p>",
        "id": 195642888,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588117563
    },
    {
        "content": "<p>that would seem to also line up nicely with the interpretation of the legs as projections of some kind</p>",
        "id": 195642920,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588117578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> Wow, what a gift!!!</p>",
        "id": 195645754,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588119737
    },
    {
        "content": "<p>I know very little of category theory, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is unique in my knowledge of math because what was a process becomes an object. We go from iteration as a verb to a noun.</p>",
        "id": 195647948,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588121867
    },
    {
        "content": "<p>Moving from the abstract to the concrete see<br>\n<a href=\"http://tetration.org/Combinatorics/Julia/index.html\" title=\"http://tetration.org/Combinatorics/Julia/index.html\">http://tetration.org/Combinatorics/Julia/index.html</a><br>\n<a href=\"http://tetration.org/Combinatorics/CIGF/index.html\" title=\"http://tetration.org/Combinatorics/CIGF/index.html\">http://tetration.org/Combinatorics/CIGF/index.html</a>  .<br>\nThe first page has the code for a general dynamical machine written in Julia and the second page explains the mathematics.</p>",
        "id": 195656046,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588130917
    },
    {
        "content": "<p>An example of a dynamical machine using rational coefficients is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sin^t(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.101316em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.851316em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mi>a</mi></msup><mo stretchy=\"false\">(</mo><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mi>b</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sin^a(\\sin^b(x))-\\sin^{(a+b)}(x)==0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.156868em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.722152em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.906868em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.19576em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9457599999999999em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">b</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 195656450,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588131500
    },
    {
        "content": "<p>processes becoming objects is pretty ubiquitous in math</p>",
        "id": 195663005,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588139165
    },
    {
        "content": "<p>if anything, that's what codifying the notion of a function is about, and functions are one of the most pervasive and central objects in all of math</p>",
        "id": 195663064,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588139213
    },
    {
        "content": "<p>oh, this looks similar to what i was suggesting <a href=\"https://arxiv.org/abs/1710.11392\" title=\"https://arxiv.org/abs/1710.11392\">https://arxiv.org/abs/1710.11392</a></p>",
        "id": 195718418,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588170824
    },
    {
        "content": "<p>oh wow i went back to the topic i was referencing &amp; took another look &amp; a bunch of what i said above was basically already said there, or even referenced as being known for a while, huh <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195719424,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588171207
    },
    {
        "content": "<p>Sarah wrote:</p>\n<blockquote>\n<p>after some double checking, since i do not actually know diff geo: how about we use spans of submersions, and then we have nice pullbacks for composition of systems</p>\n</blockquote>\n<p>Yes, that's what David Weisbart and Adam Yassine and I do in our work on open systems in classical mechanics... which unfortunately is taking a long time to be finished.</p>",
        "id": 195736401,
        "sender_full_name": "John Baez",
        "timestamp": 1588177890
    },
    {
        "content": "<p>Oh, I see now that you've referred to a paper by Adam.  I'll warn you that this paper has a lot of mistakes.</p>",
        "id": 195736579,
        "sender_full_name": "John Baez",
        "timestamp": 1588177950
    },
    {
        "content": "<p>However, the idea of composing spans of submersions (I think he uses surjective submersions) is good and will remain!</p>",
        "id": 195736667,
        "sender_full_name": "John Baez",
        "timestamp": 1588177989
    },
    {
        "content": "<p>The main problem was the treatment of composing the Hamiltonians or Lagrangians needed to describe dynamics.</p>",
        "id": 195736755,
        "sender_full_name": "John Baez",
        "timestamp": 1588178030
    },
    {
        "content": "<p>So yes, \"open state spaces\" seem to be nicely handled using spans.</p>",
        "id": 195736918,
        "sender_full_name": "John Baez",
        "timestamp": 1588178090
    },
    {
        "content": "<p>Composing open dynamical systems seems hard, though, if your concept of dynamical system is just a set of states <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> with a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">f \\colon S \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, or a one-parameter group of maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>t</mi></msub><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">f_t \\colon S \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 195737024,
        "sender_full_name": "John Baez",
        "timestamp": 1588178141
    },
    {
        "content": "<p>I've decided that in some sense this may be why physicists describe dynamics in fancier ways, using Hamiltonians and Lagrangians.  These allow \"compositionality\".</p>",
        "id": 195737200,
        "sender_full_name": "John Baez",
        "timestamp": 1588178207
    },
    {
        "content": "<p>extension vs intension  <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 195739712,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588179425
    },
    {
        "content": "<p>just remembered that i think i actually said something wayback in the seminar thread for your structured cospans talk about how i'd had this sense about openness having this tension with extensionality...</p>",
        "id": 195747435,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588183146
    },
    {
        "content": "<p>Are there two connected meanings for open dynamical systems? We aren't <em>primarily</em> talking about dissipative structures with no fixed boundary for entropy to flow through, are we?</p>",
        "id": 195820990,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588242504
    },
    {
        "content": "<p>Nope, basically by \"open dynamical system\"we mean a system with ports</p>",
        "id": 195821654,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588242995
    },
    {
        "content": "<p>I don't know if you followed the cospans zoom chat but imagine something similar but with dynamical systems instead of petri nets</p>",
        "id": 195821678,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588243024
    },
    {
        "content": "<p>So yes, it's not just about composing things, but about having \"ports\" that allow you to compose things as they were lego bricks</p>",
        "id": 195821707,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588243056
    },
    {
        "content": "<p>Thank God, just checking.</p>",
        "id": 195821730,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588243077
    },
    {
        "content": "<p>More technically, what you want is that your dynamical systems become the morphisms of some category, possibly a monoidal one, so that you can compose them in parallel or in sequence</p>",
        "id": 195821787,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588243095
    },
    {
        "content": "<p>That is, \"Open dynamical systems\" means that you can basically do string diagrams where your systems are the boxes, and you can wire them together</p>",
        "id": 195821822,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588243134
    },
    {
        "content": "<p>Yes, what I thought.</p>",
        "id": 195821884,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588243176
    },
    {
        "content": "<p>I'm not following very well, but this suggests me you could say ODS are cospans, but their behaviours (states) are spans, since taking behaviours is usually a contravariant functor.<br>\nThis fits very well with what you (<span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> ) <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195632666\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195632666\">said</a>:</p>\n<blockquote>\n<p>so how about an open dynamical system is a span of smooth manifolds or something, where the apex is the state space of the system and we have projections that give the components of the state that are externally visible?</p>\n</blockquote>",
        "id": 195828267,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1588247668
    },
    {
        "content": "<p>By the way, in 20 minutes (at least if I got my time zones right) <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> is doing a seminar on open dynamical systems on <a class=\"stream\" data-stream-id=\"229457\" href=\"/#narrow/stream/229457-MIT-Categories-Seminar\">#MIT Categories Seminar</a></p>",
        "id": 195857755,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1588261109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195828267\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195828267\">said</a>:</p>\n<blockquote>\n<p>I'm not following very well, but this suggests me you could say ODS are cospans, but their behaviours (states) are spans, since taking behaviours is usually a contravariant functor.<br>\nThis fits very well with what you (<span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> ) <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195632666\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/Implementing.20Open.20Dynamical.20Systems/near/195632666\">said</a>:</p>\n<blockquote>\n<p>so how about an open dynamical system is a span of smooth manifolds or something, where the apex is the state space of the system and we have projections that give the components of the state that are externally visible?</p>\n</blockquote>\n</blockquote>\n<p>this is a good story for many kinds of open systems—the problem is that when you're talking about things at the level of generality where you're using the name \"dynamical systems\", my impression is that you're usually already talking about the state space directly as the definition of the object, not about some kind of underlying phenomenon giving rise to it</p>",
        "id": 195930589,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588306712
    },
    {
        "content": "<p>like, the wikipedia page for \"dynamical system\" suggests a smooth manifold of states equipped w/ a flow</p>",
        "id": 195930601,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588306739
    },
    {
        "content": "<p>If you told a typical mathematician you were studying dynamical systems they'd think you were studying a smooth manifold with a flow.</p>",
        "id": 196027356,
        "sender_full_name": "John Baez",
        "timestamp": 1588384762
    },
    {
        "content": "<p>Or you might say \"discrete-time dynamical systems\" and they'd think you were studying a smooth manifold with a smooth map from it to itself... or a topological space with a continuous map to itself.  Both these are huge areas of study.  I have a book about continuous maps from the interval to itself.</p>",
        "id": 196027421,
        "sender_full_name": "John Baez",
        "timestamp": 1588384831
    },
    {
        "content": "<p>Or you might say <a href=\"https://en.wikipedia.org/wiki/Measure-preserving_dynamical_system\" title=\"https://en.wikipedia.org/wiki/Measure-preserving_dynamical_system\">measure-preserving dynamical system</a> and they'd think you were studying a measure space with a measure-preserving map from it to itself.  That's what people in \"ergodic theory\" think about - another huge area of study.</p>",
        "id": 196027453,
        "sender_full_name": "John Baez",
        "timestamp": 1588384898
    },
    {
        "content": "<p>If you said you just meant any set with a map from it to itself they'd probably raise one eyebrow and wonder what was the point of that.</p>",
        "id": 196027507,
        "sender_full_name": "John Baez",
        "timestamp": 1588384967
    },
    {
        "content": "<p>hmm, the points would be the fixed points, right? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 196027952,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588385688
    },
    {
        "content": "<p>as an object in a topos of monoid actions, of course</p>",
        "id": 196027960,
        "sender_full_name": "sarahzrf",
        "timestamp": 1588385713
    },
    {
        "content": "<p>Yes, that's true. </p>\n<p>Actually there is quite a lot of fun to be had studying a finite set with a randomly chosen map from it to itself.  Tom Leinster and I thought about that.  LIke, what's the expected number of orbits.</p>",
        "id": 196028260,
        "sender_full_name": "John Baez",
        "timestamp": 1588386237
    },
    {
        "content": "<p>Yeah, as we know traditional mathematicians like their theories raw, at the expense of generalization though. An approach like Myers' is more appealing to me.</p>",
        "id": 196051659,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1588426150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span>  said</p>\n<blockquote>\n<p>a finite set with a randomly chosen map from it to itself. ... Like, what's the expected number of orbits.</p>\n</blockquote>\n<p>I can't give an answer to the question, but Comstruct, a project with Philippe Flajolet assistance, can. A related problem <a href=\"http://algo.inria.fr/flajolet/Publications/RR-1830.pdf\" title=\"http://algo.inria.fr/flajolet/Publications/RR-1830.pdf\">A Calculus for the Random Generation of Labelled Combinatorial Structures</a> can. A bonus is this article is the main work on <a href=\"https://oeis.org/A000311\" title=\"https://oeis.org/A000311\">total partitions</a>! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <br>\nI submit that it is not a random accident that total partitions and their related classification system has something deep to say about how physics works. The main classification system I'm aware of is the immune system.</p>",
        "id": 196054816,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588430683
    }
]