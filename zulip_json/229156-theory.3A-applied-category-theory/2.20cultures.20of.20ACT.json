[
    {
        "content": "<p>I'll bring up here what I was talking about on twitter last night. I recognise 2 quite different approaches to ACT and I think it's useful to identify them and give them names. I called them \"deep\" and \"shallow\" ACT provisionally, which didn't go down well. I'll call them \"type A\" and \"type B\" here</p>",
        "id": 193652682,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586599473
    },
    {
        "content": "<p>In type A ACT you take applied concepts and try to <em>justify</em> them as just an X in the category of Y. That's where the deep theory is, and I think that's what most people calling themselves ACTists aspire to do</p>",
        "id": 193652717,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586599535
    },
    {
        "content": "<p>In type B ACT you treat categories much more as a language, to deal with coherence for graphical calculi and have functors as interdisciplinary translations, etc. But under the hood you're entirely happy to have things that aren't categorified (or <em>justified</em>)</p>",
        "id": 193652778,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586599647
    },
    {
        "content": "<p>I recognised this cultural distinction in the conversation about <a class=\"stream-topic\" data-stream-id=\"229156\" href=\"/#narrow/stream/229156-practice.3A-applied-ct/topic/Implementing.20Open.20Dynamical.20Systems\">#practice: applied ct &gt; Implementing Open Dynamical Systems</a>, and I think it was causing a bit of misunderstanding</p>",
        "id": 193652833,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586599712
    },
    {
        "content": "<p>Specifically, I <em>believe</em> that <span class=\"user-mention\" data-user-id=\"275927\">@James Fairbanks</span>, <span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> and me are thinking about dynamical systems from the type B perspective, whereas <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span> and <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> are thinking about dynamical systems from the type A perspective</p>",
        "id": 193652922,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586599882
    },
    {
        "content": "<p>(I don't claim this is a \"universal\" classification of ACT - in particular I don't know how to classify CQM/ZX people on this axis; but I think it's <em>sometimes</em> a useful distinction and this happens to be one of those times)</p>",
        "id": 193652980,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586599976
    },
    {
        "content": "<p>Yeah I read those tweets and totally agreed. I’m all about that type B. I think that is the AppliedACT that <span class=\"user-mention\" data-user-id=\"275953\">@Blake Pollard</span>’s NIST meeting would have been about. CT is a tool for organizing and understanding diverse areas of math. ACT is a tool for organizing and understanding diverse areas of science, engineering, and computation. Once you can organize and understand diverse areas of modeling in a unified language, you can start to build new tools that leverage that understanding. </p>\n<p>For example when you look at that table different types of Open Dynamical Systems you realize that any software tool you build for analyzing Markov Chains should have an analogue for Automatons or Ergodic Systems. People have spent a lot of time analyzing those different types of systems in divergent communities. The ACT perspective should show us how to put them back together by translating concepts from community to other.</p>",
        "id": 193655071,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586603699
    },
    {
        "content": "<p>Software design is all about getting the abstractions right. The CT perspective “when a mathematician sees a definition they ask ‘what are examples of this?’ A CTist asks ‘what is this an example of?’” Is really helpful for finding the right abstractions. One sense of “right abstraction” is that when I generalize two similar things I get the same generalization. </p>\n<p>Since ACT is a machine for turning mathematical definitions into mathematical abstractions, it can be a powerful tool for software design.</p>",
        "id": 193656172,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586605490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193652778\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193652778\">said</a>:</p>\n<blockquote>\n<p>In type B ACT you treat categories much more as a language, to deal with coherence for graphical calculi and have functors as interdisciplinary translations, etc. But under the hood you're entirely happy to have things that aren't categorified (or <em>justified</em>)</p>\n</blockquote>\n<p>I feel this is also the approach we at Statebox are pursuing, mostly. It can also result in things that may be deemed \"heretic\" from a pure point of view. For instance, we realized that much of the theory we were developing  wasn't going to work as intended because we were desperately trying to preserve an adjunction (which is for sure the right thing to do theoretically). As soon as we dropped this, things worked flawlessly from an implementational perspective.</p>",
        "id": 193657237,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586607009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275927\">James Fairbanks</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193656172\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193656172\">said</a>:</p>\n<blockquote>\n<p>The CT perspective “when a mathematician sees a definition they ask ‘what are examples of this?’ A CTist asks ‘what is this an example of?’” </p>\n</blockquote>\n<p>I think this is my favorite mathematical quote ever!</p>",
        "id": 193658074,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1586608283
    },
    {
        "content": "<p>Just this morning, following a line of thought started several days ago, I was contemplating the fact ACT has to surrender to the rest of mathematics if it really wants to be relevant, which is a position I find here reflected by Type B ACT. Open dynamical systems as outlined by <span class=\"user-mention\" data-user-id=\"277446\">@David Jaz</span> are a textbook example of this. David built a beautiful infrastructure to unify many different takes on 'dynamical systems', but each declination will be non-categorical, to some extent. Yet CT gives you a neat bird-eye view, and exposes some aspects each of the declinations oversees.</p>",
        "id": 193658333,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1586608588
    },
    {
        "content": "<p>I think David Spivak said it at the AMS Riverside meeting this November. </p>\n<p>Yeah, the interface of ACT and real math is going to be messy from a pure CT perspective. But that’s ok. And it will probably force some new abstractions in CT to rectify the situation.</p>",
        "id": 193658928,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586609486
    },
    {
        "content": "<p>One nice starting point could be this: Hask, the category of Haskell types and functions is not really a category, but something very close to it. Did someone try to define precisely what the real \"Hask category\" is?</p>",
        "id": 193659742,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586610552
    },
    {
        "content": "<p>I think the key difference between these 2 points of view is whether or not you think that <em>justification</em> (ie. identifying something as <em>just</em> an X in the category of Y) of applied concepts is an end in its own right</p>",
        "id": 193660862,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586612113
    },
    {
        "content": "<p>Yes. In my view this is useful only if it allows to say more than you could before, e.g. by using more complicated tools.</p>",
        "id": 193661578,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586613237
    },
    {
        "content": "<p>I'm trying to be careful not to gatekeep what is \"useful\", useful depends entirely on what your goals are. Neither of these 2 approaches is <em>better</em>, they're just <em>different</em></p>",
        "id": 193661825,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586613523
    },
    {
        "content": "<p>In particular, academics can take a much longer view than a startup. The average case of justification isn't useful right now, but I can easily imagine it being useful in the future</p>",
        "id": 193661915,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586613655
    },
    {
        "content": "<p>I just happen to be an academic who's impatient and wants results yesterday</p>",
        "id": 193661973,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586613723
    },
    {
        "content": "<blockquote>\n<p>when a mathematician sees a definition they ask ‘what are examples of this?’ A CTist asks ‘what is this an example of?</p>\n<blockquote>\n<p>I think David Spivak said it at the AMS Riverside meeting this November. </p>\n</blockquote>\n</blockquote>\n<p>I remember it  from the meeting on Categorical Aspects of Network Theory in Turin in 2015: somebody was stating a theorem during a talk, and David, from the front row, asked \"<em>What is this an example of?</em>\". I don't remember who was the speaker, but it was John who replied with the remark \"<em>'What is this an example of?' Most mathematicians ask the question 'what is an example of this?', but category theorists ask 'What is this an example of?'</em>\". (It was a great meeting, by the way -- in the good old days where you could go out and have a beer and a pizza.)</p>",
        "id": 193662078,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1586613872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193661915\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193661915\">said</a>:</p>\n<blockquote>\n<p>In particular, academics can take a much longer view than a startup. The average case of justification isn't useful right now, but I can easily imagine it being useful in the future</p>\n</blockquote>\n<p>Yes, I'm arguing that stometimes justification is not an end in its own right even in mathematics: It's a tricky matter, but even pure mathematics has a social component, and justification can be an end in its own right when a group of people deem it interesting for whatever reason. In this case, one may argue that it is useful for that group of people anyway! But I can think of very few examples of justifications that are goals on their own right and that get pursued anyway even if no one is interested in them...</p>",
        "id": 193662583,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586614622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193661578\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193661578\">said</a>:</p>\n<blockquote>\n<p>Yes. In my view this is useful only if it allows to say more than you could before, e.g. by using more complicated tools.</p>\n</blockquote>\n<p>This is obviously my own personal view. For me the real goal of mathematics is to build increasingly powerful and general abstraction, that unify previously unrelated concepts. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193662653,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586614727
    },
    {
        "content": "<p>I just like things that spit out numbers.</p>",
        "id": 193662897,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586615131
    },
    {
        "content": "<p>They don't even have to be the right numbers</p>",
        "id": 193662959,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586615189
    },
    {
        "content": "<p>Does this include number theory? :P</p>",
        "id": 193662963,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586615200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193662897\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193662897\">said</a>:</p>\n<blockquote>\n<p>I just like things that spit out numbers.</p>\n</blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><mi>X</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X \\mapsto X+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 193662981,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1586615269
    },
    {
        "content": "<p>Course the abstraction from things to numbers is probably the biggest act of abstraction in history. Going from numbers to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-toposes for example is a comparatively much smaller step</p>",
        "id": 193662984,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586615279
    },
    {
        "content": "<p>Oh, good point. Let me amend my statement. No number theory. The naturals aren't numbers</p>",
        "id": 193663033,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586615327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193662984\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193662984\">said</a>:</p>\n<blockquote>\n<p>Course the abstraction from things to numbers is probably the biggest act of abstraction in history. Going from numbers to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-toposes for example is a comparatively much smaller step</p>\n</blockquote>\n<p><del>I'd like to dispute this!</del> I realised you are right, but for beaurocratic reasons! The examples I gave were technically pre-historic, of course!</p>",
        "id": 193663043,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586615337
    },
    {
        "content": "<p>Well, the first took a couple billion years, the second only a couple thousand. Probably the seeds of anything fancy we do are built into the capabilities to do the first</p>",
        "id": 193663123,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586615479
    },
    {
        "content": "<p>Yes, going from things to numbers is harder than going from numbers to toposes, but I wanted to dispute that there are other feats of abstraction that are immensely harder than the former, imho</p>",
        "id": 193663175,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586615526
    },
    {
        "content": "<p>Namely: Recursion in language and invention of writing.</p>",
        "id": 193663181,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586615549
    },
    {
        "content": "<p>Or walking, which is pretty impressive</p>",
        "id": 193663196,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586615603
    },
    {
        "content": "<p>Sorry, I'm in a cheeky mood this morning</p>",
        "id": 193663203,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586615621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193663181\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193663181\">said</a>:</p>\n<blockquote>\n<p>Namely: Recursion in language and invention of writing.</p>\n</blockquote>\n<p>I thought you didn't believe in recursion in language... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 193663245,
        "sender_full_name": "(=_=)",
        "timestamp": 1586615646
    },
    {
        "content": "<p>Wrt invention of writing, it's very interesting also because we were able to witness it in reasonably recent times: <a href=\"https://en.wikipedia.org/wiki/Sequoyah\" title=\"https://en.wikipedia.org/wiki/Sequoyah\">https://en.wikipedia.org/wiki/Sequoyah</a></p>",
        "id": 193663246,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586615656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193663203\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193663203\">said</a>:</p>\n<blockquote>\n<p>Sorry, I'm in a cheeky mood this morning</p>\n</blockquote>\n<p>As am I... <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 193663257,
        "sender_full_name": "(=_=)",
        "timestamp": 1586615682
    },
    {
        "content": "<p>I don't believe that recursion in language is the dividing line between animal communication and human language (or that drawing said line there is useful, or that wanting to draw such line is useful in any way). I for sure believe it's one of the greatest feats of abstraction ever, and a very useful one!</p>",
        "id": 193663284,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586615709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193652682\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193652682\">said</a>:</p>\n<blockquote>\n<p>I'll bring up here what I was talking about on twitter last night. I recognise 2 quite different approaches to ACT and I think it's useful to identify them and give them names. I called them \"deep\" and \"shallow\" ACT provisionally, which didn't go down well. I'll call them \"type A\" and \"type B\" here</p>\n</blockquote>\n<p>I don't think they're <em>that</em> different. They're both trying to express concepts in CT terms. In \"type B\" ACT, when you \"have things that aren't categorified\", that often means you don't know how to express them yet (e.g. see my conversation with John <a href=\"#narrow/stream/229111-general/topic/Shaky.20foundations/near/192474351\" title=\"#narrow/stream/229111-general/topic/Shaky.20foundations/near/192474351\">here</a>). That's when \"type A\" ACT comes in, and there can be some lag until the \"justification\" happens.</p>",
        "id": 193663847,
        "sender_full_name": "(=_=)",
        "timestamp": 1586616576
    },
    {
        "content": "<p>I'd also second Daniel Litt's view: type B ACT is just normal maths for people in \"algebraic geometry, number theory, etc.\" CT is just another tool for them. Sometimes it's just not right for the job.</p>\n<p><a href=\"https://twitter.com/littmath/status/1248778381149306880\" title=\"https://twitter.com/littmath/status/1248778381149306880\">https://twitter.com/littmath/status/1248778381149306880</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/littmath/status/1248778381149306880\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/896909521603481607/FUx_nsGR_normal.jpg\"></a><p><a href=\"https://twitter.com/_julesh_\" title=\"https://twitter.com/_julesh_\">@_julesh_</a> Ah yes, “shallow” applied category theory, also known as “math.”</p><span>- Daniel Litt (@littmath)</span></div></div>",
        "id": 193665780,
        "sender_full_name": "(=_=)",
        "timestamp": 1586619273
    },
    {
        "content": "<p>If we ever draw <em>any</em> boundary of what's \"allowed\" to count as ACT, category theory applied to algebraic geometry, number theory etc shouldn't count, because that's what's normally called \"category theory\"</p>",
        "id": 193665964,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586619593
    },
    {
        "content": "<p>(There's also category theory applied to category theory, which I call \"Australian rules\")</p>",
        "id": 193666016,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586619636
    },
    {
        "content": "<blockquote>\n<p>If we ever draw any boundary of what's \"allowed\" to count as ACT,  category theory applied to algebraic geometry, number theory etc shouldn't count, because that's what's normally called \"category theory\"</p>\n</blockquote>\n<p>Actually I think it's called algebraic geometry, number theory, etc.   People in those subjects who use category theory typically don't think of themselves as doing \"category theory\".</p>",
        "id": 193666519,
        "sender_full_name": "John Baez",
        "timestamp": 1586620352
    },
    {
        "content": "<p>Of course the same chunk of category theory can often be applied both to algebraic geometry and the design of air traffic control systems.   That's part of what's nice about category theory: it's a very general set of tools.</p>",
        "id": 193666545,
        "sender_full_name": "John Baez",
        "timestamp": 1586620432
    },
    {
        "content": "<p>Yep. Plus I guess the boundary between \"pure\" and \"applied\" is extremely blurry sometimes anyway, eg. in analysis</p>",
        "id": 193666615,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586620542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193652717\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193652717\">said</a>:</p>\n<blockquote>\n<p>In type A ACT you take applied concepts and try to <em>justify</em> them as just an X in the category of Y. That's where the deep theory is, and I think that's what most people calling themselves ACTists aspire to do.</p>\n<p>In type B ACT you treat categories much more as a language, to deal with coherence for graphical calculi and have functors as interdisciplinary translations, etc. But under the hood you're entirely happy to have things that aren't categorified (or <em>justified</em>).</p>\n</blockquote>\n<p>I don't really like classifying scientists because it tends to lock people into boxes, and I'm always trying to get <em>out</em> of boxes.    If these are the choices I definitely have a type A personality.   But I guess I should say <em>why</em> I'm trying to understand electrical circuits, control theory, chemical reactions, Petri nets and other things using category theory.   </p>\n<p>First, I think it's bad for math to be cut off from applications: it has always drawn inspiration from the real world, and category theory has a big untapped source of inspiration available to it from engineering and science.  </p>\n<p>Second, I think it's bad for applications to be cut off from math.  It takes a while for mathematical ways of thinking to influence what people are doing on the cutting edge of application, but it does happen - once there is a communication channel.</p>\n<p>Third, I think these various \"categories of networks\" that I'm studying have a lot of commonalities, and by understanding these we'll be able to create <em>new kinds of networks</em> - things that are potentially just as useful as the ones I listed, but don't exist yet.</p>\n<p>Fourth, the reason I want to do this is that we need a new kind of technology, which I call \"ecotechnology\", which is more like how living organisms work.   Low energy use, little or no waste, self-reproducing, robust (so you can damage it and it still works, with <a href=\"https://searchnetworking.techtarget.com/definition/graceful-degradation\" title=\"https://searchnetworking.techtarget.com/definition/graceful-degradation\">graceful degradation</a>), and adaptive.</p>\n<p>Coming up with this is a big job, and since I'm not an engineer I don't expect to actually <em>design</em> things.  I'm just trying to understand networks in a way that would make it easier for someone to make progress on this job.</p>",
        "id": 193667415,
        "sender_full_name": "John Baez",
        "timestamp": 1586621697
    },
    {
        "content": "<p>Of course I don't expect anyone else to go about things in this way; everyone should do what they like and are good at.</p>",
        "id": 193667501,
        "sender_full_name": "John Baez",
        "timestamp": 1586621828
    },
    {
        "content": "<p>Fair enough. I think it's worthwhile to identify them as <em>existing</em> \"boxes\", the challenge is to not encourage people to fit themselves into exactly one box</p>",
        "id": 193668142,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586622722
    },
    {
        "content": "<p>I didn't know these boxes existed until you invented them.  I felt free to move around.   <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 193668514,
        "sender_full_name": "John Baez",
        "timestamp": 1586623234
    },
    {
        "content": "<p>There are lots of things I do, and lots of things I don't do.  You can trace out a complicated curve surrounding all the things I'll ever do and say \"you are trapped in these region - you can never leave\".  But I won't like it.</p>",
        "id": 193668602,
        "sender_full_name": "John Baez",
        "timestamp": 1586623361
    },
    {
        "content": "<p>But maybe it's good to do this if you're trying to encourage someone to escape from their habits!</p>",
        "id": 193668643,
        "sender_full_name": "John Baez",
        "timestamp": 1586623436
    },
    {
        "content": "<p>Just what I think I observe from talking with lots of people. Bit of amateur anthropology</p>",
        "id": 193668971,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586623827
    },
    {
        "content": "<p>The thing that separates shallow ACT from regular math to me is the exploitation of the universal perspective coming from CT. Analyzing Markov Chains, that’s math. Using the CT tools to simultaneously analyze Automata, Markov Chains, Ergodic Systems, and Smooth Dynamical Systems, that’s ACT.</p>",
        "id": 193668995,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586623913
    },
    {
        "content": "<p>I do find this explicit discussion of the kinds of people helpful for understanding and don't think it is just for the purpose of finding our boxes. It is very often that I'm extremely confused by papers, presentations, and discussions around category theory (and mathematical topics in general).  If I'm honest, I often have to fight down the belief that what I see as confusing, jargon filled, and overly complicated explanations of beautiful ideas as the result of malignancy on the part of the authors. This is almost certainly not the case. It probably mostly a difference of aesthetical desires, background, and abilities.</p>",
        "id": 193669147,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586624136
    },
    {
        "content": "<p>Any mathematician who sees the definition of those different types of Dynamical Systems will intuitively see their similarities. But it takes CT to rigorously understand the similarities by finding the thing they are all examples of. Once we have that new understanding, we can build techniques and software for working with all of them simultaneously. We don’t need a AutomataPack and MCPack and ErgoPack and DynoPack. We can just write OpenDynamicalSystemsPack and solve all of them with the same machinery.</p>",
        "id": 193669151,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1586624152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193659742\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193659742\">said</a>:</p>\n<blockquote>\n<p>One nice starting point could be this: Hask, the category of Haskell types and functions is not really a category, but something very close to it. Did someone try to define precisely what the real \"Hask category\" is?</p>\n</blockquote>\n<p>Andrej once had a very nice suggestion (I think never followed up on in a promised blog post?) that we might want to look at a poset-enriched category or something to make precise the \"categorical\" constructs people do on Hask (modulo seq). In particular, we don't just have individual functions between types, but an ordering of those functions with regards to definedness: <a href=\"https://www.reddit.com/r/haskell/comments/4f47ou/why_does_haskell_in_your_opinion_suck/d3k9578/?context=3\" title=\"https://www.reddit.com/r/haskell/comments/4f47ou/why_does_haskell_in_your_opinion_suck/d3k9578/?context=3\">https://www.reddit.com/r/haskell/comments/4f47ou/why_does_haskell_in_your_opinion_suck/d3k9578/?context=3</a></p>\n<p>It would be great if somebody appropriately skilled in both enriched category theory and denotational semantics picked up and ran with this.</p>",
        "id": 193675291,
        "sender_full_name": "Gershom",
        "timestamp": 1586632935
    },
    {
        "content": "<p>He does have this post <a href=\"http://math.andrej.com/2016/08/06/hask-is-not-a-category/\" title=\"http://math.andrej.com/2016/08/06/hask-is-not-a-category/\">http://math.andrej.com/2016/08/06/hask-is-not-a-category/</a></p>",
        "id": 193675319,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586632988
    },
    {
        "content": "<p>Right, but that post doesn't address the suggestion I just described, afaik?</p>",
        "id": 193675353,
        "sender_full_name": "Gershom",
        "timestamp": 1586633042
    },
    {
        "content": "<p>Probably not, this precedes the reddit comment</p>",
        "id": 193675383,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586633079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193675268\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193675268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193674279\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193674279\">said</a>:</p>\n<blockquote>\n<p>And they're hoping God will give them a pat on the back and say \"yes, that's exactly how I think about it\".</p>\n</blockquote>\n<p>I think that is an ambitious and noble aspiration :-)</p>\n<p>Sometimes one only hopes for the pat on the back from some prophet or guru. And sometimes one gives a talk hoping to get a nod from some expert sitting in the front row. Maybe one even hopes that other people in the audience will notice the nod. OK, that's a bit pessimistic and depressing to think about. What is probably more relevant to explain the technicality of talks is that after we struggle years with some technical point, we are induced to think it is a super-important point everybody should know about. (While the audience is reading the news on their laptops, or texting their friend in row 3 with some funny remark.)</p>\n</blockquote>\n<p>This is an interesting topic to me because I often feel reflective about my own motivations for why I do the things I do or like the things I like. Best I can figure, it is some mix of idealism and shameful-feeling pragmatism. Seeking external and internal validation. I can understand seeking the nod of approval.</p>",
        "id": 193675756,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586633584
    },
    {
        "content": "<p>Btw on Jules' \"two cultures\" thing, I think the distinction is real and needs some value-neutral designation, but the word \"cultures\" is too strong. Certainly both approaches are possible by the same people, sometimes in tandem, sometimes not. But there is certainly a big difference between working on various representation theorems, and between establishing a \"universal\" setting in which we can organize and manipulate and relate a fair number of categories of different mathematical objects. Rather than cultures, we may want to distinguish between \"lines of research\" \" or \"results\" and talk about work on \"representation results\" vs. work on \"embedding results\" or \"realization results\" or the like? Sorry this is a bit vague... Perhaps another way to think about it is what h-level the results occur at :-)</p>",
        "id": 193675840,
        "sender_full_name": "Gershom",
        "timestamp": 1586633665
    },
    {
        "content": "<p>I agree with Gershom that \"cultures\" doesn't feel right, since the two sorts of ACTists interact a ton, I think.</p>",
        "id": 193676404,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1586634420
    },
    {
        "content": "<p>Yes, I had to translate the thought I had yesterday into language but was too impatient to do it properly. Everybody, come up with better words for the same thing</p>",
        "id": 193676570,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586634626
    },
    {
        "content": "<p>\"2 cultures\" is an existing canned phrase, which is probably why it came to mind first</p>",
        "id": 193676576,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586634654
    },
    {
        "content": "<p>I definitely count myself at type A, mostly because I simply don't have the skill set for type B. I'm working on it though <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 193676591,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1586634694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275914\">Joe Moeller</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193676404\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193676404\">said</a>:</p>\n<blockquote>\n<p>I agree with Gershom that \"cultures\" doesn't feel right, since the two sorts of ACTists interact a ton, I think.</p>\n</blockquote>\n<p>How about the two adjoints? <span aria-label=\"tongue\" class=\"emoji emoji-1f445\" role=\"img\" title=\"tongue\">:tongue:</span> :p</p>",
        "id": 193676650,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586634808
    },
    {
        "content": "<p>I like it</p>",
        "id": 193676728,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586634908
    },
    {
        "content": "<p>The knowledge transfer pipeline goes theory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> applications, from left to right. So type A is the left adjoint because they act on the theory, and type B is the right adjoint because they act on the applications. And the results are isomorphic</p>",
        "id": 193676779,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586634965
    },
    {
        "content": "<p>Yes, that sounds very right.  Likewise, (from introspection I find that) type A work involves a lot of freedom and type B work involves a lot of forgetfulness.</p>",
        "id": 193676796,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586635049
    },
    {
        "content": "<p>ive always liked the idea of there being an adjunction between theory and practice, or between examples and generality, or between...</p>",
        "id": 193676804,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586635066
    },
    {
        "content": "<p>or maybe it's a dialectic</p>",
        "id": 193676843,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586635088
    },
    {
        "content": "<p><a href=\"https://twitter.com/sarah_zrf/status/1225852804641755137\" title=\"https://twitter.com/sarah_zrf/status/1225852804641755137\">https://twitter.com/sarah_zrf/status/1225852804641755137</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/sarah_zrf/status/1225852804641755137\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/511991354927218688/O7IOsWWj_normal.png\"></a><p><a href=\"https://twitter.com/infty_dril\" title=\"https://twitter.com/infty_dril\">@infty_dril</a> i call evbery adjunction I see a dialectic and I am correct more often than not so I will never stop</p><span>- n-sarahzrf where n ≤ (1, 1) (@sarah_zrf)</span></div></div>",
        "id": 193676847,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586635101
    },
    {
        "content": "<p>there's definitely lots of actual formal adjunctions between syntax and semantics or between theories and models :D</p>",
        "id": 193676862,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586635147
    },
    {
        "content": "<p>Well. Examples are about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span> quantifiers, and generality is about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span></span></span></span> quantifiers. I think the rest is standard</p>",
        "id": 193676868,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586635168
    },
    {
        "content": "<p>Yep</p>",
        "id": 193676892,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1586635181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193676779\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193676779\">said</a>:</p>\n<blockquote>\n<p>The knowledge transfer pipeline goes theory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> applications, from left to right. So type A is the left adjoint because they act on the theory, and type B is the right adjoint because they act on the applications. And the results are isomorphic</p>\n</blockquote>\n<p>This is where you lose some people with CT, because you're imposing a structure that you find pleasing, without actually working out if it fits well. I'm not even sure if Sam was having a bit of a laugh, given his emoji reactions.</p>\n<p>I'd suggest calling type A \"late-stage abstraction\" and type B \"early-stage abstraction\", which means that we're talking about some sort of order (or \"spectrum\" in the common vernacular) here. </p>\n<p>Type A looks like they're acting on the \"theory\", but the \"theory\" is the product of early-stage abstraction. Type B looks like they're acting on the \"applications\" because that's what abstraction does in its early stages. </p>\n<p>Furthermore, the \"knowledge transfer pipeline\" goes both ways: abstraction goes from right to left, and specialisation goes from left to right.</p>",
        "id": 193713814,
        "sender_full_name": "(=_=)",
        "timestamp": 1586699097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193675756\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193675756\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276625\">Joachim Kock</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/mathematical.20writing/near/193675268\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/mathematical.20writing/near/193675268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/mathematical.20writing/near/193674279\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/mathematical.20writing/near/193674279\">said</a>:</p>\n<blockquote>\n<p>And they're hoping God will give them a pat on the back and say \"yes, that's exactly how I think about it\".</p>\n</blockquote>\n<p>Sometimes one only hopes for the pat on the back from some prophet or guru. </p>\n</blockquote>\n<p>I can understand seeking the nod of approval.</p>\n</blockquote>\n<p>This is because:</p>\n<ul>\n<li>We are learning machines, and we need some supervision, even if only a little, in order to make progress.</li>\n<li>We are conditioned in school to desire that pat on the back.</li>\n</ul>",
        "id": 193713889,
        "sender_full_name": "(=_=)",
        "timestamp": 1586699265
    },
    {
        "content": "<p>I don't think it's conditioning: only those most narcissistic believe that they alone understand the beauty of mathematics greater than any other. Approval from someone whom we understand to understand better than ourselves is evidence that we too have grasped that beauty. It's objective, not purely psychological.</p>",
        "id": 193714008,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1586699521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193714008\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193714008\">said</a>:</p>\n<blockquote>\n<p>I don't think it's conditioning: only those most narcissistic believe that they alone understand the beauty of mathematics greater than any other. Approval from someone whom we understand to understand better than ourselves is evidence that we too have grasped that beauty. It's objective, not purely psychological.</p>\n</blockquote>\n<p>I had two points there: the practical factor and the psychological component. The praticality is, as you've rightly pointed out, the objective need for error correction. But there is also the psychological need of seeking approval from some \"God\", \"prophet\", \"guru\", etc. And in the context of John's quote, that approval-seeking behaviour comes in the form of the adoption of a style of writing that may not necessarily be the best for informing the reader.</p>",
        "id": 193715052,
        "sender_full_name": "(=_=)",
        "timestamp": 1586701223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193657237\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/193657237\">said</a>:</p>\n<blockquote>\n<p>I feel this is also the approach we at Statebox are pursuing, mostly. It can also result in things that may be deemed \"heretic\" from a pure point of view. For instance, we realized that much of the theory we were developing  wasn't going to work as intended because we were desperately trying to preserve an adjunction (which is for sure the right thing to do theoretically). As soon as we dropped this, things worked flawlessly from an implementational perspective.</p>\n</blockquote>\n<p>Can you say more about the specifics of this? What adjunction were you trying to preserve? Why did it make implementation hard? What made it the \"right\" thing to do theoretically but not practically?</p>",
        "id": 194560821,
        "sender_full_name": "Jake Gillberg",
        "timestamp": 1587239349
    },
    {
        "content": "<p>Well, in our case, for instace, we wanted a link between petri nets and symmetric monoidal categories. This is a mess because, essentially, petri nets are built on multisets and free SMCs on strings, and there isn't a unique way to order a multiset into a string. So if you want an adjunction, you either tweak the definition of petri net (e.g. by using pre-nets) or you tweak the definition of free SMC (e.g by requiring it to be commutative). Both things were very unsatisfying for us: pre nets are really cumbersome as a graphical tool, since they introduce limitations which are completely non  intuitive; commutative SMCs do not allow to map nets executions in semantics such as idris types and functions, since cartesian products are never commutative. In the end, we realized that what breaks down is the composition law for the functor going from petri nets to free smcs, which is something we'll never really use. So we didn't care. :D</p>",
        "id": 194562047,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587241509
    },
    {
        "content": "<p>This is because in our situation what really matters are the objects. You want to build a free SMC out of a petri net, but you don't want to necessarily be able to morph a net into another and have the free smc structure to follow along (even if you can, btw)</p>",
        "id": 194562097,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587241581
    },
    {
        "content": "<p>So all in all the point is that chasing a compositional description of how morphisms of nets induce morphisms of free smcs is pleasing mathematically, but completely out of scope in our applications, and comes with a huge price to pay (namely either a very ugly graphical interface or the absence of a functorial mapping to other semantics). So in the end we didn't bother, and wrote a paper about why <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194562118,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587241680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194562097\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194562097\">said</a>:</p>\n<blockquote>\n<p>This is because in our situation what really matters are the objects. You want to build a free SMC out of a petri net, but you don't want to necessarily be able to morph a net into another and have the free smc structure to follow along (even if you can, btw)</p>\n</blockquote>\n<p>This sort of surprises me. It seems to me like you could use morphisms as edits to your Petri net and the corresponding mapping between the free SMCs would tell you how to change the compiled code.</p>",
        "id": 194566475,
        "sender_full_name": "Jade Master",
        "timestamp": 1587248361
    },
    {
        "content": "<p>Yes, but in practice you can do so by just defining the functors between smcs</p>",
        "id": 194566542,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587248451
    },
    {
        "content": "<p>Also, you can still lift a morphism of net to a functor between freesmcs. The problem is that this is non-compositional, so you don't have F(f;g) = Ff ; Fg if you go from Petri to SMCs. This is for utterly stupid reasons, that is, in doing so you have to insert some symmetries here and there and you end up doing so in different ways</p>",
        "id": 194566639,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587248526
    },
    {
        "content": "<p>So you can still edit petri nets and reflect this in the compiled code, it's just that \"doing it two times at once\" and doing it first once and then again are not the same operation</p>",
        "id": 194566659,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587248573
    },
    {
        "content": "<p>I don't think this is a severe limitation in our framework, and in any case it's the less severe limitation among all the ones we could pick from :D</p>",
        "id": 194566671,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587248602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194566542\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194566542\">said</a>:</p>\n<blockquote>\n<p>Yes, but in practice you can do so by just defining the functors between smcs</p>\n</blockquote>\n<p>A nontrivial Petri net will have a free SMC with an infinite number of distinct morphisms.  The only way to define something like this is on generators.</p>",
        "id": 194567113,
        "sender_full_name": "Jade Master",
        "timestamp": 1587249352
    },
    {
        "content": "<p>This is exactly the way you do it, yes</p>",
        "id": 194567247,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587249530
    },
    {
        "content": "<p>What I am saying is that if you have a transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> in the first net and a transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span> in the second net, and you send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>→</mo><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">t \\to u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span>, then you can send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo separator=\"true\">;</mo><mi>U</mi><mo separator=\"true\">;</mo><msup><mi>σ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\sigma;U;\\sigma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo separator=\"true\">,</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">T,U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> are their corresponding generators in the respective SMCs, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo separator=\"true\">,</mo><msup><mi>σ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\sigma, \\sigma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are some miserable symmetries you need to put in to have domains and codomain match, which is the price to pay if you are using multisets to manipulate strings.</p>",
        "id": 194567327,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587249637
    },
    {
        "content": "<p>There is _not_ a canonical way to choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>σ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\sigma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, which is exactly why the functorial composition law fails.</p>",
        "id": 194567332,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587249661
    },
    {
        "content": "<p>To see that there is not a canonical consider, for instance, the case in which t takes two tokens from the same place A. Then you can decide to slide an identiity or a swap somewhere, and you don't really have a canonical way to pick one of the two.</p>",
        "id": 194567400,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587249762
    },
    {
        "content": "<p>As you keep composing, sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>→</mo><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">t \\to u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>→</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">u \\to v</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, these symmetries stack up. So in the composition you get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>↦</mo><mi>σ</mi><mo separator=\"true\">;</mo><mi>U</mi><mo separator=\"true\">;</mo><msup><mi>σ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>↦</mo><mi>τ</mi><mo separator=\"true\">;</mo><mi>σ</mi><mo separator=\"true\">;</mo><mi>V</mi><mo separator=\"true\">;</mo><msup><mi>σ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">;</mo><msup><mi>τ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">T \\mapsto \\sigma;U;\\sigma' \\mapsto \\tau;\\sigma;V;\\sigma';\\tau'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>. Contrary, in the composite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>↦</mo><mi>θ</mi><mo separator=\"true\">;</mo><mi>V</mi><mo separator=\"true\">;</mo><msup><mi>θ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">T \\mapsto \\theta;V;\\theta'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>. There isn't a canonical assignment of symmetries such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>τ</mi><mo separator=\"true\">;</mo><mi>σ</mi><mo>=</mo><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\tau;\\sigma = \\theta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>τ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">;</mo><msup><mi>σ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><msup><mi>θ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\tau';\\sigma'=\\theta'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 194567460,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587249897
    },
    {
        "content": "<p>Right. This is the approach of Sassone?</p>",
        "id": 194567467,
        "sender_full_name": "Jade Master",
        "timestamp": 1587249914
    },
    {
        "content": "<p>In \"Strongly Concatenable Processes\"</p>",
        "id": 194567472,
        "sender_full_name": "Jade Master",
        "timestamp": 1587249943
    },
    {
        "content": "<p>The approach of Sassone to solve the problem is to take, as generating morphisms corresponding to $t$, all the possible permutations of stuff in domain and codomain, and to relate them via a supplementary axiom in the SMC</p>",
        "id": 194567523,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587249987
    },
    {
        "content": "<p>It fixes most cases, but it still does not fix the case where t gets to tokens from the same place in input.</p>",
        "id": 194567528,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250009
    },
    {
        "content": "<p>So yes, if you take all of them at once you get the adjunction, but the bookkeeping is still very imperfect.</p>",
        "id": 194567579,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250097
    },
    {
        "content": "<p>I see. Is there a specific paper that you would say your semantics is closest to?</p>",
        "id": 194567583,
        "sender_full_name": "Jade Master",
        "timestamp": 1587250120
    },
    {
        "content": "<p>My semantics is exactly the prenet semantics</p>",
        "id": 194567589,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250144
    },
    {
        "content": "<p>It's just that instead of using prenets, I use nets where I have a total ordering on their set of places</p>",
        "id": 194567592,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250164
    },
    {
        "content": "<p>Oh great. That's my favorite :)</p>",
        "id": 194567593,
        "sender_full_name": "Jade Master",
        "timestamp": 1587250168
    },
    {
        "content": "<p>(which is a computationally ok assumption)</p>",
        "id": 194567594,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250174
    },
    {
        "content": "<p>And I use the ordering to order domain and codomain of a transition</p>",
        "id": 194567596,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250187
    },
    {
        "content": "<p>So I have a \"canonical\" way to elevating a transition t to a generating morphism T. this \"canonical\" way tho is non compositional because the ordering on places of different nets are independent from net to net <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194567647,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250236
    },
    {
        "content": "<p>I guess that my paper feels absolutely disgusting to read for a mathematician btw</p>",
        "id": 194567659,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250273
    },
    {
        "content": "<p>It's full of this borderline hacky stuff that makes things more or less work but still feels very meh from an aesthetic perspective. What can I say, real applications suck T_T</p>",
        "id": 194567662,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250321
    },
    {
        "content": "<p>I honestly think there is more opportunity to make the mathematical ideals a bit closer to the real applications. I understand why that wouldn't be a priority for statebox though :)</p>",
        "id": 194567731,
        "sender_full_name": "Jade Master",
        "timestamp": 1587250374
    },
    {
        "content": "<p>I'm very happy if someone picks it up. I'd also like to collaborate. I basically really tried to establish a satisfying correspondence between nets and SMCs. I threw pretty much everything I knew at the problem, including trying with higher cats, but with no success whatsoever</p>",
        "id": 194567791,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250462
    },
    {
        "content": "<p>I am still _very_ annoyed that there isn't a formally satisfying way to link petri nets (and not pre-nets) with free SMCs (not commutative). I still think it should exists. Its absence is really a big disappointment for the whole world of maths really</p>",
        "id": 194567811,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250539
    },
    {
        "content": "<p>Is the idea that the user specifies  only Petri nets and Petri net morphims. Then statebox translates this to pre-nets and pre-net morphisms. This translation is not in the categorical framework once you get their however the rest is categorical?</p>",
        "id": 194567861,
        "sender_full_name": "Jade Master",
        "timestamp": 1587250581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567593\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567593\">said</a>:</p>\n<blockquote>\n<p>Oh great. That's my favorite :)</p>\n</blockquote>\n<p>You really like nets where there's a total ordering on the set of places?  Oh are you being sarcastic?</p>",
        "id": 194567864,
        "sender_full_name": "John Baez",
        "timestamp": 1587250586
    },
    {
        "content": "<p>Like, they are a couple of widespread, intimately related beautiful concepts. Very close, but not enough to have a formally satisfying link between the two. I mean WTF, this hurts my OCD soul badly :D</p>",
        "id": 194567867,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567861\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567861\">said</a>:</p>\n<blockquote>\n<p>Is the idea that the user specifies  only Petri nets and Petri net morphims. Then statebox translates this to pre-nets and pre-net morphisms. This translation is not in the categorical framework once you get their however the rest is categorical?</p>\n</blockquote>\n<p>Yes, I'd say this is a good way to put it. Yes.</p>",
        "id": 194567876,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567864\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567864\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567593\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567593\">said</a>:</p>\n<blockquote>\n<p>Oh great. That's my favorite :)</p>\n</blockquote>\n<p>You really like nets where there's a total ordering on the set of places?  Oh are you being sarcastic?</p>\n</blockquote>\n<p>No I am not being sarcastic. It's also the left adjoint into strict symmetric monoidal categories that I like.</p>",
        "id": 194567880,
        "sender_full_name": "Jade Master",
        "timestamp": 1587250646
    },
    {
        "content": "<p>The difference in giving directly prenets to the user is that if we do so then many morphisms are not allowed anymore. And all these morphisms look intuitively ok from a graphical perspective, so the whole interface becomes cumbersome</p>",
        "id": 194567928,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250692
    },
    {
        "content": "<p>So we instead decide to do it under the hood for you</p>",
        "id": 194567932,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250706
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 194567941,
        "sender_full_name": "Jade Master",
        "timestamp": 1587250718
    },
    {
        "content": "<p>But as I said, this is not something we are doing right now. For now we do not support morphing nets yet</p>",
        "id": 194567955,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250751
    },
    {
        "content": "<p>...Which also means we are very flexible if someone has a brilliant idea that saves the day :D</p>",
        "id": 194567960,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567880\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567864\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567864\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567593\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567593\">said</a>:</p>\n<blockquote>\n<p>Oh great. That's my favorite :)</p>\n</blockquote>\n<p>You really like nets where there's a total ordering on the set of places?  Oh are you being sarcastic?</p>\n</blockquote>\n<p>No I am not being sarcastic. It's also the left adjoint into strict symmetric monoidal categories that I like.</p>\n</blockquote>\n<p>A total order on the set of places, or a total order on the set of inputs of each transition, and a total order on the set of outputs of each transition?   I really thought Fab meant what he said: a <em>total order on the whole set of places</em>.    Maybe he didn't mean it.</p>",
        "id": 194567968,
        "sender_full_name": "John Baez",
        "timestamp": 1587250786
    },
    {
        "content": "<p>I meant that you have a total order on the set of places, not on inputs and outputs</p>",
        "id": 194568028,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250880
    },
    {
        "content": "<p>Yeah, good, you meant what you said.  I like that in a mathematician.</p>",
        "id": 194568081,
        "sender_full_name": "John Baez",
        "timestamp": 1587250936
    },
    {
        "content": "<p>Now is that really your favorite, Jade???</p>",
        "id": 194568089,
        "sender_full_name": "John Baez",
        "timestamp": 1587250955
    },
    {
        "content": "<p>An \"ordered\" petri net is a couple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>N</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(N, \\mathcal{O})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is just a net and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span></span></span></span> is a total order on the places of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>. Morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>N</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi mathvariant=\"script\">O</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(N, \\mathcal{O}) \\to (N', \\mathcal{O}')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are just morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>→</mo><msup><mi>N</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">N \\to N'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 194568106,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587250963
    },
    {
        "content": "<p>Is this really your favorite thing, Jade???</p>",
        "id": 194568108,
        "sender_full_name": "John Baez",
        "timestamp": 1587250979
    },
    {
        "content": "<p>So you get a category which is equivalent to Petri, but you use the orderings to pull the trick and turn them into prenets. I don't know if it's Jade's favourite thing. I personally hate it, but couldn't find anything better!</p>",
        "id": 194568120,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567811\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567811\">said</a>:</p>\n<blockquote>\n<p>I am still _very_ annoyed that there isn't a formally satisfying way to link petri nets (and not pre-nets) with free SMCs (not commutative). I still think it should exists. Its absence is really a big disappointment for the whole world of maths really</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> had an idea about this actually which I hope he doesn't mind sharing. The idea was that instead of having a free commutative monoid on the places...you could use the free symmetric monoidal category on the set of places.</p>",
        "id": 194568121,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251018
    },
    {
        "content": "<p>But this isn't similar to prenets?</p>",
        "id": 194568171,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251058
    },
    {
        "content": "<p>Oh no wait, it's more like you use nominal string diagrams basically?</p>",
        "id": 194568182,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251090
    },
    {
        "content": "<p>You attach to each trasition as input/output some places together with an entire structure that keeps track of the permutations for you, so that you can forget about them</p>",
        "id": 194568196,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568108\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568108\">said</a>:</p>\n<blockquote>\n<p>Is this really your favorite thing, Jade???</p>\n</blockquote>\n<p>No lol whoops. I'm not sure why you would want to order all the places instead of just the inputs and outputs of each transition...probably this is easier computationally.</p>",
        "id": 194568197,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251132
    },
    {
        "content": "<p>The point is not necessarily if you order input/outputs or the set of places. The point is if you account for this in defining morphisms <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194568246,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251190
    },
    {
        "content": "<p>If you do then you get prenets or something very close.  If you don't then you get a category equivalent to Petri</p>",
        "id": 194568252,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251212
    },
    {
        "content": "<p>Computationally it's very easy to require that $P$, the type of places, is orderable, that's for sure</p>",
        "id": 194568260,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251261
    },
    {
        "content": "<p>The basic idea is that when you want to give up on being nice, you put a total ordering on every set in sight so that there are no automorphisms anymore and you can point at any element and say \"Hey!  You!  Do what I tell you!\"</p>",
        "id": 194568301,
        "sender_full_name": "John Baez",
        "timestamp": 1587251286
    },
    {
        "content": "<p>Precisely xD</p>",
        "id": 194568307,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568196\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568196\">said</a>:</p>\n<blockquote>\n<p>You attach to each trasition as input/output some places together with an entire structure that keeps track of the permutations for you, so that you can forget about them</p>\n</blockquote>\n<p>Yeah. The inputs and outputs are equipped with an action of the appropriate symmetric group.</p>",
        "id": 194568323,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251376
    },
    {
        "content": "<p>I don't know nominal sets well enough to say if it is the same.</p>",
        "id": 194568371,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251417
    },
    {
        "content": "<p>Yes, I thought about this at some point, when the paper about nominal string diagrams came out. But I never had the time or will to really dig deep into it</p>",
        "id": 194568374,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251444
    },
    {
        "content": "<p>If he doesn't respond on here do you mind if I include you in an email to him regarding this?</p>",
        "id": 194568393,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251510
    },
    {
        "content": "<p>Fine with me, but maybe you meant Fab.</p>",
        "id": 194568435,
        "sender_full_name": "John Baez",
        "timestamp": 1587251533
    },
    {
        "content": "<p>I think some set of people should straighten out this stuff and make it categorically beautiful.</p>",
        "id": 194568438,
        "sender_full_name": "John Baez",
        "timestamp": 1587251554
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 194568459,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251583
    },
    {
        "content": "<p>I'd be happy to be involved - and perhaps that's necessary for <em>me</em> to feel it's been made beautiful. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194568466,
        "sender_full_name": "John Baez",
        "timestamp": 1587251601
    },
    {
        "content": "<p>And I agree with <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> ,  we should settle this business finally :D</p>",
        "id": 194568468,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251602
    },
    {
        "content": "<p>Okay sounds good. I'll send an email later tonight.</p>",
        "id": 194568539,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251747
    },
    {
        "content": "<p>Including you both.</p>",
        "id": 194568541,
        "sender_full_name": "Jade Master",
        "timestamp": 1587251756
    },
    {
        "content": "<p>Cool! Thanks!</p>",
        "id": 194568583,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587251803
    },
    {
        "content": "<p>Beyond type A and B? The book <strong>Combinatorial Analysis</strong>.</p>",
        "id": 194569271,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1587253105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568121\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568121\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> had an idea about this actually which I hope he doesn't mind sharing. The idea was that instead of having a free commutative monoid on the places...you could use the free symmetric monoidal category on the set of places.</p>\n</blockquote>\n<p>Actually now I don't remember having that idea.  (-:  Was it online or in a personal conversation?</p>",
        "id": 194569429,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587253352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276037\">Jade Master</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568121\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194568121\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567811\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/2.20cultures.20of.20ACT/near/194567811\">said</a>:</p>\n<blockquote>\n<p>I am still _very_ annoyed that there isn't a formally satisfying way to link petri nets (and not pre-nets) with free SMCs (not commutative). I still think it should exists. Its absence is really a big disappointment for the whole world of maths really</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> had an idea about this actually which I hope he doesn't mind sharing. The idea was that instead of having a free commutative monoid on the places...you could use the free symmetric monoidal category on the set of places.</p>\n</blockquote>\n<p>hmm, isn't this basically the same thing i was suggesting the other day <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 194572511,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587258728
    },
    {
        "content": "<p>wait lmao did u misremember my idea as having been his</p>",
        "id": 194572514,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587258758
    },
    {
        "content": "<p>well, what i was suggesting the other day in any case was something like, upgrade from the lawvere theory of commutative monoids to the 2-lawvere theory of \"symmetric monoids\" or something—this is, i guess, the same as the \"doctrine of SMCs\" for the right notion of \"doctrine\"?</p>",
        "id": 194572688,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587259092
    },
    {
        "content": "<p>Mike told us that idea a long time ago, so I guess all sufficiently smart people have that idea.</p>",
        "id": 194574406,
        "sender_full_name": "John Baez",
        "timestamp": 1587262652
    },
    {
        "content": "<p>Yeah, there's a Lawvere 2-theory for \"symmetric <a href=\"https://ncatlab.org/nlab/show/pseudomonoid\" title=\"https://ncatlab.org/nlab/show/pseudomonoid\">pseudomonoids</a>\".  The \"pseudo\" means everything holds up to coherent isomorphisms, e.g. a pseudomonoid in Cat is a monoidal category.</p>",
        "id": 194574528,
        "sender_full_name": "John Baez",
        "timestamp": 1587262816
    },
    {
        "content": "<p>It was Day and Street who wrote down the general definition of pseudomonoid.</p>",
        "id": 194574536,
        "sender_full_name": "John Baez",
        "timestamp": 1587262879
    },
    {
        "content": "<p>ah, pseudomonoid</p>",
        "id": 194574587,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587262990
    },
    {
        "content": "<p>shoulda come up with that name myself :&gt;</p>",
        "id": 194574589,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587262997
    },
    {
        "content": "<p>A pseudomonoid is \"just\" a pseudomonad in a one-object tricategory.  But <a href=\"https://www.merriam-webster.com/dictionary/pseudomonad\" title=\"https://www.merriam-webster.com/dictionary/pseudomonad\">pseudomonad</a> also means something else!</p>",
        "id": 194574759,
        "sender_full_name": "John Baez",
        "timestamp": 1587263330
    },
    {
        "content": "<p>pfffthahhaha fully expecting an nlab link</p>",
        "id": 194574768,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587263358
    },
    {
        "content": "<p>That's surely the obvious thing to do, but I thought it doesn't work because a non-pre net doesn't distinguish between tokens in any way.</p>",
        "id": 194575061,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587263936
    }
]