[
    {
        "content": "<p>Now that I have a bit of an idea of what open dynamical systems are about, I'm seeing <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> ' recent work in a new context. Understanding the subtleties of reaction networks and open dynamical systems would be useful in taking on climate change and other ecological challenges.</p>",
        "id": 195908084,
        "sender_full_name": "Daniel Geisler",
        "timestamp": 1588284260
    },
    {
        "content": "<p>Yes, I think that was John's goal since the very beginning, studying the behavior of networks to try fixing the world <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195908912,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588284818
    },
    {
        "content": "<p>Yes, exactly. I made some progress on the first part.</p>",
        "id": 195909955,
        "sender_full_name": "John Baez",
        "timestamp": 1588285510
    },
    {
        "content": "<p>I think the only sense in which we can say that ACT is a \"new field\" is by emphasizing that we're now open to approaching sciences other than cs. Largely what I've seen is more cs. It's fine and good to include cs, it's been very fruitful, but it's also imperative that we attempt to do good with all this.</p>",
        "id": 195914861,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1588289143
    },
    {
        "content": "<p>In part I agree, but I'd like to see more CT applied to CS as well. Even in CS categorical techniques remain quite marginal, unfortunately</p>",
        "id": 195914976,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588289224
    },
    {
        "content": "<p>Also, I think you are mainly thinking about functional programming, but there are entire fields of CS that are very \"hic sunt leones\" for us <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195915027,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588289264
    },
    {
        "content": "<p>Yes, I was trying to carefully <em>not</em> suggest that we do less cs, simply that we do <em>more</em> ecology etc. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195915188,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1588289374
    },
    {
        "content": "<p>Ecology would indeed be nice. But obviously the more you move away from math, the more things are less well-behaved and we need better tools to say something useful, that makes venturing into other fields (e.g. biology, or even sociology) more ambitious. As an old proverb says, \"the more you climb the ladder, the more your ass is shown\" :P</p>",
        "id": 195915391,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1588289523
    },
    {
        "content": "<p>Right. And ultimately, the solution to e.g. climate change will be far more social than scientific.</p>",
        "id": 195915699,
        "sender_full_name": "Joe Moeller",
        "timestamp": 1588289773
    },
    {
        "content": "<p>Social but especially economic. Large corporations have to see the \"green\" in both senses of the word. It could happen!</p>",
        "id": 195917825,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1588291648
    },
    {
        "content": "<p>In the first ACT conference, ACT2018, I tried to exclude computer science, to give other applications of category theory room to grow.  But in my talk there, I pointed out that every branch of science and engineering uses computers now, so the right route may be to blend computer science with category theory and then apply the resulting blend to everything else.</p>",
        "id": 195919882,
        "sender_full_name": "John Baez",
        "timestamp": 1588293448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/195919882\" title=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/195919882\">said</a>:</p>\n<blockquote>\n<p>In the first ACT conference, ACT2018, I tried to exclude computer science, to give other applications of category theory room to grow.  But in my talk there, I pointed out that every branch of science and engineering uses computers now, so the right route may be to blend computer science with category theory and then apply the resulting blend to everything else.</p>\n</blockquote>\n<p>You're talking about <em>scientific computing</em>, which is hardly at all related to <em>computer science</em>. Scientific computing is mostly done in departments like physics, chemistry, biology, engineering, economics, ........ And I think that the world changing stuff for us will be to target scientific computing, and bypass computer science</p>",
        "id": 195948867,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1588329422
    },
    {
        "content": "<p>I would have thought there's plenty of computer science being put into practice under the bonnet of scientific computing. I suppose you mean that in order to achieve a meaningful impact we should be targeting work at physicists, chemists etc. rather than computer scientists?</p>",
        "id": 195950576,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1588330849
    },
    {
        "content": "<p>Yep. Remember that most scientific computing is done in Fortran, which was state of the art as computer science about 70 years ago</p>",
        "id": 195950764,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1588331037
    },
    {
        "content": "<p>I thought it was done using proprietary vendor-specific GPU libraries...</p>",
        "id": 195950849,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588331102
    },
    {
        "content": "<p>eg Matlab</p>",
        "id": 195951539,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1588331790
    },
    {
        "content": "<p>I think both approaches are still prevelant.</p>",
        "id": 195953314,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1588333511
    },
    {
        "content": "<p>Python is pretty important as well these days for scientific computing.</p>",
        "id": 195966268,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1588343455
    },
    {
        "content": "<p>Yeah, MATLAB still has its adherents among the old-timers but times are changing. More and more scientific computing is being done using open source software, like Python, R, or Julia. I figure that in another generation or two MATLAB will be basically dead, unless it finds a way to reinvent itself.</p>",
        "id": 195991576,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1588356875
    },
    {
        "content": "<p>I don't think you can really \"target scientific computing and bypass computer science\" and do something wonderful without creating some new kind of computer science.</p>",
        "id": 196027596,
        "sender_full_name": "John Baez",
        "timestamp": 1588385080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/195919882\">said</a>:</p>\n<blockquote>\n<p>In the first ACT conference, ACT2018, I tried to exclude computer science, to give other applications of category theory room to grow.  But in my talk there, I pointed out that every branch of science and engineering uses computers now, so the right route may be to blend computer science with category theory and then apply the resulting blend to everything else.</p>\n</blockquote>\n<p>How would you handle manufacturing supply chains? They do use a lot of computers, but you can also analyze them in terms of resource flows, or input-ptocess-output models, or Petri nets.</p>",
        "id": 201440665,
        "sender_full_name": "Bob Haugen",
        "timestamp": 1592601127
    },
    {
        "content": "<p>According to the arbitrary academic boundaries we have been given, this is operations research and not really anything to do with computer science</p>",
        "id": 201445395,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592604520
    },
    {
        "content": "<p>In a better world we'd have the proper cross-discipline collaborations you need to properly study something like that</p>",
        "id": 201445432,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592604550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201445395\">said</a>:</p>\n<blockquote>\n<p>According to the arbitrary academic boundaries we have been given, this is operations research and not really anything to do with computer science</p>\n</blockquote>\n<p>Can you apply category theory to operations research? Or, why not?</p>\n<p>(P.S. At least it would get you away from computer science for a bit...)</p>",
        "id": 201446126,
        "sender_full_name": "Bob Haugen",
        "timestamp": 1592605102
    },
    {
        "content": "<p>This is something I'm thinking about. Some things work out, but anything to do with optimisation hasn't really worked out for me so far</p>",
        "id": 201446228,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592605194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201446228\">said</a>:</p>\n<blockquote>\n<p>...anything to do with optimisation hasn't really worked out for me so far</p>\n</blockquote>\n<p>Not me either. Optimization in manufacturing and supply chains is often way too flaky for practical application. Back in the day, an optimization software company that I know piloted their product in a manufacturing plant I know and got thrown out because every day the optimizing scheduler would reschedule everything. Simpler rules of thumb like sequence synchronization was almost as good and did not drive people crazy.</p>",
        "id": 201446514,
        "sender_full_name": "Bob Haugen",
        "timestamp": 1592605442
    },
    {
        "content": "<p>These folks <a href=\"https://www.organicvalley.coop/about-us/organic-food-co-op/\">https://www.organicvalley.coop/about-us/organic-food-co-op/</a> who are 5 miles from me, use some linear-programming-related software for coordinating milk supply chains, which are insanely complex, but it's not as fiddly and they seem to be able to make it work.</p>",
        "id": 201447240,
        "sender_full_name": "Bob Haugen",
        "timestamp": 1592606055
    },
    {
        "content": "<p>Huhhh, why is it always milk? I started thinking a bunch about linear programming for supply chains exactly because my colleague Viktor Winschel was working with someone doing milk supply chain optimisation in Germany</p>",
        "id": 201447677,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592606493
    },
    {
        "content": "<p>It's clearly a setting where a very tiny improvement would have a massive impact</p>",
        "id": 201447760,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592606576
    },
    {
        "content": "<p>I built a categorical setting for describing optimisation problems compositionally (using decorated cospans) and I was pretty pleased with myself. Then I realised that argmax isn't functorial - even for linear optimisation - and then pretty much gave up</p>",
        "id": 201447853,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592606702
    },
    {
        "content": "<p>It's just a fact, the solution of an optimisation problem doesn't arise from solutions to parts of the problem. That seems to be something that's true independently of any particular way of formalising it</p>",
        "id": 201447951,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592606810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201447677\">said</a>:</p>\n<blockquote>\n<p>Huhhh, why is it always milk? I started thinking a bunch about linear programming for supply chains exactly because my colleague Viktor Winschel was working with someone doing milk supply chain optimisation in Germany</p>\n</blockquote>\n<p>Some of the complications in milk supply chains: for one thing, milk is perishable. For another, the supply needs to be picked up at lots of dairy farms and then transported to processors in compatible locations who have limited capacity and hours of work. And then the demand is limited and variable and has different prices (eg organic milk vs non-organic milk which is cheaper but absorbs some of the over-supply).</p>\n<p>So it's an interesting problem and the solutions are worth a lot of money.</p>",
        "id": 201451002,
        "sender_full_name": "Bob Haugen",
        "timestamp": 1592610166
    },
    {
        "content": "<p>I don't know enough about manufacturing supply chains to say anything profound about them.  I will however mention that <a href=\"https://www.investopedia.com/terms/p/pert-chart.asp\">PERT charts</a>, widely used in project management, can be understood using <a href=\"https://golem.ph.utexas.edu/category/2013/03/project_planning_parallel_proc.html\">enriched copresheaves</a>.</p>",
        "id": 201456663,
        "sender_full_name": "John Baez",
        "timestamp": 1592618067
    },
    {
        "content": "<p>This math is connected to tropical algebra, and people use a lot of tropical algebra in railway timetable optimization - in fact there was a <a href=\"https://golem.ph.utexas.edu/category/2018/05/tropical_mathematics_and_optim.html\">conference on that in Birmingham</a>.</p>",
        "id": 201459537,
        "sender_full_name": "John Baez",
        "timestamp": 1592623877
    },
    {
        "content": "<p>My work on network models could also be seen as touching on operations research, though maybe it'd be called something else.  I wrote 9 blog articles on this here:</p>\n<ul>\n<li><a href=\"https://johncarlosbaez.wordpress.com/2016/10/02/complex-adaptive-system-design-part-1/\">Complex adaptive system design</a>.</li>\n</ul>",
        "id": 201459638,
        "sender_full_name": "John Baez",
        "timestamp": 1592624140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201447951\">said</a>:</p>\n<blockquote>\n<p>It's just a fact, the solution of an optimisation problem doesn't arise from solutions to parts of the problem. That seems to be something that's true independently of any particular way of formalising it</p>\n</blockquote>\n<p>I find this to be a counter-intuitive statement. If I imagine a classical \"shortest path on a manifold\" optimization problem, any optimal solution has got to be locally optimal, which is to say geodesic, so in this sense it is composed of optimal parts of smaller problems. If I do this in a discrete graph setting instead, I can see how gluing in an edge could discontinuously change the global optimal path, but on the other hand there are some invariants such as cohomology that detect the possibility of that change (if I glue in an edge that reduces the distance between two points, I must have introduced a new loop into the graph, which is detected by a change in the first cohomology group, for example). Cohomology <em>is</em> functorial, and for finitely presented problems it's also relatively well-behaved. Also, for the simplest composition where graphs equipped with a source and target vertex are glued source-to-target, the shortest route in the composite graph is again constructed from the optimal solutions to the individual graphs...<br>\nSo where do the obstacles to compositionality that you're alluding to come from?</p>",
        "id": 201470328,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1592645976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277473\">[Mod] Morgan Rogers</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201470328\">said</a>:</p>\n<blockquote>\n<p>If I imagine a classical \"shortest path on a manifold\" optimization problem, any optimal solution has got to be locally optimal, which is to say geodesic, so in this sense it is composed of optimal parts of smaller problems.</p>\n</blockquote>\n<p>This is, more or less, a description of the <a href=\"https://en.wikipedia.org/wiki/Hill_climbing\">hill climbing algorithm</a>, which is known to get stuck on local optima. It is true that any optimal solution to the shortest path problem has to be locally optimal, but coming up with the trajectory for that shortest path is not intuitive. </p>\n<p>For a classic example, consider the shortest path for an intercontinental flight, say, London to Sydney. The path is locally geodesic, but on a flat map, the resulting path looks like a parabola. If you try to piece together the shortest path using connecting flights, say London-&gt;Dubai-&gt;Sydney, you'd not arrive at the actual globally optimal solution. The obstruction is the curvature of the Earth, or the curvature of the manifold in general.</p>",
        "id": 201471485,
        "sender_full_name": "(=_=)",
        "timestamp": 1592648049
    },
    {
        "content": "<p>Right.... I tried to lead other people down the route of thinking about obstructions to compositionality like this (I gave up on doing it myself, since I can't get my head around cohomology at all)</p>",
        "id": 201472153,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592649357
    },
    {
        "content": "<p>In my particular case, I had a setup where composing morphisms/diagrams corresponded to pointwise addition of objective functions, plus variable sharing. (I wrote about it somewhere on here, I can dig out that thread if you're interested). In the case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> have disjoint domains then the optimum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>+</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f + g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is indeed the optimum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> together with the optimum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span>. But as soon as they share an input, the optima of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>+</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f + g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> can be completely disjoint from the optima of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> individually</p>",
        "id": 201472290,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592649560
    },
    {
        "content": "<p>Eg. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f (x) = -x^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> (optimum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>) and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">g (x) = -(x - 1)^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> (optimum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>), the sum has optimum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x = 1/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></p>",
        "id": 201472355,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592649620
    },
    {
        "content": "<p>And part of the reason I tried to use + for composition is that I know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>max</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\max</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mop\">max</span></span></span></span> and + play nicely with each other</p>",
        "id": 201472377,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592649675
    },
    {
        "content": "<p>But not <em>that</em> nicely</p>",
        "id": 201472378,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592649686
    },
    {
        "content": "<p>argmax is just horrible all round, it's not even continuous (but if you restrict it to linear functions I think it's something like upper-semicontinuous, which is ok)</p>",
        "id": 201472557,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592649969
    },
    {
        "content": "<p>So one of the things I'm thinking about at the moment is to come up with a compositional structure on linear programs which is (1) useful for specifying linear programs in practice, and (2) makes solving functorial in <em>some</em> reasonable sense</p>",
        "id": 201472760,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592650439
    },
    {
        "content": "<p>Lots of interesting readings! I also want to give credit to \"Seven Sketches in Compositionality\" by <span class=\"user-mention\" data-user-id=\"276053\">@Brendan Fong</span> and <span class=\"user-mention\" data-user-id=\"276049\">@David Spivak</span> for first tipping me off that category theory would be useful for composing supply chains and other economic networks.  Also introduced us to string diagrams, which we have adopted as a visual language. <a href=\"https://github.com/valueflows/valueflows/issues/507\">https://github.com/valueflows/valueflows/issues/507</a></p>",
        "id": 201473659,
        "sender_full_name": "Bob Haugen",
        "timestamp": 1592652048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201472290\">said</a>:</p>\n<blockquote>\n<p>In my particular case, I had a setup where composing morphisms/diagrams corresponded to pointwise addition of objective functions, plus variable sharing. (I wrote about it somewhere on here, I can dig out that thread if you're interested). </p>\n</blockquote>\n<p>For anyone who's interested, the topic was <a class=\"stream-topic\" data-stream-id=\"229156\" href=\"/#narrow/stream/229156-practice.3A-applied-ct/topic/measuring.20non-compositionality\">#practice: applied ct &gt; measuring non-compositionality</a> and the comment where this was described is <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/measuring.20non-compositionality/near/191621333\">here</a>.</p>",
        "id": 201475920,
        "sender_full_name": "(=_=)",
        "timestamp": 1592656268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201472153\">said</a>:</p>\n<blockquote>\n<p>Right.... I tried to lead other people down the route of thinking about obstructions to compositionality like this (I gave up on doing it myself, since I can't get my head around cohomology at all)</p>\n</blockquote>\n<p>Right... don't feel so bad. This is why mainstream economics is terrible as well: they can't get their head around cohomology.</p>",
        "id": 201475973,
        "sender_full_name": "(=_=)",
        "timestamp": 1592656405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201472760\">said</a>:</p>\n<blockquote>\n<p>So one of the things I'm thinking about at the moment is to come up with a compositional structure on linear programs which is (1) useful for specifying linear programs in practice, and (2) makes solving functorial in <em>some</em> reasonable sense</p>\n</blockquote>\n<p>So what they did in mainstream economics was to restrict everything to linear (and maybe quadratic) programs. For example, they impose the \"law\" of demand that market demand curves are always downward-sloping (i.e. monotonically decreasing), which immediately excludes any polynomial functions of degree &gt;2 from being a market demand function, to ensure that there is a unique equilibrium (the point at which demand intersects supply). </p>\n<p>However, this doesn't work even when you have rational utility-maximising consumers, by the <a href=\"https://en.wikipedia.org/wiki/Sonnenschein%E2%80%93Mantel%E2%80%93Debreu_theorem\">SMD theorem</a>, which basically says <em>any</em> polynomial function can arise as a market demand function. Which is why I said \"impose\": the \"law\" has to be by fiat, because mathematical reality will not comply with the mainstream economic theory.</p>\n<p>But mainstream economics plods on regardless, because the SMD theorem implies the non-uniqueness of market equilibrium, which means that economic policy becomes debatable, and ain't nobody got time for that apparently. This is despite the fact that the theorem was proven by three mainstream mathematical economists. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 201476426,
        "sender_full_name": "(=_=)",
        "timestamp": 1592657250
    },
    {
        "content": "<p>Re. this <a href=\"https://twitter.com/fabgenovese/status/1274313849752125440\">tweet</a> by Fabrizio: well... it kinda needs more work than that.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/fabgenovese/status/1274313849752125440\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/982993493240041473/TrBteZrG_normal.jpg\"></a><p><a href=\"https://twitter.com/_julesh_\">@_julesh_</a> The most reasonable starting point then would be \"complexity as cohomology\".</p><span>- Fabrizio Romano Genovese (@fabgenovese)</span></div></div>",
        "id": 201478646,
        "sender_full_name": "(=_=)",
        "timestamp": 1592661457
    },
    {
        "content": "<p>To start with, cohomology groups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mo lspace=\"0em\" rspace=\"0em\">∙</mo></msup><mo>:</mo><mo>=</mo><mtext>ker</mtext><mo stretchy=\"false\">(</mo><msub><mi>d</mi><mo lspace=\"0em\" rspace=\"0em\">∙</mo></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mtext>im</mtext><mo stretchy=\"false\">(</mo><msub><mi>d</mi><mo lspace=\"0em\" rspace=\"0em\">∙</mo></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^{\\bullet} := \\textrm{ker}(d_{\\bullet}) / \\textrm{im}(d_{\\bullet})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∙</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">ker</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16111499999999998em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord text\"><span class=\"mord textrm\">im</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16111499999999998em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are usually defined as quotients of classes of things, and these classes tend to come up as kernels and images of some operators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><msub><mi>C</mi><mi>i</mi></msub><mo>→</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">d_i\\colon C_i \\to C_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> (which square to zero, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>∘</mo><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d_{i+1} \\circ d_i = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>) connecting some sequence (a <em>chain complex</em>) of nice objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (usually abelian groups or modules).</p>",
        "id": 201479534,
        "sender_full_name": "(=_=)",
        "timestamp": 1592663038
    },
    {
        "content": "<p>It's not immediately clear to me how you'd define these things in complexity theory, since all you have are complexity classes, which are classes of <em>problems</em> that can be solved using mechanisms with some fixed property, but no maps that can serve as the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>'s.</p>",
        "id": 201479573,
        "sender_full_name": "(=_=)",
        "timestamp": 1592663050
    },
    {
        "content": "<p>What I think could be helpful is to try not to squeeze complexity theory into homological algebra, but to see how to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-categorical objects that would encode the homotopy-theoretic information in complexity classes. <span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> has talked about how homological algebra represents a loss of information <a href=\"#narrow/stream/232163-learning.3A-history.20of.20ideas/topic/History.20of.20Ideas.20AMA.3A.20John.20Baez/near/198543464\">here</a> and <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/.22Linearization.22/near/199202405\">here</a>.</p>",
        "id": 201479578,
        "sender_full_name": "(=_=)",
        "timestamp": 1592663060
    },
    {
        "content": "<p>I think a hint of why this would be useful is how Jules has found that there's an <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/measuring.20non-compositionality/near/191600643\">obstruction to compositionality in the form of laxness</a>. This suggests the presence of homotopical information that should be investigated further.</p>",
        "id": 201479591,
        "sender_full_name": "(=_=)",
        "timestamp": 1592663132
    },
    {
        "content": "<p>Found this reference, which gives a crystal clear introduction:  </p>\n<ul>\n<li>Ian Dewan, <a href=\"https://alistairsavage.ca/pubs/Dewan-Graph_Homology.pdf\">Graph homology and cohomology</a>.</li>\n</ul>\n<p>Abstract. We provide an introduction to graph homology and cohomology,<br>\ngiving the definitions of four homology and cohomology theories of graphs, and<br>\nproving some results on the relation between the combinatorial and topological<br>\nproperties of graphs and their homology. The only required background is<br>\nundergraduate algebra.</p>",
        "id": 201493664,
        "sender_full_name": "David Tanzer",
        "timestamp": 1592681844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/measuring.20non-compositionality/near/191620571\">said</a>:</p>\n<blockquote>\n<p>An example where functorality fails is reachability in open graphs, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F (f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> is the pairs of boundary vertices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is reachable from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> (say, directed graphs for now). Composition is by glueing boundary vertices. Then you can make an example where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is reachable from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo separator=\"true\">;</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f;g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span>, but there is no boundary <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> reachable from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> reachable from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. Clue: you need to loop back and cross the boundary 3 times</p>\n</blockquote>\n<p>Ah this example was what I was looking for, I didn't realise this had already been discussed. So it's not even a matter of \"conditional optimization\" (optimizing on each piece conditionally on passing through the intermediate set of vertices at a particular vertex, then optimizing over the boundary); we can have... squiggles! And things can be arbitrarily bad on this front, with many many squiggles.</p>",
        "id": 201498716,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1592688488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276424\">Rongmin Lu</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201475973\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201472153\">said</a>:</p>\n<blockquote>\n<p>Right.... I tried to lead other people down the route of thinking about obstructions to compositionality like this (I gave up on doing it myself, since I can't get my head around cohomology at all)</p>\n</blockquote>\n<p>Right... don't feel so bad. This is why mainstream economics is terrible as well: they can't get their head around cohomology.</p>\n</blockquote>\n<p>I feel I understand cohomology very well, but I'm not sure how it's supposed to help with anything like economics.  I can vaguely imagine it might, but I sure don't see how in any sort of detail.</p>",
        "id": 201499454,
        "sender_full_name": "John Baez",
        "timestamp": 1592689722
    },
    {
        "content": "<p>There is a way of turning this around so that we can still understand the new shorter (ie finite) path as arising from a loop which might be identified by cohomology, or some higher categorical gadgets, if Rongmin's link to John's comments is pursued. First observe that we can transform this into a finitary problem, by adding in a long path into each open graph from the single source vertex to the disconnected target vertices (and the dual on the other side), long enough that the squiggle obtained by gluing the vertices gives a shorter path. The disconnected version is a limit as the length of these artificial paths tend to infinity. But irrespective of the lengths of the added paths, by drawing them in you can see the loops which are formed by the gluing, and it's by \"taking the other route around them\" that the new optimal route is found.<br>\nI don't know if that's clear or helpful, but my personal conclusion is that when an optimization problem comes from a cobordism category, there is some hope of cohomology guiding the solution.<br>\nHow or whether this is relevant to the addition of functions example, I don't know!</p>",
        "id": 201499529,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1592689821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201499454\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276424\">Rongmin Lu</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201475973\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201472153\">said</a>:</p>\n<blockquote>\n<p>Right.... I tried to lead other people down the route of thinking about obstructions to compositionality like this (I gave up on doing it myself, since I can't get my head around cohomology at all)</p>\n</blockquote>\n<p>Right... don't feel so bad. This is why mainstream economics is terrible as well: they can't get their head around cohomology.</p>\n</blockquote>\n<p>I feel I understand cohomology very well, but I'm not sure how it's supposed to help with anything like economics.  I can vaguely imagine it might, but I sure don't see how in any sort of detail.</p>\n</blockquote>\n<p>Sorry, this was probably a bit too sleek. When I said \"cohomology\", I'm referring to nonlinearity, i.e. \"obstructions\" to linearity.</p>",
        "id": 201502374,
        "sender_full_name": "(=_=)",
        "timestamp": 1592693881
    },
    {
        "content": "<p>As I've explained <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201476426\">here</a>, the mainstream school of economics, neoclassical economics or \"marginalism\" (because they're always talking about \"marginal\" stuff, so that they can use first-year calculus), enforces linearisation so that their theory can work. <br>\nThis is despite, and due to, the fact that they have proven the <a href=\"https://en.wikipedia.org/wiki/Sonnenschein%E2%80%93Mantel%E2%80%93Debreu_theorem\">SMD theorem</a>, which says that market demand functions are almost always nonlinear <em>even if</em> you assume that the market participants are all rational utility-maximising agents, which guarantees that each of the <em>individual</em> demand functions are linear.</p>",
        "id": 201503352,
        "sender_full_name": "(=_=)",
        "timestamp": 1592695039
    },
    {
        "content": "<p>Mainstream economics also assumes away the existence of time, because their methods are static by nature as they don't consider dynamical systems at all. That is something that Keynes has already <a href=\"https://en.wikiquote.org/wiki/John_Maynard_Keynes\">observed</a>:</p>\n<blockquote>\n<p>But this long run is a misleading guide to current affairs. In the long run we are all dead. Economists set themselves too easy, too useless a task, if in tempestuous seasons they can only tell us, that when the storm is long past, the ocean is flat again.</p>\n</blockquote>\n<p>It is on this basis that Keynes talks about \"uncertainty\" in his theory, rather than the more easily quantifiable \"risk\" that people talk about today.</p>",
        "id": 201503560,
        "sender_full_name": "(=_=)",
        "timestamp": 1592695303
    },
    {
        "content": "<p>Ole Peters has this nice <a href=\"https://www.youtube.com/watch?v=f1vXAHGIpfc\">talk</a> where he expounds on the importance of considering time in economics, because many economic processes are non-ergodic in nature. He does something called \"ergodicity economics\", which seems to me to be putting Keynes' theory of uncertainty on a more rigorous basis. And in that talk, he claims he can publish his work in most prestigious journals -- with the notable exception of mainstream economics journals, because they have been explicitly rejecting, for decades now, papers that violate the \"linearisation\" I talked about in the above.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"f1vXAHGIpfc\" href=\"https://www.youtube.com/watch?v=f1vXAHGIpfc\"><img src=\"https://i.ytimg.com/vi/f1vXAHGIpfc/default.jpg\"></a></div>",
        "id": 201503790,
        "sender_full_name": "(=_=)",
        "timestamp": 1592695578
    },
    {
        "content": "<p>I'm not sure I understand the intuition behind this <a href=\"https://twitter.com/_julesh_/status/1274295344948555777\">tweet</a> of <span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span>. You can have functors that are not easy to compute. The higher homotopy group functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are an example: see Hatcher's <a href=\"https://pi.math.cornell.edu/~hatcher/AT/ATch4.pdf\">Chapter 4</a> of his textbook, <em>Algebraic Topology</em>, for a proof of their functorality. However, computing the <a href=\"https://en.wikipedia.org/wiki/Homotopy_groups_of_spheres\">higher homotopy groups of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">S^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></a> is still a very difficult problem.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/_julesh_/status/1274295344948555777\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/972424350736486401/RyVTQIgf_normal.jpg\"></a><p>Underrated idea: complexity classes as barriers to compositionality. I'm no expert on complexity theory, but I quite often do informal reasoning like \"if this functor existed then that problem would be easy to solve, but it's hard to solve, therefore the functor can't exist\"</p><span>- julesh (@_julesh_)</span></div></div>",
        "id": 201504083,
        "sender_full_name": "(=_=)",
        "timestamp": 1592696017
    },
    {
        "content": "<p>Jules has elaborated a bit on his intuition <a href=\"https://twitter.com/_julesh_/status/1274299384600186881\">here</a>, but it's still a bit baffling to me without seeing all the details.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/_julesh_/status/1274299384600186881\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/972424350736486401/RyVTQIgf_normal.jpg\"></a><p><a href=\"https://twitter.com/LucaAmb\">@LucaAmb</a> The one I thought about the most is Nash equilibria of open games. If they were described by a functor in the most obvious way then you would be able to compute Nash equilibria in linear time in the complexity of the game. In reality it's an exponential time problem</p><span>- julesh (@_julesh_)</span></div></div>",
        "id": 201504149,
        "sender_full_name": "(=_=)",
        "timestamp": 1592696120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276424\">Rongmin Lu</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201478646\">said</a>:</p>\n<blockquote>\n<p>Re. this <a href=\"https://twitter.com/fabgenovese/status/1274313849752125440\">tweet</a> by Fabrizio: well... it kinda needs more work than that.</p>\n</blockquote>\n<p>I think that for your own mental sanity it's worth to spell this out: At least for me, Twitter is <strong>NOT</strong> a faithful representation of what I'm thinking, researching on, or even caring about. 50% of my tweets is trolling, 45% is just my brain farting and 5% is something that may MAYBE become an actual insight.  I am pretty sure this applies to the majority of people out there tweeting.<br>\nAs for my own mental sanity instead, I'm quite depressed, at the moment I feel like my work and life are worthless, and I am sure there are many other people like me out there. For MANY of us just losing a bit of time on Twitter is one of the few ways we have to relieve a bit of fucking stress in a too much suffocating world. If I have to think twice about what I am tweeting because everything may get scrutinized and quoted on this platform like a factual statement then you are literally doing me more harm than good. So please take a tweet for what it is (a fucking tweet) and not necessarily as a serious research proposition. Now I'll go burning out elsewhere, cheers.</p>",
        "id": 201505045,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1592697143
    },
    {
        "content": "<p>Come on, Rongmin. Fabrizio said he's in a really bad mood, feeling his work is worthless. Be nice.</p>",
        "id": 201506720,
        "sender_full_name": "John Baez",
        "timestamp": 1592698940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201505045\">said</a>:</p>\n<blockquote>\n<p>As for my own mental sanity instead, I'm quite depressed, at the moment I feel like my work and life are worthless, and I am sure there are many other people like me out there. </p>\n</blockquote>\n<p>I'm sorry to hear that and I'm sure you have your reasons for thinking that. It may help if you can examine those reasons critically, because from my perspective, it's not clear to me why that's the case. People seem to love what Statebox is doing, at least on here, and I'm not aware of any dissenting opinions. If it's a business issue, there are answers out there, since there are many other people who're (or have been) startup founders out there. You just have to ask.</p>",
        "id": 201506722,
        "sender_full_name": "(=_=)",
        "timestamp": 1592698942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201506720\">said</a>:</p>\n<blockquote>\n<p>Come on, Rongmin. Fabrizio said he's in a really bad mood, feeling his work is worthless. Be nice.</p>\n</blockquote>\n<p>I'm trying, but I'm responding to a <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201505045\">comment</a> that started with \"I think that for your own sanity it's worth spelling out\".</p>",
        "id": 201506730,
        "sender_full_name": "(=_=)",
        "timestamp": 1592698972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201505045\">said</a>:</p>\n<blockquote>\n<p>So please take a tweet for what it is (a fucking tweet) and not necessarily as a serious research proposition. </p>\n</blockquote>\n<p>But serious research propositions can <em>come out of</em> thinking about \"fucking tweets\", or indeed any non-serious thing. I mean, the whole idea of \"a group is just a category with one object\" started out <em>as a joke</em> that was taken seriously with serious consequences for CT. </p>\n<p>Note that what I said about your tweet was it \"needs more work\": I did NOT say it was a bad idea. I think it's moving in the right direction. What it needs is more refinement, but that's what research propositions are: they need more work, otherwise they'd just be factual statements.</p>",
        "id": 201507055,
        "sender_full_name": "(=_=)",
        "timestamp": 1592699421
    },
    {
        "content": "<p>The way I see it, \"complexity as cohomology\" is at least plausibly a very good idea, but it might take 100 years to work out the details</p>",
        "id": 201528469,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592735504
    },
    {
        "content": "<p>In the sense of being a general theory of \"no, you can't do that\"</p>",
        "id": 201528532,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592735551
    },
    {
        "content": "<p>Complexity theory is, in a sense, exactly the study of obstructions to the existence of algorithms</p>",
        "id": 201528539,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1592735578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201528469\">said</a>:</p>\n<blockquote>\n<p>The way I see it, \"complexity as cohomology\" is at least plausibly a very good idea, but it might take 100 years to work out the details</p>\n</blockquote>\n<p>My hunch is it probably needs more homotopy type theory. Also, there may not be enough information on the homological algebra level: that's why I mentioned John's description of homological algebra as a kind of \"linearisation\" of higher objects.</p>",
        "id": 201613088,
        "sender_full_name": "(=_=)",
        "timestamp": 1592836470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/the.20big.20picture/near/201528539\">said</a>:</p>\n<blockquote>\n<p>Complexity theory is, in a sense, exactly the study of obstructions to the existence of algorithms</p>\n</blockquote>\n<p>Exactly. There used to be something called <em><a href=\"https://en.wikipedia.org/wiki/Obstruction_theory\">obstruction theory</a></em>, which yielded cohomological invariants. So if by \"cohomology\", you mean a theory of obstructions, then \"complexity as cohomology\" makes sense.</p>\n<p>I think it may be worthwhile to study the old obstruction theory papers for ideas as to how to make things more concrete. What they were doing back then would probably have seemed to them to be doing something really ambitious, trying to whip something so hopelessly vague into some formal mathematical structure. I mean, category theory was developed to formalise the heuristic and seemingly hand-wavy notion of what it meant for some transformation to be \"natural\"!</p>",
        "id": 201613623,
        "sender_full_name": "(=_=)",
        "timestamp": 1592836739
    }
]