[
    {
        "content": "<p>Hello all, we have gotten some reviews back. Curiously the reviewers asked us to say why the 90s ct work with security failed. I was not aware of such work, the reviewer didn't provide any examples. The only person I can think of is <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> and we have already cited recent work in cryptography and CT. Anyways, anybody that knows anything about this please let me know.</p>\n<p>I'll take work on coalgebras and security modeling as well if anybody knows of it. Microsoft academic and google scholar is pulling a blank</p>",
        "id": 220278933,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1608227965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span></p>",
        "id": 220284804,
        "sender_full_name": "Eric Forgy",
        "timestamp": 1608230755
    },
    {
        "content": "<p>Sorry, I only got into CT around 2007; I've never heard anything about CT in security beyond static analysis and formal crypto.</p>",
        "id": 220326057,
        "sender_full_name": "Mike Stay",
        "timestamp": 1608254119
    },
    {
        "content": "<p>Could you send some examples of this work?</p>",
        "id": 220332788,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1608261068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> forgot to ping my bad</p>",
        "id": 220389202,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1608307123
    },
    {
        "content": "<p>Here's a random selection of stuff.</p>\n<p><a href=\"https://math.berkeley.edu/~izaak/assets/cryptocat.pdf\">https://math.berkeley.edu/~izaak/assets/cryptocat.pdf</a><br>\n<a href=\"https://research.fb.com/wp-content/uploads/2016/11/from_categorical_logic_to_facebook_engineering.pdf\">https://research.fb.com/wp-content/uploads/2016/11/from_categorical_logic_to_facebook_engineering.pdf</a><br>\n<a href=\"https://www.youtube.com/watch?v=Njw5Aad-gBQ\">https://www.youtube.com/watch?v=Njw5Aad-gBQ</a><br>\n<a href=\"https://www.sciencedirect.com/science/article/pii/S089054019…-S0890540198927407-main.pdf&amp;usg=AOvVaw3Q0jqZDh3ph5tHI6Piie4N\">https://www.sciencedirect.com/science/article/pii/S089054019…-S0890540198927407-main.pdf&amp;usg=AOvVaw3Q0jqZDh3ph5tHI6Piie4N</a><br>\n<a href=\"https://www.sciencedirect.com/science/article/pii/S1567832604000049\">https://www.sciencedirect.com/science/article/pii/S1567832604000049</a><br>\n<a href=\"http://web.stanford.edu/class/cs259/WWW04/lectures/13-Security%20in%20Process%20Calculi.pdf\">http://web.stanford.edu/class/cs259/WWW04/lectures/13-Security%20in%20Process%20Calculi.pdf</a><br>\n<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-54789-8_19\">https://link.springer.com/chapter/10.1007/978-3-642-54789-8_19</a><br>\n<a href=\"https://arxiv.org/abs/1301.3393\">https://arxiv.org/abs/1301.3393</a><br>\n<a href=\"https://dl.acm.org/doi/10.1145/2641483.2641529\">https://dl.acm.org/doi/10.1145/2641483.2641529</a></p>",
        "id": 220394460,
        "sender_full_name": "Mike Stay",
        "timestamp": 1608309156
    },
    {
        "content": "<p>Thanks a bunch!</p>",
        "id": 220403759,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1608313027
    },
    {
        "content": "<p>sorry that i didn't notice this question. you should have asked me directly.</p>\n<p>to me, asking whether there is work applying CT to security is like asking whether there are novels in german about fashion.  the problem with that question is that any novel about fashion can be translated to german, and that any novel in german about fashion can be translated to other languages. grothendieck nearly proved the weil conjecture in CT a couple of itmes, but passed by it, since there was more to it than that. then deligne spelled it out, and then others translated it out of CT. on the other hand, almost every result in almost anything can be translated into CT. the question is whether it helps, and whether it becomes easier to sing in the new langauge.</p>\n<p>i wrote a bunch of papers on security, and if you read them and know categories, you will find categories are always there, whether i mention them or not. but i think in categories, and they are in all my papers. but i worked in various communities, including security protocols, and in many of them if you want to empty the room, you say \"categories\" and everyone leaves. so you adapt the language. that social effect is at least to some extent a consequence that the category theory community at some point in the 70s started sounding like a political party. eilenberg hated that, but others had such instincts. so people started thinking of it as some sort of ideology. and such misunderstandings have a self-realizing power...</p>\n<p>all of my protocol analysis work was based on a process model, the cord calculus. all such process models are monoial categories: see eg \"Categorical logic of names and abstraction\" from late 90s. i think in MSCS. so every protocol analysis that you see in any of the papers (eg we broke the GDOI option of IPSec like 6 months after it got standardized) was worked out in a  monoidal category. the tool that we built and delivered (was still in use in 2013) --- was an implementation of monoidal categories with an s-expression API. i think we announced the GDOI fix in ESORICS, could be 2004?...</p>\n<p>explicitly categorical model was i think<br>\n<a href=\"https://arxiv.org/abs/1203.6324\">https://arxiv.org/abs/1203.6324</a><br>\nnot sure whether we use explicit functors in<br>\n<a href=\"https://arxiv.org/abs/1106.0706\">https://arxiv.org/abs/1106.0706</a><br>\nbut that setup is fairly obviously a pair of fibrations Logic (views) ---&gt; Processes ---&gt; Network.<br>\nthis<br>\n<a href=\"https://arxiv.org/abs/0802.1306\">https://arxiv.org/abs/0802.1306</a><br>\nwas also implemented: using i think twisted comma construction to detect link farming.<br>\nthat model was reused over and over in various tools:<br>\n<a href=\"https://arxiv.org/abs/1011.5696\">https://arxiv.org/abs/1011.5696</a><br>\nfunny enough, expanding the spectral decomposition <em>applications</em>  led to the \"pure\" result which i cherish more than the rest of it together:<br>\n<a href=\"https://arxiv.org/abs/2004.07353\">https://arxiv.org/abs/2004.07353</a><br>\nbut SORRY for pushing my work. people become talkative as they age :)</p>",
        "id": 222409455,
        "sender_full_name": "dusko",
        "timestamp": 1610444795
    },
    {
        "content": "<p>This answer should be required reading for everyone who asks about applied category theory-in-the-recent-sense</p>",
        "id": 222412109,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1610446518
    },
    {
        "content": "<p>Great answer, <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span>.  On a completely irrelevant note, I don't think this is accurate:</p>\n<blockquote>\n<p>grothendieck nearly proved the weil conjecture in CT a couple of times, but passed by it, since there was more to it than that. then deligne spelled it out, and then others translated it out of CT.</p>\n</blockquote>\n<p>There are a number of Weil conjectures, Grothendieck developed a lot of mathematics to prove them and succeeded in proving all but the final, most interesting one - an analogue of the Riemann Hypothesis for function fields of algebraic varieties.   He succeeded in reducing this to some conjectures now called the <a href=\"https://en.wikipedia.org/wiki/Standard_conjectures_on_algebraic_cycles\">standard conjectures</a>, but these remain unproved to this day!  Then Deligne came in and used Grothendieck's ideas together with <a href=\"https://en.wikipedia.org/wiki/Weil_conjectures#Deligne's_first_proof_of_the_Riemann_hypothesis_conjecture\">a bunch of very different ideas of his own</a> to finish the job.</p>",
        "id": 222456304,
        "sender_full_name": "John Baez",
        "timestamp": 1610468907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/222456304\">said</a>:</p>\n<blockquote>\n<p>Great answer, <span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span>.  On a completely irrelevant note, I don't think this is accurate:</p>\n<blockquote>\n<p>grothendieck nearly proved the weil conjecture in CT a couple of times, but passed by it, since there was more to it than that. then deligne spelled it out, and then others translated it out of CT.</p>\n</blockquote>\n<p>There are a number of Weil conjectures, Grothendieck developed a lot of mathematics to prove them and succeeded in proving all but the final, most interesting one - an analogue of the Riemann Hypothesis for function fields of algebraic varieties.   He succeeded in reducing this to some conjectures now called the <a href=\"https://en.wikipedia.org/wiki/Standard_conjectures_on_algebraic_cycles\">standard conjectures</a>, but these remain unproved to this day!  Then Deligne came in and used Grothendieck's ideas together with <a href=\"https://en.wikipedia.org/wiki/Weil_conjectures#Deligne's_first_proof_of_the_Riemann_hypothesis_conjecture\">a bunch of very different ideas of his own</a> to finish the job.</p>\n</blockquote>\n<p>i said \"<em>nearly</em> proved\" didni :)) can any statement about history be accurate? as the word says: it's all hi stories. but you are right, we should at least try to make sure that the hi-cells are groupoids :)</p>",
        "id": 222539804,
        "sender_full_name": "dusko",
        "timestamp": 1610519980
    },
    {
        "content": "<p>There is this paper, <code>Universally composable security: A new paradigm for cryptographic protocols</code>, that is widely cited (&gt;3k) for cryptographic protocols  -- the original is from 2000 but its been continuously evolving. </p>\n<p>what do you guys thing of this? and what are its parallels to CT?</p>\n<p><a href=\"https://eprint.iacr.org/2000/067.pdf\">https://eprint.iacr.org/2000/067.pdf</a></p>",
        "id": 226804973,
        "sender_full_name": "zkao",
        "timestamp": 1613652709
    },
    {
        "content": "<p>Hi, <br>\n  I have described what I think a very efficient security protocol for the web,  which I called <a href=\"https://github.com/bblfish/authentication-panel/blob/HttpSig/HttpSignature.md\">HttpSig</a> which is both pretty simple and is needed to build a decentralised social web. (some initial <a href=\"https://github.com/solid/authentication-panel/pull/125\">discussion</a>). This may be too simple to be able to do formal analysis on, but perhaps not? (I assume cryptographers have done their job, so I am not sure if this falls under cryptographic protocols, as used in the above paper). </p>\n<p>(The complexity arises at the next stage when describing the reasoning of how User-Agents can determine if they should be granted access given some credentials they have and the rules published by the resource, and how Guards can determine if the User Agent is allowed access given a submitted proof. We would like to be able to use DL reasoning there, as that is well studied. )</p>",
        "id": 226830900,
        "sender_full_name": "Henry Story",
        "timestamp": 1613663523
    },
    {
        "content": "<p>Security related: The W3C Verifiable Credentials Group is looking for reviews of the document attached to this email <a href=\"https://lists.w3.org/Archives/Public/public-credentials/2021Mar/0220.html\">RDF Dataset Canonicalization - Formal Proof</a>.  <br>\nThere will very likely be a W3C Working Group on the subject soon. So further mathematical insight would be very valuable. There is a history of papers (many from HP) going back at least to 2004 on this subject. See the mailing list thread for further references.</p>",
        "id": 232116088,
        "sender_full_name": "Henry Story",
        "timestamp": 1616876813
    },
    {
        "content": "<p>The W3C is starting work on a charter for Linked Data Signatures <a href=\"https://lists.w3.org/Archives/Public/public-credentials/2021Mar/0273.html\">as per mail to the Credentials Community Group</a> today. There'll be graphs, hypergraphs, URIs and crypto discussions involved, and mathematical  proofs of correctness will play a major role - even if they have to be balanced with a lot of practical considerations.</p>",
        "id": 232466908,
        "sender_full_name": "Henry Story",
        "timestamp": 1617126129
    },
    {
        "content": "<p>Kevin Buzzard wrote on the Lean zulip </p>\n<blockquote>\n<p>My reading of the Formal Proof document is that this is someone using the phrase \"formal proof\" the way that a mathematician would use the phrase \"proof\" and a computer formaliser person would use the phrase \"paper proof\".</p>\n</blockquote>\n<p>To which I replied</p>\n<blockquote>\n<p>Thanks Kevin , I thought that may be the case. <br>\nBut in their defense, this is not a standard, only a proposal for one, and I guess they are still interested in getting feedback from the community, discovering if others have come up with better methods, etc...  You can actually see quite a lively discussion on the mailing list on the <a href=\"https://lists.w3.org/Archives/Public/public-credentials/2021Mar/thread.html#msg220\">RDF Dataset Canonicalization</a> thread. </p>\n</blockquote>\n<blockquote>\n<p>Btw. DataSets in RDF I believe form hypergraphs, as defined say in David Spivak's <a href=\"https://arxiv.org/abs/0909.4314\">Higher-dimensional models of Networks</a>. I think those are generalisations of simplicial sets. From that you can build multi agent modal logics as shown by this beautifuly illustrated <a href=\"https://arxiv.org/abs/2002.08863\">Knowledge in Simplicial Complexes</a> (I have an illustrated document that shows how one can get to such a conclusion with simple illustrations :-). <br>\nAlso a number <a href=\"https://gitlab.com/web-cats/CG/-/issues/24\">of links to this here</a>. </p>\n</blockquote>\n<blockquote>\n<p>I mention that because it is usually thought that RDF Graphs are only directed graphs. That these higher dimensions are needed for the web, which is a multi-agent system spanning the globe, is often lost on people,  even logicians, mathematicians and programmers.  (But that is fine, since those graphs are part of the larger space). </p>\n</blockquote>\n<blockquote>\n<p>Also I mention that because someone might thinking of this see some powerful mathematical tool that can be used in this space, and that may have escaped those who thought about it till now. Also of course this may be an interesting and valuable exercise to try to see if one can prove this mechanically. As there are a lot of computer people in those groups, I think they would appreciate such proofs a lot.</p>\n</blockquote>",
        "id": 232566722,
        "sender_full_name": "Henry Story",
        "timestamp": 1617185934
    },
    {
        "content": "<p>Three years ago I came across <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span>'s 2012 Paper \"<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-32784-1_11\">Tracing the Man in the Middle in Monoidal Categories</a>\" which has this really great paragraph:</p>\n<blockquote>\n<p>We propose to apply categorical methods of semantics of interaction to security. The MM attack pattern, formalized in cord calculus, originally designed for protocol analysis, naturally leads to a categorical trace structure, generalizing the traces of linear operators in this case by means of a coalgebraic, iterative structure of the term algebra used in computation and communication. In the MM-attacks on authentication protocols, the intruder inserts himself1 between the honest parties, and impersonates them to each other. MM is the strategy used by the chess amateur who plays against two grand masters in parallel, and either wins against one of them, or ties with both. MM is also used by the spammers, whose automated agents solve the automated Turing test by passing it to the human visitors of a free porn site, set up for that purpose [20]. <strong>MM is, in a sense, one of the dominant business model on the web</strong>, where the portals, search engines and social networks on one hand insert themselves between the producers and the consumers of information, and retrieve freely gathered information for free, but on the other hand use their position in the middle to insert themselves between the producers and the consumers of goods, and supply advertising for a fee. In security protocols, MM is, of course, an interesting attack pattern. The fact that an MM attack on the famous Needham-Schroeder Public Key (NSPK) protocol [40] remained unnoticed for 17 years promoted this toy protocol into what seemed to be one of the most popular subjects in formal approaches to security. Although the habit of mentioning NSPK in every paper formalizing security has subsided, we remain faithful to the tradition, and illustrate our MM-modeling formalism on the NSPK protocol. More seriously, though, the hope is that this formalism can be used to explore the scope and the power of the MM pattern in general, and in particular to formalize the idea of the chosen protocol attack, put forward a while ago [30], but never explored mathematically.</p>\n</blockquote>\n<p>The whole point of the work we have been doing on <a href=\"https://solidproject.org\">Solid</a>  is to create the technology to remove the need for the Man in the Middle architecture and business model so well described in that paragraph, by making it possible to develop decentralised apps where every individual can store the information on their own server and link to access controlled information on another. </p>\n<p>Somehow I have not been able to read up more about the literature and mathematics that this paper put forward. Has this been superseded now? Or is there a good introduction that would allow me to get to grip with it quickly? We did not have Zulip at the time so I would not have known who to ask.</p>",
        "id": 252140900,
        "sender_full_name": "Henry Story",
        "timestamp": 1630915711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365296\">zkao</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/226804973\">said</a>:</p>\n<blockquote>\n<p>There is this paper, <code>Universally composable security: A new paradigm for cryptographic protocols</code>, that is widely cited (&gt;3k) for cryptographic protocols  -- the original is from 2000 but its been continuously evolving. </p>\n<p>what do you guys thing of this? and what are its parallels to CT?</p>\n<p><a href=\"https://eprint.iacr.org/2000/067.pdf\">https://eprint.iacr.org/2000/067.pdf</a></p>\n</blockquote>\n<p>this was ran canetti's thesis. he spelled out the idea more succinctly in FOCS 2001. if anyone told him at the time that using the word composition might awake categorical associations, he would probably make an honest effort to try to find another word :)</p>",
        "id": 252353880,
        "sender_full_name": "dusko",
        "timestamp": 1631040843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252140900\">said</a>:</p>\n<blockquote>\n<p>Three years ago I came across <span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span>'s 2012 Paper \"<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-32784-1_11\">Tracing the Man in the Middle in Monoidal Categories</a>\" which has this really great paragraph:</p>\n<blockquote>\n<p>We propose to apply categorical methods of semantics of interaction to security. The MM attack pattern, formalized in cord calculus, originally designed for protocol analysis, naturally leads to a categorical trace structure, generalizing the traces of linear operators in this case by means of a coalgebraic, iterative structure of the term algebra used in computation and communication. In the MM-attacks on authentication protocols, the intruder inserts himself1 between the honest parties, and impersonates them to each other. MM is the strategy used by the chess amateur who plays against two grand masters in parallel, and either wins against one of them, or ties with both. MM is also used by the spammers, whose automated agents solve the automated Turing test by passing it to the human visitors of a free porn site, set up for that purpose [20]. <strong>MM is, in a sense, one of the dominant business model on the web</strong>, where the portals, search engines and social networks on one hand insert themselves between the producers and the consumers of information, and retrieve freely gathered information for free, but on the other hand use their position in the middle to insert themselves between the producers and the consumers of goods, and supply advertising for a fee. In security protocols, MM is, of course, an interesting attack pattern. The fact that an MM attack on the famous Needham-Schroeder Public Key (NSPK) protocol [40] remained unnoticed for 17 years promoted this toy protocol into what seemed to be one of the most popular subjects in formal approaches to security. Although the habit of mentioning NSPK in every paper formalizing security has subsided, we remain faithful to the tradition, and illustrate our MM-modeling formalism on the NSPK protocol. More seriously, though, the hope is that this formalism can be used to explore the scope and the power of the MM pattern in general, and in particular to formalize the idea of the chosen protocol attack, put forward a while ago [30], but never explored mathematically.</p>\n</blockquote>\n<p>The whole point of the work we have been doing on <a href=\"https://solidproject.org\">Solid</a>  is to create the technology to remove the need for the Man in the Middle architecture and business model so well described in that paragraph, by making it possible to develop decentralised apps where every individual can store the information on their own server and link to access controlled information on another. </p>\n<p>Somehow I have not been able to read up more about the literature and mathematics that this paper put forward. Has this been superseded now? Or is there a good introduction that would allow me to get to grip with it quickly? We did not have Zulip at the time so I would not have known who to ask.</p>\n</blockquote>\n<p>i don't know whether traced monoidal categories as a model for MitM have been superseded, or have they not been pursued because the intersection of the community speaking the language and the community interested in the story was on the thin side. a bit like proposing latin as a good language for studying islamic theology.  but i do know that the MitM has not been used because of shortcomings of architectures, but because it is useful to Man Zuck to insert himself in the Middle between friends, or to Man Gogol to insert himself between the advertizers and the world on one hand, and between the world and itself on the other... there are more up to date models of MitM in <a href=\"https://arxiv.org/abs/1904.05540\">https://arxiv.org/abs/1904.05540</a> .<br>\nthe readers of the MitM-by-traces paper will discern that the traced monoidal category is in this case a refinement of the kleisli category of convex algebras. </p>\n<p>the main technical question of that paper is refining the majorization preorder and/or shannon entropy to eliminate exchangeability of the source, and to capture the actual information fusion practice (of every detective and cryptanalyst), where the source is processed in order of frequency. that problem is still WIDE OPEN, and not a $1B-problem  byt a $100B-problem. can CT merge entropy and gradient descent? can CT make information bottlenecks tractable?</p>",
        "id": 252357407,
        "sender_full_name": "dusko",
        "timestamp": 1631042061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252357407\">said</a>:</p>\n<blockquote>\n<p>there are more up to date models of MitM in <a href=\"https://arxiv.org/abs/1904.05540\">https://arxiv.org/abs/1904.05540</a> .<br>\nthe readers of the MitM-by-traces paper will discern that the traced monoidal category is in this case a refinement of the kleisli category of convex algebras. </p>\n</blockquote>\n<p>I really like this sentence in that paper</p>\n<blockquote>\n<p>The web is a typical (re)source showing why privacy is so hard: it combines politics and thermodynamics.</p>\n</blockquote>\n<p>Actually geo-politics and thermodynamics. At least that is my argument in the <a href=\"https://co-operating.systems/2020/06/01/WoN.pdf\">Web of Nations proposal</a>.</p>\n<p>Anyway, I think we can count <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> as a <a href=\"https://web-cats.gitlab.io\">Web Catster</a> :-)</p>",
        "id": 252440595,
        "sender_full_name": "Henry Story",
        "timestamp": 1631098989
    },
    {
        "content": "<p>I do have a practical question right now  regarding security. The Solid Authorization group is discussing what types of modes are needed to access a resource. (If you want to see how the sausage of standardisation processes goes <a href=\"https://github.com/solid/authorization-panel/issues/253\">you can quickly glance over here</a> where you will find a lot of heat being expended on making some simple distinctions). <br>\nI <a href=\"https://github.com/solid/authorization-panel/issues/253#issuecomment-910203773\">referred to work on Lenses</a> to argue that <code>Read</code> and <code>Write</code> modes are fundamental.  But for discussions on sub/modes like <code>Delete</code> the consensus has been that the client needs write access to the deleted resource and to the container, because both are affected. Here it would be helpful to have a way to model the interaction between client and server as one between two actors in a principled way.  Is there a structure where this would fall out nicely?</p>",
        "id": 252449397,
        "sender_full_name": "Henry Story",
        "timestamp": 1631103372
    },
    {
        "content": "<p>I would think that Delete could be implemented as a Write one level up the tree.</p>\n<p>Is access downward closed, in the sense that read/write access to a parent node would also allow access to the children?</p>",
        "id": 252451995,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1631104715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278008\">@Spencer Breiner</span> it is an interesting question as to whether access should be downward closed. It would make sense that if you can Write a container, in the sense of delete it, that all internal resources depend on that.  At the limit, if you own the Freedom Box (a.k.a. FB, as per <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwiA3qDbs-_yAhXxhv0HHZ_sB3YQwqsBegQIAxAB&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dlgu8NUm5Zxk&amp;usg=AOvVaw0ffjT4FRQlaSD5THiJRSwX\">Eben Moglen's talk in 2011</a>) then you control all the containers in it as you can switch the box off. </p>\n<p>But for the moment you may certainly want to allow some resources deeply nested inside protected containers (which to me seem very similar to the nesting of polys' in Spivak's recent work) to be public.</p>",
        "id": 252452814,
        "sender_full_name": "Henry Story",
        "timestamp": 1631105088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252451995\">said</a>:</p>\n<blockquote>\n<p>I would think that Delete could be implemented as a Write one level up the tree.</p>\n</blockquote>\n<p>yes. I have been writing a playground server using lenses <a href=\"https://github.com/bblfish/lens-play/blob/master/src/main/scala/server/Server.scala\">here</a>. I'll go and add DELETE to see how that looks...</p>",
        "id": 252453422,
        "sender_full_name": "Henry Story",
        "timestamp": 1631105391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252449397\">said</a>:</p>\n<blockquote>\n<p>I do have a practical question right now  regarding security. The Solid Authorization group is discussing what types of modes are needed to access a resource. (If you want to see how the sausage of standardisation processes goes <a href=\"https://github.com/solid/authorization-panel/issues/253\">you can quickly glance over here</a> where you will find a lot of heat being expended on making some simple distinctions). <br>\nI <a href=\"https://github.com/solid/authorization-panel/issues/253#issuecomment-910203773\">referred to work on Lenses</a> to argue that <code>Read</code> and <code>Write</code> modes are fundamental.  But for discussions on sub/modes like <code>Delete</code> the consensus has been that the client needs write access to the deleted resource and to the container, because both are affected. Here it would be helpful to have a way to model the interaction between client and server as one between two actors in a principled way.  Is there a structure where this would fall out nicely?</p>\n</blockquote>\n<p>the problem definition at <br>\n<a href=\"https://solid.github.io/authorization-panel/authorization-ucr/\">https://solid.github.io/authorization-panel/authorization-ucr/</a><br>\nis so general, that without an existing solution of this problem, very few organizations could function. e.g., if alice is not a student who drafted a resume, but a colonel who drafted a plan of a military campaign, and needs to discuss it with general Bob, then every military since ancient egypt had to have a solution for this problem. most recently in the 80s, when the US military needed to propagate its existing solutions to the world with computers, there was the Bell-LaPadula model, which predated lenses by reducing the narrative to Read and Write, and two simple rules: no Read-Up, and no Write-Down. but it's not just the military. the banks and the royalties, or whoever defended wealth, needed the same protocols, and in the 80s there was the Williams model. it is all in textbooks under AC and MLS. i may be thick, but i honestly don't understand what is new about this problem.</p>",
        "id": 252537767,
        "sender_full_name": "dusko",
        "timestamp": 1631137314
    },
    {
        "content": "<p>Ah the UCR, is just a use case document, to help open up some options as to where we could go. It has not gone through a lot of serious review yet. </p>\n<p>What is new about Solid (Social Linked Data) is that it uses RDF (a first order logic for the web) to build the access control rules. So you could give read access to friends of your friends, or to people over 21, or to all people who went to a conference, and one should use decentralised identifiers and or verifiable credentials  to allow people to prove their attributes.  </p>\n<p>Every resource has an associated access control rule that the client can read to establish which credentials to present, and the server can use to verify if an request can be authorised. <a href=\"/user_uploads/21317/eVjBn-VG5uDeLVEVjerwfmKM/image.png\">illustration of Web Access Control I wrote up 7 years ago</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/eVjBn-VG5uDeLVEVjerwfmKM/image.png\" title=\"illustration of Web Access Control I wrote up 7 years ago\"><img src=\"/user_uploads/21317/eVjBn-VG5uDeLVEVjerwfmKM/image.png\"></a></div>",
        "id": 252539259,
        "sender_full_name": "Henry Story",
        "timestamp": 1631137928
    },
    {
        "content": "<p>The idea is to allow everyone to host their data on their Read/Write web server running on a Freedom Box, and have hyper-apps be able to follow linked data from one server to another, read WAC rules and present the right credentials. <br>\nThat simplifies a lot, but that should help give the idea of the architeture and explain how it is designed to provide an alternative to MIM web.</p>",
        "id": 252539508,
        "sender_full_name": "Henry Story",
        "timestamp": 1631138069
    },
    {
        "content": "<p>So in a way, I guess there is nothing new as a lot of this has been done for various systems (usually closed), and at the same time it is very new because it is trying to build those pieces for the open web, using open standards, and building on logical frameworks in a completely decentralised manner. (or as far as is reasonably possible to do effectively to start with).</p>",
        "id": 252540027,
        "sender_full_name": "Henry Story",
        "timestamp": 1631138356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252451995\">said</a>:</p>\n<blockquote>\n<p>I would think that Delete could be implemented as a Write one level up the tree.</p>\n<p>Is access downward closed, in the sense that read/write access to a parent node would also allow access to the children?</p>\n</blockquote>\n<p>I started looking at doing delete by looking one level up tree, but that looked very awakward. <br>\nSo I wrote a new  <a href=\"https://github.com/bblfish/lens-play/blob/master/src/main/scala/server/SolidServer.scala\">Lens based Solid Server</a> - this time really built on Lenses  - since those allow deletes and modification. The trick is to think of a web server as an infinite tree of resources accessible by paths, where most of the paths lead to <code>None</code>.  <br>\nA few other nice features fall out when one does that: such as being able to create intermediate directories with one <code>PUT</code>, which is how many Solid servers are implemented. That tends to indicate that this is the right model. <br>\n(Some <a href=\"https://github.com/bblfish/lens-play/blob/master/src/main/scala/server/SolidServer.sc\">examples here</a>).</p>\n<p>This model does not deal with access control though, and of course it is not very efficient, as all changes to the server have to be synchronised.</p>",
        "id": 252652012,
        "sender_full_name": "Henry Story",
        "timestamp": 1631203734
    },
    {
        "content": "<p>The next thing I need to do is find a way to integrate the Web Server Guard agent into the picture. Reading <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span>'s very helpful 2018 blog post <a href=\"https://julesh.com/2018/08/16/lenses-for-philosophers/\">Lenses for Philosophers</a> he points out right at the beginning that Dialectica Categories are types of Lenses, with proofs and disproofs composing. And in a way we can also think of a server and a client as engaged in a game with some simple rules for requests and responses. The Guard and the client can use the whole web as a database to proove facts though, with proofs of the form <code>Web ⊢ Request X allowed</code></p>",
        "id": 252763732,
        "sender_full_name": "Henry Story",
        "timestamp": 1631269277
    },
    {
        "content": "<p>Is there a reson why GET (= view part of a lens) and POST (= update part of a lens) don't exhaust all the needs of a server-client relationship? What's the matter with PUT &amp; friends?</p>",
        "id": 252832283,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1631299866
    },
    {
        "content": "<p>yes HTTP <code>GET</code> is a view: it returns a representation of the state. (REST: Representation of State Transfer). There are optimisations such as <code>SEARCH</code> that are not yet much used.  </p>\n<p><code>POST</code> creates a <strong>new</strong> resource when content is sent on a container. I <a href=\"https://github.com/bblfish/lens-play/blob/3c4895b828e90b995de5046f3bdfb8ce4613e488/src/main/scala/server/SolidServer.scala#L199\">model that</a> as an adding a new element to a container's Map  of type <code>Map[String,Resource]</code>.  <br>\n<code>POST</code> is also used to append to resources that have a monoidal structure (eg RDF Graphs, or log files), and in a way one can think of a container has having a monoidal structure: a map of path elements to content, where <code>POST</code>ing adds a new pair.</p>\n<p><code>DELETE</code> removes an element from that map. </p>\n<p>But if you want to change an existing representation, which is what the update method of a view is mostly about, then you need <code>PUT</code> (<code>PATCH</code> is an optimisation of <code>PUT</code>). </p>\n<p>PUT is perhaps the closest to the update method <code>PUT: A -&gt; S -&gt; S</code> . You can create a new resource with PUT. I don't think you can delete a resource with PUT though.</p>\n<p>(see the <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\">wikipedia page on HTTP Methods</a>).</p>",
        "id": 252834301,
        "sender_full_name": "Henry Story",
        "timestamp": 1631300715
    },
    {
        "content": "<p>So the question would be why would not <code>GET</code> and <code>PUT</code> alone work?  </p>\n<p>I think that could have worked. But <code>POST</code> is important as it allows the server to create a new name for a resource without the client needing to know if that was taken in advance of sending the message. There is something of the naming speech act in POST, like when one baptises a child or a ship.</p>",
        "id": 252835904,
        "sender_full_name": "Henry Story",
        "timestamp": 1631301467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252540027\">said</a>:</p>\n<blockquote>\n<p>So in a way, I guess there is nothing new as a lot of this has been done for various systems (usually closed), and at the same time it is very new because it is trying to build those pieces for the open web, using open standards, and building on logical frameworks in a completely decentralised manner. (or as far as is reasonably possible to do effectively to start with).</p>\n</blockquote>\n<p>oh the problem of specifying AC policies in RDF is very interesting. there is the technically completely disjoint, but conceptually related question who would be generating the specifications. very nice.</p>",
        "id": 252848297,
        "sender_full_name": "dusko",
        "timestamp": 1631306895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252848297\">said</a>:</p>\n<blockquote>\n<p>there is the technically completely disjoint, but conceptually related question who would be generating the specifications. very nice.</p>\n</blockquote>\n<p>If I understand your question correctly, the process would be as follows. Let us start for illustration from an individual and his Freedom Box (for those who may not know <a href=\"https://www.youtube.com/watch?v=lgu8NUm5Zxk\">here is a talk from 10 years ago</a> by Eben Moglen , the author of the GNU Public licence (the legal powerhouse behind Linux, the free operating system that runs Android an all of Google's servers).) <br>\nAs you start up your FBox you login with a password perhaps,  and that launches a client that will act as your personal wallet, keeping your personal keys, <a href=\"https://www.w3.org/TR/vc-data-model/\">verifiable credentials</a>, etc... by saving them to your FBox (not to be confused with FaceBook). Note you could place your FB  behind a Tor network. I have called that type of app a <a href=\"https://github.com/bblfish/LauncherApp\">Launcher App</a>. It can read and write the access control rules - since the web is now read/write - to your FB Pod (Personal Online DataStore) and it signs http headers for other apps to allow them access. Initially you alone have all rights, and slowly you can open up different parts of the information space on the box: the Launcher App (a.k.a Wallet in the <a href=\"https://www.googleadservices.com/pagead/aclk?sa=L&amp;ai=DChcSEwiboZSPqvXyAhVgg4MHHd9nA1MYABAAGgJlZg&amp;ae=2&amp;ohost=www.google.com&amp;cid=CAASEuRoXTM8IcoavZibRg1fKnfibg&amp;sig=AOD64_2XtHGxCHOdFalYOQ0xNBeeOZQChQ&amp;q&amp;adurl&amp;ved=2ahUKEwiZ6Y2PqvXyAhUHg_0HHbSaBEkQ0Qx6BAgCEAE&amp;dct=1\">Self Sovereign Identity</a> world (many good ideas there, but sometimes over complex implementations)).  So it is a process of you giving more access to different people by writing the access control rules via a trusted app to your Pod. Such writing should be as easy as dragging and dropping icons into circles , or whatever the best UI designers can come up with.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"lgu8NUm5Zxk\" href=\"https://www.youtube.com/watch?v=lgu8NUm5Zxk\"><img src=\"https://uploads.zulipusercontent.net/ef2373eb376829033d7e516046c264533b451343/68747470733a2f2f692e7974696d672e636f6d2f76692f6c6775384e556d355a786b2f64656661756c742e6a7067\"></a></div>",
        "id": 252852245,
        "sender_full_name": "Henry Story",
        "timestamp": 1631308769
    },
    {
        "content": "<p>There is a more recent talk by Eben Moglen <a href=\"https://www.youtube.com/watch?v=2U8PyukPyGE\">FreedomBox Turns Ten</a>, where he gives a history of the internet, and of the impact of the Free software movement on the world. If you thought computing was just a technical thing, here you can see it's geopolitical and spiritual dimensions. <br>\nA key part of the argument on the Freedom Box is an explanation of the Man in the Middle Business model that <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> explained <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-32784-1_11\">so well mathematically</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"2U8PyukPyGE\" href=\"https://www.youtube.com/watch?v=2U8PyukPyGE\"><img src=\"https://uploads.zulipusercontent.net/6f92d5c403a951ec759246fa57d4f1d8d1a1e583/68747470733a2f2f692e7974696d672e636f6d2f76692f3255385079756b507947452f64656661756c742e6a7067\"></a></div>",
        "id": 252856574,
        "sender_full_name": "Henry Story",
        "timestamp": 1631311260
    },
    {
        "content": "<p>Around minute 40, Eben Moglen brings in eccology.</p>",
        "id": 252860960,
        "sender_full_name": "Henry Story",
        "timestamp": 1631314173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252835904\">said</a>:</p>\n<blockquote>\n<p>So the question would be why would not <code>GET</code> and <code>PUT</code> alone work?  </p>\n</blockquote>\n<p>Correct!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252834301\">said</a>:</p>\n<blockquote>\n<p>yes HTTP <code>GET</code> is a view: it returns a representation of the state. (REST: Representation of State Transfer). There are optimisations such as <code>SEARCH</code> that are not yet much used.  </p>\n<p><code>POST</code> creates a <strong>new</strong> resource when content is sent on a container. I <a href=\"https://github.com/bblfish/lens-play/blob/3c4895b828e90b995de5046f3bdfb8ce4613e488/src/main/scala/server/SolidServer.scala#L199\">model that</a> as an adding a new element to a container's Map  of type <code>Map[String,Resource]</code>.  <br>\n<code>POST</code> is also used to append to resources that have a monoidal structure (eg RDF Graphs, or log files), and in a way one can think of a container has having a monoidal structure: a map of path elements to content, where <code>POST</code>ing adds a new pair.</p>\n<p><code>DELETE</code> removes an element from that map. </p>\n<p>But if you want to change an existing representation, which is what the update method of a view is mostly about, then you need <code>PUT</code> (<code>PATCH</code> is an optimisation of <code>PUT</code>). </p>\n<p>PUT is perhaps the closest to the update method <code>PUT: A -&gt; S -&gt; S</code> . You can create a new resource with PUT. I don't think you can delete a resource with PUT though.</p>\n<p>(see the <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\">wikipedia page on HTTP Methods</a>).</p>\n</blockquote>\n<p>It seems like <code>DELETE</code> and <code>POST</code> are both versions of <code>PUT</code> with (co)side-effects, namely the creation/elimination of a resource.<br>\nIf <code>PUT</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">A \\to S \\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, then <code>DELETE</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">A \\to S \\to 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (this can be non-trivial is there are other side-effects, such as errors and IO and so on) while <code>POST</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">A \\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. So you see how <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A \\to (S+1) \\to (S+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> can encompass both (dep types would allow us to be more precise)</p>",
        "id": 252907895,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1631365086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci (he/him)</span>, yes, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">S + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> appear . It is the  <code>Option[X]</code> functor in Scala and has two subtypes and <code>None</code> and <code>Some[X]</code>, meaning it is the co-product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">1+X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> .</p>\n<p>I modelled a Container as a recursive type  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup><mo>×</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">C = \\Z \\times (1+C)^P \\times (1+R)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77222em;vertical-align:-0.08333em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> is creation time, but could really contain all kinds of metadata, <code>P</code> is a path segment eg <code>foo</code> in <code>/foo/</code> and R is a resource, perhaps a string of bytes and a mime type (to interpret those bytes). The  functions from P to the optionals reflects a scala <code>Map</code> which is a partial function. <br>\nI split the map of containers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">(1+C)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span>  from the map of resources <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">(1+R)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span> because we make a distinction between  <code>/foo/</code> the name for a container and <code>/foo/index.md</code> the name of a resource.</p>\n<p>I see this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> as a tree, with multiple leaves and multiple branches, each named, at every junction. It should remind one of a file system.</p>\n<p>So paths refer to resources as follows.</p>\n<ul>\n<li><code>/</code> to the root container eg. <a href=\"https://w3.org/\">https://w3.org/</a> </li>\n<li><code>/foo/bar/</code> to the bar container of the foo container of the root or 1 if something did not exist </li>\n<li><code>/foo/bar/baz.html</code> to the <code>baz.html</code> resource of the bar container of the foo container  or 1 if something along the way went missing .</li>\n</ul>\n<p>So a Lens uses a path to  focus into one of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">(1+C)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span>  or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">(1+R)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span>  at various depths.  Then one can create, delete or edit a resource by changing one of those functions. </p>\n<p>(Now you can all get summer jobs building web servers :-)</p>",
        "id": 252933001,
        "sender_full_name": "Henry Story",
        "timestamp": 1631391945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252907895\">said</a>:</p>\n<blockquote>\n<p>It seems like <code>DELETE</code> and <code>POST</code> are both versions of <code>PUT</code> with (co)side-effects, namely the creation/elimination of a resource.</p>\n</blockquote>\n<p>In the model I gave here which I think represents this as a lens into a tree, they all change a map in a container. But <code>POST</code> increases the size of the map and <code>DELETE</code> decreases its size. At the same time one does get a feeling that those are side-effectful, especially <code>POST</code>... (perhaps just because the server can creates the name?) </p>\n<blockquote>\n<p>If <code>PUT</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">A \\to S \\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, then <code>DELETE</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">A \\to S \\to 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (this can be non-trivial is there are other side-effects, such as errors and IO and so on) while <code>POST</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">A \\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. So you see how <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A \\to (S+1) \\to (S+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> can encompass both (dep types would allow us to be more precise)</p>\n</blockquote>\n<p>I think <code>DELETE</code> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">1 \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>S</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">A \\to S \\to 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, as the Lens always has to return a new global state (root container in our use case). What is happening is that <code>DELETE</code> requires no input. (I use C as the state here).</p>\n<p>I have a <code>getter</code>part of a lens as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C \\to (1+C)+(1+R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> depending on the path (does it end in <code>/</code> or not?). </p>\n<p>I thought the <code>setter</code> part of a lens was of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(1+R)^P \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>  or  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(1+C)^P \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> depending on the path.  Then PUT, POST, DELETE are restrictions on that setter, with <code>POST</code> increasing the map size. and PUT changing the value for a given path. But I wonder if that is good modelling...</p>\n<p>Ah. The problem is that if  the type of <code>GET</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C \\to (1+R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> then the range  of that function should be what we are using in the lens setter too. I have been thinking that I have a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(1+R)^P \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> but we should have   <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(1+R) \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>. </p>\n<p>And that works for <code>PUT</code> and <code>DELETE</code>. Indeed!!! <br>\n<code>PUT</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">R \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and <br>\n<code>DELETE</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>→</mo><mi>C</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">1 \\to C \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></p>\n<p>So <code>POST</code> is the man out. <code>POST</code> requires the container to be monoidal -or something like that. It requires one to be able to add 1 element to the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">(1+R)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span>   and for containers to add an empty container to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><msup><mo stretchy=\"false\">)</mo><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">(1+C)^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 252934811,
        "sender_full_name": "Henry Story",
        "timestamp": 1631393693
    },
    {
        "content": "<p><code>PUT</code> is also sideeffectful in that I have modelled it so that if one <code>PUT</code>s something on container with intermediate<code>PATH</code>s that don't exist then it will create those intermediate containers. I was surprised to see that the lens laws don't speak against that.</p>",
        "id": 252960048,
        "sender_full_name": "Henry Story",
        "timestamp": 1631423462
    },
    {
        "content": "<p>I would have to model this in Agda to check if I have not hacked something illegal somewhere else.</p>",
        "id": 252963074,
        "sender_full_name": "Henry Story",
        "timestamp": 1631427253
    },
    {
        "content": "<p>I see this thread has moved directions. I am interested in all things category theory + model based security so let me know if any of you want to meet and discuss</p>",
        "id": 253279238,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1631636505
    },
    {
        "content": "<p>It just made a little detour. Those last part on modelling web servers may have been better in any number of other threads, but it should be useful if one wants to model access control on the web.  </p>\n<p>Mind you what part of  model based security interests you? :-)</p>",
        "id": 253289903,
        "sender_full_name": "Henry Story",
        "timestamp": 1631640493
    },
    {
        "content": "<p>Any form of security modeling that specifies and challenges a system. My predominant interest is of course cyber physical systems but I think one can do a lot in just software systems as well since the model based security world is pretty behind on the math than other security fields.</p>",
        "id": 253457786,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1631728003
    },
    {
        "content": "<p>Ah good. I am coming at this from an engineering perspective: how do you allow a decentralised access control system that can be used by billions easily to work on top of the Web more or less as it exists. So I am looking for mathematics that can help specify that. We have good demonstrations working, and experience building parts of it based on 20 years of standardisation effort. But having more  mathematics would help a lot. </p>\n<p>As there are so many different areas that come together I came to CT to help see the big picture.</p>",
        "id": 253458224,
        "sender_full_name": "Henry Story",
        "timestamp": 1631728183
    },
    {
        "content": "<p>So I guess you come in once we have specified the system :-)  (Well we have some <a href=\"https://github.com/solid/specification/\">initial specifications</a> already)</p>",
        "id": 253459633,
        "sender_full_name": "Henry Story",
        "timestamp": 1631728673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> nice that AC has moved beyond computer resources and onto the web. but is the AC for the nowadays web really what eben moglen talked about? ((BTW thanks for explaining about linux :))) but i wonder whether the fact so much of google is built on GPL makes the GPL into a powerhouse or a suckerhouse...))</p>\n<p>web 2.0 looked like a gigantic semistructured database. the resources on it and the credentials used to control access to those resources where data. which means they can be copied: if i steal your credentials, then both you and i have your credentials and for all purposes on the web of data we are indistinguishable. </p>\n<p>in the menatime, the web is not just on the internet. most authentications use objects that cannot be copied, and out of band channels, phones. and phones authenticate each other through their humans, over lunch. back in 2000s, i could give you the credentials to enter my office by shaking our phones together. a fuzzyt extractor would get extreact a key for a BLAKE-secured channel and pass a 4096 key into your phone, which could only be used once, and which was bound to the device that it is on. but then Visa realized that the NFC would spell the end of credit cards, and became very active within the IETF. and we still use credit cards. but they are a part of access control on the web...</p>\n<p>i guess to capture credentials that are not date you will need to move the story about lenses and moore machines from cartesian to monoidal categories, but prolly not much further than that. gets and puts will become quite different from reads and writes --- but not categorically different :) </p>\n<p>would that be a fun thing to do?</p>\n<p>but even without that -- very nice work! <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"call me\" class=\"emoji emoji-1f919\" role=\"img\" title=\"call me\">:call_me:</span></p>",
        "id": 253498328,
        "sender_full_name": "dusko",
        "timestamp": 1631745213
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> , let me reply in little chunks.<br>\nYou <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/253498328\">wrote</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> nice that AC has moved beyond computer resources and onto the web. but is the AC for the nowadays web really what eben moglen talked about? ((BTW thanks for explaining about linux :))) but i wonder whether the fact so much of google is built on GPL makes the GPL into a powerhouse or a suckerhouse...))</p>\n</blockquote>\n<p>In the speeches <a href=\"https://vimeo.com/20945434\">starting 2010</a>, Eben  Moglen engaged a turning point in the free software movement. He argued that it is urgent to consider the hardware on which the free software is running, the location of the data in addition to the more traditional preoccupation of software freedom. </p>\n<p>The argument can be put thus: How do you know that your brain is not being manipulated by Aliens to make you think what they want? Especially when all the data is on their servers? See my <a href=\"https://medium.com/@bblfish/epistemology-in-the-cloud-472fad4c8282\">Epistemology in the Cloud</a>.</p>\n<p>Sovereignty is the key advantage of Free Software: That is why companies like Google built all on Free Software from the very beginning. That allowed them to develop their services without being beholden to another large company. Indeed, these awesome US companies have a conception of sovereignty that goes to the core of their strategy. Sometimes one wonders if Nations-States are even aware of the importance of this dimension.</p>\n<p>So Eben Moglen's point is that we also need Free Software to run on our machines for our data to be located there.  But if we all are going to place our data on our own servers, how do we avoid going back to the 1980s PCs, each of us unconnected atoms, living in an isolated POD, as shown in The Matrix (<a href=\"https://www.imdb.com/video/vi4021601049?playlistId=tt10838180&amp;ref_=tt_ov_vi\">v4 trailer</a>).</p>\n<p>This is why one cannot succeed with just free software and a freedom box. One also needs Linked Data.  But then, without Web Access Control and Web Identity, the only choice available to us is </p>\n<ul>\n<li>either to make data publicly readable </li>\n<li>or make it accessible to only a hardcoded set of users</li>\n</ul>\n<p>This is very inflexible.</p>",
        "id": 253583841,
        "sender_full_name": "Henry Story",
        "timestamp": 1631799932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> continued:</p>\n<blockquote>\n<p>web 2.0 looked like a gigantic semistructured database. the resources on it and the credentials used to control access to those resources where data. which means they can be copied: if i steal your credentials, then both you and i have your credentials and for all purposes on the web of data we are indistinguishable.</p>\n</blockquote>\n<p>The big honest change in Web2.0 was the blogosphere, which made headlines every week in the top newspapers for years on end. It changed the web from a read-only medium to the beginning of a read/write medium, allowing people to quickly start producing content. </p>\n<p>The blogosphere did not have a suitable authentication mechanism, though. OpenID started off being discussed together with the RDF friend of a friend (foaf) vocabulary. If that had been pursued, they would have had the social networking piece needed to grow. But there was a war between syntax and semantics going on: very large players like IBM made a huge noise for XML and SOAP, which was the future in 2004 the way Blockchain was the future 4 years ago.</p>\n<p>With Access Control the blogosphere could have staved off spam, and turned into the web we want.</p>\n<p>Instead it was a lot easier to build a centralised social network like Facebook. Dictatorships are easier to build.  But really Facebook is nothing more than a blogging platform with access control.</p>",
        "id": 253587795,
        "sender_full_name": "Henry Story",
        "timestamp": 1631801314
    },
    {
        "content": "<p>@dusko wrote</p>\n<blockquote>\n<p>... the resources on it and the credentials used to control access to those resources where data. which means they can be copied: if i steal your credentials, then both you and i have your credentials and for all purposes on the web of data we are indistinguishable.</p>\n</blockquote>\n<p>That story on the relation between data and resources is overly simplified. URLs refer to resources that return representations - data. But the resources named by URIs are unique and individual: they are named coalgebraic streams of representations perhaps. I can copy the representation of one resource to server that is true. I can copy the front page of <code>https://facebook.com/</code> to <code>https://facebook.com.trust.me/</code> and that is a well known phishing technique. But even though humans can be confused by this similarity, the URLs are clearly different and a computer can easily notice that. Furthermore the links on the web do not point to the new fake <code>trust.me</code> URL. The Links to facebook pages continue to point to the original web site <code>https://facebook.com/</code> .  </p>\n<p>Mathematically say I have a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mo>:</mo><mi>W</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>W</mi><mo>×</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>U</mi></msup></mrow><annotation encoding=\"application/x-tex\">get:  W \\to (W \\times R)^{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span></span></span></span></span></span></span></span></span></span></span></span> which given a state of the web <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> returns a function from URLs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> to states of the Web and Representations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>.  (The web is always changing).  If I take some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>:</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">u: U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> at some point of the web I can <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> get(w)(u) = (w&#x27;,r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span> and then put that representation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> somewhere else, say on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">v: U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. We will have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>=</mo><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u = get(w&#x27;)(v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span> for any future state of the web w' where the resource is not changed. But the links pointing to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> will not be pointing to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>.  So really we have two pieces of data <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>R</mi><mo>×</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">(r,u), (r,v): R \\times U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. Those we call named Graphs in the semantic web. I think this moves the web into the space of multigraphs or simplicial sets.</p>\n<p>That is what allows us to place public keys at URLs on the web, and use those URLs to identify an agent. That was what we proposed doing with WebID 12 years ago or so, and I am now working on a more flexible version called <a href=\"https://github.com/solid/authentication-panel/blob/main/proposals/HttpSignature.md\">HTTP-Sig</a>.<br>\n<a href=\"/user_uploads/21317/oFvL9xxLAIJUFRP-RbPKqjFs/Screenshot-2021-09-16-at-4.31.54-PM.png\">Basic HTTP Sig Sequence Diagram</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/oFvL9xxLAIJUFRP-RbPKqjFs/Screenshot-2021-09-16-at-4.31.54-PM.png\" title=\"Basic HTTP Sig Sequence Diagram\"><img src=\"/user_uploads/21317/oFvL9xxLAIJUFRP-RbPKqjFs/Screenshot-2021-09-16-at-4.31.54-PM.png\"></a></div>",
        "id": 253590526,
        "sender_full_name": "Henry Story",
        "timestamp": 1631802397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> continued:</p>\n<blockquote>\n<p>i guess to capture credentials that are not date you will need to move the story about lenses and moore machines from cartesian to monoidal categories, but prolly not much further than that. gets and puts will become quite different from reads and writes --- but not categorically different :)</p>\n</blockquote>\n<p>yes, I think I have read a few times about Monoidal categories, and I should be able to read your paper now, <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-32784-1_11\">Tracing the man in the middle in monoidal categories</a>. So that will go right up there to the top of my list. </p>\n<p>Interestingly enough RDF can be expressed in terms of monoidal categories already as <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span> showed in <a href=\"https://arxiv.org/abs/1706.00526\">Knowledge Representation in Bicategories of Relations</a> if I remember correctly. </p>\n<p>I wonder if anyone has done lenses and monoidal categories? </p>\n<blockquote>\n<p>would that be a fun thing to do?</p>\n</blockquote>\n<p>Definitely. If anyone else with some mathematical background wants to join thinking about this, that would be very helpful. </p>\n<p>We absolutely need mathematics to clarify the structures that have been discovered bottom up by the web community, if we want to make secure and rapid progress.</p>",
        "id": 253593560,
        "sender_full_name": "Henry Story",
        "timestamp": 1631803521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> wrote</p>\n<blockquote>\n<p>I wonder if anyone has done lenses and monoidal categories?</p>\n</blockquote>\n<p>If I can start with something really simple like this, and perhaps write a proof out in Agda (cause I know it and it is stricter than Scala), then I could use that to help the group come to some decision on the modes of access.</p>",
        "id": 253603708,
        "sender_full_name": "Henry Story",
        "timestamp": 1631807450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/253590526\">said</a>:</p>\n<blockquote>\n<p>@dusko wrote</p>\n<blockquote>\n<p>... the resources on it and the credentials used to control access to those resources where data. which means they can be copied: if i steal your credentials, then both you and i have your credentials and for all purposes on the web of data we are indistinguishable.</p>\n</blockquote>\n<p>That story on the relation between data and resources is overly simplified. URLs refer to resources that return representations - data. But the resources named by URIs are unique and individual: they are named coalgebraic streams of representations perhaps. I can copy the representation of one resource to server that is true. I can copy the front page of <code>https://facebook.com/</code> to <code>https://facebook.com.trust.me/</code> and that is a well known phishing technique. But even though humans can be confused by this similarity, the URLs are clearly different and a computer can easily notice that. Furthermore the links on the web do not point to the new fake <code>trust.me</code> URL. The Links to facebook pages continue to point to the original web site <code>https://facebook.com/</code> .  </p>\n<p>Mathematically say I have a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mo>:</mo><mi>W</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>W</mi><mo>×</mo><mi>R</mi><msup><mo stretchy=\"false\">)</mo><mi>U</mi></msup></mrow><annotation encoding=\"application/x-tex\">get:  W \\to (W \\times R)^{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span></span></span></span></span></span></span></span></span></span></span></span> which given a state of the web <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> returns a function from URLs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> to states of the Web and Representations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>.  (The web is always changing).  If I take some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>:</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">u: U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> at some point of the web I can <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> get(w)(u) = (w&#x27;,r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span> and then put that representation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> somewhere else, say on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">v: U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. We will have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>=</mo><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u = get(w&#x27;)(v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span> for any future state of the web w' where the resource is not changed. But the links pointing to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> will not be pointing to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>.  So really we have two pieces of data <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>R</mi><mo>×</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">(r,u), (r,v): R \\times U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. Those we call named Graphs in the semantic web. I think this moves the web into the space of multigraphs or simplicial sets.</p>\n<p>That is what allows us to place public keys at URLs on the web, and use those URLs to identify an agent. That was what we proposed doing with WebID 12 years ago or so, and I am now working on a more flexible version called <a href=\"https://github.com/solid/authentication-panel/blob/main/proposals/HttpSignature.md\">HTTP-Sig</a>.<br>\n<a href=\"/user_uploads/21317/oFvL9xxLAIJUFRP-RbPKqjFs/Screenshot-2021-09-16-at-4.31.54-PM.png\">Basic HTTP Sig Sequence Diagram</a></p>\n</blockquote>\n<p>you have obviously thought about this a lot, probably a lot more than i, but nevertheless, what you describe is not the story about data and resources themselves, as entities in the world, but of data as resources as we at some point decided to represent them, and then maybe confused our representations and reality.</p>\n<p>in reality, the difference between data and resources is simpler than in standards. the number 3 is a data item. a trunk of a tree is a resource, eg for building a cabin. what is the difference between them? if i want to count 3 times to 3, i make 2 copies of 3, and use one to count the other one. we tend to go pretty far with that, since copying data is so easy (in principle costless). but if one tree is not enough for the cabin, i need to wait for another tree to grow. trees are not copiable. that is what makes them into a resource: they are easy is easy to use, but hard to get by.</p>\n<p>the distinction is the foundation of security. how secure is a lock depends on the availability of the copies of the key.</p>\n<p>finding data operations that are easy in one direction but hard in the other direction is hard. and based on obscurity of, say, an NP complete P algorithm. so people are increasingly using things that are harder to copy...</p>\n<p>copying is done in cartesian categories by the diagonals. the only energy-expending operation, erasure, is the projection. there are no diagonals or projections in monoidal categories. in a string diagram, strings conduct resources. some of them come with copying nodes and the deletion nodes. modeling how the copiable data and the uncopiable objects interact is similar to modeling hos classical data interact with quantum data, since these two are also defined by copiability and non-copiability and non-deletability...</p>\n<p>some math models clean the conceptual slate and first of all simplify things :)</p>",
        "id": 253978291,
        "sender_full_name": "dusko",
        "timestamp": 1632092797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/253587795\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> continued:</p>\n<blockquote>\n<p>web 2.0 looked like a gigantic semistructured database. the resources on it and the credentials used to control access to those resources where data. which means they can be copied: if i steal your credentials, then both you and i have your credentials and for all purposes on the web of data we are indistinguishable.</p>\n</blockquote>\n<p>With Access Control the blogosphere could have staved off spam, and turned into the web we want.</p>\n</blockquote>\n<p>there is a historic precedent for this. spam is an abuse of a costless public utility. an instance of the commons. the response to earlier instances of similar abuses of the commons was always the same: first access control, then appropriation. the Enclosure. you mention that FB already performed some of that. </p>\n<p>not distinguishing technical tasks (securing an aset) from political tasks (right to privacy, lack of right for privatizing public utilities) has been very costly. private companies use public utilities to gather private data;  nations use public utilities to manipulate each other's governments; terrorist organizations use public utilities to draft terrorists. those are not engineering failures. those are categorical failures: people got hypnotized by their computers and started thinking that national security is an advanced form of software engineering. organizign the world like an operating system. but they forgot to tell putin.</p>",
        "id": 253979452,
        "sender_full_name": "dusko",
        "timestamp": 1632093920
    },
    {
        "content": "<p>Lol, the reference to spam made me smile. One of the proposed antispam solutions was proof-of-work, waaaay before we saw it assume its central role in blockchain consensus. The idea is simple: I have to prove that I did some computational work to send a email. In this way, spam becomes prohibitively expensive. This is exactly related to what Dusko was saying: It's about turning data (as in costless operation) into resources (a costly operation).</p>",
        "id": 254027715,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1632133618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> wrote:</p>\n<blockquote>\n<p>Copying is done in cartesian categories by the diagonals. the only energy-expending operation, erasure, is the projection. there are no diagonals or projections in monoidal categories. in a string diagram, strings conduct resources. some of them come with copying nodes and the deletion nodes. modeling how the copiable data and the uncopiable objects interact is similar to modeling how classical data interact with quantum data, since these two are also defined by copiability and non-copiability and non-deletability...</p>\n</blockquote>\n<p>I wonder where this copying vs not-copying distinction turns up in  <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span> 's <a href=\"https://arxiv.org/abs/1706.00526\">Knowledge Representation in Bicateogries of Relations</a>, as he uses String diagrams from monoidal categories to explain the semantic web tech I am talking about... </p>\n<p>Indeed what I am looking for is the distinction between copy-ability and non-copyability.  Perhaps there is something more to it though. <br>\nAn RDF graph can be copied from a URL1 to a URL2, and we can ask if two graphs are isomorphic, and yet they are different resources. I showed this this  <a href=\"https://github.com/banana-rdf/banana-rdf/wiki\">slide from a 2014 talk I gave at Scala eXchange</a>. We can see three computers - represented as boxes - named <code>www.w3.org</code>, <code>www.copy.org</code> and <code>www.piratew3.org</code>.  </p>\n<p><a href=\"/user_uploads/21317/SCbAy1OAX39EBp_Ld4R2w19Y/Screenshot-2021-09-23-at-9.37.06-PM.png\">Slide with 3 Web Servers and 2 copies of a document</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/SCbAy1OAX39EBp_Ld4R2w19Y/Screenshot-2021-09-23-at-9.37.06-PM.png\" title=\"Slide with 3 Web Servers and 2 copies of a document\"><img src=\"/user_uploads/21317/SCbAy1OAX39EBp_Ld4R2w19Y/Screenshot-2021-09-23-at-9.37.06-PM.png\"></a></div>",
        "id": 254588085,
        "sender_full_name": "Henry Story",
        "timestamp": 1632424104
    },
    {
        "content": "<p>All three machines have a copy of the graph located at <code>https://www.w3.org/People/Berners-Lee/card</code> consisting of 2 relations </p>\n<div class=\"codehilite\" data-code-language=\"Turtle\"><pre><span></span><code><span class=\"k\">@prefix</span><span class=\"w\"> </span><span class=\"nn\">foaf:</span><span class=\"w\"> </span><span class=\"nv\">&lt;http://xmlns.com/foaf/0.1/&gt;</span><span class=\"w\"> </span><span class=\"p\">.</span>\n<span class=\"nv\">&lt;#i&gt;</span> <span class=\"nn\">foaf</span><span class=\"p\">:</span><span class=\"nt\">name</span> <span class=\"s\">\"Tim Berners-Lee\"</span><span class=\"p\">;</span>\n          <span class=\"nn\">foaf</span><span class=\"p\">:</span><span class=\"nt\">made</span> <span class=\"nv\">&lt;&gt;</span> <span class=\"p\">.</span>\n</code></pre></div>\n<p>This RDF Graph in <a href=\"https://www.w3.org/TR/turtle/\">Turtle syntax</a>, says that the entity referred to by <code>&lt;https://www.w3.org/People/Berners-Lee/card#i&gt;</code>  has name \"Tim Berners-Lee\" and is the agent that made the document <code>&lt;https://www.w3.org/People/Berners-Lee/card&gt;</code>.</p>\n<p>Note that there are two different meanings of  copy here: </p>\n<ol>\n<li>The copy of the graph at <code>www.copy.org</code> was produced by fetching the <a href=\"http://w3c.org\">w3c.org</a> graph, and transforming all relative URLs into absolute ones by prepending the document's URL. As a result the document the foaf:made link still points to the original document as shown by the arrow. That is the graph is isomorphic to the copy. </li>\n<li>The piratew3 copy on the other hand did not absolutize the URLs but just copied the data. As a result it created the new URLs <code>&lt;https://www.piratew3.org/People/Berners-Lee/card/#i&gt;</code>.  That graph is not isomorphic with the original at the graph layer at least. It may be syntactically isomorphic. Still clearly the RDF notion of isomorphism caputres the sameness of meaning idea.</li>\n</ol>\n<p>What we notice though is that all the external URLs shown by links coming from outside the slide on the top left named \"foaf:knows\" point to the <a href=\"http://w3.org\">w3.org</a> document, not to the copies.</p>",
        "id": 254592603,
        "sender_full_name": "Henry Story",
        "timestamp": 1632425942
    },
    {
        "content": "<p>So we clearly have something important happening in the naming here, and I am really keen to find the maths for that. I may be a bit sensitive to naming because in the late 1980s while studying a Masters in Philosophy at Birkbeck college London,  I read a 500 page book <a href=\"https://www.amazon.de/-/en/Gareth-Evans/dp/0198246862\">The Varieties of Reference</a> - I am sure that <span class=\"user-mention\" data-user-id=\"302507\">@David Corfield</span> will have heard about.  I read it with interest but could not imagine at the time how this could ever be useful. So I was really surprised when I discovered how fundamental naming is to the web.   </p>\n<p>Naming may also be related to monoidal categories though. Earlier this year I came across monoidal categories  in Brendan Fong's <a href=\"https://twitter.com/bblfish/status/1398230682237911041\">thesis on monoidal categories and open systems</a> after listening to a very nice introductory talk by John Carlos Baez on the topic.  If I understand correctly the Inputs and outputs of the widgets which allow them to be composed act as names. </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1398230682237911041\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/johncarlosbaez\">@johncarlosbaez</a> <a href=\"https://twitter.com/ejpatters\">@ejpatters</a> Ah yes, the preface to Brendan Fong's thesis \"The Algebra of Open and Interconnected Systems\" <a href=\"https://t.co/bz9wmfPWvI\">https://arxiv.org/abs/1609.05382</a> should be of great interest to Philosophers as well as #linkeddata folks interested in what is behind the Open World Assumption. cc <a href=\"https://twitter.com/DJRoss70\">@DJRoss70</a> <a href=\"https://t.co/OiBEhy2Ddy\">https://twitter.com/bblfish/status/1398230682237911041/photo/1</a></p><span>- The 🐟‍‍ BabelFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/OiBEhy2Ddy\"><img src=\"https://uploads.zulipusercontent.net/bbb72c9e0cfed4b9b3f66b54bbac2457684d1846/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f453265444d43415830414532566c4c2e706e673a7468756d62\"></a></div></div></div><p>At least that is how  F. Patel-Schneider  in <a href=\"https://github.com/bblfish/agda-web-semantic\">Integrity Constraints for Linked Data</a> seems to use them.  I was reading that paper late last year while documenting the Agda proof .  I think the argument there is that the URLs of the Semantic Web is what allows it to be an open composable system of graphs. And that also seems to fit.</p>",
        "id": 254592936,
        "sender_full_name": "Henry Story",
        "timestamp": 1632426110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/254027715\">said</a>:</p>\n<blockquote>\n<p>Lol, the reference to spam made me smile. One of the proposed antispam solutions was proof-of-work, waaaay before we saw it assume its central role in blockchain consensus. The idea is simple: I have to prove that I did some computational work to send a email. In this way, spam becomes prohibitively expensive. This is exactly related to what Dusko was saying: It's about turning data (as in costless operation) into resources (a costly operation).</p>\n</blockquote>\n<p>I agree that the cost element has an important role to play in security.  DNSsec and other technologies make it very difficult to break into the DNS by using cryptography. But the Internet started with the basic unprotected Domain Name System for naming machines. So I think here the uncopyability may be also related to the physical nature of the computation and the named machines.</p>\n<p>There is also another way I have been thinking of this uncopyability: and that is that a GET or PUT request are something akin to speech acts. See my <a href=\"https://www.slideshare.net/bblfish/philosophy-and-the-social-web-5583083/38\">Slide in 38 of a talk I gave on the Philosophy of the Social Web in 2010</a>.  As events those cannot be copied, as they are unique. So I wonder if Monoidal Categories have also turned up in Speech Act analysis?</p>",
        "id": 254596928,
        "sender_full_name": "Henry Story",
        "timestamp": 1632427835
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> might know if there is work in Linear Logic and Speech acts.</p>",
        "id": 254813904,
        "sender_full_name": "Henry Story",
        "timestamp": 1632551252
    },
    {
        "content": "<p>We were <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/security.20.2B.20ct/near/252907895\">discussing above</a> how one could model a web server with Lenses. <br>\nBut now I wonder how much co-inductive types change that. <br>\nIn 2017 <span class=\"user-mention\" data-user-id=\"277574\">@Conor McBride</span> had a series of lectures on Agda which <a href=\"https://twitter.com/bblfish/status/1317003420964966403\">I watched last year</a> where he shows how codata pops up just in the client/server communication. I have a feeling that a good model of the web needs to use that.  So I wonder if this duality of data and codata would affect the idea of modelling a web server with lenses. </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1317003420964966403\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>How to write a simple application responsive to input from the terminal in Agda. An app is a coinductive type, guaranteed to respond to certain types of events that may go on forever.\n<a href=\"https://t.co/XNB9J2XzuI\">https://www.youtube.com/watch?v=kX3mvyFHDDU</a></p><span>- The 🐟‍‍ BabelFish (@bblfish)</span></div></div><p>I could take a month to try to model this before the end of the year, if someone could guide me.  The aim would be to have some good model of the web  to be able to provide serious answers to some questions that have been coming up in Solid.</p>",
        "id": 258676193,
        "sender_full_name": "Henry Story",
        "timestamp": 1634889293
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span>  I'm sorry, I don't know how I missed this message from Sept?! well I know about Linear Logic applied to dialogs (work of Christoph Fouquere and Myriam Quatrini) and dialogs usually include \"speech acts\" (<a href=\"https://hal.archives-ouvertes.fr/hal-01286851/document\">https://hal.archives-ouvertes.fr/hal-01286851/document</a>). But I don't know about something specifically on \"Linear Logic and Speech acts\".</p>",
        "id": 258785980,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1634943247
    },
    {
        "content": "<p>As a matter of interest here is how <span class=\"user-mention\" data-user-id=\"276053\">@Brendan Fong</span> 's thesis on open systems comes in useful in a discussion on access control in Solid. I now have a handy answer to the question \"<a href=\"https://github.com/solid/web-access-control-spec/issues/102#issuecomment-957675866\">what is an open system?</a>\".  :-) <br>\n(Of course using this means I will have to read that thesis or an update in more detail at some point)</p>",
        "id": 260018239,
        "sender_full_name": "Henry Story",
        "timestamp": 1635869247
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span> for the links to the paper 2016 <a href=\"https://hal.archives-ouvertes.fr/hal-01286851/document\">Ludics and Natural Language: First Approaches</a>. I think I also came across this  2011 <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-19211-1_1\">Speech Acts in Ludics</a> by MR Fleury, S Tronçon. I had come across <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-19211-1_4\">Ludics and the Web: Another reading of Standard Operations</a> a few years ago. But I think I thought something was a bit odd when I read it. It may have been my grasp of Ludics that was nearly 0 at the time, and still is very minimal.</p>",
        "id": 260020322,
        "sender_full_name": "Henry Story",
        "timestamp": 1635870081
    },
    {
        "content": "<p>Thanks for the other references <span class=\"user-mention\" data-user-id=\"281126\">@Henry Story</span> , useful to know about them!</p>",
        "id": 260465135,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1636146577
    },
    {
        "content": "<p>It would be nice if this channel were also public :-)</p>",
        "id": 284239619,
        "sender_full_name": "Henry Story",
        "timestamp": 1653759137
    },
    {
        "content": "<p>(I just remembered that I should be working on the following not so much on entropy!)</p>\n<p>Btw, I think I have found a good practical case for using Category Theory in Security and Access Control that follows on the discussion we had over 6 months ago.  Well at least it looks like it's very close. </p>\n<p>Remember a Solid web server adds a link to every resource that contains a description of who can access. (see <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/security.20.2B.20ct/near/252539259\">above</a>). At present those are just lists, but with OWL one could create sets by descriptions. For example the set of all friends of a friend of someone. (more about foaf in <a href=\"https://arxiv.org/abs/1706.00526\">the bicategories of relations article</a>).  So if we extend bicategories to have linked data like we have linked web pages, where one can follow links from my profile to anyone of my friend's profiles, who all host theirs on their Freedom Boxes (see <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/security.20.2B.20ct/near/252856574\">above</a>), then we have a decentralised system.<br>\n<a href=\"https://raw.githubusercontent.com/wiki/banana-rdf/banana-rdf/img/WebID-foafKnows.jpg\">linked profiles starting from a WebID</a></p>\n<div class=\"message_inline_image\"><a href=\"https://raw.githubusercontent.com/wiki/banana-rdf/banana-rdf/img/WebID-foafKnows.jpg\" title=\"linked profiles starting from a WebID\"><img src=\"https://uploads.zulipusercontent.net/a66533db8a5f70f4ff59364c9408b6bee0864ad3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77696b692f62616e616e612d7264662f62616e616e612d7264662f696d672f57656249442d666f61664b6e6f77732e6a7067\"></a></div><p>But we have a problem. Say I conservatively only have 100 friends, and my friends have 100 friends with no overlaps. Then when I authenticate to a resource that requires me to prove that I am a friend of a friend of someone I could prove ownership of my <a href=\"https://www.w3.org/2005/Incubator/webid/spec/identity/#overview\">WebID</a>, but that would require the server in the worst case  to search all the profiles, since some  may have been updated in the meantime. That could  require 100 connections on the server's part to find all the friend's profiles. If we then move one level further to friends of friends of friends, then the server would end up having to search 10 thousand profiles. That would not make for a very efficient or reactive system.</p>\n<p>The answer to this is quite simple: if the client authenticates, then it knows the relations that is correct, so it should be able pass the proof along with the request. Or perhaps a proof is not needed but just enough of a hint of a proof hint. That could reduce the search space from 10 thousand to 1 or 2 requests. </p>\n<p>I started looking into this recently, and it looks like all the client has to do is pass a path starting from the rules in the acl. That sounds very much like some things I heard about categories being proofs, which would be handy as that could help serve as a proof that such a procedure constitutes a proof. </p>\n<p>It looks like I am going to be able to work on implementing this.  It would help if I could find a tutor (on the CT side) to help guide me in the process if anyone here is interested.</p>",
        "id": 284240856,
        "sender_full_name": "Henry Story",
        "timestamp": 1653760690
    },
    {
        "content": "<p>Following up on the above idea of using proofs on the web, there is also work described in the <a href=\"https://josd.github.io/Talks/2022/08swig/#(0)\">presentation of n3</a> on <a href=\"https://josd.github.io/Talks/2022/08swig/#(14)\">slide 14</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Turtle\"><pre><span></span><code><span class=\"p\">[]</span> <span class=\"kt\">a</span> <span class=\"nn\">r</span><span class=\"p\">:</span><span class=\"nt\">Proof</span><span class=\"p\">,</span> <span class=\"nn\">r</span><span class=\"p\">:</span><span class=\"nt\">Conjunction</span><span class=\"p\">;</span>\n  <span class=\"nn\">r</span><span class=\"p\">:</span><span class=\"nt\">component</span> <span class=\"nv\">&lt;#lemma1&gt;</span><span class=\"p\">;</span>\n  <span class=\"nn\">r</span><span class=\"p\">:</span><span class=\"nt\">component</span> <span class=\"nv\">&lt;#lemma2&gt;</span><span class=\"p\">;</span>\n  <span class=\"nn\">r</span><span class=\"p\">:</span><span class=\"nt\">gives</span> <span class=\"p\">{</span>\n    <span class=\"p\">:</span><span class=\"nt\">Socrates</span> <span class=\"kt\">a</span> <span class=\"p\">:</span><span class=\"nt\">Human</span><span class=\"p\">.</span>\n    <span class=\"p\">:</span><span class=\"nt\">Socrates</span> <span class=\"kt\">a</span> <span class=\"p\">:</span><span class=\"nt\">Mortal</span><span class=\"p\">.</span>\n  <span class=\"p\">}.</span>\n</code></pre></div>\n<p>And on <a href=\"https://josd.github.io/Talks/2022/08swig/#(23)\">slide 23</a> the adavantages of using proofs to reduce the search space on the server are explained. Work on this goes back to 2006 at least, see  the no longer working web slides <a href=\"https://www.w3.org/2006/09dc-aus/swpf#(1)\">towards proof exchange on the semantic web</a>.</p>",
        "id": 294917006,
        "sender_full_name": "Henry Story",
        "timestamp": 1661276651
    },
    {
        "content": "<p>I made a recording of a demo to the W3C Solid Community Group illustrating the type of access control protocol I was talking earlier in this thread <a href=\"https://twitter.com/bblfish/status/1666547828506742788\">https://twitter.com/bblfish/status/1666547828506742788</a></p>",
        "id": 364578882,
        "sender_full_name": "Henry Story",
        "timestamp": 1686234054
    },
    {
        "content": "<p>I am reading the 1992 <a href=\"https://dl.acm.org/doi/abs/10.1145/138873.138874\">Authentication in distributed systems: theory and practice</a> by Butler Lampson,  Martín Abadi,  Michael Burrows (who wrote the AltaVista search engine),  and Edward Wobber. (I had read other articles around it, but missed this very detailed one). It describes the modal \"says\" operator (S says P). They were working at Digital Equipment's <a href=\"https://en.wikipedia.org/wiki/DEC_Systems_Research_Center\">Systems Research Center</a> named SRC - which helps understand some of the examples.<br>\nAbadi later described an index Monad based version of this in the 2006 <a href=\"https://dl.acm.org/doi/abs/10.1145/1159803.1159839\">Access control in a core calculus of dependency</a>. (the index is on the type of Agents). <br>\nAre there any advances in this area that should be looked to?</p>",
        "id": 382891180,
        "sender_full_name": "Henry Story",
        "timestamp": 1691488372
    },
    {
        "content": "<p>I think it depends in which direction you want advances. Deepak Garg wrote a phd thesis at CMU on Authorization logic, a long time ago, 2009 <a href=\"https://people.mpi-sws.org/~dg/papers/papers.html#theses\">https://people.mpi-sws.org/~dg/papers/papers.html#theses</a>. but Abadi's work on DCC has had quite a following.</p>",
        "id": 383038480,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1691517679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276656\">Valeria de Paiva</span> <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/security.20.2B.20ct/near/383038480\">said</a>:</p>\n<blockquote>\n<p>I think it depends in which direction you want advances. Deepak Garg wrote a phd thesis at CMU on Authorization logic, a long time ago, 2009 <a href=\"https://people.mpi-sws.org/~dg/papers/papers.html#theses\">https://people.mpi-sws.org/~dg/papers/papers.html#theses</a>. but Abadi's work on DCC has had quite a following.</p>\n</blockquote>\n<p>Thanks for the pointer. It looks like Garg's PhD thesis puts forward a logic of saying-that that have a number of advantages, including a details sequent calculus of saying that, and a few improvements to the rules put forward earlier by Burrows, Abadi, etc...<br>\nWhat I find the most interesting is that hypothetical reasoning is always performed relative to the claims of a principal k, which is indicated in the hypothetical judgment by writing the latter as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">;</mo><mi mathvariant=\"normal\">Γ</mi><msup><mo>⊢</mo><mi>k</mi></msup><mi>s</mi></mrow><annotation encoding=\"application/x-tex\"> \\Sigma; \\Gamma \\vdash^{k} s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⊢</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> .</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>⊢</mo><mi>k</mi><mo>≽</mo><msub><mi>k</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\"> \\Sigma \\vdash k ≽ k_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8311em;vertical-align:-0.1367em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel amsrm\">≽</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>−</mo><mo>−</mo><mo>−</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-----</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">;</mo><mi mathvariant=\"normal\">Γ</mi><mo separator=\"true\">,</mo><mi>k</mi><mtext> claims </mtext><mi>s</mi><msup><mo>⊢</mo><msub><mi>k</mi><mn>0</mn></msub></msup><mi>s</mi></mrow><annotation encoding=\"application/x-tex\"> \\Sigma; \\Gamma, k \\text{ claims } s\\vdash^{k_0} s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Γ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord text\"><span class=\"mord\"> claims </span></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⊢</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span></p>\n<p>where ≽ gives a partial order of principals. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> is the context of typed variables and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> the context of Judgements such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mtext> true </mtext></mrow><annotation encoding=\"application/x-tex\">s \\text{ true }</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord text\"><span class=\"mord\"> true </span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mtext> claims </mtext><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">k \\text{ claims } s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord text\"><span class=\"mord\"> claims </span></span><span class=\"mord mathnormal\">s</span></span></span></span> where the latter is just a shorthand for the otherwise confusing if without partenthesis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mtext> says </mtext><mi>s</mi><mo stretchy=\"false\">)</mo><mtext> true </mtext></mrow><annotation encoding=\"application/x-tex\">(k \\text{ says } s) \\text{ true }</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord text\"><span class=\"mord\"> says </span></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\"> true </span></span></span></span></span> </p>\n<p>What this shows is how we use rdf datasets, which consists of a default graph, and a set of named graphs. The default graphs is the one that has a hidden implicit agent pronouncing it, so it matches very nicely.</p>",
        "id": 385005536,
        "sender_full_name": "Henry Story",
        "timestamp": 1692077357
    },
    {
        "content": "<p>Deepak Garg applied it to a Unix file system because he wanted to have it put to use quickly and without needing to change existing software. <br>\nBut that I think leads to it being prone to a Confused Deputy attack which was very well explained in the 2009 article \"ACL's don't\" by Tyler Close who argued for capability systems instead. The problem is you cannot just change the OS rights, you have to change the programs themselves to take capabilities. </p>\n<p>But my feeling is that capabilities are just proof objects of the \"says\" logic, which should be of interest to <span class=\"user-mention\" data-user-id=\"276656\">@Valeria de Paiva</span>  :-)</p>\n<p>Without the says modality capabilities are pretty much incomprehensible. </p>\n<p>But with them understood as proof objects I think it makes a lot more sense, and we can see that what is needed is an incorporation of that into Access Control Logics. The web is essentially multi-agent, and so the \"A says p\" indexed modality has to be at the core of web access control logic. <br>\n<a href=\"https://github.com/co-operating-systems/PhD/blob/main/Logic/ACLsDont.md\">https://github.com/co-operating-systems/PhD/blob/main/Logic/ACLsDont.md</a></p>",
        "id": 385013656,
        "sender_full_name": "Henry Story",
        "timestamp": 1692080336
    },
    {
        "content": "<p>Now Tim Berners-Lee, Dan Connolly and others in 2009 also worked on the says modality using N3, an extension of RDF with rules. I have pointers to that work here:<br>\n<a href=\"https://github.com/co-operating-systems/PhD/blob/main/Logic/ABLP.md\">https://github.com/co-operating-systems/PhD/blob/main/Logic/ABLP.md</a></p>\n<p>Now Deepak's Phd thesis was written up in terms of sequent calculus. I wonder what the best way to translate that to the semantic web would be?</p>",
        "id": 385015176,
        "sender_full_name": "Henry Story",
        "timestamp": 1692080846
    },
    {
        "content": "<p>I remembered that  <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>  2017 <a href=\"https://arxiv.org/abs/1706.00526\">Knowledge Representation in Bicategories of Relations</a> comes with an appendix of a sequent calculus for RDF. So part of the work has been done...</p>",
        "id": 385065333,
        "sender_full_name": "Henry Story",
        "timestamp": 1692093514
    },
    {
        "content": "<p>Hi Henry, I don't know about</p>\n<blockquote>\n<p>But that I think leads to it being prone to a Confused Deputy attack which was very well explained in the 2009 article \"ACL's don't\" by Tyler Close who argued for capability systems instead. </p>\n</blockquote>\n<p>and in my books a logic is good/decent/sensible if you can give it sequent calculus/axioms and especially Natural Deduction (ND) presentations, proved equivalent (after all they are presentations, the essence should be the same). so you're right ! I'm very interested in a  logic of multi-agents/multi principals for \"P says that\" with different presentations, proved equivalent. actually I have been interested in that since 1995 (see <a href=\"https://www.cl.cam.ac.uk/~lp15/Grants/auth.html\">the project I wrote</a>, but couldn't develop as I moved to Birmingham). I will investigate the  references you mention, many thanks! (and of course sequent-calculus should be cut-free  and ND should satisfy  normalization, <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 385760334,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1692309896
    },
    {
        "content": "<p>It makes sense that if Guard receiving proofs is to prove access to a resource it should only go on evidence provided, which moves one as I understand to constructive logic. So RDF should be useable that way...  I will try to go with Deepak Garg's work, and consulting your earlier  work you mentioned.</p>\n<p>In the past week I was busy trying to write up access control use cases using Verifiable Credentials, but I think I hit a snag in their semantic mapping, of the json-ld contexts. It seems that they intended to use the right model that can nicely be interpreted with the \"says\" modality, but that that part was not tested. They were aiming I think at developers that would play with the Json encoding without ever thinking of the logical structure behind it. <br>\nBut without a good logical encoding extensibility becomes very difficult and noisy. <br>\n<a href=\"https://github.com/w3c/vc-data-model/issues/1248\">https://github.com/w3c/vc-data-model/issues/1248</a></p>",
        "id": 386810655,
        "sender_full_name": "Henry Story",
        "timestamp": 1692786361
    },
    {
        "content": "<p>I think I worked out what the main logical problem with W3C Verifiable Credentials is in <a href=\"https://github.com/w3c/vc-data-model/issues/1248#issuecomment-1693975080\">this longer comment</a>.<br>\nEssentially they are modelling a verifiable credential wrongly. This does not matter so long as people are only using the VCs syntactically in JSON, but becomes noticeable as soon as the mapping to RDF is made (ie to the positive part of First order logic -  regular logic using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊤</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\"> \\land , \\top, \\exists </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∧</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⊤</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∃</span></span></span></span> . So this is how they model a Credential <br>\n<a href=\"/user_uploads/21317/F7MdjvcTDqw_Q5Aq6lQYqp1Z/image.png\">Current model of a VC</a><br>\nBizarrely the signature is placed in a node, but the graph to be signed is outside,  so one cannot tell what is being signed!<br>\n(The node colors are arbitrary btw - and are just there as reminders of colors used in Figure 6 of the spec). The only things that matter are where the graphs are located: on the default surface or on a surface in a node of the default graph - eg. the green surface here.)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/F7MdjvcTDqw_Q5Aq6lQYqp1Z/image.png\" title=\"Current model of a VC\"><img src=\"/user_uploads/21317/F7MdjvcTDqw_Q5Aq6lQYqp1Z/image.png\"></a></div>",
        "id": 387834110,
        "sender_full_name": "Henry Story",
        "timestamp": 1693298507
    },
    {
        "content": "<p>The graph above is logically equivalent to the following (among many others), where an <code>owl:sameAs</code> relation goes from one arbitrarily chosen node to itself. Many other such graphs could be produced. In any of such graphs it would be impossible to guess what the signatures was a signature of.<br>\n<a href=\"/user_uploads/21317/y9VzRZsKrUjbeTBQYskXE3Ya/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/y9VzRZsKrUjbeTBQYskXE3Ya/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/y9VzRZsKrUjbeTBQYskXE3Ya/image.png\"></a></div>",
        "id": 387834579,
        "sender_full_name": "Henry Story",
        "timestamp": 1693298666
    },
    {
        "content": "<p>The answer is obvious and easy: place the objects to be signed inside a node (the square ping surface below) so that the signed graph is closed.<br>\n<a href=\"/user_uploads/21317/baHtF2TSSW2ZfgyI9pWtGIH6/image.png\">image.png</a>. Then all those problems disappear.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/baHtF2TSSW2ZfgyI9pWtGIH6/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/baHtF2TSSW2ZfgyI9pWtGIH6/image.png\"></a></div>",
        "id": 387834904,
        "sender_full_name": "Henry Story",
        "timestamp": 1693298788
    },
    {
        "content": "<p>You'd think that having shown the problem, adoption of the solution would follow (or at least discussion of other possible ones). But the authors have a view that the charter forced them to produce <a href=\"https://github.com/w3c/vc-data-model/issues/1248#issuecomment-1696207997\">illogical standards</a> even though they can't find text where it is said! <br>\nSigh!</p>",
        "id": 387835685,
        "sender_full_name": "Henry Story",
        "timestamp": 1693299095
    },
    {
        "content": "<p>I can't imagine architects building high rises and pushing mathematics aside as unimportant or just too theoretical. Yet we have this type of people on the web standards groups. My hypothesis is that they came to think that everything is a matter of convention, of majority voting, and then forget that mathematical structures underlie and precede the structures of what they are trying to build and those are not reached by agreement.</p>",
        "id": 387837299,
        "sender_full_name": "Henry Story",
        "timestamp": 1693299665
    },
    {
        "content": "<p>Notice how my <a href=\"/user_uploads/21317/baHtF2TSSW2ZfgyI9pWtGIH6/image.png\">diagrams above</a> are nicely readable in night and day mode?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/baHtF2TSSW2ZfgyI9pWtGIH6/image.png\" title=\"diagrams above\"><img src=\"/user_uploads/21317/baHtF2TSSW2ZfgyI9pWtGIH6/image.png\"></a></div>",
        "id": 388097830,
        "sender_full_name": "Henry Story",
        "timestamp": 1693399422
    },
    {
        "content": "<p>I proposed a potential solution for the above conundrum, which feels like it is something that must have been studied mathematically.<br>\nA shift operator would take a relation (type) R on a graph G that can have graphs at the nodes recursively, and that would move G into a node and union the objects of the relation R into the new graph with G as a node. I illustrated it here: <a href=\"https://github.com/json-ld/json-ld.org/issues/817\">https://github.com/json-ld/json-ld.org/issues/817</a><br>\nIt would be a bit more complex than that, and it to tell the truth, it is not quite a graph transformation problem, but rather an interpretation of a tree (Json) into a labeled graph problem (JsonLD)</p>",
        "id": 388265918,
        "sender_full_name": "Henry Story",
        "timestamp": 1693466882
    }
]