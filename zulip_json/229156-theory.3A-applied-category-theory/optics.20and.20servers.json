[
    {
        "content": "<p>Hi there, I've been informed that people here might be interested in this presentation that I gave yesterday about a project of mine, relating the implementation of server and their API all while using lenses to describe and extend both implementation and API <a href=\"https://www.youtube.com/watch?v=4xpbYPa1lTc\">https://www.youtube.com/watch?v=4xpbYPa1lTc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4xpbYPa1lTc\" href=\"https://www.youtube.com/watch?v=4xpbYPa1lTc\"><img src=\"https://uploads.zulipusercontent.net/0a2b9df6b4de3278663704f2edca126da4243b53/68747470733a2f2f692e7974696d672e636f6d2f76692f34787062595061316c54632f64656661756c742e6a7067\"></a></div>",
        "id": 244737770,
        "sender_full_name": "André Videla",
        "timestamp": 1625248885
    },
    {
        "content": "<p>Watching this I thought to myself \"Mhh, lenses look very much like coalgebras\", and that would fit the discussion we were having on the <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/web.20cats/near/243818580\">web-cats channel</a> recently.  So I thought I'd catch up a bit on lenses and watched <a href=\"https://www.youtube.com/watch?v=9_iYlp8smc8\">Bartosz Milewski's course on lenses</a> and indeed they are. At the end of the talk he even says: \"a lens is a comonad coalgebra\" (perhaps limited to the Store Comonad?), something to add to the discussion about Comonads that <span class=\"user-mention\" data-user-id=\"390165\">@Eric Neumann</span> started.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9_iYlp8smc8\" href=\"https://www.youtube.com/watch?v=9_iYlp8smc8\"><img src=\"https://uploads.zulipusercontent.net/6cde77c572fcaea993960f82101a0e93440cd246/68747470733a2f2f692e7974696d672e636f6d2f76692f395f69596c7038736d63382f64656661756c742e6a7067\"></a></div><p>Bartosz mentions that this comes from Russell O'Connor  who remarked that <a href=\"https://patternsinfp.wordpress.com/2011/01/31/lenses-are-the-coalgebras-for-the-costate-comonad/\">lenses are exactly the coalgebras for the costate comonad</a>.</p>",
        "id": 244779974,
        "sender_full_name": "Henry Story",
        "timestamp": 1625287146
    },
    {
        "content": "<p>(The second part of that talk goes into a more composeable version of Lenses, still related to the above though by the Yoneda Lemma)</p>",
        "id": 244790182,
        "sender_full_name": "Henry Story",
        "timestamp": 1625300407
    },
    {
        "content": "<p>I was just looking at this course from 2019 again <a href=\"https://www.youtube.com/watch?v=HOmOQnQGtPU\">Comonads by Example</a> by Chris Penner, who really does a very good job of building up intutions very clearly. (I am not sure yet about his idea that there is something comonadic about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>→</mo><mi>f</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\to  f b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">b</span></span></span></span> in monads...). <br>\nThe second video looks at the Store comonad.<br>\nThat made me think: A Web Server is a store of States comonad. The index into the Store are URLs and the values are states, which can be changed. Or perhaps better the values are coalgebras with various methods to observe and change the state?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"HOmOQnQGtPU\" href=\"https://www.youtube.com/watch?v=HOmOQnQGtPU\"><img src=\"https://uploads.zulipusercontent.net/7bd9cd4be924fc693a1055c52f1e8c40e6e12f1a/68747470733a2f2f692e7974696d672e636f6d2f76692f484f6d4f516e51477450552f64656661756c742e6a7067\"></a></div>",
        "id": 244843129,
        "sender_full_name": "Henry Story",
        "timestamp": 1625377982
    },
    {
        "content": "<p>When I want protect a resource with <a href=\"https://github.com/solid/authorization-panel/issues/210#issuecomment-838747077\">access control rules (see issue 210)</a> I could use something like the Haskell <a href=\"https://hackage.haskell.org/package/comonad-5.0.8/docs/Control-Comonad-Store.html\">experiment method</a> method (explained in the second video)</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">experiment</span> <span class=\"ow\">::</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>as I provide a function from a URL to a set of of URLs which are all the access control rules linked to from the first. That function would need to be given the store itself, in order to (1) be able to fetch the first access control rule and then (2) collect for each rule the imported access control rules. So <code>experiment</code> above would be very inefficient way of doing that: one really wants to traverse the store....</p>",
        "id": 244843835,
        "sender_full_name": "Henry Story",
        "timestamp": 1625379314
    },
    {
        "content": "<p>What falls out from that experiment and the hyper-textual and hyper-data nature of the web, is that as soon as you start following links, you don't as a client at least (but client/server is just a role distinction not an ontologically fundamental one  - See <a href=\"https://github.com/w3c/architecture/issues/14\">issue on peer to peer web</a> ), ... so you don't consider one web server alone, but you must look at the whole web itself.<br>\nSo you need a Web Store, that gives you the  state of all the resources possible. That would then have to be in non-verified handwavy scala notation</p>\n<div class=\"codehilite\" data-code-language=\"Scala\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Web</span> <span class=\"o\">=</span> <span class=\"nc\">Store</span><span class=\"p\">[</span><span class=\"nc\">URL</span><span class=\"p\">,</span><span class=\"nc\">Option</span><span class=\"p\">[</span><span class=\"nc\">ResourceState</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>Ie an index from URLs into optional states, because not URLs have a reference.</p>",
        "id": 244843972,
        "sender_full_name": "Henry Story",
        "timestamp": 1625379585
    },
    {
        "content": "<p>But that is not quite right, because we never get back states on the web (a web server may), which we can interact with. Instead  we send messages to those resources, which respond by telling us if they exist (200) or don't (40x if lucky, or by never responding if the server is not up or does not exist.)</p>",
        "id": 244844782,
        "sender_full_name": "Henry Story",
        "timestamp": 1625380957
    },
    {
        "content": "<p>In that video there is a quick overview of how to represent Conway's Game of Life using the Store comonad. He points out that the default implementation is very slow, but that this can be fixed using representable functors. I wonder if those can be used for caching on the web too! <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> - I need that!</p>",
        "id": 244845685,
        "sender_full_name": "Henry Story",
        "timestamp": 1625382546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281126\">Henry Story</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/optics.20and.20servers/near/244843129\">said</a>:</p>\n<blockquote>\n<p>I was just looking at this course from 2019 again <a href=\"https://www.youtube.com/watch?v=HOmOQnQGtPU\">Comonads by Example</a> by Chris Penner, who really does a very good job of building up intutions very clearly. (I am not sure yet about his idea that there is something comonadic about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>→</mo><mi>f</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\to  f b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">b</span></span></span></span> in monads...). <br>\nThe second video looks at the Store comonad.<br>\nThat made me think: A Web Server is a store of States comonad. The index into the Store are URLs and the values are states, which can be changed. Or perhaps better the values are coalgebras with various methods to observe and change the state?</p>\n</blockquote>\n<p>This reminds me of <a href=\"https://www.youtube.com/watch?v=4xpbYPa1lTc\">a recent talk</a> by <span class=\"user-mention\" data-user-id=\"296298\">@André Videla</span> on RESTful APIs as parametrised lenses. If you consider that (monomorphic) lenses are coalgebras of Store, this is even a more compelling link.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4xpbYPa1lTc\" href=\"https://www.youtube.com/watch?v=4xpbYPa1lTc\"><img src=\"https://uploads.zulipusercontent.net/0a2b9df6b4de3278663704f2edca126da4243b53/68747470733a2f2f692e7974696d672e636f6d2f76692f34787062595061316c54632f64656661756c742e6a7067\"></a></div>",
        "id": 244850699,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1625390908
    },
    {
        "content": "<blockquote>\n<p>This reminds me of a recent talk by @André Videla on RESTful APIs as parametrised lenses. </p>\n</blockquote>\n<p>heh. yes, indeed that is what I started watching a few days ago. Lenses reminded me of coalgebras, and <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/optics.20and.20servers/near/244779974\">a talk by Bartosz</a> showed that indeed \"lenses are exactly the coalgebras for the costate comonad\", and so I wanted to get a better feel for the costate comonad = the store comonad.  I should perhaps finish watching the Optics talk now that I have covered Store. Then I can provide some feedback.</p>",
        "id": 244850805,
        "sender_full_name": "Henry Story",
        "timestamp": 1625391151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci (he/him)</span> quote me as writing</p>\n<blockquote>\n<p>A Web Server is a store of States comonad. The index into the Store are URLs and the values are states, which can be changed. Or perhaps better the values are coalgebras with various methods to observe and change the state?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"296298\">@André Videla</span>'s starts looking at Lenses as a topic at minute 19 of the talk. <br>\nAt around minute 22 he looks at how GET and POST on a resource would map to functions, except of course that the state change method requires state to be around (in an FP language). And so that is what is addressed at minute 25. The point there is that from the point of view of the client the lens is enough, it does not need to take account of the state, but the server does. And so just before minute 26 he looks at State Management. And so he moves from </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">GET:</span> <span class=\"kt\">User</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"kt\">Todo</span>\n<span class=\"kt\">PUT:</span> <span class=\"kt\">User</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"ow\">-&gt;</span> <span class=\"nb\">()</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">GET:</span> <span class=\"kt\">User</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">State</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"kt\">Todo</span>\n<span class=\"kt\">PUT:</span> <span class=\"kt\">User</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">State</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">State</span>\n</code></pre></div>\n<p>Which is what I was thinking about the need for a <code>Store URL ((GET x PUT) coalgebra)</code><br>\n(Note that on a well built web server the client should get an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\">ETag header</a>, which should be a name for the state).</p>",
        "id": 244854850,
        "sender_full_name": "Henry Story",
        "timestamp": 1625397860
    },
    {
        "content": "<p>Because the web is built on message passing,  It may be that actor frameworks built around that concept such as <a href=\"https://akka.io\">Akka</a> are better suited to build web servers. There actors are named by URLs and a responsible for some state. So in the web server I built on that, all messages in the system have URLs attached to them, so that they can know where to go.  The server routes the messages to the right actor. I had been thinking of implementing those as state monads communicating with the \"external world\" including other actors.... But an actor could also be a particular location in a Store Comonad (the  location given by URL naming the actor), which would allow it to communicate with its neighbours. </p>\n<p>I was thinking perhaps the extend method could be more appropriate for authorization than the \"experiment\" method I mentioned above. </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">class</span> <span class=\"kt\">Functor</span> <span class=\"n\">w</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Comonad</span> <span class=\"n\">w</span> <span class=\"kr\">where</span>\n    <span class=\"n\">extract</span> <span class=\"ow\">::</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n    <span class=\"n\">duplicate</span> <span class=\"ow\">::</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">w</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">extend</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">w</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>The first function given to extend <code>w a -&gt; b</code>  could be the function that takes a Web Actor (w a) and because it is able to follow links around, can fetch all the needed data to determin access, returning a boolean <code>b</code> (by a stroke of luck the variable names all work).</p>",
        "id": 244856420,
        "sender_full_name": "Henry Story",
        "timestamp": 1625400289
    },
    {
        "content": "<p>So in short it seems like <span class=\"user-mention\" data-user-id=\"296298\">@André Videla</span>'s talk (above) confirms the intutions we were having on the <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/web.20cats\">web-cats channel</a> and especially those expressed by <span class=\"user-mention\" data-user-id=\"390165\">@Eric Neumann</span> about the importance of Comonads for the Web, once we know that Optics are coalgebras for the  Store comonad.</p>",
        "id": 244951577,
        "sender_full_name": "Henry Story",
        "timestamp": 1625500417
    },
    {
        "content": "<p>It turns out that there is also an algebraic description of lenses, along with the coalgebraic one mentioned above. <br>\n\"the category of lenses for a fixed \"view\" V is, up to isomorphism, the category of algebras for a particular monad on Set/V. \"<br>\nthat is taken from the 2012 article from Jeremy Gibbons, Michael Johnson where they explains in detail how they are equivalent for \"very well behaved lenses\" which follow three laws<br>\n<a href=\"https://ubsrvweb09.ub.tu-berlin.de/eceasst/article/view/726\">Relating Algebraic and Coalgebraic Descriptions of Lenses</a>.</p>",
        "id": 245481591,
        "sender_full_name": "Henry Story",
        "timestamp": 1625856101
    },
    {
        "content": "<p>The coalgebra for the store comonad is defined as:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>=</mo><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">⟩</mo><mo>:</mo><mi>S</mi><mo>→</mo><msup><mi>S</mi><mi>V</mi></msup><mo>×</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\"> l = \\langle p, g \\rangle: S \\to S^V \\times V </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span><br>\nwhere p is the change of state function (PUT) and g  is the request to observe a value (GET). <br>\nThe coalgebra is easier to see if we have defined the store monad functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>A</mi><mi>V</mi></msup><mo>×</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">D(A) = A^V \\times V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> then l is the coalgebra <br>\n <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi>D</mi><mi>S</mi></mrow><annotation encoding=\"application/x-tex\"> l : S \\to DS</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> <br>\n(I think I had  somehow been associating the lens with the Store, but  the image below shows clearly how it is the coalgebra on that store!) <br>\nThis is the picture from the article that is really helpful.<br>\n<a href=\"/user_uploads/21317/TYiAo0gTWrCnxF5YrJfV61Gs/Screen-Shot-2021-07-09-at-21.42.10.png\">Lenses are the coalgebras for the costate comonad</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/TYiAo0gTWrCnxF5YrJfV61Gs/Screen-Shot-2021-07-09-at-21.42.10.png\" title=\"Lenses are the coalgebras for the costate comonad\"><img src=\"/user_uploads/21317/TYiAo0gTWrCnxF5YrJfV61Gs/Screen-Shot-2021-07-09-at-21.42.10.png\"></a></div>",
        "id": 245488423,
        "sender_full_name": "Henry Story",
        "timestamp": 1625859846
    },
    {
        "content": "<p>We can actually understand better what part of the web can be modelled by (these types of) lenses by looking at the laws.<br>\nThe first one is the <strong>get-put</strong> law <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo>∘</mo><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">⟩</mo><mo>=</mo><msub><mn>1</mn><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\"> \\epsilon \\circ \\langle p, g \\rangle = 1_S </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br>\nwhich states that if you GET the value and PUT it back then you are in the same state. That is because the store has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\epsilon (f, v) = f(v) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span> <br>\nThat does seem to match HTTP. <br>\nNote that in <span class=\"user-mention\" data-user-id=\"296298\">@André Videla</span> 's <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/optics.20and.20servers/near/244737770\">presentation above</a> there seems to be a problem with the choice of <code>POST</code> as the verb to change a resource instead of <code>PUT</code>. POST <em>creates</em> a new resource, it is a speech/document act, which is unique - so probably where linear logic is needed? a POST can be used to buy something,  send a text message, ... POSTing the same form twice, could end up buying two items... <br>\nOne problem I see for the moment is that I don't see a place for POST in the coalgebras. Especially if S here is the state of one resource, because then it could not create a new one... Is that where the other optics come in?</p>",
        "id": 245492145,
        "sender_full_name": "Henry Story",
        "timestamp": 1625861719
    },
    {
        "content": "<p>the second law known as <strong>put-get</strong> is that if you PUT then GET you should get what you had last PUT. <br>\nThat will work if you are the actor in charge of the resource. If you are a client, then it is quite possible that someone else altered the state of the resource in the mean-time. (As an actor it is also possible that someone edited the file while the server was running, something that it is difficult to exclude). </p>\n<p>And thirdly there is the <strong>Put-put</strong> law which says that if you PUT P and then PUT Q then you could have skipped put of P.  True the last PUT wins. Again this is different from POST: with POST the intermediate creations of resources continue to exist.</p>",
        "id": 245497702,
        "sender_full_name": "Henry Story",
        "timestamp": 1625864541
    },
    {
        "content": "<p>(The article argues all three laws fall out from this being the coalgebra for the store comonad).</p>",
        "id": 245498207,
        "sender_full_name": "Henry Story",
        "timestamp": 1625864659
    },
    {
        "content": "<p>So I'd be interested in knowing where POST could come in?</p>",
        "id": 245498883,
        "sender_full_name": "Henry Story",
        "timestamp": 1625864814
    },
    {
        "content": "<p>I <a href=\"https://gist.github.com/bblfish/e759acba8794b53462c362935a80e471\">wrote up some code</a> using the Scala Monocle library to simulate a POST. It uses the <code>modify</code> method that is defined on the Setter trait, and available on a Lens.</p>\n<div class=\"codehilite\" data-code-language=\"Scala\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">POST</span><span class=\"p\">(</span><span class=\"n\">slug</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">):</span> <span class=\"nc\">Container</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Container</span> <span class=\"o\">=</span>\n    <span class=\"n\">contents</span><span class=\"p\">.</span><span class=\"n\">modify</span><span class=\"p\">(</span><span class=\"n\">oldMap</span> <span class=\"o\">=&gt;</span>\n        <span class=\"n\">oldMap</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">slug</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">TextResource</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n     <span class=\"p\">)</span>\n\n<span class=\"o\">&gt;</span> <span class=\"kd\">val</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">.</span><span class=\"nc\">POST</span><span class=\"p\">(</span><span class=\"s\">\"blog1\"</span><span class=\"p\">,</span><span class=\"s\">\"My first blog. Testing\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"kd\">val</span> <span class=\"n\">newRoot</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">(</span><span class=\"nc\">Server</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"kd\">val</span> <span class=\"n\">newRoot</span><span class=\"p\">:</span> <span class=\"n\">monocle</span><span class=\"p\">.</span><span class=\"nc\">Container</span> <span class=\"o\">=</span> <span class=\"nc\">Container</span><span class=\"p\">(</span><span class=\"nc\">Map</span><span class=\"p\">(</span><span class=\"n\">blog1</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">TextResource</span><span class=\"p\">(</span><span class=\"nc\">My</span> <span class=\"n\">first</span> <span class=\"n\">blog</span><span class=\"p\">.</span> <span class=\"nc\">Testing</span><span class=\"p\">,</span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">07</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"nc\">T14</span><span class=\"p\">:</span><span class=\"mi\">31</span><span class=\"p\">:</span><span class=\"mf\">41.680411</span><span class=\"nc\">Z</span><span class=\"p\">)),</span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">07</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"nc\">T14</span><span class=\"p\">:</span><span class=\"mi\">31</span><span class=\"p\">:</span><span class=\"mf\">41.640292</span><span class=\"nc\">Z</span>\n</code></pre></div>\n<p>So that suggests that POST is ok.</p>",
        "id": 245559426,
        "sender_full_name": "Henry Story",
        "timestamp": 1625934199
    },
    {
        "content": "<p>So where I differ from <span class=\"user-mention\" data-user-id=\"296298\">@André Videla</span> in the way I conceive of a Web Server, is that I think of a web server as essentially perhaps requiring nothing more than the colagebra on the Store comonad, and perhaps the concept of a Container and a Resource as in </p>\n<div class=\"codehilite\" data-code-language=\"Scala\"><pre><span></span><code><span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Resource</span><span class=\"p\">[</span><span class=\"nc\">T</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">:</span> <span class=\"nc\">T</span>\n    <span class=\"k\">def</span> <span class=\"nf\">created</span><span class=\"p\">:</span> <span class=\"nc\">Instant</span>\n<span class=\"p\">}</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Container</span><span class=\"p\">(</span> <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nc\">Map</span><span class=\"p\">[</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Resource</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nc\">Map</span><span class=\"p\">(),</span>\n         <span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nc\">Instant</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"p\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Resource</span><span class=\"p\">[</span><span class=\"nc\">Map</span><span class=\"p\">[</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Resource</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]]]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">TextResource</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nc\">Instant</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"p\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Resource</span><span class=\"p\">[</span><span class=\"nc\">String</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>The String attributes in the Map constitutes a path segment giving us the path to the resource. Containers can contain Containers, giving us the URL Path such as <code>&lt;/people/tim&gt;</code> .<br>\nThe resource itself could just be a bytestring with metadata such as a mime type to be interpreted by the client, or a creation date. </p>\n<p>It is the clients that create the resources, that get described with metadata. A Client can create an image, some css, some html, a film, some javascript, on a server and link them altogether so that they form a nice blog page. Then it can add some RDF to describe the data in an RSS feed.</p>\n<p>It is really up to a read/write client to POST new content, edit it with PUT if needed, and GET it to display it. That is what <a href=\"https://www.w3.org/TR/ldp/\">the LDP protocol</a> essentially describes. <br>\nSo the way to see it is perhaps that Lenses explain why we have this simple universal API with which to interact with any such server.</p>\n<p>Additional efficiency additions like </p>\n<ul>\n<li>QUERY - an efficient form of GET (one can use <a href=\"https://www.w3.org/TR/2013/REC-sparql11-query-20130321/\">SPARQL</a> when the data is relational) or </li>\n<li>PATCH is just an efficient form of PUT (one can use <a href=\"https://www.w3.org/TR/sparql11-update/\">SPARQL UPDATE</a>.</li>\n</ul>\n<p>These require more of the server, as they require it to interpret the data on its store and keep indexes for example.</p>",
        "id": 245567245,
        "sender_full_name": "Henry Story",
        "timestamp": 1625945748
    },
    {
        "content": "<p>Say that lenses as such actually help give us a nice model of a web server (without access control).  Is there a category where I could take the idea of a Lens which would better fit the <a href=\"https://en.wikipedia.org/wiki/Actor_model\">actor model</a>, such as implemented by Erlang or <a href=\"https://akka.io\">akka</a>)</p>",
        "id": 245567859,
        "sender_full_name": "Henry Story",
        "timestamp": 1625946690
    },
    {
        "content": "<p>I think one can actually see why the actor model is advantageous over the model presented in Andre's video <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/optics.20and.20servers/near/244737770\">above</a>. </p>\n<p>The model of the web server given by Andre is an immutable model. That is the advantage of optics: it gives you a way to change the state of one component inside a much larger structure. So you are to imagine the whole web server in one immutable data structure.<br>\nA PUT on &lt;/foo/bar/baz&gt; changes the object at that location and returns a new root web server object.  The risk here is that one then has to sequentialise updates, or deal with problems of merging a number of web server objects resulting from parallel update requests.  Having an sequence of update events for the whole web server could be useful for keeping a full history of it perhaps. But given that a web server has pages linked to the whole web, and that keeping a full history of the whole web is impossible and even undersireable (due to privacy reasons for example), it is not clear that this is really that useful. The state of the server will have to be written to disk, so it may be better there to have a versioned file system. In any case the versioning was not the part put forward in the talk, and it creates a lot of other problems as we saw, potentially sequentialising all updates: someone wants to upload a 500MB video of a cute duck swimming in a pond, and everyone else using your web server will have to wait for that to complete before they can do the next update.</p>\n<p>The actor model on the other had limits state transformations to the smallest state needed. So if a new video is POSTed to /2021/07/11/ then only one actor for that resource needs to be synchronise the state of that resource. Edits can occur simultaneously on any number of other resources too.</p>",
        "id": 245595801,
        "sender_full_name": "Henry Story",
        "timestamp": 1625992152
    },
    {
        "content": "<p>Even though I don't see Lenses as a good way to implement a web server, it does at least seem to do one thing right: it captures the laws a client relies on when fetching, puting or creating a resource (at least in an <code>ldp:BasicContainer</code>). The laws seem to tell us that a client that makes such requests, can know that it is not responsible for any other changes to the server. Any other changes must be due to other agents.<br>\nTo re-iterate the problem: an implementation of a web server as a Lens would force all changes to by synchronised by the server as it coalgebraically steps from one state to the next - this requires too much synchronisation.<br>\nBut the laws seem to be right.</p>\n<p>So we seem to have structure describing a contract. Does that make any categorical sense?</p>",
        "id": 245787441,
        "sender_full_name": "Henry Story",
        "timestamp": 1626161238
    },
    {
        "content": "<p>The rabbit hole for lenses goes even further…<br>\nSee Spivak’s <a href=\"https://arxiv.org/pdf/2103.01189.pdf\">Learners’ Languages</a></p>",
        "id": 247526172,
        "sender_full_name": "Eric Neumann",
        "timestamp": 1627512081
    }
]