[
    {
        "content": "<p>Tuesday, 23:00 UTC</p>",
        "id": 230567511,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1615919664
    },
    {
        "content": "<p><em>Abstract:</em><br>\nPerhaps the most natural place to notice the duality between functors and cofunctors is within the double category Poly(E) of polynomials in a category E with pullbacks. Monads in Poly(E) whose underlying polynomial is a left adjoint are precisely internal categories, with the monad morphisms equivalent to internal functors. Dually, comonads in Poly(E) whose underlying polynomial is a right adjoint are also internal categories, while the comonad morphisms correspond to internal cofunctors. However, when E has finite limits, Ahman and Uustalu characterise categories and cofunctors in a different way, as comonads and comonad morphisms in the full double subcategory of Poly(E) on the terminal object.</p>\n<p>In this talk, I will first discuss how the above view of categories and cofunctors relates to the characterisation given by Ahman and Uustalu. Next I will consider a kind of morphism between categories, called a (delta) lens, which is both a functor and a cofunctor in a compatible way. Finally, I will characterise split opfibrations as lenses which behave nicely with respect to the decalage construction.</p>",
        "id": 230567528,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1615919673
    },
    {
        "content": "<p>I'll be checking in with Zulip after my talk, so please do feel welcome ask any questions here and I'll get back to you with answers.</p>",
        "id": 230577460,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1615923546
    },
    {
        "content": "<p>Great talk. Very interesting that Map(Poly) is where monad morphisms are actually functors, as opposed to the more complex morphisms in Mnd(Span). Do you have a simple intuition for why this is the case?</p>",
        "id": 230630227,
        "sender_full_name": "Christian Williams",
        "timestamp": 1615949486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/282140-workshop.3A-Polynomial.20Functors.20.40.20Topos/topic/Bryce.20Clarke.3A.20.22Cofunctors.2C.20lenses.2C.20and.20split.20opfibrations.22/near/230630227\">said</a>:</p>\n<blockquote>\n<p>Great talk. Very interesting that Map(Poly) is where monad morphisms are actually functors, as opposed to the more complex morphisms in Mnd(Span). Do you have a simple intuition for why this is the case?</p>\n</blockquote>\n<p>I'm not sure if I have a simple intuition, but I think it's just because double categories are nicer than bicategories for some purposes.</p>",
        "id": 230639534,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1615957877
    },
    {
        "content": "<p>I think the two key things to understand is (1) why restricting to the maps in Poly(E) gives you the double category Span(E) and (2) why the vertical monad morphisms in Span(E) give you exactly functors. </p>\n<p>The answer to (1) is due to how polynomials are constructed as a sequence of adjoints (as Richard showed in his talk yesterday) and isolating the left adjoints give you exactly the spans. <br>\nThe answer to (2) is because Span(E) is has companions and conjoints (it's a framed bicategory). Every vertical monad morphism in the double category could instead be understood as a horizontal monad morphism where the 1-cell involved is a companion (which is a left adjoint). When one works in the bicategory of spans, we instead have to do this \"manually\" and say that functors are monad morphisms whose 1-cell is a map / left adjoint.</p>",
        "id": 230640105,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1615958346
    },
    {
        "content": "<p>I'm not sure if that exactly answers you question, but I hope it helps. Do let me know if something could still be made clearer.</p>",
        "id": 230640201,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1615958434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/282140-workshop.3A-Polynomial.20Functors.20.40.20Topos/topic/Bryce.20Clarke.3A.20.22Cofunctors.2C.20lenses.2C.20and.20split.20opfibrations.22/near/230630227\">said</a>:</p>\n<blockquote>\n<p>Great talk. </p>\n</blockquote>\n<p>And thank you! I'm glad you enjoyed the talk.</p>",
        "id": 230640339,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1615958537
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/dnc1DEmMQcokcEn3dny7OQ1D/Bryce-Clarke-Slides-Cofunctors_lenses_split_opfibrations.pdf\">Bryce-Clarke-Slides-Cofunctors_lenses_split_opfibrations.pdf</a> Here is a copy of the slides from the talk if anyone is interested too.</p>",
        "id": 230640463,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1615958645
    },
    {
        "content": "<p>yes, this makes sense (and dualizes nicely, as you explained). thanks!</p>",
        "id": 230785591,
        "sender_full_name": "Christian Williams",
        "timestamp": 1616023338
    }
]