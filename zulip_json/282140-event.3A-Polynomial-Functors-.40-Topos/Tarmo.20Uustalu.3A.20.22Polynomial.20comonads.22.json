[
    {
        "content": "<p>Tuesday, 20:00 UTC</p>",
        "id": 230567134,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1615919530
    },
    {
        "content": "<p><em>Abstract:</em><br>\nI will discuss the category of comonoid objects in the category of polynomials, equivalently, the category of small categories and cofunctors in the sense of Aguiar. I am interested in them as a representation for polynomial comonads and update monads. I am motivated by applications of those in programming semantics. I will discuss a number of constructions with polynomial comonads and what they amount to in terms of small categories and cofunctors.</p>",
        "id": 230567151,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1615919539
    },
    {
        "content": "<p>In David Spivak's tutorial, he mentioned a result by Ahman and Uutsulu. Looking on the Arxiv, this may be the relevant paper, although I haven't looked at it yet:<br>\narXiv:1604.01187   doi 10.4204/EPTCS.207.5<br>\nDirected Containers as Categories<br>\nAuthors: Danel Ahman, Tarmo Uustalu</p>\n<p>There is also an earlier paper: <br>\narXiv:1408.5809  doi 10.2168/LMCS-10(3:14)2014<br>\nWhen is a container a comonad?<br>\nAuthors: Danel Ahman, James Chapman, Tarmo Uustalu</p>",
        "id": 230580030,
        "sender_full_name": "Frederick Kintanar",
        "timestamp": 1615924458
    },
    {
        "content": "<p>So a polynomial comonad on Set is a category.</p>\n<p>It seems that a polynomial monad on Set is an operad, where the shapes are the operations and P(s) is the arity of s, though I'm not familiar with operads. Is this a known result? The nLab states (even defines):<br>\nA (Set-based) operad is a monoid in the monoidal category (Psh(ℙ),∘,I).<br>\nThis definition is almost the desired result, but the base category ℙ is slightly different: it's the category of cardinals and bijections, basically the core of Set. Can we build a polynomial endofunctor on Set out of this? I'm not sure what to do with the symmetries.</p>\n<p>One setting where both correspondences become very visible is that of bialgebraic semantics of programming languages: the syntax monad encodes the syntax operad (?), whereas the behaviour comonad encodes the category of states and transitions.</p>",
        "id": 230901947,
        "sender_full_name": "anuyts",
        "timestamp": 1616087130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"398825\">anuyts</span> <a href=\"#narrow/stream/282140-workshop.3A-Polynomial.20Functors.20.40.20Topos/topic/Tarmo.20Uustalu.3A.20.22Polynomial.20comonads.22/near/230901947\">said</a>:</p>\n<blockquote>\n<p>It seems that a polynomial monad on Set is an operad, where the shapes are the operations and P(s) is the arity of s, though I'm not familiar with operads. Is this a known result? The nLab states (even defines):<br>\nA (Set-based) operad is a monoid in the monoidal category (Psh(ℙ),∘,I).<br>\nThis definition is almost the desired result, but the base category ℙ is slightly different: it's the category of cardinals and bijections, basically the core of Set. Can we build a polynomial endofunctor on Set out of this? I'm not sure what to do with the symmetries.</p>\n</blockquote>\n<p>Very good question. It is quite subtle. A finitary polynomial monad is a special case of symmetric operad called sigma-cofibrant. It means that the symmetric-group actions are free. </p>\n<p>You are right that there is a problem with symmetries, caused by non-free group actions. For example,  the terminal operad Comm (whose underlying endofunctor is the exponential <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>↦</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow></msub><msup><mi>y</mi><mi>n</mi></msup><mi mathvariant=\"normal\">/</mi><msub><mi mathvariant=\"fraktur\">S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">y \\mapsto \\sum_{n\\in \\mathbb{N}} y^n/ \\mathfrak{S}_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18251299999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathfrak\">S</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>) preserves pullbacks weakly, but not strictly like an honest polynomial functor.  </p>\n<p>The good news is that the difference goes away in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-world!  Over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoids (in fact already over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>-groupoids), it is as if all group actions were free. The difference between (finitary) polynomial monads and operads is really only a deficiency of the category of sets.</p>",
        "id": 230919610,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1616093799
    },
    {
        "content": "<p>There is another relationship, namely that polynomial monads cartesian over the free-monoid monad are the same thing as nonsymmetric operads, also called multicategories.</p>\n<p>Over in another thread called <em>Shapes and algebraic structures</em>, I plan to talk about the symmetry issues, but I think I have to talk about<br>\nmulticategories first...</p>",
        "id": 230920027,
        "sender_full_name": "Joachim Kock",
        "timestamp": 1616093991
    },
    {
        "content": "<p>Hi. Yes. You get a cartesian polynomial monad from every non-symmetric operad in this way. General polynomial monads correspond to something more general non-symmetric operad like where composition can discard and duplicate inputs. </p>\n<p>Gambino and Kock have discussed these connections in detail, see here, <a href=\"https://arxiv.org/abs/0906.4931\">https://arxiv.org/abs/0906.4931</a>, see also in other writings by Kock.</p>",
        "id": 230954985,
        "sender_full_name": "Tarmo Uustalu",
        "timestamp": 1616111810
    }
]