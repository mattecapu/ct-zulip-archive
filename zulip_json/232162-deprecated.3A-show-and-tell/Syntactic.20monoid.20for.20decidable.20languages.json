[
    {
        "content": "<p>While I was trying to learn about Turing Decidable languages (considered as functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>), I found out that they are precisely the maps that factor as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mi>α</mi></mpadded></mover><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mo>⊔</mo><mo stretchy=\"false\">{</mo><mo>⋆</mo><mo stretchy=\"false\">}</mo><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mi>τ</mi></mpadded></mover><mi>P</mi><mover><mo stretchy=\"true\">←</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mo lspace=\"0em\" rspace=\"0em\">⊇</mo></mpadded></mover><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\xrightarrow{\\alpha} (\\Sigma \\sqcup \\{\\star\\})^* \\xrightarrow{\\tau} P \\xleftarrow{\\supseteq} 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934392em;vertical-align:-0.01100000000000001em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.173392em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">⋆</span><span class=\"mclose\">}</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.078179em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0671789999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mrel mtight\">⊇</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M400000 241H110l3-3c68.7-52.7 113.7-120  135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8 -5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247 c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208  490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3  1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202  l-3-3h399890zM100 241v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>τ</mi></mrow><annotation encoding=\"application/x-tex\">\\tau</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span></span> is a monoid map and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a <strong>finitely presented</strong> monoid.   Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span> bookends strings with the fresh symbol <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋆</mo></mrow><annotation encoding=\"application/x-tex\">\\star</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">⋆</span></span></span></span> (\"alpha\" for \"affine\"!) and we consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> as a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span>.</p>\n<p>This framework describes other language classes, too.  For example, if we replace <strong>finitely presented</strong> by <strong>finite</strong>, then we get the Regular Languages.  I wonder what happens for other types of monoids?</p>",
        "id": 193108227,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586210675
    },
    {
        "content": "<p>this sounds very much like the topic of <em>A Categorical Approach to Syntactic Monoids</em> (<a href=\"https://arxiv.org/abs/1804.03011\" title=\"https://arxiv.org/abs/1804.03011\">https://arxiv.org/abs/1804.03011</a>)</p>",
        "id": 193108414,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1586210803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/stream.20events/near/193108414\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/stream.20events/near/193108414\">said</a>:</p>\n<blockquote>\n<p>this sounds very much like the topic of <em>A Categorical Approach to Syntactic Monoids</em> (<a href=\"https://arxiv.org/abs/1804.03011\" title=\"https://arxiv.org/abs/1804.03011\">https://arxiv.org/abs/1804.03011</a>)</p>\n</blockquote>\n<p>Ooh!  I should learn what a syntactic monoid is, then.  Sounds useful!</p>",
        "id": 193108509,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586210875
    },
    {
        "content": "<p>Hm, I can't parse the theorem statement here. What does the inverted arrow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>←</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">P \\leftarrow 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> mean?</p>",
        "id": 193119747,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586219613
    },
    {
        "content": "<p>The characterization of regular languages that I know of is that every regular <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> factorizes as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>→</mo><mi>M</mi><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\to M \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a finite monoid. But if you replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, which is finitely presented (it's the free monoid generated by a finite alphabet), then you can obtain all languages, not just decidable ones. So clearly I'm missing something…</p>",
        "id": 193119932,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586219774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281272\">@Sam Tenka (naive student)</span> BTW, I replied in the \"commutative semigroups\" thread with an intuitive statement for Krohn-Rhodes (you seemed to be interested in this topic)</p>",
        "id": 193120082,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586219936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278835\">@Nguyễn Lê Thành Dũng</span> , yep, if the arrow had gone into 2, then we wouldn't have gotten just decidable langauges!</p>\n<p>I drew the arrow out of 2 because I wanted to say that a certain triangle commutes wihout typing a lot.  I should have said more!  I meant: the language L:Sigma*-&gt;2 is decidable iff participates in a relation</p>\n<p>i○L=tau○alpha</p>\n<p>where i is some embedding of 2 into P.</p>",
        "id": 193122478,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586222427
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 193122492,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586222456
    },
    {
        "content": "<p>OK, I see what the theorem statement means, thanks! (But I'm still trying to figure out the proof…)</p>",
        "id": 193122626,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586222619
    },
    {
        "content": "<p>Great!  Here's a proof sketch.  I never wrote out a proof, so there's a chance I'm wrong:</p>\n<p>We will show that if a language is decidable by a Turing Machine, then it is decidable in our algebraic sense; the converse is routine to check.</p>\n<p>The idea is to have each element of P represent the state of a Turing tape. The tape symbols (marked with whether or not the tape head is on them) generate P, so we only need to find appropriate relations. The transition dynamics of the TM determines several relations of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mi>z</mi><mo>∼</mo><mi>x</mi><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mover accent=\"true\"><mi>z</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">x\\hat{y}z\\sim xy'\\hat{z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span>, where x,y,z are tape symbols, hat denotes that the head is on y's cell, and y′ is the new value written onto that cell before the head moves to z's cell. Two tapes are equivalent (under the equivalence relation generated by these string relations) if and only if they lead to some shared future tape under the Turing dynamics. We have a finitely presented monoid that captures the dynamics, so we are almost there!</p>\n<p>Actually, we must deal with initialization and termination, too. We use the symbol 0 concatenated by α to initialize the head location and introduce bookending blank tape cells. We require the TM to clear its tape before halting, hence ensuring that every accepting trajectory has a unique terminal tape (and likewise for rejecting trajectories).</p>",
        "id": 193123068,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586223170
    },
    {
        "content": "<p>Hm, I was actually stumped by the converse which you claim is routine.</p>",
        "id": 193123172,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586223262
    },
    {
        "content": "<p>Can't you encode the word problem for monoids using this?</p>",
        "id": 193123179,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586223283
    },
    {
        "content": "<p>(The word problem is undecidable in general…)</p>",
        "id": 193123185,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586223293
    },
    {
        "content": "<p>Actually it's not that clear, I don't know</p>",
        "id": 193123206,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586223345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278835\">Nguyễn Lê Thành Dũng</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/stream.20events/near/193123172\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/stream.20events/near/193123172\">said</a>:</p>\n<blockquote>\n<p>Hm, I was actually stumped by the converse which you claim is routine.</p>\n</blockquote>\n<p>For the converse, we just search over all possible rewrite histories to see whether we get to a canonical form for Yes or for No.  The general word problem is undecidable, but here, due to the commuting square, we have the extra condition that the words we get will be rewritable to one of a finite set (of 2 possibilities), so we are good!  Intuitively, the word problen is undecidable but in a one sided sense (i.e. is a recognizable lang).  So we beat the one sidedness by reformulating our question as two positives (is it Yes?  us it No?) instead of a pos and a neg (is it Yes?  isn't it Yes?).</p>",
        "id": 193123263,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586223402
    },
    {
        "content": "<p>Oh right (you're saying if a language is recursively enumerable and the complement is also RE then it's decidable, right?)</p>",
        "id": 193123345,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586223570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278835\">Nguyễn Lê Thành Dũng</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Syntactic.20Monoid.20for.20Decidable.20Langs/near/193123345\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Syntactic.20Monoid.20for.20Decidable.20Langs/near/193123345\">said</a>:</p>\n<blockquote>\n<p>Oh right (you're saying if a language is recursively enumerable and the complement is also RE then it's decidable, right?)</p>\n</blockquote>\n<p>Yep!  Sorry for my nonstandard way of saying that.</p>",
        "id": 193123531,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586223832
    },
    {
        "content": "<p>OK, I'm pretty much convinced \"morally\" by our theorem! Just a nitpick: a TM doesn't just have a tape and head position, it also has a control state; but I suppose you can encode that by using letters <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mi>q</mi></msup></mrow><annotation encoding=\"application/x-tex\">y^q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>∈</mo><mrow><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow></mrow><annotation encoding=\"application/x-tex\">q \\in \\mathrm{states}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">t</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{y}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span></span></p>",
        "id": 193123641,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586223951
    },
    {
        "content": "<p>Good point!  Ha, I forgot about that this whole time. Yep, that's a good way to encode it and rescue the result!</p>",
        "id": 193123703,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586224006
    },
    {
        "content": "<p>Wait, there is still a detail: how do you ensure that the terminal tape is reached only by rewriting steps that go \"forward in time\" instead of zigzags? Do you have some confluence lemma?</p>",
        "id": 193123717,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586224044
    },
    {
        "content": "<p>Confluence is ensured by TMs being deterministic in forward tine.</p>",
        "id": 193123764,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586224086
    },
    {
        "content": "<p>So, like, the lemma to show is that \"wellformed tapes x and y are equivalent iff they share some common future tape\" and that \"only wellformed tapes are reachable by the relations from wellformed input\"</p>",
        "id": 193123804,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586224174
    },
    {
        "content": "<p>Oh, of course…</p>",
        "id": 193123806,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586224176
    },
    {
        "content": "<p>Yep; normally this kind of constructions are known for showing that the word problem for monoids is undecidable in general (I think that this is usually attributed to Davis, also for the \"directed version\" which are called Thue-Morse systems iirc)</p>",
        "id": 193123865,
        "sender_full_name": "zigzag",
        "timestamp": 1586224229
    },
    {
        "content": "<p>Cool!  Is there a paper title by Davis i should look into?</p>\n<p>Something I'm curious about is what happens when we replace the \"finitely presented\" condition by other conditions.  For instance, how about, <strong>abelian</strong> ?  <span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> pointed me to the concept of syntactic monoids, which for the most part have seemed to be finite, but I bet there's work on the general case if I keep looking.</p>",
        "id": 193124243,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586224686
    },
    {
        "content": "<p>Thing is, the arrow is in the direction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">P \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> afaik in those applications (and no diagram involved to define a \"recognizer\"), so I do not know if this is the right keyword. I know that there are <em>tons</em> of work on syntactic monoids for subclasses of regular languages (so you consider subclasses of finite monoids as classifiers; the flagship example is the correspondence star-free languages/FO/finite aperiodic monoids which is Schützenberger's theorem <a href=\"https://www.mimuw.edu.pl/~bojan/20142015-2/alg/3-the-schutzenberger-theorem\" title=\"https://www.mimuw.edu.pl/~bojan/20142015-2/alg/3-the-schutzenberger-theorem\">https://www.mimuw.edu.pl/~bojan/20142015-2/alg/3-the-schutzenberger-theorem</a>), but I do not know about superclasses/infinite monoids.</p>",
        "id": 193124504,
        "sender_full_name": "zigzag",
        "timestamp": 1586225013
    },
    {
        "content": "<p>AFAIK syntactic monoids are meant to fit the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>→</mo><mi>M</mi><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\to M \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> pattern that I mentioned earlier (the syntactic monoid of a language is the \"minimal\" M through which it factorizes)</p>",
        "id": 193124507,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1586225020
    },
    {
        "content": "<p>(I also have not looked at the paper mentioned by <span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> , but it was my understanding that it attempt to relate to those situations)</p>",
        "id": 193124579,
        "sender_full_name": "zigzag",
        "timestamp": 1586225076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281272\">Sam Tenka (naive student)</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Syntactic.20monoid.20for.20decidable.20languages/near/193108227\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Syntactic.20monoid.20for.20decidable.20languages/near/193108227\">said</a>:</p>\n<blockquote>\n<p>While I was trying to learn about Turing Decidable languages (considered as functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>), I found out that they are precisely the maps that factor as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mi>α</mi></mpadded></mover><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mo>⊔</mo><mo stretchy=\"false\">{</mo><mo>⋆</mo><mo stretchy=\"false\">}</mo><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mover><mo stretchy=\"true\">→</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mi>τ</mi></mpadded></mover><mi>P</mi><mover><mo stretchy=\"true\">←</mo><mpadded lspace=\"0.3em\" width=\"+0.6em\"><mo lspace=\"0em\" rspace=\"0em\">⊇</mo></mpadded></mover><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* \\xrightarrow{\\alpha} (\\Sigma \\sqcup \\{\\star\\})^* \\xrightarrow{\\tau} P \\xleftarrow{\\supseteq} 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934392em;vertical-align:-0.01100000000000001em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.173392em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">⋆</span><span class=\"mclose\">}</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMaxYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128 -16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20  11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7  39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85 -40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5 -12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67  151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.078179em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0671789999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mrel mtight\">⊇</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg height=\"0.522em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 522\" width=\"400em\"><path d=\"M400000 241H110l3-3c68.7-52.7 113.7-120  135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8 -5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247 c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208  490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3  1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202  l-3-3h399890zM100 241v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>τ</mi></mrow><annotation encoding=\"application/x-tex\">\\tau</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span></span> is a monoid map and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a <strong>finitely presented</strong> monoid.   Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span> bookends strings with the fresh symbol <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋆</mo></mrow><annotation encoding=\"application/x-tex\">\\star</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">⋆</span></span></span></span> (\"alpha\" for \"affine\"!) and we consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> as a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span>.</p>\n<p>This framework describes other language classes, too.  For example, if we replace <strong>finitely presented</strong> by <strong>finite</strong>, then we get the Regular Languages.  </p>\n</blockquote>\n<p>Is there a good place to read about these theorems?</p>",
        "id": 193124693,
        "sender_full_name": "John Baez",
        "timestamp": 1586225201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> i figured that theorem out myself, but <span class=\"user-mention\" data-user-id=\"277890\">@zigzag</span> pointed me toward Davis's work and related work on \"Thue-Morse systems\".  Probably this is discussed there!</p>\n<p>Also, <span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> points us to the concept of \"syntactic monoid\", which seems very similar though with a different polarity of 2.</p>",
        "id": 193124790,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586225332
    },
    {
        "content": "<p>Ah, and about Davis' paper, I have chased a citation to a 58 paper \"Computability and Unsolvability\"</p>",
        "id": 193124808,
        "sender_full_name": "zigzag",
        "timestamp": 1586225371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281272\">@Sam Tenka (naive student)</span>: these results <em>vaguely</em> remind me of Eilenberg's book <em>Automata, Languages, and Machines</em>.</p>",
        "id": 193124862,
        "sender_full_name": "John Baez",
        "timestamp": 1586225411
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 193124864,
        "sender_full_name": "Sam Tenka",
        "timestamp": 1586225415
    },
    {
        "content": "<p>Now, I am afraid I do not have any better than this to offer; it was the case that I reproved that bit of folklore sometime last year towards another result, before realizing that it was the word problem for monoids and chased down a ref; I do not think I have actually read that paper.</p>",
        "id": 193124886,
        "sender_full_name": "zigzag",
        "timestamp": 1586225485
    },
    {
        "content": "<p>Everyone thought Eilenberg was nuts when he switched from algebraic topology to applying category theory to automata, back then... but he was just ahead of his time.</p>",
        "id": 193124890,
        "sender_full_name": "John Baez",
        "timestamp": 1586225500
    },
    {
        "content": "<p>Wrt syntactic monoids, as I was hinting, there are lots of work on correspondence between varieties of finite monoids and subclasses of regular languages in the automata theory community. The easiest thing for me is to point at lecture notes of a course I was attending during my Msc to try to give a flavor of what I am vaguely aware of <a href=\"https://www.irif.fr/~jep/PDF/MPRI/MPRI.pdf\" title=\"https://www.irif.fr/~jep/PDF/MPRI/MPRI.pdf\">https://www.irif.fr/~jep/PDF/MPRI/MPRI.pdf</a></p>",
        "id": 193125821,
        "sender_full_name": "zigzag",
        "timestamp": 1586226661
    },
    {
        "content": "<p>Thanks for that reference, <span class=\"user-mention\" data-user-id=\"277890\">@zigzag</span>!  So it seems Eilenberg played a role in recognizing this correspondence - it says:</p>\n<blockquote>\n<p>These successes settled the power of the algebraic approach, which was axiomatized by Eilenberg in 1976 [42].   A variety of finite monoids is a class of monoids closed under taking submonoids, quotients and finite direct products. Eilenberg’s theorem states that varieties of finite monoids are in one-to-one correspondence with certain classes of recognisable languages, the varieties of languages.</p>\n</blockquote>",
        "id": 193126297,
        "sender_full_name": "John Baez",
        "timestamp": 1586227360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277890\">@zigzag</span> - can you (or someone else here) explain in a simple way how profinite stuff shows up when we try to classify varieties of finite monoids, as explained in <a href=\"https://www.irif.fr/~jep/PDF/MPRI/MPRI.pdf\" title=\"https://www.irif.fr/~jep/PDF/MPRI/MPRI.pdf\">that reference you gave</a>?  I understand the basic idea of profinite objects, like profinite groups, but I think I need a simple example to understand what's going on here.</p>",
        "id": 193234920,
        "sender_full_name": "John Baez",
        "timestamp": 1586287113
    },
    {
        "content": "<p>I am definitely not an authority on this, but for me the first \"use\" of the profinite monoids in those notes is Reiterman's theorem (3.13) which states that a variety of semigroup is in one-to-one correspondence with a set of profinite identities. One rationale for liking this I believe is that you may like to have different descriptions of varieties of language (by logic/automata/algebraic property on the relevant class of monoids), and this result tells you that in principle, you can always describe a variety of languages by a bunch of profinite identities. The table under 4.4 p208 describes a bunch of those matches variety/equations.</p>",
        "id": 193255612,
        "sender_full_name": "zigzag",
        "timestamp": 1586298130
    },
    {
        "content": "<p>The actual profinite words showing up in those examples are not very complicated, and that the most basic examples (aperiodic monoids <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>ω</mi></msup><mi>x</mi><mo>=</mo><msup><mi>x</mi><mi>ω</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^\\omega x = x^\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span>, groups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>ω</mi></msup><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">x^\\omega = e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span>, commutative monoids <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mi>y</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">xy = yx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">x</span></span></span></span>) are essentially paraphrasing their official definition. What the profinite brings to the table here is the ability to speak about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>ω</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span>, which should be thought of as \"taking the idempotent value associated to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> when evaluating to a finite monoid\" (incidentally, this operation of  \"exponentiating to the idempotent\" does a lot of work in the Green theory of finite monoids).</p>",
        "id": 193256247,
        "sender_full_name": "zigzag",
        "timestamp": 1586298609
    },
    {
        "content": "<p>The next chapter has some characterization of lattices of languages in terms of \"profinite equations\", but this seems to be a different application (here equations are meant to characterize a set of language over a given alphabet rather than a class of finite monoids), so I suppose the two should not be confused.</p>",
        "id": 193256704,
        "sender_full_name": "zigzag",
        "timestamp": 1586299011
    },
    {
        "content": "<p>I'll look at the table.  I get the statement of the theorem in the sense of what's supposed to correspond to what... I just don't have an intuition for why it's true: why \"profinite identities\" specify a language.</p>",
        "id": 193263609,
        "sender_full_name": "John Baez",
        "timestamp": 1586304541
    },
    {
        "content": "<p>Oh, I didn't read all your comments until now.  I think I see why <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>ω</mi></msup><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">x^\\omega = e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span> is connected to finite groups; for those listening in this is kind of a way of saying \"for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> to some power is the identity\", which is true in any finite group.</p>",
        "id": 193266564,
        "sender_full_name": "John Baez",
        "timestamp": 1586307817
    },
    {
        "content": "<p>And I guess conversely any monoid in which \"for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> to some power is the identity\" holds must be a group, since this says every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> has an inverse.</p>",
        "id": 193267886,
        "sender_full_name": "John Baez",
        "timestamp": 1586309491
    },
    {
        "content": "<p>Yes; you usually write that inverse as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mi>ω</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{\\omega-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> as a profinite word.</p>",
        "id": 193267969,
        "sender_full_name": "zigzag",
        "timestamp": 1586309580
    },
    {
        "content": "<p>For the correspondence varieties/set of identities, I don't have the energy to reread that proof so close to bedtime, but iirc the proof itself is rather simple and actually considers arbitrary sets of identities (i.e. possibly infinite), so I don't know if this is extremely enlightening. In particular, it does not really imply that any given variety will have a nice finite set of identities iiuc. But I think that to a lot of people, profinite words may be mostly valuable to give concrete and short algebraic definitions like those in that table.</p>",
        "id": 193268347,
        "sender_full_name": "zigzag",
        "timestamp": 1586310075
    },
    {
        "content": "<p>(As a clarification for onlookers: one set of profinite identities classify a whole class of finite monoids, and in turn, one finite monoid plus some additional data classify a regular language; so really this theorem speaks about characterizing \"well-behaved\" subclasses of regular languages)</p>",
        "id": 193268594,
        "sender_full_name": "zigzag",
        "timestamp": 1586310480
    }
]