[
    {
        "content": "<p>Back in around 2012, Jamie Vicary pointed out to me that the string diagrams for adjointness, in the case where one of the objects is the monoidal unit, are very suggestive of synchronization in the pi calculus:<br>\n<a href=\"/user_uploads/21317/Drt5rjMAa6evSdYbtIoFEW8P/synch.png\" title=\"synch.png\">synch.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Drt5rjMAa6evSdYbtIoFEW8P/synch.png\" title=\"synch.png\"><img src=\"/user_uploads/21317/Drt5rjMAa6evSdYbtIoFEW8P/synch.png\"></a></div>",
        "id": 194838556,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587491503
    },
    {
        "content": "<p>I found that I could interpret nearly all of the syntax of pi calculus in a compact closed bicategory and that reductions were exclusively due to adjointness.  Here's the internal monoid object for parallel composition of processes:</p>",
        "id": 194838743,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587491591
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/Tx7HmwvqkEDQifEGHG4CvBb-/monoid.png\" title=\"monoid.png\">monoid.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/Tx7HmwvqkEDQifEGHG4CvBb-/monoid.png\" title=\"monoid.png\"><img src=\"/user_uploads/21317/Tx7HmwvqkEDQifEGHG4CvBb-/monoid.png\"></a></div>",
        "id": 194838912,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587491669
    },
    {
        "content": "<p>Names are morphisms in or out of the monoidal unit with adjoints:</p>",
        "id": 194839056,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587491743
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/LB0dE_SZsqDqT2S0Aku8peA8/names.png\" title=\"names.png\">names.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/LB0dE_SZsqDqT2S0Aku8peA8/names.png\" title=\"names.png\"><img src=\"/user_uploads/21317/LB0dE_SZsqDqT2S0Aku8peA8/names.png\"></a></div>",
        "id": 194839312,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587491851
    },
    {
        "content": "<p>Parallel composition has an adjoint: <br>\n<a href=\"/user_uploads/21317/W7WCdCm4MQh1BD08dO9YAHMI/par.png\" title=\"par.png\">par.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/W7WCdCm4MQh1BD08dO9YAHMI/par.png\" title=\"par.png\"><img src=\"/user_uploads/21317/W7WCdCm4MQh1BD08dO9YAHMI/par.png\"></a></div>",
        "id": 194839715,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587492011
    },
    {
        "content": "<p>The communication reduction looks like this.  We're sending a name z on a name x (green).  We're listening on a name x for a name we'll call y (purple); when we get one, we'll do Q.  The result of the two processes interacting is Q with z replacing y.  Note that y is a bound variable, so its name doesn't appear anywhere in the diagram.</p>",
        "id": 194840782,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587492555
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/FnOxki3uFjClKunVkzzqR5Bd/comm.png\" title=\"comm.png\">comm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/FnOxki3uFjClKunVkzzqR5Bd/comm.png\" title=\"comm.png\"><img src=\"/user_uploads/21317/FnOxki3uFjClKunVkzzqR5Bd/comm.png\"></a></div>",
        "id": 194840809,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587492566
    },
    {
        "content": "<p>The problem is that there are more reductions in the compact closed bicategory than in the pi calculus.  For example, if another copy of x? occurred in Q, x! could synchronize with that one instead, which is not allowed in pi calculus.</p>",
        "id": 194841041,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587492682
    },
    {
        "content": "<p>One way of dealing with this problem is by compiling the pi calculus terms down to <a href=\"https://link.springer.com/chapter/10.1007/BFb0055620\" title=\"https://link.springer.com/chapter/10.1007/BFb0055620\">Yoshida's combinators</a>, where there are no \"closures\".  Instead, as execution progresses, links between distinct names are created.</p>",
        "id": 194841603,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587492962
    },
    {
        "content": "<p>I've got string diagrams for each of the combinators.  The remaining issue is how to introduce fresh names.  Recent work on second order algebraic theories look promising.  It would take some work to adapt it to the compact-closed-bicategory case instead of the cartesian-category-with-exponentiable-object case.</p>",
        "id": 194842010,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587493168
    },
    {
        "content": "<p>If anyone's interested in exploring this, let me know and we can start a stream.</p>",
        "id": 194842499,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587493387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194842010\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194842010\">said</a>:</p>\n<blockquote>\n<p>I've got string diagrams for each of the combinators.  The remaining issue is how to introduce fresh names.  Recent work on second order algebraic theories look promising.  It would take some work to adapt it to the compact-closed-bicategory case instead of the cartesian-category-with-exponentiable-object case.</p>\n</blockquote>\n<p>Maybe I can rephrase to see if I understand? It looks like compact-closed bicategories play a similar role (though perhaps not completely analogous) for the π-calculus as do CCCs for the STLC? If this is the case, then we wouldn't expect to use compact-closed bicategories <em>instead</em> of second-order algebraic theories: each SOAT would <em>induce</em> a compact-closed bicategory. For the STLC, for instance, we have an equivalence between models for the SOAT for the STLC and CCCs.</p>",
        "id": 194844154,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587494100
    },
    {
        "content": "<p>I'm not familiar; is there a standard internal language correspondence for the π-calculus already?</p>",
        "id": 194844185,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587494116
    },
    {
        "content": "<p>In any case, this seems very interesting.</p>",
        "id": 194844206,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587494126
    },
    {
        "content": "<p>so what should we make, #concurrency ?</p>",
        "id": 194845637,
        "sender_full_name": "Christian Williams",
        "timestamp": 1587494791
    },
    {
        "content": "<p>It could go in the <a class=\"stream\" data-stream-id=\"229952\" href=\"/#narrow/stream/229952-theory.3A-type-theory\">#theory: type theory</a> stream for the time being?</p>",
        "id": 194846520,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587495242
    },
    {
        "content": "<p>I'd read a concurrency stream, although I think it should be separate from type theory</p>",
        "id": 194850810,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587497562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> I think that looks interesting. It reminds me of \"interaction nets\" , which, iirc, also admit interpretation in a compact closed bicategory.</p>",
        "id": 194851143,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587497737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> nope! There's no satisfactory, Curry-Howard-Lambek sort of thing for the pi-calculus</p>",
        "id": 194851533,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587497961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275899\">Christian Williams</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194845637\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194845637\">said</a>:</p>\n<blockquote>\n<p>so what should we make, #concurrency ?</p>\n</blockquote>\n<p>Sounds good to me.</p>",
        "id": 194852643,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587498659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276114\">Chad Nester</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194851143\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194851143\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> I think that looks interesting. It reminds me of \"interaction nets\" , which, iirc, also admit interpretation in a compact closed bicategory.</p>\n</blockquote>\n<p>Thanks!  The immediate difference I see is that interaction nets are strongly confluent, while pi calculus is certainly not.</p>",
        "id": 194853589,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587499186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194853589\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194853589\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276114\">Chad Nester</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194851143\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194851143\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> I think that looks interesting. It reminds me of \"interaction nets\" , which, iirc, also admit interpretation in a compact closed bicategory.</p>\n</blockquote>\n<p>Thanks!  The immediate difference I see is that interaction nets are strongly confluent, while pi calculus is certainly not.</p>\n</blockquote>\n<p>well, there is Bellin's very old work <a href=\"https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.33.3948\" title=\"https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.33.3948\">https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.33.3948</a> and not so old work  <br>\nOn the π-calculus and distributed calculi for co-intuitionistic logic too!</p>",
        "id": 194859873,
        "sender_full_name": "Valeria de Paiva",
        "timestamp": 1587502325
    },
    {
        "content": "<p>o_o</p>",
        "id": 194865687,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587505614
    },
    {
        "content": "<p>is a compact closed bicategory one where every 1-cell has a left &amp; right adjoint, or what?</p>",
        "id": 194865710,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587505631
    },
    {
        "content": "<p>oh, it's more directly analogous?</p>",
        "id": 194865855,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587505712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> i dont follow what the diagrams have to do with adjointness <em>or</em> the pi calculus? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> would you be willing to explain starting a little earlier what the correspondence is between pi-calculus objects and categorical objects?</p>",
        "id": 194867475,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587506575
    },
    {
        "content": "<p>&amp; where is a monoid object coming in?</p>",
        "id": 194867493,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587506582
    },
    {
        "content": "<p>The pi calculus is a toy programming language invented by Robin Milner in the 90s, a successor to CCS. The grammar pi calculus involves both names (which I denote by an object N) and processes (P).  P forms a commutative monoid with multiplication | and identity 0.  Processes can also be formed by sending (!:N ⊗ N -&gt; P), receiving (?:N ⊗ (N -&gt; P) -&gt; P) and generating a fresh name (ν: (N -&gt; P) -&gt; P).</p>",
        "id": 194868234,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507069
    },
    {
        "content": "<p>The one reduction rule is the \"comm\" rule:</p>\n<div class=\"codehilite\"><pre><span></span>comm: x!(z) | x?(y).Q =&gt; Q { z / y }\n</pre></div>",
        "id": 194868246,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507079
    },
    {
        "content": "<p>oh i know the pi calculus</p>",
        "id": 194868275,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507086
    },
    {
        "content": "<p>Note that the pi calculus is not confluent:</p>\n<div class=\"codehilite\"><pre><span></span>x!(z1) | x!(z2) | x?(y).Q\n</pre></div>\n\n\n<p>may reduce either to</p>\n<div class=\"codehilite\"><pre><span></span>x!(z2) | Q { z1 / y } or x!(z1) | Q { z2 / y }.\n</pre></div>",
        "id": 194868276,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507087
    },
    {
        "content": "<p>OK, so what's your question?</p>",
        "id": 194868319,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507119
    },
    {
        "content": "<p>well, how are you corresponding pi-calculus objects to categorical objects? each term becomes a 1-cell, or what?</p>",
        "id": 194868400,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507150
    },
    {
        "content": "<p>and if so, what is the type of the 1-cell given by a term?</p>",
        "id": 194868415,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507161
    },
    {
        "content": "<p>Each term is a 1-cell of type P.</p>",
        "id": 194868433,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507175
    },
    {
        "content": "<p>\"of type P\"?</p>",
        "id": 194868444,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507185
    },
    {
        "content": "<p>you mean from the monoidal unit to P, or what?</p>",
        "id": 194868453,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507192
    },
    {
        "content": "<p>Closed terms (those with no free variables/names) are morphisms from the monoidal unit to P, yes.</p>",
        "id": 194868485,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507219
    },
    {
        "content": "<p>kk</p>",
        "id": 194868490,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507226
    },
    {
        "content": "<p>oh, so more generally, do you do like.... N ⊗ N ⊗ N → P for sth with 3 free variables/names?</p>",
        "id": 194868580,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507275
    },
    {
        "content": "<p>Yes.</p>",
        "id": 194868591,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507284
    },
    {
        "content": "<p>ohhh, ok, &amp; then the adjointness stuff plays in because you can't directly compose, reflecting how you don't directly substitute?</p>",
        "id": 194868637,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507316
    },
    {
        "content": "<p>does N have to be self-dual or something?</p>",
        "id": 194868661,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507337
    },
    {
        "content": "<p>In a compact closed bicategory, all objects have duals.</p>",
        "id": 194868735,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507378
    },
    {
        "content": "<p>yeah, but an object's dual might not be canonically isomorphic to it</p>",
        "id": 194868761,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507400
    },
    {
        "content": "<p>But there are cap and cup that let us draw string diagrams.</p>",
        "id": 194868798,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507422
    },
    {
        "content": "<p>yeah, i have familiarity with compact closed 1-categories</p>",
        "id": 194868817,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507434
    },
    {
        "content": "<p>Prof is a compact closed bicategory.</p>",
        "id": 194868840,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507461
    },
    {
        "content": "<p>Cocont (categories, cocontinuous functors, nat'l transformations) is equivalent, but composition is strict, so easier to think about.</p>",
        "id": 194868916,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507495
    },
    {
        "content": "<p>i have your paper pulled up in another window :)</p>",
        "id": 194868932,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507511
    },
    {
        "content": "<p>the pages and pages of coherence conditions are terrifying <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 194868964,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507539
    },
    {
        "content": "<p>Ah, but there are patterns in the coherence laws!</p>",
        "id": 194868986,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507557
    },
    {
        "content": "<p>i was hoping so :&gt;</p>",
        "id": 194868998,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507568
    },
    {
        "content": "<p>someday i will get around to learning them...</p>",
        "id": 194869022,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507584
    },
    {
        "content": "<p>but in any case—so, hmm, this treatment sort of suggests a distinction between names and variables-for-names, doesnt it?</p>",
        "id": 194869131,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507641
    },
    {
        "content": "<p>E.g. the associahedra have a Catalan number of vertices and lower associahedra as \"faces\".  The unitors go between two associahedra, the second with one fewer object.</p>",
        "id": 194869156,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507667
    },
    {
        "content": "<p>catalan numbers!</p>",
        "id": 194869170,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507681
    },
    {
        "content": "<p>Is there an established internal language for compact closed categories? E.g. as some kind of multiplicative fragment of classical linear logic?</p>",
        "id": 194869278,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587507754
    },
    {
        "content": "<p>abstract index notation :&gt;</p>",
        "id": 194869291,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507765
    },
    {
        "content": "<p>It would be interesting to derive a relationship between the π-calculus and linear logic, if both can be used as internal languages of compact closed bicategories.</p>",
        "id": 194869309,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587507787
    },
    {
        "content": "<p>half serious</p>",
        "id": 194869312,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507789
    },
    {
        "content": "<blockquote>\n<p>distinction between names and variables</p>\n</blockquote>\n<p>Milner himself in later treatments refactored \"new\" and \"input\" into \"fresh\" and lambda.  In that way of looking at it, names are what variables hold.</p>",
        "id": 194869317,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507793
    },
    {
        "content": "<p>yeah thats basically what i figured</p>",
        "id": 194869332,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507805
    },
    {
        "content": "<p>sounds like good hygeine</p>",
        "id": 194869338,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507811
    },
    {
        "content": "<p>like assignables vs variables</p>",
        "id": 194869344,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507816
    },
    {
        "content": "<p>hmmmmm...... but: is it just me, or is there an awful lot of cartesianness to the pi calculus which is not available in this setup?</p>",
        "id": 194869466,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507881
    },
    {
        "content": "<p>names would have to be a comonoid wouldnt they?</p>",
        "id": 194869476,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> Wadler came up with a calculus for linear logic that looks like a certain synchronous pi calculus.</p>",
        "id": 194869543,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587507942
    },
    {
        "content": "<p>is that one of the later dual calculi</p>",
        "id": 194869660,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587507998
    },
    {
        "content": "<blockquote>\n<p>names would have to be a comonoid</p>\n</blockquote>\n<p>Yes, because pi calculus allows you to duplicate names, names have to be a comonoid.  I haven't worked through all the details of that.</p>",
        "id": 194869691,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587508022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194869543\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194869543\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> Wadler came up with a calculus for linear logic that looks like a certain synchronous pi calculus.</p>\n</blockquote>\n<p>Very interesting: <em>Propositions as Sessions</em> (<a href=\"https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-sessions/propositions-as-sessions.pdf\" title=\"https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-sessions/propositions-as-sessions.pdf\">https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-sessions/propositions-as-sessions.pdf</a>).</p>",
        "id": 194869699,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1587508029
    },
    {
        "content": "<p>god i should catch up on wadler's linear stuff</p>",
        "id": 194869760,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508081
    },
    {
        "content": "<p>ive read like 1 and a half papers of it...</p>",
        "id": 194869806,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508088
    },
    {
        "content": "<p>Abramsky, of course, wrote \"Computational Interpretations of Linear Logic\", in which he gives \"process calculi\", but it's not pi calculus by any means.</p>",
        "id": 194869820,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587508097
    },
    {
        "content": "<p>oh i know that one <em>super</em> well <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 194869853,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508127
    },
    {
        "content": "<p>it's the basis of one of the projects im doing for my degree</p>",
        "id": 194869893,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508141
    },
    {
        "content": "<p>it's in my backpack right now lol</p>",
        "id": 194869974,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508197
    },
    {
        "content": "<p>ooh yeah i actually remember thinking before about the fact that the communication rule in PE₂ corresponds to reducing a cut connected to an axiom link in a proof net &amp; it looks <em>suspiciously</em> like a yanking</p>",
        "id": 194870098,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508267
    },
    {
        "content": "<p>&amp; then i went and thought \"it's 'communication'... and it's a yanking... hahahahaha it's quantum teleportation\"</p>",
        "id": 194870109,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508279
    },
    {
        "content": "<p>i completely forgot abt that</p>",
        "id": 194870210,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587508341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> ok, im looking again at the diagrams and i'm still finding them confusing :\\</p>",
        "id": 194881410,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587520807
    },
    {
        "content": "<p>in the first one: what does the labelling on the wires mean? should they say \"N\" instead of \"x\"?</p>",
        "id": 194881423,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587520836
    },
    {
        "content": "<p>but \"x\" isn't a pi calculus process anyway, is it?</p>",
        "id": 194881438,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587520869
    },
    {
        "content": "<p>or in the 3rd one: where is N ≅ N* ⊗ P coming from?</p>",
        "id": 194881448,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587520896
    },
    {
        "content": "<p>hm, are the diagrams depicting some kind of async calculus w/ different types from the ones you wrote as in</p>\n<blockquote>\n<p>Processes can also be formed by sending (!:N ⊗ N -&gt; P), receiving (?:N ⊗ (N -&gt; P) -&gt; P) and generating a fresh name (ν: (N -&gt; P) -&gt; P).</p>\n</blockquote>",
        "id": 194881546,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587521037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194865710\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194865710\">said</a>:</p>\n<blockquote>\n<p>is a compact closed bicategory one where every 1-cell has a left &amp; right adjoint, or what?</p>\n</blockquote>\n<p>This was already answered by now but anyway:</p>\n<p>\"Compact closed\" hints at symmetric monoidal - for example a merely monoidal category where every object has a left &amp; right adjoint is not called compact closed, it's called <a href=\"https://ncatlab.org/nlab/show/rigid+monoidal+category\" title=\"https://ncatlab.org/nlab/show/rigid+monoidal+category\">rigid</a>.   So what you're talking about deserves to be called a rigid bicategory (though I've never heard anyone say that).</p>\n<p>A compact closed bicategory is a symmetric monoidal bicategory where every 1-cell has a left pseudoadjoint, or equivalently a right pseudoadjoint.</p>",
        "id": 194883451,
        "sender_full_name": "John Baez",
        "timestamp": 1587523597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> wrote about these in his thesis:</p>\n<ul>\n<li>Mike Stay, <a href=\"https://arxiv.org/abs/1301.1053\" title=\"https://arxiv.org/abs/1301.1053\">Compact closed bicategories</a>.</li>\n</ul>\n<p><strong>Abstract.</strong> A compact closed bicategory is a symmetric monoidal bicategory where every object is equipped with a weak dual. The unit and counit satisfy the usual \"zig-zag\" identities of a compact closed category only up to natural isomorphism, and the isomorphism is subject to a coherence law. We give several examples of compact closed bicategories, then review previous work. In particular, Day and Street defined compact closed bicategories indirectly via Gray monoids and then appealed to a coherence theorem to extend the concept to bicategories; we restate the definition directly.</p>\n<p>We prove that given a 2-category T with finite products and weak pullbacks, the bicategory of objects of C, spans, and isomorphism classes of maps of spans is compact closed. As corollaries, the bicategory of spans of sets and certain bicategories of \"resistor networks\" are compact closed.</p>",
        "id": 194883468,
        "sender_full_name": "John Baez",
        "timestamp": 1587523635
    },
    {
        "content": "<p>Regarding Wadler's \"propositions ad sessions\", while he uses pi-calculus like names for the terms of his type theory, I don't think it has all that much to do with the pi calculus.</p>",
        "id": 194890197,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587534004
    },
    {
        "content": "<p>Also there's a slightly earlier paper called \"the logic of message passing\" by Cockett and Pastro that gives a more powerful / general system, capturing Wadler's work as a degenerate case (including the interpretation of the multiplicatives). Unfortunately it's a pretty daunting paper to read.</p>",
        "id": 194890283,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587534146
    },
    {
        "content": "<p>Very much in the line of work started by Bellin and Scott though!</p>",
        "id": 194890288,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587534167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> could you change the topic of your first message in this thread? to break it off from general \"pictures\".<br>\nWe can start the concurrency stream tomorrow.</p>",
        "id": 194892012,
        "sender_full_name": "Christian Williams",
        "timestamp": 1587536451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276114\">Chad Nester</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194851143\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194851143\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> I think that looks interesting. It reminds me of \"interaction nets\" , which, iirc, also admit interpretation in a compact closed bicategory.</p>\n</blockquote>\n<p>Do you have a reference for this? I've been working on interaction nets recently and, while a bicategorical interpretation also seemed to make sense to me, I did not find any paper on the topic.</p>",
        "id": 194899038,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1587542813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276048\">Mike Stay</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194841041\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/Pictures.3F/near/194841041\">said</a>:</p>\n<blockquote>\n<p>The problem is that there are more reductions in the compact closed bicategory than in the pi calculus.  For example, if another copy of x? occurred in Q, x! could synchronize with that one instead, which is not allowed in pi calculus.</p>\n</blockquote>\n<p>Could you introduce an additional edge coming out of the 'send' and 'receive' generators to represent communication explicitly? The new reduction rule for these ternary nodes would then be dual to the one you have given for parallel composition. This eliminates some of the nondeterminism (but the commutativity of parallel composition preserves some degree of non-confluence).</p>",
        "id": 194900812,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1587544092
    },
    {
        "content": "<p>I was thinking about section 3.4 of <br>\n<a href=\"/user_uploads/21317/bYdv-sBWxHDo6WTi3WTvNjI7/lafont-1997-interaction-combinators.pdf\" title=\"lafont-1997-interaction-combinators.pdf\">lafont-1997-interaction-combinators.pdf</a></p>",
        "id": 194905938,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587547104
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"277342\">@Robin Piedeleu</span> )</p>",
        "id": 194905951,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587547115
    },
    {
        "content": "<p>while not explicitly categorical, the notation is the same</p>",
        "id": 194906034,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587547170
    },
    {
        "content": "<p>There are probably some fun things to work out with concerning how interaction nets relate to linear combinatory algebras via the geometry of interaction, now that I think about it.</p>",
        "id": 194906485,
        "sender_full_name": "Chad Nester",
        "timestamp": 1587547441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/compact.20closed.20bicategories.20.26.20the.20.CF.80-calculus/near/194881423\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/compact.20closed.20bicategories.20.26.20the.20.CF.80-calculus/near/194881423\">said</a>:</p>\n<blockquote>\n<p>in the first one: what does the labelling on the wires mean? should they say \"N\" instead of \"x\"?</p>\n</blockquote>\n<p>In the first one X is any arbitrary type.  It's what Jamie showed me.</p>",
        "id": 194957129,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587573107
    },
    {
        "content": "<p>ooooooooooooh wait i see how it's a yanking now ._.</p>",
        "id": 194957859,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587573458
    },
    {
        "content": "<p>but can't that only work if the other object is also the monoidal unit?</p>",
        "id": 194957891,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587573481
    },
    {
        "content": "<p>duals are unique, aren't they? and the monoidal unit is self-dual?</p>",
        "id": 194957949,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587573492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/compact.20closed.20bicategories.20.26.20the.20.CF.80-calculus/near/194881448\" title=\"#narrow/stream/232162-learning.3A-show.20and.20tell/topic/compact.20closed.20bicategories.20.26.20the.20.CF.80-calculus/near/194881448\">said</a>:</p>\n<blockquote>\n<p>or in the 3rd one: where is N ≅ N* ⊗ P coming from?</p>\n</blockquote>\n<p>None of this is set in stone.  Given a name, you can send and receive on it, so I was trying to capture that here.  A different option I considered was having ! and ? morphisms, each of which took N as an input, and were only adjoint when the names matched: <br>\n<a href=\"user_uploads/21317/cLSPRpPA_-JdrbaaiUXNCRbh/alternate.png\" title=\"user_uploads/21317/cLSPRpPA_-JdrbaaiUXNCRbh/alternate.png\">alternate.png</a><br>\nThis one treats names more like variables and various other things get easier, but the adjunction is a little harder to see.</p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/21317/cLSPRpPA_-JdrbaaiUXNCRbh/alternate.png\" title=\"alternate.png\"><img src=\"user_uploads/21317/cLSPRpPA_-JdrbaaiUXNCRbh/alternate.png\"></a></div>",
        "id": 194958726,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587573913
    },
    {
        "content": "<p>but where is N ≅ N* ⊗ P coming from?</p>",
        "id": 194959045,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587574078
    },
    {
        "content": "<p>i don't follow at all</p>",
        "id": 194959087,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587574083
    },
    {
        "content": "<p>it's not that i think there's something wrong with it, i just don't get what that might mean as an option</p>",
        "id": 194959133,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587574109
    },
    {
        "content": "<p>like, what does the map N* ⊗ P → N do?</p>",
        "id": 194959300,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587574196
    },
    {
        "content": "<p>Going the other way, given a morphism 1-&gt;N, you get a morphism 1-&gt;N* ⊗ P with an adjoint that you can use to send some other name on.  So given (z) you get (z!)</p>",
        "id": 194959667,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587574352
    },
    {
        "content": "<p>the talk is about to start, i'll ask more later :T</p>",
        "id": 194960406,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587574694
    },
    {
        "content": "<p>i think i might need to look at a specific model, i may be thinking too syntactically about this</p>",
        "id": 194960455,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587574715
    },
    {
        "content": "<p>Instead of N ≅ N ⊗ P, another alternative is to use a \"well-sorted\" version of the calculus where each name is labeled with the sort of the names that will be sent over it.  That lets us give a unique type to the morphisms x! and x?.  It's very much like how untyped lambda calculus is really singly-typed lambda calculus where the one type X ≅ X -&gt; X, but in simply-typed lambda calc everything terminates.</p>\n<p>Also, the fact that we're distinguishing x! from x? means we're using polarized names, where you can either send on a name or receive, but not both.</p>",
        "id": 194966917,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587577448
    },
    {
        "content": "<p>Is it still not confluent when you do that? (Guessing yes.)</p>",
        "id": 194968040,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587577972
    },
    {
        "content": "<p>You are right, it is not confluent.</p>",
        "id": 194969074,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587578459
    },
    {
        "content": "<p>I've just remembered that there's a linear pi calculus that <a href=\"https://books.google.com/books?id=zvecRsXLw6MC&amp;pg=PA149&amp;lpg=PA149&amp;dq=linear+discipline+on+names&amp;source=bl&amp;ots=yE6S0ihng1&amp;sig=ACfU3U2hq2b_HQAd57HesQaeE-sDqcbEqQ&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjq6eCYzvzoAhVaGDQIHSpFAwgQ6AEwAHoECAgQAQ#v=onepage&amp;q=linear%20discipline%20on%20names&amp;f=false\" title=\"https://books.google.com/books?id=zvecRsXLw6MC&amp;pg=PA149&amp;lpg=PA149&amp;dq=linear+discipline+on+names&amp;source=bl&amp;ots=yE6S0ihng1&amp;sig=ACfU3U2hq2b_HQAd57HesQaeE-sDqcbEqQ&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjq6eCYzvzoAhVaGDQIHSpFAwgQ6AEwAHoECAgQAQ#v=onepage&amp;q=linear%20discipline%20on%20names&amp;f=false\">Yoshida and Honda described</a>.  It sounds like there may be something there that fits better with my diagrams.</p>",
        "id": 194969326,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587578579
    },
    {
        "content": "<p>I haven't looked at these diagrams in years because I kept running into problems, but they're so close to working that there must be something there.</p>",
        "id": 194969589,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587578704
    },
    {
        "content": "<p>I'm no expert, but it vaguely sounds to me like typed pi calculus could correspond to classical logic. But maybe there's some reason that wouldn't work out. Computational interpretations of classical logic generally lack confluence, though, I think.</p>",
        "id": 194970726,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587579274
    },
    {
        "content": "<p>I guess classical logic wouldn't have N and P, though.</p>",
        "id": 194971040,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587579432
    },
    {
        "content": "<p>Should concurrency be under \"theory\" or \"practice\"? <span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span></p>",
        "id": 194972227,
        "sender_full_name": "Christian Williams",
        "timestamp": 1587580012
    },
    {
        "content": "<p>There should be versions for both.  Practice would be, e.g. implementations of actor systems, functional reactive programming, specific consensus algorithms, etc.  Theory would be the formal semantics (game theoretic, category theoretic, etc), type theory, decidability, axiomatizing the notion of consensus, etc.</p>",
        "id": 194972713,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587580251
    },
    {
        "content": "<p>Yeah, there should be.. but so far we're trying to be somewhat conservative with the streams.<br>\nHow about we start with theory, and we can make practice later?</p>",
        "id": 194974502,
        "sender_full_name": "Christian Williams",
        "timestamp": 1587581054
    },
    {
        "content": "<p>Fine by me.</p>",
        "id": 194980279,
        "sender_full_name": "Mike Stay",
        "timestamp": 1587583918
    },
    {
        "content": "<p>I was wondering what the best model of the pi-calculus was thought to be now. I saw that <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> in 2009 blog on the n-cafe <a href=\"https://golem.ph.utexas.edu/category/2009/08/the_pi_calculus.html\">The Pi Calculus</a> was looking to see if there was a way to link it to symmetric monoidal categeories. Then later in 2015 <span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> wrote a blog post <a href=\"https://golem.ph.utexas.edu/category/2015/05/a_2categorical_approach_to_the.html\">A 2-Categorical Approach to the Pi Calculus</a>. There is mention of a follow-up to that article, but I could not find it. </p>\n<p>I am interested to see how this could help think about actor systems, and indeed model the WWW.</p>",
        "id": 297223319,
        "sender_full_name": "Henry Story",
        "timestamp": 1662382971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276048\">@Mike Stay</span> and <span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> were working on that for a while, but as far as I know they've stopped.</p>",
        "id": 297236195,
        "sender_full_name": "John Baez",
        "timestamp": 1662388381
    },
    {
        "content": "<p>I remember watching your (John Baez') introductory talk on <a href=\"https://twitter.com/bblfish/status/1397962748429062145\">symmetric monoidal categories</a> and being struck on the importance of names to link the inputs and the outputs together. I guess that is the mathematical reason for why the actor system <a href=\"https://akka.io\">akka.io</a> names its actors with URLs. <br>\nIt should also tie in with the analysis of linked data as a symmetric monoidal category <a href=\"http://ceur-ws.org/Vol-745/paper_31.pdf\">Integrity Constraints for Linked Data</a> where documents have incoming and outgoing links, the URLS name the composition points.  And then of course RDF itself is explained in terms of symmetric monoidal categories in <a href=\"https://arxiv.org/abs/1706.00526\">Knowledge Representation in Bicategories of Relations</a>. </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1397962748429062145\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>Great introduction from examples to Symmetric Monoidal Categories by <a href=\"https://twitter.com/johncarlosbaez\">@johncarlosbaez</a> : their use in electrical engineering, quantum theory, programming, logic, ecology and other *open* systems with some thoughts on the 3rd law of thermodynamics.\n<a href=\"https://t.co/FRAnRwSDl4\">https://www.youtube.com/watch?v=DAGJw7YBy8E&amp;t=18s</a></p><span>- The 🐠 BabelFish (@bblfish)</span></div></div><p>In short: I also feel like there is something essential going on here with symmetric monoidal categories and the web - which feels like an actor system to me .</p>",
        "id": 297237117,
        "sender_full_name": "Henry Story",
        "timestamp": 1662388809
    },
    {
        "content": "<p>Here's <a href=\"https://link.springer.com/content/pdf/10.1007/978-3-030-17184-1_23.pdf\">A categorical model of an i/o-typed pi calculus</a> just a few years ago.</p>",
        "id": 297244767,
        "sender_full_name": "Christian Williams",
        "timestamp": 1662391999
    },
    {
        "content": "<p>Hmm, they define something they call a 'Freyd category' and give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">R</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">l</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set} \\to \\mathsf{Rel}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Rel</span></span></span></span></span> as the simplest example.   (A Freyd category is actually a functor between two categories, with some properties.)</p>",
        "id": 297247186,
        "sender_full_name": "John Baez",
        "timestamp": 1662393020
    },
    {
        "content": "<p>Part of their formalization uses a 'compact closed Freyd category'.   I think some category theorists might set up these ideas a bit differently.</p>",
        "id": 297247305,
        "sender_full_name": "John Baez",
        "timestamp": 1662393082
    },
    {
        "content": "<p>I guess it makes sense that a category that would unite functional programming and indeterministic processes would be one whose simplest example relates Set and Rel... <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span><br>\n<a href=\"/user_uploads/21317/tXOcJjAhNZkzCJ3DW9AL5s9L/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/21317/O_CCEGiWXhp3In7VvRnfKyYW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/tXOcJjAhNZkzCJ3DW9AL5s9L/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/tXOcJjAhNZkzCJ3DW9AL5s9L/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/21317/O_CCEGiWXhp3In7VvRnfKyYW/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/O_CCEGiWXhp3In7VvRnfKyYW/image.png\"></a></div>",
        "id": 297256604,
        "sender_full_name": "Henry Story",
        "timestamp": 1662397520
    },
    {
        "content": "<p>Ken Sakayori, gave a talk on the paper: \"Categorical analysis of the pi-calculus\" where he looks at shortcomings of it<br>\n<a href=\"https://www.youtube.com/watch?v=dVnbUyT8IMw\">https://www.youtube.com/watch?v=dVnbUyT8IMw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"dVnbUyT8IMw\" href=\"https://www.youtube.com/watch?v=dVnbUyT8IMw\"><img src=\"https://uploads.zulipusercontent.net/8159644e260436709d9177cd1ae04cf7e48e3693/68747470733a2f2f692e7974696d672e636f6d2f76692f64566e6255795438494d772f64656661756c742e6a7067\"></a></div>",
        "id": 297266366,
        "sender_full_name": "Henry Story",
        "timestamp": 1662403541
    },
    {
        "content": "<p>That led to the paper <a href=\"https://drops.dagstuhl.de/opus/volltexte/2021/14270/pdf/LIPIcs-FSCD-2021-32.pdf\">Output Without Delay: A π-Calculus Compatible with Categorical Semantics</a>. I am not sure I understand though: they work on a forwarder that does not introduce delays. If a forwarder is a message passing system then I would assume it always introduces delays.</p>",
        "id": 297266809,
        "sender_full_name": "Henry Story",
        "timestamp": 1662403780
    },
    {
        "content": "<p>Oh I found a talk  by <span class=\"user-mention\" data-user-id=\"275899\">@Christian Williams</span> on pi calculus :-) <br>\n<a href=\"https://www.youtube.com/watch?v=NTJBMbTIJis\">https://www.youtube.com/watch?v=NTJBMbTIJis</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"NTJBMbTIJis\" href=\"https://www.youtube.com/watch?v=NTJBMbTIJis\"><img src=\"https://uploads.zulipusercontent.net/cd1e70eb7f497cd0e2d739680233b1fc73348e84/68747470733a2f2f692e7974696d672e636f6d2f76692f4e544a424d6254494a69732f64656661756c742e6a7067\"></a></div>",
        "id": 297267785,
        "sender_full_name": "Henry Story",
        "timestamp": 1662404347
    },
    {
        "content": "<p>Shameful self-promotion: with <span class=\"user-mention\" data-user-id=\"385613\">@Clovis Eberhart</span> and <span class=\"user-mention\" data-user-id=\"302916\">@Thomas Seiller</span>, we constructed a <a href=\"https://lmcs.episciences.org/4069\">game model of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>-calculus</a>, in which strategies are presented as sheaves on a category of plays. The notion of play here means multi-party play, which includes forking (= a player dividing into two players). This is used to model parallel composition in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>-calculus. And the coverage essentially says that a play is covered by its sub-<em>views</em>, which are individual histories of players.</p>",
        "id": 297317970,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1662450066
    },
    {
        "content": "<p>As I was looking through the papers by Ken Sakayori yesterday I noticed <a href=\"https://dl.acm.org/doi/10.1007/978-3-662-54458-7_23\">A Truly Concurrent Game Model of the Asynchronous <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>-Calculus</a>. That seems to have come out at the same time as <span class=\"user-mention\" data-user-id=\"383799\">@Tom Hirschowitz</span>'s paper using sheaves.  Does the game model of pi-calculus deal with \"true concurrency\". (I guess that is the concurrency we have one the WWW where things really do happen simultaneously).</p>",
        "id": 297319438,
        "sender_full_name": "Henry Story",
        "timestamp": 1662450809
    },
    {
        "content": "<p>Ok, I added your paper <span class=\"user-mention\" data-user-id=\"383799\">@Tom Hirschowitz</span> to my Twitter thread on Actors <a href=\"https://twitter.com/bblfish/status/1567062264926150656\">https://twitter.com/bblfish/status/1567062264926150656</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1567062264926150656\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>\"strategies are presented as sheaves on a category of multi-party play, with forking (= a player dividing into 2) modeling parallel composition in the π-calculus. The coverage says that a play is covered by its sub-views = individual histories of players.\"\n<a href=\"https://t.co/lKKcyQMvYa\">https://lmcs.episciences.org/4069</a> <a href=\"https://t.co/DV1F2f00rz\">https://twitter.com/bblfish/status/1567062264926150656/photo/1</a></p><span>- The 🐠 BabelFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/DV1F2f00rz\"><img src=\"https://uploads.zulipusercontent.net/6f0539ca62bce64659a2715d93df24d56c9517b2/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46623952784d48575941556b554d532e6a70673a736d616c6c\"></a></div></div></div>",
        "id": 297321669,
        "sender_full_name": "Henry Story",
        "timestamp": 1662451782
    },
    {
        "content": "<p>Now practically I was hoping this could help me decide when Actors would be the right abstraction to use in programming over FP Effects - such as the <a href=\"https://github.com/typelevel/fs2\">Cats FS2 library</a>. But I think it is going to take quite some work to find a way from these abstractions to a coding decision... <br>\nWell it is helping in so far as dismissal of Actors on the ground that they are don't have mathematical cats support seem to be on a very weak  ground now :-)</p>",
        "id": 297321956,
        "sender_full_name": "Henry Story",
        "timestamp": 1662451906
    },
    {
        "content": "<p>No, their paper came out two years later... and they don't cite us.</p>",
        "id": 297322779,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1662452273
    },
    {
        "content": "<p>To explain a bit more, I think they don't really consider our model to be a game model because our plays do not look like standard, game-semantical plays. <span class=\"user-mention\" data-user-id=\"385613\">@Clovis Eberhart</span> and I later <a href=\"https://hal.archives-ouvertes.fr/hal-01715405\">argued</a> that it is a matter of presentation.</p>",
        "id": 297331482,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1662455997
    },
    {
        "content": "<p>Oh, and a second reason iirc is that we do not work out the usual \"composition+hiding\" pattern of game semantics.</p>",
        "id": 297331709,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1662456084
    },
    {
        "content": "<p>Oh very nice :-) Thanks for those pointers.</p>",
        "id": 297331918,
        "sender_full_name": "Henry Story",
        "timestamp": 1662456162
    }
]