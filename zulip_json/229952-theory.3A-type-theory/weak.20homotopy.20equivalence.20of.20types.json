[
    {
        "content": "<p>Is there a notion of weak homotopy equivalence in HoTT, i.e. of a function which induces an equivalence of all homotopy groups? Is it true that such a function is automatically an equivalence, since types in HoTT are always finite CW-complexes?</p>",
        "id": 217901739,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1606319457
    },
    {
        "content": "<p>Yes, and no. See section 8.8 of the HoTT book, which calls the statement \"a map is an equivalence if it induces an isomorphism on all possible homotopy groups\" \"Whitehead's principle\". (Though I find this term somewhat confusing, and would rather call it something like \"hypercompleteness\".)</p>",
        "id": 217902137,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606319643
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  Why would types in HoTT be <em>finite</em> CW-complexes ? (for instance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> is not-finite but it's usually constructible in HoTT)</p>",
        "id": 217902726,
        "sender_full_name": "Kenji Maillard",
        "timestamp": 1606319907
    },
    {
        "content": "<p>Indeed, types need be finite neither in cardinality (e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>) nor in the range in which their homotopy groups are nontrivial.</p>",
        "id": 217902961,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606320007
    },
    {
        "content": "<p>nor in the range in which their homology groups are nontrivial.</p>",
        "id": 217904292,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1606320554
    },
    {
        "content": "<p>Ugh, yes, finite is not the right word. What I meant is 'inductively definable'.</p>",
        "id": 217908076,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1606322045
    },
    {
        "content": "<p>Thanks for the reference <span class=\"user-mention\" data-user-id=\"276480\">@Reid Barton</span>, that's exactly what I was after.<br>\nHere's what Reid is referring to:</p>\n<blockquote>\n<p>Whitehead’s theorem is not provable. In fact, there are known models of type theory in which it fails to be true,  although for entirely different reasons than its failure for ill-behaved topological spaces. [...] From a foundational point of view, therefore, we may speak of Whitehead’s principle as a “classicality axiom”, akin to LEM and AC. It may consistently be assumed, but it is not part of the computationally motivated type theory, nor does it hold in all natural models. But when working from set-theoretic foundations, this principle is invisible: it cannot fail to be true in a world where ∞-groupoids are built up out of sets (using topological spaces, simplicial sets, or any other such model).</p>\n</blockquote>",
        "id": 217909021,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1606322485
    },
    {
        "content": "<p>What does 'inductively definable' mean? Not all types are inductively defined. Function/pi types are the usual example, but some type theories add others.</p>",
        "id": 217910176,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606323037
    },
    {
        "content": "<p>Moreover, a variable type is not inductively definable</p>",
        "id": 217910281,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606323096
    },
    {
        "content": "<p>Yeah, even if all the ways of forming types were inductive, adding a principle to the language that recognized that might have odd consequences.</p>",
        "id": 217910476,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606323175
    },
    {
        "content": "<p>It would rule out the simplicial set model, for sure</p>",
        "id": 217910524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606323191
    },
    {
        "content": "<p>Like trying to add 'Church's thesis' (or whatever people call it) to the language merely because all the functions you can write down are computable.</p>",
        "id": 217910626,
        "sender_full_name": "Dan Doel",
        "timestamp": 1606323238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/weak.20homotopy.20equivalence.20of.20types/near/217910176\">said</a>:</p>\n<blockquote>\n<p>What does 'inductively definable' mean? Not all types are inductively defined. Function/pi types are the usual example, but some type theories add others.</p>\n</blockquote>\n<p>Well, in some sense, they are... the meta-theory gets messier though.</p>",
        "id": 218853541,
        "sender_full_name": "Cody Roux",
        "timestamp": 1607098263
    }
]