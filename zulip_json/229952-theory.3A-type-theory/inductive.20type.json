[
    {
        "content": "<p>The HoTT book (specifically chapter 5) acts like there is a concept of \"inductive type\", of which the notion of a \"W-type\" is a special case:</p>\n<blockquote>\n<p>So far, we have been discussing only particular inductive types: 0, 1, 2, N, coproducts, products, Σ-types, W-types, etc.</p>\n</blockquote>\n<p>What would be an example of an inductive type that is not a W-type? I always thought of \"W-type\" as an already quite general notion of the idea of an \"inductive type\".</p>",
        "id": 249212375,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1628759648
    },
    {
        "content": "<p>Higher inductive types, maybe?</p>",
        "id": 249226721,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1628770603
    },
    {
        "content": "<p>The natural numbers are one example.  A W-type has only one constructor, while Nat has two.  There is a W-type that \"encodes\" Nat (assuming we already have 2, at least), but they are different.</p>",
        "id": 249230996,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1628773212
    },
    {
        "content": "<p>Could someone say a bit more about the distinction, failure and/or encoding?</p>\n<p>This is a bit confusing, as the first example on the nLab page says \"The most basic W-type is the natural numbers.\" Presumably this is in reference to the alternative definition there of W-types for Type Theory (we are in the type theory thread after all).</p>",
        "id": 249359567,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1628861033
    },
    {
        "content": "<p>Perhaps Mike's point is that ℕ and W2[0,1] are only equivalent, so at the very intensional level of the syntactic rules of type theory, they literally have different rules. In fact, the equivalence relies on function extensionality, so they aren't equivalent in plain MLTT. Relatedly, not every pair of 0s of W2[0,1] is definitionally equal. The canonical 0 is <code>sup 0 λ()</code>, but not every <code>f : 0 → U</code> is definitionally equal to <code>λ()</code> (i.e, <code>rec₀</code>).</p>",
        "id": 249366528,
        "sender_full_name": "James Wood",
        "timestamp": 1628864652
    },
    {
        "content": "<p>Yes, this is discussed in section 5.3 and at the beginning of section 5.5 of the HoTT Book.</p>",
        "id": 249374313,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1628868263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/inductive.20type/near/249359567\">said</a>:</p>\n<blockquote>\n<p>This is a bit confusing, as the first example on the nLab page says \"The most basic W-type is the natural numbers.\"</p>\n</blockquote>\n<p>I think that's a mistake on the nLab, thanks for pointing that out.</p>",
        "id": 249374373,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1628868287
    },
    {
        "content": "<p>Thanks!<br>\n<span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/inductive.20type/near/249230996\">said</a>:</p>\n<blockquote>\n<p>A W-type has only one constructor</p>\n</blockquote>\n<p>I don't understand this, because the branching signature can consist of several labels. I'm confused. :-)</p>",
        "id": 249384162,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1628873477
    },
    {
        "content": "<p>The \"tag\" of the constructor will always be the same, but of course you can invoke that constructor with several different arguments to _encode_ an inductive with different constructors, which is what <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> is suggesting, I think.</p>",
        "id": 249406400,
        "sender_full_name": "Cody Roux",
        "timestamp": 1628884795
    },
    {
        "content": "<p>Yes, that's the point.  It's the difference between two elements of a type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, on one hand, and a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">2\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, on the other.</p>",
        "id": 249407649,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1628885366
    },
    {
        "content": "<p>I don't get it. What does it mean that the tag of the constructur will always be the same? Also, I don't think there's a difference between two elements of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">2\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, since there's a bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mn>2</mn></msup><mo>≅</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>→</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A^2\\cong(2\\to A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>. :P Of course, you know that, but I'm not able to interpret the sentence in any other sensible way.</p>",
        "id": 249463780,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1628953300
    },
    {
        "content": "<p>I suppose the question you're really interested in asking is whether every strictly positive functor on types can be encoded (up to equivalence) as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><msub><mi mathvariant=\"normal\">Σ</mi><mrow><mi>a</mi><mo>:</mo><mi>A</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>B</mi><mtext> </mtext><mi>a</mi><mo>→</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X \\mapsto \\Sigma_{a : A} (B\\,a \\to X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> by some choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. I believe so, but I haven't really thought it through.</p>",
        "id": 249464877,
        "sender_full_name": "James Wood",
        "timestamp": 1628954839
    },
    {
        "content": "<p>I suppose you could argue that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><mo stretchy=\"false\">∥</mo><mi>X</mi><mo stretchy=\"false\">∥</mo></mrow><annotation encoding=\"application/x-tex\">X \\mapsto \\lVert X \\rVert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">∥</span></span></span></span> is strictly positive, but let's rule that out for now.</p>",
        "id": 249465212,
        "sender_full_name": "James Wood",
        "timestamp": 1628955159
    },
    {
        "content": "<p>There is a bijection, but they are not definitionally the same set.  The distinctions we're talking about here are finer than up-to-isomorphism.</p>",
        "id": 249467969,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1628959099
    },
    {
        "content": "<p>Ah, I see, thanks.<br>\nBut I don't yet see how this connects to a W-type having only one constructor.</p>",
        "id": 249507254,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1629026539
    },
    {
        "content": "<p>A general inductive type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> has a finite list of constructors, say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>:</mo><msub><mi>P</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">c_i : P_i(I) \\to I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">P_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is some functor for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1\\le i\\le n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.  For a W-type we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.  We can take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">P_1(I) = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> for a W-type, but this would be different from an inductive type where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>P</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">P_1(I) = P_2(I)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 249514560,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629036402
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 249518540,
        "sender_full_name": "Leopold Schlicht",
        "timestamp": 1629042001
    },
    {
        "content": "<p>BTW, if we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> for the unit type and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>-types (but no function extensionality), then the natural numbers <em>can</em> be recovered as a W-type, satisfying all the rules, including the judgmental computation rule. This is in Jasper Hugunin's <a href=\"https://jashug.github.io/papers/whynotw.pdf\">Why not W?</a>.</p>",
        "id": 249522713,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1629048446
    },
    {
        "content": "<p>What's the category-theoretic/semantic analogue of those assumptions?</p>",
        "id": 249530646,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1629061848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278656\">Ulrik Buchholtz</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/inductive.20type/near/249522713\">said</a>:</p>\n<blockquote>\n<p>BTW, if we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> for the unit type and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>-types (but no function extensionality), then the natural numbers <em>can</em> be recovered as a W-type, satisfying all the rules, including the judgmental computation rule. This is in Jasper Hugunin's <a href=\"https://jashug.github.io/papers/whynotw.pdf\">Why not W?</a>.</p>\n</blockquote>\n<p>This is a nice result, but I don't think it's correct to say that the natural numbers are recoverd <em>as</em> a W-type.  Rather, Jasper defines a predicate by recursion on the W-type corresponding to nat, picking out a \"subtype\" of it that satisfies the judgmental computation rule.</p>",
        "id": 249538701,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629075206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276422\">David Michael Roberts</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/inductive.20type/near/249530646\">said</a>:</p>\n<blockquote>\n<p>What's the category-theoretic/semantic analogue of those assumptions?</p>\n</blockquote>\n<p>It's hard to write down models where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> for unit and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> doesn't hold.  It basically means that fibrations contain identity maps and are closed under composition.</p>",
        "id": 249538755,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629075267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229952-theory.3A-type.20theory/topic/inductive.20type/near/249538701\">said</a>:</p>\n<blockquote>\n<p>This is a nice result, but I don't think it's correct to say that the natural numbers are recoverd <em>as</em> a W-type.  Rather, Jasper defines a predicate by recursion on the W-type corresponding to nat, picking out a \"subtype\" of it that satisfies the judgmental computation rule.</p>\n</blockquote>\n<p>That's a good point: I guess we should say that this result is a reduction of natural numbers to W-types in this setting. It seems like a general technique that might similarly reduce all inductive types to W-types.</p>",
        "id": 249574597,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1629112019
    },
    {
        "content": "<p>Yes, it does.</p>",
        "id": 249580758,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629116309
    },
    {
        "content": "<p>This discussion has been helpful. I'd like to read about this in more detail. Other than the HoTT book, can you recommend sources for the theory of inductive types?</p>",
        "id": 249811156,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1629266584
    },
    {
        "content": "<p>The approach taken in the HoTT Book is extended and developed further in a series of papers by Awodey, Gambino, and Sojakova: <a href=\"https://arxiv.org/abs/1201.3898\">https://arxiv.org/abs/1201.3898</a>, <a href=\"https://arxiv.org/abs/1402.0761\">https://arxiv.org/abs/1402.0761</a>, <a href=\"https://arxiv.org/abs/1504.05531\">https://arxiv.org/abs/1504.05531</a>.</p>",
        "id": 249900663,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629315120
    },
    {
        "content": "<p>There are some more references at the nlab pages <a href=\"https://ncatlab.org/nlab/show/W-type\">https://ncatlab.org/nlab/show/W-type</a> and <a href=\"https://ncatlab.org/nlab/show/inductive+type\">https://ncatlab.org/nlab/show/inductive+type</a>.</p>",
        "id": 249900995,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1629315285
    }
]