[
    {
        "content": "<p>I wanted to raise a question that sparked from reading the discussion about the word evil (especially <span class=\"user-mention\" data-user-id=\"281326\">@Ryan Wisnesky</span> <span class=\"user-mention\" data-user-id=\"277289\">@Jonas Frey</span> and <span class=\"user-mention\" data-user-id=\"424412\">@Patrick Nicodemus</span>'s comments). I have the belief that sometimes, for example when we work with monoidal categories, we would like to fix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mi>B</mi><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes B \\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> — and perhaps we naively do so — and in general all finite-length monoidal products. I have seen this subtlety being overlooked many times, and I would like to know more about this issue and how people perceive it. For example, why is there not a clearly accepted definition of this concept?</p>\n<p>Just to put a disclaimer for people who may jump up saying that there is the strictness theorem: this is, most of the time, insufficient to ensure that other definitions stemming from monoidal categories admit a strictification. In fact, strictification seems to be a statement that needs a proof each time we change the setting.</p>",
        "id": 519070579,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747652106
    },
    {
        "content": "<p>This is a consideration resolved either by convention (that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mi>B</mi><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes B \\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is shorthand for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A \\otimes B) \\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, with bracketing always from the left or the right) <em>or</em> by using an unbiased definition of monoidal category which includes monoidal products of every finite arity, <em>or</em> by instead working with representable multicategories, so that these tensors are determined by their universal properties and the mediating isomorphisms can be left implicit because they too are determined by the universal properties.</p>",
        "id": 519076531,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1747653595
    },
    {
        "content": "<p>I don't think it's a subtlety that people are missing so much, as it is a common and mild abuse of language. Writing parentheses produces clutter , and (adding to what Morgan just said) if the category of different choices and the associativity morphisms and whatnot mediating between them is contractible (meaning: exactly one morphism between any pair of objects), then it's considered okay to treat them as all \"essentially the same\", and thereby reduce the fuss and clutter by not bothering to disambiguate. </p>\n<p>This is related to how the word <a href=\"https://ncatlab.org/nlab/show/generalized+the\">\"the\"</a> is used.</p>",
        "id": 519079100,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1747654267
    },
    {
        "content": "<p>I do see how the issue can be resolved, but it's weird to me that there is no precise definition. And granted that for categories this is easy to fix, when you look at functors this is more nuanced. Here's a situation I'm thinking about: let us consider a prop and a certain symmetric monoidal category. Then a choice of a (symmetric) strong monoidal functor is also a choice of parenthesis, which feels unnecessary, but there is no strict functor if the symmetric monoidal category isn't strict.</p>\n<p>Also, the convention you mentioned is definitely one way to consider this irrelevant, which I tend to believe is for most applications, but it's not what we do even for sets.</p>",
        "id": 519080541,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747654604
    },
    {
        "content": "<blockquote>\n<p>but it's not what we do even for sets.</p>\n</blockquote>\n<p>Isn't it? If you asked me to formally define the product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B \\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> in set theory I would use iterated Kuratowski pairs instead of introducing a custom coding of \"ordered triple\" in ZFC.</p>",
        "id": 519173421,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1747674677
    },
    {
        "content": "<p>It's not quite clear what you're claiming has no precise definition, but I'm pretty sure that when we dig into it you'll learn there is a precise definition, along one of the lines Morgan suggested.</p>",
        "id": 519174303,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1747674903
    },
    {
        "content": "<p>Could we solve this by making <a href=\"https://ncatlab.org/nlab/show/clique\">cliques</a> more of a standard structure? (And anafunctors, etc.)</p>",
        "id": 519175945,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1747675347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424412\">Patrick Nicodemus</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519173421\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but it's not what we do even for sets.</p>\n</blockquote>\n<p>Isn't it? If you asked me to formally define the product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B \\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> in set theory I would use iterated Kuratowski pairs instead of introducing a custom coding of \"ordered triple\" in ZFC.</p>\n</blockquote>\n<p>However, if I had a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>∈</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">u \\in A\\times B\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and you ask me what its \"first component\" is, the answer would be an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, not an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, even if you formally defined <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\times B)\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.  So although we might take that as the formal definition, we immediately hide it behind an abstraction barrier and never use anything about it except that it's a product of A, B, and C in Set.</p>",
        "id": 519176839,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747675564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275989\">@Paolo Perrone</span>  Off topic, but I don't know what an anafunctor is. I skimmed the definition on nlab and I got 'it's similar to a representable profunctor, but not exactly.' Can you or someone else explain anafunctors in terms of representable profunctors?</p>",
        "id": 519179644,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1747676291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424412\">@Patrick Nicodemus</span>  I'm not an expert at all (please anyone correct me if needed!), here's how I view the two things:<br>\n1) An <strong>anafunctor</strong> is \"something like a functor mapping objects to cliques\". A canonical example on the nose is the pseudoinverse of a given functor.<br>\n2) A <strong>representable profunctor</strong> is \"something like a functor mapping objects to the representatives of a presheaf\". A canonical example on the nose is a right-adjoint (representing the presheaf C(L-,Y): D^op -&gt; Set for a given functor L: D-&gt;C), and another one is a pointwise Kan extension.</p>\n<p>Now \"objects representing the same presheaf\", i.e. \"satisfying the same universal property\", form exactly a clique, so 1) is a special case of 2).<br>\nConversely, but more \"indirectly\", an anafunctor gives rise to a representable profunctor (either form spans, or, if you allow choice, take an object in the clique and its representable presheaf).<br>\nTherefore the two concepts are in some sense equivalent, but have a different flavor: for anafunctors, the focus is on the \"up to isomorphism\", while for representable profunctors, the focus is on the universal property. </p>\n<p>A canonical situation where you see the slight difference, citing what the nLab says, is if you want a <em>left</em>-adjoint. Clearly it's a functor defined up to isomorphism, but this time the universal property is the other way around, we are representing a <em>functor</em> D(X,R-): C -&gt; Set, not a presheaf. <br>\nSo it's pretty clear how the same \"up to isomorphism\" game still holds, but finding specifically a <em>presheaf</em> that this should represent takes some more work.<br>\nSimilar considerations can be made for pseudoinverses (what's the presheaf?), for the coherence of monoidal categories, and so on.</p>\n<p>What I said in my post above could be either in favor of anafunctors or of representable profunctors.</p>",
        "id": 519188373,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1747678628
    },
    {
        "content": "<p>Let me try to express more precisely what I find unsatisfying about the standard notion from a functorial perspective. </p>\n<p>Intuitively, I'd like to consider only strong functors between monoidal categories that allow for a strict version. More precisely, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> be two monoidal categories and consider their strictifications <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">D_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Then I'd like to consider strong functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">C\\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> giving rise to strict functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub><mo>→</mo><msub><mi>D</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{st} \\to D_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. </p>\n<p>Note that this is not necessarily true; in fact, there exist strong functors that are not naturally isomorphic to strict functors even between strict monoidal categories (a simple example is obtained by considering <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mord mathbb\">Z</span></span></span></span> as a monoidal category with one object, and then take the identity functor equipped with the natural transformation given by the nontrivial element).</p>\n<p>To avoid this issue and considering only functors that are more properly \"strict\" in this sense, it seems natural to consider the case where all finite-length monoidal products are fixed to begin with. Is there any way to circumvent this issue?</p>",
        "id": 519190066,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747679113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609515\">Kevin Carlson</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519174303\">said</a>:</p>\n<blockquote>\n<p>It's not quite clear what you're claiming has no precise definition, but I'm pretty sure that when we dig into it you'll learn there is a precise definition, along one of the lines Morgan suggested.</p>\n</blockquote>\n<p>I think there is an \"obvious\" precise definition (by fixing all finite-length monoidal products), but as far as I can tell it's not used in the literature. And my interest is mostly on the functors that come from such a description.</p>",
        "id": 519191994,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747679616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275989\">Paolo Perrone</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519175945\">said</a>:</p>\n<blockquote>\n<p>Could we solve this by making <a href=\"https://ncatlab.org/nlab/show/clique\">cliques</a> more of a standard structure? (And anafunctors, etc.)</p>\n</blockquote>\n<p>This seems a promising direction, although I can't see how to make it precise at the moment. Thank you for the input!</p>",
        "id": 519192413,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747679735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419640\">Antonio Lorenzin</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519191994\">said</a>:</p>\n<blockquote>\n<p>I think there is an \"obvious\" precise definition (by fixing all finite-length monoidal products), but as far as I can tell it's not used in the literature.</p>\n</blockquote>\n<p>If I understand correctly, what you're suggesting here is the <em>unbiased</em> definition of monoidal category (as mentioned earlier in this thread). This is developed in some detail in Section 3.1 of <span class=\"user-mention\" data-user-id=\"277067\">@Tom Leinster</span>'s <a href=\"https://arxiv.org/abs/math/0305049\">HIgher Operads, Higher Categories</a>.</p>",
        "id": 519197509,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747681165
    },
    {
        "content": "<p>Giving a fully unbiased definition of <em>symmetric</em> monoidal category is harder, because one needs to have a way to avoid distinguishing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> without losing track of the braidings. One possibility appears in <a href=\"https://www.jmilne.org/math/xnotes/tc2018.pdf\">Tannakian categories</a> by Deligne and Milne:<br>\n<a href=\"/user_uploads/21317/52OKRrbBGRRxddlz6itZEloF/image.png\">image.png</a><br>\nTheir definition tacitly assumes the strict equality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"sans-serif\">C</mi><mi>I</mi></msup><mo>=</mo><msub><mo>∏</mo><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow></msub><msup><mi>C</mi><mrow><msup><mi>α</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathsf{C}^I = \\prod_{j \\in J} C^{\\alpha^{-1}(j)}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4227em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.09618em;\">J</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> for any map of finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>:</mo><mi>I</mi><mo>→</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha : I \\to J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, without which their coherence morphisms don't type check. I suppose that this can be fixed, but it seems pretty tedious to get this really right.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/52OKRrbBGRRxddlz6itZEloF/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"716x535\" src=\"/user_uploads/thumbnail/21317/52OKRrbBGRRxddlz6itZEloF/image.png/840x560.webp\"></a></div>",
        "id": 519199265,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747681656
    },
    {
        "content": "<p>What is arguably the most systematic is the definition used in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-category theory to define symmetric monoidal structures. This is based on a fibrational picture where the symmetric monoidal structure becomes something more like a property rather than a structure. See e.g. Section 3.1 of <a href=\"https://www.math.univ-paris13.fr/~harpaz/lecture_notes.pdf\">Harpaz's lecture notes</a>:<br>\n<a href=\"/user_uploads/21317/HLdeAqQpvDl6wJwWQ-1xsIGG/image.png\">image.png</a><br>\nRoughly, this encodes the symmetric monoidal structure as a property in a way that is similar to how the nerve of a category encodes composition as a property.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/HLdeAqQpvDl6wJwWQ-1xsIGG/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"885x281\" src=\"/user_uploads/thumbnail/21317/HLdeAqQpvDl6wJwWQ-1xsIGG/image.png/840x560.webp\"></a></div>",
        "id": 519200658,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747682051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419640\">Antonio Lorenzin</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519190066\">said</a>:</p>\n<blockquote>\n<p>let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> be two monoidal categories and consider their strictifications <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">D_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Then I'd like to consider strong functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">C\\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> giving rise to strict functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub><mo>→</mo><msub><mi>D</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{st} \\to D_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. </p>\n<p>Note that this is not necessarily true; in fact, there exist strong functors that are not naturally isomorphic to strict functors even between strict monoidal categories</p>\n</blockquote>\n<p>I think you confused two similar but different things here.  It's true that <em>given</em> two strict monoidal categories, there may be strong functors between them that are not isomorphic to any strict functor between those <em>same</em> monoidal categories.  But it is nevertheless true that <em>every</em> strong monoidal functor between two monoidal categories <em>is</em> equivalent, in a suitable sense, to some strict monoidal functor between their <em>strictifications</em>.</p>",
        "id": 519200926,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747682132
    },
    {
        "content": "<p>At least, if you choose the strictifications appropriately.  (In particular, of course, that means even if the starting monoidal categories are strict, you can't choose themselves as their \"strictifications\".)</p>",
        "id": 519201550,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747682312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276702\">@Tobias Fritz</span>  yes, that is what I have in mind! Apparently this is more investigated than I previously believed. I also thought that this should be well-known to higher categorists (and the last <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-category approach is more sensible to what a monoidal category should be to me). Thank you for the pointers!</p>",
        "id": 519201814,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747682394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276702\">Tobias Fritz</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519199265\">said</a>:</p>\n<blockquote>\n<p>Giving a fully unbiased definition of <em>symmetric</em> monoidal category is harder</p>\n</blockquote>\n<p>Well, I suppose it depends on what you think that should mean.  Normally when I say an unbiased symmetric monoidal category I would think of having <em>ordered</em> n-ary tensor products, just like in an unbiased non-symmetric monoidal category, with isomorphisms between them given by all permutations.</p>",
        "id": 519202517,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747682612
    },
    {
        "content": "<p>I think that matches better what we do in practice, e.g. we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> rather than parenthesizing it, but we still write them in an order.</p>",
        "id": 519202731,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747682667
    },
    {
        "content": "<p>Right, I know that that's how the term 'unbiased' is usually used, but I don't think that this matches the practice of e.g. network theory: if you permute the terminals of an electrical network, then practictioners would still call it the same network!</p>",
        "id": 519202912,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747682735
    },
    {
        "content": "<p>Also if we take the <a href=\"https://ncatlab.org/nlab/show/periodic%20table\">[[periodic table]]</a> seriously, then string diagrams in SMCs really live in four dimensions, and the \"spatial slices\" that designate objects are more like unordered bunches of wires, no? So what I meant by 'fully unbiased' was a kind of definition of SMC which implements the idea that it should be possible to tensor a bunch of objects with ordering them.</p>\n<p>And although this is perhaps counterintuitive because one might be afraid of losing track of the braidings, the definitions I've pointed to actually realize this idea.</p>",
        "id": 519203574,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747682913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519202731\">said</a>:</p>\n<blockquote>\n<p>I think that matches better what we do in practice, e.g. we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> rather than parenthesizing it, but we still write them in an order.</p>\n</blockquote>\n<p>Not always, it's also common to write things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_{i \\in I} A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, no? Although arguably less common when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is finite than when it's infinite.</p>",
        "id": 519203727,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747682962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276702\">Tobias Fritz</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519202912\">said</a>:</p>\n<blockquote>\n<p>Right, I know that that's how the term 'unbiased' is usually used, but I don't think that this matches the practice of e.g. network theory: if you permute the terminals of an electrical network, then practictioners would still call it the same network!</p>\n</blockquote>\n<p>In at least some applications, the issue is that you really do want a <em>commutative</em> monoidal category instead of a symmetric one: this is famously the case with Petri nets, which generate CMCs in their traditional semantics and SMCs in their whole-grain formulation. But I guess you do need a braiding for electrical networks, what with the wires and all...</p>",
        "id": 519210764,
        "sender_full_name": "Kevin Carlson",
        "timestamp": 1747684914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519200926\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"419640\">Antonio Lorenzin</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519190066\">said</a>:</p>\n<blockquote>\n<p>let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> be two monoidal categories and consider their strictifications <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">D_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Then I'd like to consider strong functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">C\\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> giving rise to strict functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub><mo>→</mo><msub><mi>D</mi><mrow><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{st} \\to D_{st}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. </p>\n<p>Note that this is not necessarily true; in fact, there exist strong functors that are not naturally isomorphic to strict functors even between strict monoidal categories</p>\n</blockquote>\n<p>I think you confused two similar but different things here.  It's true that <em>given</em> two strict monoidal categories, there may be strong functors between them that are not isomorphic to any strict functor between those <em>same</em> monoidal categories.  But it is nevertheless true that <em>every</em> strong monoidal functor between two monoidal categories <em>is</em> equivalent, in a suitable sense, to some strict monoidal functor between their <em>strictifications</em>.</p>\n</blockquote>\n<p>Thank you for pointing this out! What I wanted to express in my setting is that the strictifications are not really taken to necessarily be \"universal\", but instead they are fixed at the beginning. So, in particular, a strong functor that is not naturally isomorphic to a strict functor is something that I would like to disregard as \"not good enough\". Also, if there were two strict functors that are naturally isomorphic, then I'd still want to consider them as separate.<br>\nMore intuitively, I'm looking for an identification of strong functors that only differ by a \"choice of parenthesis\".</p>\n<p>To keep in mind why on earth I'd want that, consider a (colored strict) prop <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> and a symmetric monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>. If I give you a good assignment of the generators of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (i.e., all the relations are satisfied), this should give you a class of strong functors that are \"unique up to parentheses\". In particular, when I consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">C=P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, then the identity assignment should give you <em>only</em> the identity functor.<br>\nMy instinct (and not more at the moment) tells me that this may be more easy to describe if I fix finite-length tensor products, for example.</p>",
        "id": 519210769,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747684916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276702\">Tobias Fritz</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519203727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519202731\">said</a>:</p>\n<blockquote>\n<p>I think that matches better what we do in practice, e.g. we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> rather than parenthesizing it, but we still write them in an order.</p>\n</blockquote>\n<p>Not always, it's also common to write things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_{i \\in I} A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, no? Although arguably less common when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is finite than when it's infinite.</p>\n</blockquote>\n<p>I think it is quite rare to write that when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is an <em>unordered finite</em> set.  And we are talking here about monoidal structures here, not arbitrary products, so there isn't really even a possibility of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> being infinite in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨂</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\bigotimes_{i\\in I} A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 519211613,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747685164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519211613\">said</a>:</p>\n<blockquote>\n<p>I think it is quite rare to write that when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is an <em>unordered finite</em> set.  </p>\n</blockquote>\n<p>I'll grant that the rarity or frequency of that notation varies from subject to subject, so let me mention one context where this is used frequently, namely the <a href=\"https://en.wikipedia.org/wiki/Bayesian_network#Factorization_definition\">theory of Bayesian networks</a>. There, one has a directed graph <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(V,E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> and a Markov kernel <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>v</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mrow><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(x_v|x_{\\mathrm{parents}(v)})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">parents</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> associated to each <del>edge</del> vertex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>. These kernels are composed to a joint distribution given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∏</mo><mrow><mi>v</mi><mo>∈</mo><mi>V</mi></mrow></msub><mi>p</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>v</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mrow><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(x) = \\prod_{v \\in V} p(x_v|x_{\\mathrm{parents}(v)})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">parents</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>In the special case where the graph has no edges, this is simply a product of probability distributions indexed by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, which is a monoidal product with finitely many factors in a Markov category. The fact that the standard or unbiased definition of SMC do not support this kind of tensoring while <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is unordered is a frustrating issue for the semantics of Bayesian networks. (And it's even worse when the graph does have edges, because then one needs to evaluate a genuine string diagram in a Markov category, without having a planar embedding.)</p>\n<p>So this kind of comsposition works and is used in the context of Bayesian networks, and therefore I think that category theorists should provide a definition of SMC that supports it natively.</p>",
        "id": 519290021,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747716458
    },
    {
        "content": "<p>Interesting, thanks for sharing.  Is that a non-cartesian monoidal structure?  (It sounds like you're saying it is; I ask because you wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∏</mo></mrow><annotation encoding=\"application/x-tex\">\\prod</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⨂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigotimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span></span></span></span>.)</p>",
        "id": 519297814,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747721067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276702\">Tobias Fritz</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519290021\">said</a>:</p>\n<blockquote>\n<p>I think that category theorists should provide a definition of SMC that supports it natively</p>\n</blockquote>\n<p>I know you didn't mean it this way, but that phrase sounds a little offensive to my ears, as if category theorists existed only to serve the needs of other mathematicians.  Even though I generally agree that category theory is improved by looking at what structures arise naturally in other areas of mathematics and trying to model them.</p>",
        "id": 519298406,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747721362
    },
    {
        "content": "<p>Anyway, you're probably aware that Leinster wrote down a definition of symmetric <em>multicategory</em> along these lines in one of his appendices, under the name \"fat symmetric multicategory\".  So perhaps to avoid confusion with existing notions of \"unbiased\", this could be called a \"fat symmetric monoidal category\".</p>",
        "id": 519298625,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747721462
    },
    {
        "content": "<p>Pisani also studies \"fat\" (symmetric) monoidal categories in <a href=\"https://arxiv.org/abs/2409.10150\">Unbiased multicategory theory</a>.</p>",
        "id": 519302291,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1747723040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519297814\">said</a>:</p>\n<blockquote>\n<p>Interesting, thanks for sharing.  Is that a non-cartesian monoidal structure?  (It sounds like you're saying it is; I ask because you wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∏</mo></mrow><annotation encoding=\"application/x-tex\">\\prod</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⨂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigotimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span></span></span></span>.)</p>\n</blockquote>\n<p>Yes, that's right! The formation of product distributions multiplies probabilities (so the product is a product of numbers), but it's a non-cartesian symmetric monoidal structure.</p>",
        "id": 519305864,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747724427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519298406\">said</a>:</p>\n<blockquote>\n<p>as if category theorists existed only to serve the needs of other mathematicians. </p>\n</blockquote>\n<p>Oh, I certainly didn't mean that with an \"only\". But I'd hope for that to be <em>one</em> purpose among others for <em>some</em> category theorists!</p>",
        "id": 519306291,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747724594
    },
    {
        "content": "<p>Thanks for the pointers to fat symmetric multicategories! I didn't know about the Pisani paper. It's nice that this even gives an apparently well-behaved notion of infinitary SMC.</p>",
        "id": 519309822,
        "sender_full_name": "Tobias Fritz",
        "timestamp": 1747725806
    },
    {
        "content": "<p>Since I don't see it mentioned yet (sorry if I missed it): unbiased symmetric monoidal categories can be defined as algebras for a 2-monad on Cat with a fairly easy definition: SC is the category whose objects are lists of objects in C, and morpisms between lists of the same length are given by pairs of a permutation and an n-tuple of maps in C.</p>",
        "id": 519312378,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1747726595
    },
    {
        "content": "<p>This appears in the work on generalized species</p>",
        "id": 519312503,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1747726642
    },
    {
        "content": "<p>Regarding the \"fat\" case: I think one can define a notion fat <em>non-symmetric</em> multicategory for each class J of linear orders which contains 1 and is closed under J-indexed ordinal sums. </p>\n<p>I wonder if this has been studied, or if anyone has seen examples?</p>",
        "id": 519313246,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1747726877
    },
    {
        "content": "<p>Hi In programming, the components of a product are very often named (called \"fields\"). <span class=\"user-mention\" data-user-id=\"280755\">@Owen Lynch</span> just uploaded a <a href=\"https://arxiv.org/pdf/2504.19389\">preprint</a> connecting this with strict products, SMCs etc. (Sec 3). Perhaps this is relevant. [Sorry this is not an answer to Jonas's last question, though.]</p>",
        "id": 519323679,
        "sender_full_name": "Sam Staton",
        "timestamp": 1747729811
    },
    {
        "content": "<p>A data point from a mathematical physicist: I often use products and tensor products indexed by unordered sets.  For example in my old work on quantum gravity I defined a connection on a graph to be an element of </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow></msub><mi>G</mi></mrow><annotation encoding=\"application/x-tex\"> \\prod_{e \\in E}  G </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is the set of edges of the graph and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is some Lie group.  Of course we could rewrite this as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mi>E</mi></msup></mrow><annotation encoding=\"application/x-tex\">G^E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span></span></span></span></span></span></span>.   But I also introduced a Hilbert space of 'quantum connections' on the graph as</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨂</mo><mrow><mi>e</mi><mo>∈</mo><mi>G</mi></mrow></msub><msup><mi>L</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\bigotimes_{e \\in G} L^2(G) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1412em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">G</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>where I'm taking an unordered tensor product of Hilbert spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L^2(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>I've done this sort of thing forever, it seems, and only recently a referee of one paper raised a question of what these unordered products mean.  I forget how I finessed it - some explanatory remark.</p>",
        "id": 519362667,
        "sender_full_name": "John Baez",
        "timestamp": 1747741291
    },
    {
        "content": "<p>I would like to know that explanatory remark if possible, because that tensor product seems inherently ordered to me. </p>\n<p>Btw, another important thing to keep in mind when doing such unordered variants, is that somehow you'd like to be able to say what invariance under permutation is. I remember discussing this with <span class=\"user-mention\" data-user-id=\"276702\">@Tobias Fritz</span></p>",
        "id": 519366078,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747742414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419640\">@Antonio Lorenzin</span> - basically the explanatory remark amounted to \"don't worry about it, there are lots of ways to formalize this, and it doesn't matter which you use\".    This thread has listed a bunch, and it's easy to make up more.</p>",
        "id": 519369144,
        "sender_full_name": "John Baez",
        "timestamp": 1747743280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> Just to better understand, this is not really different from choosing a wellorder, is it?</p>",
        "id": 519371168,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747743859
    },
    {
        "content": "<p>It really depends on what \"really\" means.</p>",
        "id": 519372109,
        "sender_full_name": "John Baez",
        "timestamp": 1747744146
    },
    {
        "content": "<p>I would never bother to choose an order myself.   I think it's quite possible to define the universal property of a tensor product of vector spaces like</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨂</mo><mrow><mi>x</mi><mo>∈</mo><mi>S</mi></mrow></msub><msub><mi>V</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\"> \\bigotimes_{x \\in S} V_x </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>for some finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> without ever choosing an order on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.  The universal property specifies this tensor product up to canonical isomorphism.   You are then free to construct something obeying this universal property using whatever method you like.  The great thing about universal properties is that I don't need to know or care what method you've chosen: as long as it obeys the universal property you're okay.</p>",
        "id": 519372671,
        "sender_full_name": "John Baez",
        "timestamp": 1747744320
    },
    {
        "content": "<p>Yes, I think we are saying similar things from different perspectives. If we want to fix one tensor object, then order matters, but if we instead work up to unique iso, then such a choice becomes irrelevant.</p>",
        "id": 519375056,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747744990
    },
    {
        "content": "<p>Okay.   I don't think the order needs to matter even if you want to fix one tensor object... but I also don't care!   I <em>always</em> want to work only up to unique isomorphism, because I'm trying to communicate with many mathematicians, who may have their own constructions of tensor products, and I want to let them use their own constructions.</p>\n<p>If I were designing a software system to work with tensor products, or doing some foundational work on mathematics, or writing an algebra textbook, then I might need to choose some 'unique up to equality' definition of tensor products.   (Or maybe I would avoid this.)</p>",
        "id": 519380602,
        "sender_full_name": "John Baez",
        "timestamp": 1747746563
    },
    {
        "content": "<p>I guess it depends on the category, but I do agree that this may be more annoying than important in many contexts --- I can imagine this being very important in higher categorical structures, but since I'm not familiar with them, let me just leave it at that.</p>",
        "id": 519383430,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747747284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/241990-community.3A-discussion/topic/monoidal.20products/near/519380602\">said</a>:</p>\n<blockquote>\n<p>If I were designing a software system to work with tensor products, or doing some foundational work on mathematics, or writing an algebra textbook, then I might need to choose some 'unique up to equality' definition of tensor products.   (Or maybe I would avoid this.)</p>\n</blockquote>\n<p>That is an interesting approach, because I feel it's more natural to work with strict monoidal categories so that everything is fixed, rather than reasoning up to natural iso.</p>",
        "id": 519383945,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747747413
    },
    {
        "content": "<p>I'm not working in isolation: my work relies communicating with many people.   The mathematicians I know have almost all learned the universal property definition of tensor product (of vector spaces, say), and that's what they consider fundamental.    Since I want my theorems to be understandable and valid to all these mathematicians, I can't use rely on anything but the universal property.  </p>\n<p>I also talk to some physicists whose definition of tensor product is roughly: the tensor product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mrow><mi>m</mi><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^{m n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">mn</span></span></span></span></span></span></span></span></span></span></span></span>.   Or: the tensor product of a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> with basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> with basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is some vector space with basis consisting of symbols <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub><mo>⊗</mo><msub><mi>f</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i \\otimes f_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>.   Luckily I can write in a way that's at least roughly understandable to them too, since most the things I do with tensor products can be understood in these terms.   Some may ask about the question you raise: how do we tensor an unordered set of vector spaces?   Then, since I probably don't want a long conversation, I may tell them \"choose an ordering\".</p>",
        "id": 519388259,
        "sender_full_name": "John Baez",
        "timestamp": 1747748398
    },
    {
        "content": "<p>That makes total sense! </p>\n<p>By the way, I apologize if I came across as harsh or disrespectful — that wasn’t my intention. I have a deep appreciation for your expertise, and I understand you're not working in isolation. In fact, between the two of us, I think I’m the one working in more isolation. When I said 'that’s an interesting approach,' it was meant as a genuine expression of surprise, because my (limited) experience had suggested otherwise. Again, sorry for the mishap.</p>",
        "id": 519391831,
        "sender_full_name": "Antonio Lorenzin",
        "timestamp": 1747749260
    },
    {
        "content": "<p>Don't worry, you didn't seem harsh or disrespectful at all!    The fact that you think I might have thought that (oh-oh, now it's getting complicated) probably comes from <em>me</em> sounding a bit harsh.  And that's simply because this sort of question reminds me of when I'm working on my Windows machine and all of a sudden it turns out that to do something I need to enter some code in DOS in the command line interface.... leaving the level of abstraction I'm comfortable with, and going down to some primitive realm.</p>",
        "id": 519394383,
        "sender_full_name": "John Baez",
        "timestamp": 1747749849
    },
    {
        "content": "<p>I believe the notion of nominal prop from <a href=\"https://arxiv.org/abs/2004.08380\">this paper</a> by Samuel Balco and <span class=\"user-mention\" data-user-id=\"276830\">@Alexander Kurz</span> may be relevant to the discussion. I believe that this is essentially trying to formalise the idea of a node (or box) in a string diagram having <em>named wires</em> instead of <em>ordered wires</em>, and a connection being possible wrt any matching of named wires, rather than by \"reordering\" with the structural symmetric braidings.</p>",
        "id": 519405601,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1747752549
    },
    {
        "content": "<p>Things like John's \"unordered tensor products\" are very natural if one takes the nominal approach... such a tensor product would have a set of named wires which is like a dependent sum: one parameter for the index, and then one for each named wire of the indexed diagram...</p>",
        "id": 519406248,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1747752685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/channel/241990-community.3A-discussion/topic/monoidal.20products/near/519362667\">said</a>:</p>\n<blockquote>\n<p>I often use products and tensor products indexed by unordered sets.</p>\n</blockquote>\n<p>Cool!  Thanks to you and Tobias, today I have learned that something I thought was fairly esoteric is actually useful.</p>\n<p>Maybe fat symmetric monoidal categories would be a nice subject for a TAC Expositions paper.</p>",
        "id": 519417612,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1747755478
    }
]