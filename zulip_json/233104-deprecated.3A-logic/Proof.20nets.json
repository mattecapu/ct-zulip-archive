[
    {
        "content": "<p>Inspired by <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>'s talk, I have put some work into getting a little linear logic theorem prover I built a few months back suitable for public consumption: <a href=\"https://github.com/akissinger/pypn\" title=\"https://github.com/akissinger/pypn\">https://github.com/akissinger/pypn</a></p>\n<p><a href=\"/user_uploads/21317/1xKizjD_ss7PU8bNmRMemeKi/Screenshot.png\" title=\"Screenshot.png\">Screenshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/1xKizjD_ss7PU8bNmRMemeKi/Screenshot.png\" title=\"Screenshot.png\"><img src=\"/user_uploads/21317/1xKizjD_ss7PU8bNmRMemeKi/Screenshot.png\"></a></div><p>It proves a formula by trying to build a proof net, satisfying some correctness criterion, which is pluggable by the user. I've implemented the (MLL+MIX version of the) Danos-Regnier conditions, and also some slightly more expanded things in trying to find the \"right\" notion of a logic for <a class=\"stream-topic\" data-stream-id=\"229156\" href=\"/#narrow/stream/229156-practice.3A-applied-ct/topic/causal.20inference\">#practice: applied ct &gt; causal inference</a>.</p>\n<p>Happy to chat about all the above. Happier if other people decide they want to have a bit of a hack on the theorem prover. :)</p>",
        "id": 195115693,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587673969
    },
    {
        "content": "<p>what's the + there?</p>",
        "id": 195115862,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674061
    },
    {
        "content": "<p>is it supposed to be ⅋ ?</p>",
        "id": 195115866,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674069
    },
    {
        "content": "<p>yes</p>",
        "id": 195115881,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587674083
    },
    {
        "content": "<p>that seems a little misleading when there's also a ⊕ connective in linear logic &gt;.&gt;</p>",
        "id": 195115918,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674106
    },
    {
        "content": "<p>neat</p>",
        "id": 195116069,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674176
    },
    {
        "content": "<p>what kind of proof net is this?</p>",
        "id": 195116149,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674226
    },
    {
        "content": "<p>it's a \"two-sided\" variation of the usual notion of an MLL proof net</p>",
        "id": 195116399,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587674363
    },
    {
        "content": "<p>hmm</p>",
        "id": 195116431,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674381
    },
    {
        "content": "<p>so axiom links are now just identities &amp; cuts are now just composition?</p>",
        "id": 195116538,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674417
    },
    {
        "content": "<p>Some notations for linear logic use + and circled +.</p>",
        "id": 195116823,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587674532
    },
    {
        "content": "<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 195116861,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674550
    },
    {
        "content": "<p>I forget if they also use × and circled ×, though.</p>",
        "id": 195116874,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587674560
    },
    {
        "content": "<p>(not at the notation itself necessarily, just at the total incompatibility of the giant array of notations)</p>",
        "id": 195116895,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674573
    },
    {
        "content": "<p>yes, this is actually not so uncommon :)</p>",
        "id": 195116909,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587674584
    },
    {
        "content": "<p>this is all girard's fault for picking ⅋ instead of something that was, like, possible to typeset</p>",
        "id": 195116953,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674623
    },
    {
        "content": "<p>my choice for using plus was pretty much pragmatic, in that it has the right precedence in the \"host\" language (python)</p>",
        "id": 195116962,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587674629
    },
    {
        "content": "<p>One might hope that that notation would coincide with the fact that one of the conjunctions is a categorical product, and one disjunction is a coproduct (I think), but it might not follow that convention, either.</p>",
        "id": 195117146,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587674715
    },
    {
        "content": "<p>it does not</p>",
        "id": 195117171,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674731
    },
    {
        "content": "<p>the product is &amp; and the coproduct is ⊕</p>",
        "id": 195117185,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587674740
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 195117213,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587674756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195116538\" title=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195116538\">said</a>:</p>\n<blockquote>\n<p>so axiom links are now just identities &amp; cuts are now just composition?</p>\n</blockquote>\n<p>It has axioms and cuts too, but the distinction between axiom, cut, and identity is pretty much syntactic, i.e. whether you are proving something in one-sided style like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊢</mo><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" rspace=\"0em\">⊥</mo></msup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\vdash \\Gamma^{\\perp}, \\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">⊥</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">Δ</span></span></span></span> or two-sided <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\vdash \\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span>.</p>",
        "id": 195117308,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587674776
    },
    {
        "content": "<p>...or do something crazy like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo separator=\"true\">,</mo><msup><mi mathvariant=\"normal\">Δ</mi><mo lspace=\"0em\" rspace=\"0em\">⊥</mo></msup><mo>⊢</mo></mrow><annotation encoding=\"application/x-tex\">\\Gamma,\\Delta^{\\perp} \\vdash</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">Γ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">⊥</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span></span></span></span>\"</p>",
        "id": 195117565,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587674929
    },
    {
        "content": "<p>I feel compelled to say that the notations for the linear logic connectives are far from arbitrary, as Girard himself has stressed several times. They were initially meant as mnemonics for the distributivity rules <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>⊕</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊕</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A \\otimes (B \\oplus C) \\equiv (A \\otimes B) \\oplus (A \\otimes C)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mtext>⅋</mtext><mo stretchy=\"false\">(</mo><mi>B</mi><mi mathvariant=\"normal\">&amp;</mi><mi>C</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mtext>⅋</mtext><mi>B</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">&amp;</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mtext>⅋</mtext><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A ⅋ (B \\&amp; C) \\equiv (A ⅋ B) \\&amp; (A ⅋ C)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord\">⅋</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">&amp;</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord\">⅋</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mord\">&amp;</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord\">⅋</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span>. These rules turned out to be related to a deeper phenomenon, <em>polarity</em>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>⅋</mtext><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">&amp;</mi></mrow><annotation encoding=\"application/x-tex\">⅋,\\&amp;</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">⅋</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">&amp;</span></span></span></span> are \"negative\" connectives whose sequent calculus rules are invertible.</p>",
        "id": 195125004,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587679423
    },
    {
        "content": "<p>unfortunately, polarity cuts across additive vs multiplicative, and the latter is more blatantly on display a lot of the time</p>",
        "id": 195125375,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679650
    },
    {
        "content": "<p>so it mightve been a better idea to prioritize it in the notation</p>",
        "id": 195125388,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679659
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 195125393,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679661
    },
    {
        "content": "<p>Yeah, you would like the symbols for dual connectives to remind one of each other… Taking all those constraints into account is not an easy design problem :p</p>",
        "id": 195125527,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587679730
    },
    {
        "content": "<p>indeed!</p>",
        "id": 195125536,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679736
    },
    {
        "content": "<p>i dont hate the standard ⊗ ⅋ &amp; ⊕, and ive gotten used to them, but i do think it wld probably have been better to swap ⊕ and ⅋ or something</p>",
        "id": 195125665,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679825
    },
    {
        "content": "<p>although <em>then</em> you have the problem that ⊕ is a multiplicative and not an additive... <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 195125678,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679841
    },
    {
        "content": "<p>oy gevalt</p>",
        "id": 195125690,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679855
    },
    {
        "content": "<p>BTW, if anybody wants to implement a non-exponential correctness criterion for MLL+Mix, the way to do so would be to use Retoré's reduction to alternating elementary cycles for perfect matchings, and then use the linear-time algorithm for the latter. (I point this out in one of my papers.)</p>",
        "id": 195125723,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587679882
    },
    {
        "content": "<p>maybe we should all switch to mike shulman's notation</p>",
        "id": 195125742,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587679896
    },
    {
        "content": "<p>In my experience a lot of people don't realize how fundamental Retoré's work on proof nets is (but some people in the deep inference community do get it)</p>",
        "id": 195125845,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587679945
    },
    {
        "content": "<p>hmm, now you're talking about stuff out of my league <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195125930,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680010
    },
    {
        "content": "<p>Well IMO this stuff is a lot simpler (or at least less abstract) than categories, it's just discrete math / graph theory</p>",
        "id": 195125972,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680038
    },
    {
        "content": "<p>i mean in terms of what i currently know—im sure i could learn about it if i put the time in</p>",
        "id": 195126089,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680100
    },
    {
        "content": "<p>i havent gone super deep w/ proof nets—cant remember any correctness criteria off the top of my head or anything</p>",
        "id": 195126234,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680171
    },
    {
        "content": "<p>My pitch would be: perhaps the most difficult result of Girard's original \"Linear Logic\" paper was proving that MLL proof nets enjoying the correctness criterion are exactly those that can be obtained from the MLL sequent calculus. MLL+Mix adds further difficulties. What Retoré shows is that the problem for MLL+Mix is basically equivalent to a result from the 1950s in graph theory, so logicians didn't have to do the whole thing from scratch.</p>",
        "id": 195126287,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680207
    },
    {
        "content": "<p>ooh nice</p>",
        "id": 195126294,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680218
    },
    {
        "content": "<p>yeah lol i remember skimming thru that paper and scrolling past pages and pages of material on long trips</p>",
        "id": 195126327,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680251
    },
    {
        "content": "<p>And in turn this result (Kotzig's theorem) is equivalent to a lot of other things that pop up in graph theory, including IIRC a notoriously difficult lemma from one of the Robertson-Seymour graph minor papers; there's a paper by Stefan Szeider that compiles some of those equivalent versions.</p>",
        "id": 195126358,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680280
    },
    {
        "content": "<p>So with this, instead of being this isolated thing from proof theory, you have a phenomenon which is actually connected to mainstream graph theory.</p>",
        "id": 195126425,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680306
    },
    {
        "content": "<blockquote>\n<p>every polyhedral graph has an edge whose two endpoints have total degree at most 13</p>\n</blockquote>",
        "id": 195126470,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680350
    },
    {
        "content": "<p>wat</p>",
        "id": 195126474,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680353
    },
    {
        "content": "<p>I'm not talking about that</p>",
        "id": 195126481,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680360
    },
    {
        "content": "<p>It's the one about perfect matchings: <a href=\"https://arxiv.org/pdf/1402.0949.pdf\" title=\"https://arxiv.org/pdf/1402.0949.pdf\">https://arxiv.org/pdf/1402.0949.pdf</a></p>",
        "id": 195126511,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680393
    },
    {
        "content": "<p>And Szeider's paper: <a href=\"https://www.ac.tuwien.ac.at/files/pub/szeider-AC-2004.pdf\" title=\"https://www.ac.tuwien.ac.at/files/pub/szeider-AC-2004.pdf\">https://www.ac.tuwien.ac.at/files/pub/szeider-AC-2004.pdf</a></p>",
        "id": 195126599,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680424
    },
    {
        "content": "<p>(Damn those people who are productive enough to have multiple well-known theorems named after them!)</p>",
        "id": 195126619,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680439
    },
    {
        "content": "<p>I guess while I'm at it I can plug my own work: <a href=\"https://lmcs.episciences.org/6172\" title=\"https://lmcs.episciences.org/6172\">https://lmcs.episciences.org/6172</a></p>",
        "id": 195126704,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680499
    },
    {
        "content": "<p>nice</p>",
        "id": 195126912,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587680614
    },
    {
        "content": "<p>Oh and I forgot the most important, Retoré's paper: <a href=\"https://www.sciencedirect.com/science/article/pii/S030439750100175X\" title=\"https://www.sciencedirect.com/science/article/pii/S030439750100175X\">https://www.sciencedirect.com/science/article/pii/S030439750100175X</a></p>",
        "id": 195127083,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680707
    },
    {
        "content": "<p>(What I'm talking about is just the short first section of that paper by Retoré; the rest is dedicated to an equally important idea of representing proof nets using cographs, which is at the heart of a lot of subsequent developments, e.g. Dominic Hughes's combinatorial proofs for propositional classical logic)</p>",
        "id": 195127219,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587680788
    },
    {
        "content": "<p>Regarding notation, in both category theory and logic it's pretty standard to use rotated/reflected variant notations for pairs of notions that are categorical / De Morgan duals.  Thus <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo><mi mathvariant=\"normal\">/</mi><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">\\times/+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">×</span><span class=\"mord\">/</span><span class=\"mord\">+</span></span></span></span> for cartesian products and coproducts, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∩</mo><mi mathvariant=\"normal\">/</mi><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cap/\\cup</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∩</span><span class=\"mord\">/</span><span class=\"mord\">∪</span></span></span></span> for intersections and unions, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo><mi mathvariant=\"normal\">/</mi><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge/\\vee</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∧</span><span class=\"mord\">/</span><span class=\"mord\">∨</span></span></span></span> for classical conjunction and disjunction, and... <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo><mi mathvariant=\"normal\">/</mi><mtext>⅋</mtext></mrow><annotation encoding=\"application/x-tex\">\\otimes/⅋</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">⊗</span><span class=\"mord\">/</span><span class=\"mord\">⅋</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">&amp;</mi><mi mathvariant=\"normal\">/</mi><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\&amp;/⊕</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">&amp;</span><span class=\"mord\">/</span><span class=\"mord\">⊕</span></span></span></span>??</p>",
        "id": 195140943,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587695382
    },
    {
        "content": "<p>I think the most sensible notation is to use cartesian/lattice notations like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo><mi mathvariant=\"normal\">/</mi><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">\\times/+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">×</span><span class=\"mord\">/</span><span class=\"mord\">+</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo><mi mathvariant=\"normal\">/</mi><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge/\\vee</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∧</span><span class=\"mord\">/</span><span class=\"mord\">∨</span></span></span></span> for the additive connectives, since they are in fact categorical (co)products / posetal meets/joins.  The problem then is to find a notational pair for the multiplicative that displays their De Morgan duality but doesn't clash with other expectations too much.  Cockett-Seely used <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo><mi mathvariant=\"normal\">/</mi><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes/\\oplus</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">⊗</span><span class=\"mord\">/</span><span class=\"mord\">⊕</span></span></span></span>, but I just can't handle <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span> for a tensor product; it has too strong a connotation of a direct sum / biproduct for me.  Jeff Egger has suggested \\owedge and \\ovee, which is not bad except that I have a hard time distinguishing them visually.  The notation I used in the talk, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊠</mo></mrow><annotation encoding=\"application/x-tex\">\\boxtimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;vertical-align:0em;\"></span><span class=\"mord amsrm\">⊠</span></span></span></span> and a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><msup><mn>5</mn><mo>∘</mo></msup></mrow><annotation encoding=\"application/x-tex\">45^\\circ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.674115em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∘</span></span></span></span></span></span></span></span></span></span></span>-rotated version thereof, is the best I've found.</p>",
        "id": 195141087,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587695567
    },
    {
        "content": "<p>on the other hand, ⅋ just looks cool <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 195141238,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587695765
    },
    {
        "content": "<p>Its main value seems to be as a shibboleth for linear logicians.</p>",
        "id": 195142046,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587696926
    },
    {
        "content": "<p>you're probably right—altho i mean, would a turned ⊠ not end up playing the same role?</p>",
        "id": 195142181,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587697164
    },
    {
        "content": "<p>It's much easier to draw.  For me at least.</p>",
        "id": 195142686,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587697826
    },
    {
        "content": "<p>oh true, totally forgot about handwriting <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195142782,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587698032
    },
    {
        "content": "<p>personally i just had a point around when i got into linear logic where sat down and spent 20 minutes writing ⅋s over and over workign out how to do it</p>",
        "id": 195142864,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587698132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195141087\" title=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195141087\">said</a>:</p>\n<blockquote>\n<p>I think the most sensible notation is to use cartesian/lattice notations like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo><mi mathvariant=\"normal\">/</mi><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">\\times/+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">×</span><span class=\"mord\">/</span><span class=\"mord\">+</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo><mi mathvariant=\"normal\">/</mi><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge/\\vee</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∧</span><span class=\"mord\">/</span><span class=\"mord\">∨</span></span></span></span> for the additive connectives, since they are in fact categorical (co)products / posetal meets/joins.  The problem then is to find a notational pair for the multiplicative that displays their De Morgan duality but doesn't clash with other expectations too much.  Cockett-Seely used <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo><mi mathvariant=\"normal\">/</mi><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes/\\oplus</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">⊗</span><span class=\"mord\">/</span><span class=\"mord\">⊕</span></span></span></span>, but I just can't handle <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span> for a tensor product; it has too strong a connotation of a direct sum / biproduct for me.  Jeff Egger has suggested \\owedge and \\ovee, which is not bad except that I have a hard time distinguishing them visually.  The notation I used in the talk, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊠</mo></mrow><annotation encoding=\"application/x-tex\">\\boxtimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;vertical-align:0em;\"></span><span class=\"mord amsrm\">⊠</span></span></span></span> and a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><msup><mn>5</mn><mo>∘</mo></msup></mrow><annotation encoding=\"application/x-tex\">45^\\circ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.674115em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∘</span></span></span></span></span></span></span></span></span></span></span>-rotated version thereof, is the best I've found.</p>\n</blockquote>\n<p>I like Jeff's notation because then then it matches with the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊤</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\top, \\bot</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">⊤</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⊥</span></span></span></span> for the monoidal units.  Also, the duality of both monoidal structures is expressed in this symmetry along the horizontal axis.  As long as it is not the upside down ampersand, because I find it impossible to legibly write.</p>",
        "id": 195144165,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1587700042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278835\">@Nguyễn Lê Thành Dũng</span> thanks for the refs. I find it quite remarkable many different-looking correctness criteria of lots of different complexities are equivalent. I'm essentially teaching myself them by coding them in to PyPN. Maybe I'll have a go at Retore's next.</p>",
        "id": 195170238,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587724339
    },
    {
        "content": "<p>PyPN does already have one polynomial correctness checker for MLL+MIX, <code>cut_checker</code> which repeatedly removes nodes, subject to the condition that removing \"tensor-like\" nodes disconnects its neighbours. This is quadratic I think. I convinced myself this is correct reading some papers on (ISO)MIX by Cockett &amp; Seely, but probably there's a better ref for this.</p>",
        "id": 195170572,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587724587
    },
    {
        "content": "<p>It seems that most of the newer correctness criteria are actually easier to implement for MIX, rather than harder, i.e. usually there is something additional you have to check about the net when you <em>don't</em> have MIX. For instance, without MIX,<code>cut_checker</code> would need to check that, whenever you remove a par-like node, the graph doesn't disconnect.</p>",
        "id": 195170901,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587724805
    },
    {
        "content": "<p>The exception to this seems to be the \"contraction to a point\" criterion that appears in Danos' PhD thesis. I couldn't see any particularly obvious way to incorporate MIX into this, which is a bit of a pity because it is perhaps the most conceptually interesting for the application I have in mind (causality and signalling for \"black-box\" processes).</p>",
        "id": 195171148,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587724975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295673\">Aleks Kissinger</span> <a href=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195170572\" title=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195170572\">said</a>:</p>\n<blockquote>\n<p>PyPN does already have one polynomial correctness checker for MLL+MIX, <code>cut_checker</code> which repeatedly removes nodes, subject to the condition that removing \"tensor-like\" nodes disconnects its neighbours. This is quadratic I think. I convinced myself this is correct reading some papers on (ISO)MIX by Cockett &amp; Seely, but probably there's a better ref for this.</p>\n</blockquote>\n<p>IIRC something like this also appears in Danos's PhD.</p>",
        "id": 195179563,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587730908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295673\">Aleks Kissinger</span> <a href=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195171148\" title=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195171148\">said</a>:</p>\n<blockquote>\n<p>The exception to this seems to be the \"contraction to a point\" criterion that appears in Danos' PhD thesis. I couldn't see any particularly obvious way to incorporate MIX into this, which is a bit of a pity because it is perhaps the conceptually interesting for the application I have in mind (causality and signalling for \"black-box\" processes).</p>\n</blockquote>\n<p>Indeed, I spent a lot of time thinking about this and couldn't find any way to do so either. My feeling is that the contractibility criterion fundamentally relies on some properties that are there in MLL but not in MLL+Mix. For instance, if a subgraph of a MLL proof net is itself a correct MLL proof net, then it may appear as a subproof of some sequentialization of the bigger net; there is no analogous property for MLL+Mix (you have to distinguish what Bellin calls \"normal subnets\").</p>\n<p>Another exception is the criterion by Virgile Mogbil &amp; Paulin de Naurois that shows that MLL proof net correctness is NL-complete (NL = non-deterministic logarithmic space) – for MLL+Mix the precise complexity is not really known (applying an old result of László Lovász gives you randomized NC complexity, which is believed to be strictly smaller than P).</p>",
        "id": 195179950,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587731164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277391\">Cole Comfort</span> <a href=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195144165\" title=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195144165\">said</a>:</p>\n<blockquote>\n<p>I like Jeff's notation because then then it matches with the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊤</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\top, \\bot</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">⊤</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⊥</span></span></span></span> for the monoidal units.  </p>\n</blockquote>\n<p>Argh, but then you have a clash with the traditional notations: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊤</mi></mrow><annotation encoding=\"application/x-tex\">\\top</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊤</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\bot</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊥</span></span></span></span> are the units for the additive conjunction and multiplicative disjunction respectively in linear logic. I'm fine with emphasizing duality instead of polarities, but then IMO you should use fresh symbols to avoid confusion.<br>\n(Personally I've come to like the traditional notations.)</p>",
        "id": 195180895,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1587731727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278835\">Nguyễn Lê Thành Dũng</span> <a href=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195180895\" title=\"#narrow/stream/233104-theory.3A-logic/topic/Proof.20nets/near/195180895\">said</a>:</p>\n<blockquote>\n<p>(Personally I've come to like the traditional notations.)</p>\n</blockquote>\n<p>Same. Not for any well-considered reasons, but just that there's something satisfying about a drawing a well-executed par-symbol. :)</p>\n<p>The ASCII notations I'm using in PyPN come from limitations and python and at least partially from the notations used by <code>llprover</code>, which is a 20+ year old prover for CLL and fragments written in prolog.</p>",
        "id": 195182774,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1587732720
    },
    {
        "content": "<p>+1 for the Girard notation. I like that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span> fit with tensor product and direct sum in categories of ring modules, which I see as the prototypical symmetric monoidal closed cats. It feels right that they should go together, and with/par be in the same relation in the opposite category.</p>",
        "id": 195187926,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1587735174
    },
    {
        "content": "<p>actually i kinda like that way of thinkign about it now that ive heard it :)</p>",
        "id": 195198441,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587739658
    },
    {
        "content": "<p>I would tend to think of Set as a more \"prototypical\" symmetric monoidal closed category.</p>",
        "id": 195220738,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587749486
    },
    {
        "content": "<p>And ring modules are not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">\\ast</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span>-autonomous, so their notation doesn't really suggest what should be used for that case.</p>",
        "id": 195220781,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587749512
    },
    {
        "content": "<p>And the point is that multiplicative conjunction and additive disjunction <em>don't</em> \"go together\".  What \"goes\" with multiplicative conjunction is multiplicative disjunction.</p>",
        "id": 195220934,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587749583
    },
    {
        "content": "<p>But probably we should stop before we get any further down the rabbit hole of Wadler's Law.</p>",
        "id": 195220981,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587749610
    },
    {
        "content": "<p>The 'going together' was having a distributive rule. But of course, that's just one choice of 'going together'.</p>",
        "id": 195221665,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587749946
    },
    {
        "content": "<p>I think if you connect the notation up with the categorical structure, ways for remembering the distribution that are at least as good as the Girard notation, though. The tensors distribute across the relevant (co)product.</p>",
        "id": 195222797,
        "sender_full_name": "Dan Doel",
        "timestamp": 1587750522
    },
    {
        "content": "<p>so what's the linear logic notation for comments?</p>",
        "id": 195227292,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587753016
    },
    {
        "content": "<p>the possibility of going further down the rabbit hole of wadler's law necessitates there being one, surely</p>",
        "id": 195227336,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587753047
    },
    {
        "content": "<p>One problem with emphasizing distribution in order to remember the notation is that frequently we work with fragments like MLL that don't <em>have</em> the additives, hence distribution can't even be discussed.</p>",
        "id": 195233306,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587756129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295673\">@Aleks Kissinger</span> I just found out about this implementation of various algorithms on proof nets in Scala: <a href=\"https://staff.aist.go.jp/s-matsuoka/PNCalculator/index.html\">https://staff.aist.go.jp/s-matsuoka/PNCalculator/index.html</a></p>",
        "id": 197152483,
        "sender_full_name": "Lê Thành Dũng (Tito) Nguyễn",
        "timestamp": 1589207048
    },
    {
        "content": "<p>cool! Thanks for pointing this out.</p>",
        "id": 197258890,
        "sender_full_name": "Aleks Kissinger",
        "timestamp": 1589280764
    }
]