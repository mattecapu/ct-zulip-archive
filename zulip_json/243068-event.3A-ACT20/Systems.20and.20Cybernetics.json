[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275953\">Blake Pollard</span> <a href=\"#narrow/stream/243068-ACT-2020/topic/July.209.3A.20ACT.20Business.20Meeting/near/203434428\">said</a>:</p>\n<blockquote>\n<p>Yea, systems or systems engineering definitely has emerged as a (still fairly broad) sub-community of ACT and cybernetics is a cool even broader umbrella.</p>\n</blockquote>\n<p>From what I have seen of the tools people are using, systems engineering approaches seem to be more about resource sharing and cybernetics is more about \"everything is a lens if you squint.\" I think that <span class=\"user-mention\" data-user-id=\"276589\">@Sophie Libkind</span>'s talk on Resource Sharing Machines proposed a path forward for unifying these two approaches. <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span> and <span class=\"user-mention\" data-user-id=\"276049\">@David Spivak</span> have been talking a lot recently about how undirected wiring diagrams are the natural language for hypergraph categories, which are inherently undirected like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Rel</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span>. I get the feeling that lenses and \"open systems are machines\" are good for modeling things that have an obvious orientation with a few loops, like a controller with feedback, but resources sharing is good for something that is inherently unoriented like heat diffusing through a material in all directions simultaneously.</p>",
        "id": 203461939,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1594346041
    },
    {
        "content": "<p>Yea, I definitely like thinking of the type of composition of identifying places in a Petri net with SEIRD semantics 'resource sharing,' although infected people are a weird kind of resource. The lens or comb story fits in terms of system context, subsystem update, and then system context update, especially if souped up with Poly's ability to change interface type, although I have to dig into this more still. The directedness bit is always a bit slippery for me, but I think that is how the world works.</p>",
        "id": 203506975,
        "sender_full_name": "Blake Pollard",
        "timestamp": 1594388175
    },
    {
        "content": "<p>Those infinitesimal stochastic matrices we love from the Markov process can be understood as descritizations of the heat equation/laplacian. For closed Markov processes, the steady state distribution can be written down explicitly as a product over rates of a sum over all spanning trees. But the real role the spanning trees play is something that can be <em>directed</em>. If you pick any point on a tree you can direct all the other edges toward or away from that point, and that is how they appear in the steady state formula. So even for something as 'undirected' as heat flow, direction enters the game, but somewhat as an artifact of our attempt to compute something we thing is useful/meaningful.</p>",
        "id": 203507593,
        "sender_full_name": "Blake Pollard",
        "timestamp": 1594388525
    },
    {
        "content": "<p>But yea that is a bit different from the type of directionality you see in control systems, but then again that is also somewhat an artifact of our design. Is the plant subservant to the controller or vice-versa?</p>",
        "id": 203507700,
        "sender_full_name": "Blake Pollard",
        "timestamp": 1594388589
    },
    {
        "content": "<p>Cf. the classical duality of game semantics, where one player is the \"Player\" and the other is the \"Opponent\" but the distinction is arbitrary, and there is a duality functor that interchanges the roles</p>",
        "id": 203508793,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1594389165
    },
    {
        "content": "<p>Yea, right and do you think of that as an example of agent/environment duality and is the latter something that has been defined at some level of generality in the lens world?</p>",
        "id": 203509711,
        "sender_full_name": "Blake Pollard",
        "timestamp": 1594389655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275927\">James Fairbanks</span> <a href=\"#narrow/stream/243068-ACT-2020/topic/Systems.20and.20Cybernetics/near/203461939\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275953\">Blake Pollard</span> <a href=\"#narrow/stream/243068-ACT-2020/topic/July.209.3A.20ACT.20Business.20Meeting/near/203434428\">said</a>:</p>\n<blockquote>\n<p>Yea, systems or systems engineering definitely has emerged as a (still fairly broad) sub-community of ACT and cybernetics is a cool even broader umbrella.</p>\n</blockquote>\n<p>From what I have seen of the tools people are using, systems engineering approaches seem to be more about resource sharing and cybernetics is more about \"everything is a lens if you squint.\" I think that <span class=\"user-mention silent\" data-user-id=\"276589\">Sophie Libkind</span>'s talk on Resource Sharing Machines proposed a path forward for unifying these two approaches. <span class=\"user-mention silent\" data-user-id=\"275965\">Evan Patterson</span> and <span class=\"user-mention silent\" data-user-id=\"276049\">David Spivak</span> have been talking a lot recently about how undirected wiring diagrams are the natural language for hypergraph categories, which are inherently undirected like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Rel</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span>. I get the feeling that lenses and \"open systems are machines\" are good for modeling things that have an obvious orientation with a few loops, like a controller with feedback, but resources sharing is good for something that is inherently unoriented like heat diffusing through a material in all directions simultaneously.</p>\n</blockquote>\n<p>I think the indexed double categorical framework can shed a bit of light on this distinction between the \"directed\" composition of lenses and the \"undirected\" composition of spans. The base of the indexed double category is your double category of \"interfaces\" -- these could be lens-y or span-y, depending on choice. Representable indexed double functors take lens-y systems into span-y \"resource sharing\" systems in a variety of ways depending on the representing system. But there are also indexed double functors which take \"undirected\" span-y systems, like Baez-Pollard-etc. open Markov processes, and turn them into lens-y systems. So these two approaches are not so obviously opposed.</p>\n<p>Sophie and I have been talking about how we can bring our two frameworks, which are very close in spirit, together. Sophie's interfaces (to use my terminology) are both lens-y and span-y at the same time, and they relate appropriately by adding. </p>\n<p>The lens composition is directed not by the distinction between input and output conceived of as resource flows, but by the disctinction between parameter and variable. The directedness (with its feedback) is given by understanding how parameters may depend on variables.  So the orientation in the lens framework comes from the dependency relationship, which is naturally directed, but not related at all to \"flow\" in the system. </p>\n<p>The span composition is based on the idea of variable sharing. It is undirected in that it does not make a distinction between parameter and variable; even the parameters are treated as variables. Again, this doesn't really have to do with \"flow\" through the system, but is better when one does not want to take the normative step of separating certain variables of the system as \"control variables\" or parameters.</p>",
        "id": 203517990,
        "sender_full_name": "David Jaz",
        "timestamp": 1594393602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275953\">Blake Pollard</span> <a href=\"#narrow/stream/243068-ACT-2020/topic/Systems.20and.20Cybernetics/near/203509711\">said</a>:</p>\n<blockquote>\n<p>Yea, right and do you think of that as an example of agent/environment duality and is the latter something that has been defined at some level of generality in the lens world?</p>\n</blockquote>\n<p>On of my favorite examples of a simple lens-based composition of systems is this two box diagram:</p>\n<p><a href=\"/user_uploads/21317/NEXjKW0dt4DWghtohP-VXDtM/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/NEXjKW0dt4DWghtohP-VXDtM/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/NEXjKW0dt4DWghtohP-VXDtM/image.png\"></a></div><p>If we label one box \"Agent\" and one box \"Environment\", this exhibits the co-dependency relationship: the agent is affected by the environment, and acts in it; this act changes the environment, which then reacts to the agent. But this diagram is symmetric, so we could just slide the boxes around! </p>\n<p>I'm not sure this is the agent-environment duality you're looking for, but its like the player-opponent duality in the sense that it is based on which way one focuses on the situation.</p>",
        "id": 203519386,
        "sender_full_name": "David Jaz",
        "timestamp": 1594394246
    },
    {
        "content": "<p>I’m glad this has started a good discussion, we are all circling around these ideas, that computation is traditionally directed from inputs to outputs but systems are just coupled. We introduce direction in order to compute, but then we have to take it out by introducing feedback.</p>",
        "id": 203519622,
        "sender_full_name": "James Fairbanks",
        "timestamp": 1594394350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277446\">David Jaz</span> <a href=\"#narrow/stream/243068-ACT-2020/topic/Systems.20and.20Cybernetics/near/203519386\">said</a>:</p>\n<blockquote>\n<p>On of my favorite examples of a simple lens-based composition of systems is this two box diagram...</p>\n</blockquote>\n<p>This is also one of my favourite examples, and is how I think of this 'duality' (and the player/opponent one), too.</p>",
        "id": 203519944,
        "sender_full_name": "Toby Smithe",
        "timestamp": 1594394490
    },
    {
        "content": "<p>Drawing it like <a href=\"/user_uploads/21317/8hM_AUnaJ2bmoLrrGAKtaFCu/image-e3d037f7-0355-424a-be02-55e97324b7a5.jpg\">this</a> really shows off the symmetry!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/8hM_AUnaJ2bmoLrrGAKtaFCu/image-e3d037f7-0355-424a-be02-55e97324b7a5.jpg\" title=\"this\"><img src=\"/user_uploads/21317/8hM_AUnaJ2bmoLrrGAKtaFCu/image-e3d037f7-0355-424a-be02-55e97324b7a5.jpg\"></a></div>",
        "id": 203520672,
        "sender_full_name": "Sophie Libkind",
        "timestamp": 1594394799
    },
    {
        "content": "<p>Also also cf. the slide in my talk that says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> is traced monoidal then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"script\">C</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal C} (x, y) = \\mathcal C (y, x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> satisfies the conditions to be a context functor</p>",
        "id": 203520885,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1594394896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276589\">Sophie Libkind</span> <a href=\"#narrow/stream/243068-ACT-2020/topic/Systems.20and.20Cybernetics/near/203520672\">said</a>:</p>\n<blockquote>\n<p>Drawing it like <a href=\"/user_uploads/21317/8hM_AUnaJ2bmoLrrGAKtaFCu/image-e3d037f7-0355-424a-be02-55e97324b7a5.jpg\">this</a> really shows off the symmetry!</p>\n</blockquote>\n<p>(Sophie, what's your workflow like for posting drawings on Zulip? Do you do it straight from your phone?)</p>",
        "id": 203524137,
        "sender_full_name": "David Jaz",
        "timestamp": 1594396470
    }
]