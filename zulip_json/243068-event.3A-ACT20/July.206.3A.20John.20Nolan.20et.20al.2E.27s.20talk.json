[
    {
        "content": "<p>Hello all! This is the thread of discussion for the talk of John Nolan and Spencer Breiner, \"Symmetric Monoidal Categories with Attributes\".<br>\nDate and time: Monday July 6, 21:10 UTC.<br>\nZoom meeting: <a href=\"https://mit.zoom.us/j/7055345747\">https://mit.zoom.us/j/7055345747</a><br>\nYouTube live stream: <a href=\"https://www.youtube.com/watch?v=nEmPJVjLrOI&amp;list=PLCOXjXDLt3pZDHGYOIqtg1m1lLOURjl1Q\">https://www.youtube.com/watch?v=nEmPJVjLrOI&amp;list=PLCOXjXDLt3pZDHGYOIqtg1m1lLOURjl1Q</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"nEmPJVjLrOI\" href=\"https://www.youtube.com/watch?v=nEmPJVjLrOI&amp;list=PLCOXjXDLt3pZDHGYOIqtg1m1lLOURjl1Q\"><img src=\"https://i.ytimg.com/vi/nEmPJVjLrOI/default.jpg\"></a></div>",
        "id": 202644689,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1593657029
    },
    {
        "content": "<p>The talk slides are attached: <a href=\"/user_uploads/21317/HzKYtNmA4Biwa4OniffgElU6/ACT2020_Slides.pdf\">ACT2020_Slides.pdf</a></p>",
        "id": 203032019,
        "sender_full_name": "John Nolan",
        "timestamp": 1594064575
    },
    {
        "content": "<p>The talk starts in 5 minutes!</p>",
        "id": 203040543,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1594069504
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"318931\">@John Nolan</span> I am wondering if you could do more traditional \"robot planning\" with this framework like obstacle avoidance.</p>",
        "id": 203043614,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1594071375
    },
    {
        "content": "<p>This was a very interesting talk btw.</p>",
        "id": 203043626,
        "sender_full_name": "Georgios Bakirtzis",
        "timestamp": 1594071386
    },
    {
        "content": "<p>Thanks for a great talk. I was curious about whether you've implemented this machinery. For example, at the end, you mentioned translation to and from existing standards like PDDL. Have you tried that?</p>",
        "id": 203043952,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1594071580
    },
    {
        "content": "<p>Hi all!</p>\n<p><span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>: We've been working with Angeline Aguinaldo, a CS grad student at UMD. She has implemented some machinery for turning PDDL solutions into string diagrams using Catlab &amp; Julia. </p>\n<p><span class=\"user-mention\" data-user-id=\"275902\">@Giorgos Bakirtzis</span>: Great question. For the most part we plan to piggyback on existing approaches to path planning, but there are still some interesting connections. One issue that I have thought about a little bit is using the low-level geometric semantics to inform the constraints in the high-level Boolean semantics.</p>\n<p>More specifically, the planning language (PDDL) allows constraints on the on the actions; e.g., the goal location might be behind a door that must be open to apply a particular MoveTo operation. Right now, we put those in by hand, but I would like to do something like this:</p>\n<ul>\n<li>Try high-level planning without constraints</li>\n<li>Generate the associated geometric path</li>\n<li>Look for intersections/obstructions along the path</li>\n<li>If so, cycle through geometric semantics for other boolean conditions to remove obstacle</li>\n<li>Add disjunction of solutions as a precondition to the effected action</li>\n</ul>\n<p>In that way, I think we could make progress towards helping the robot identity relevant preconditions in the environment.</p>",
        "id": 203046529,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1594073263
    },
    {
        "content": "<p>Hi Spencer, excellent to hear that. If you need anything on the Catlab/Julia side, definitely let me know.</p>",
        "id": 203046791,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1594073442
    },
    {
        "content": "<p>I am confused about the role of the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{A}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span></span> in the definition.  It seems to be saying that every data service comes with exactly one object on which it (co)acts, which doesn't seem to be what you would want.  Can you explain why the definition is written this way?</p>",
        "id": 203046844,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1594073487
    },
    {
        "content": "<p>Here's the video:<br>\n<a href=\"https://www.youtube.com/watch?v=5PI207RFSHU&amp;list=PLCOXjXDLt3pYot9VNdLlZqGajHyZUywdI\">https://www.youtube.com/watch?v=5PI207RFSHU&amp;list=PLCOXjXDLt3pYot9VNdLlZqGajHyZUywdI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"5PI207RFSHU\" href=\"https://www.youtube.com/watch?v=5PI207RFSHU&amp;list=PLCOXjXDLt3pYot9VNdLlZqGajHyZUywdI\"><img src=\"https://i.ytimg.com/vi/5PI207RFSHU/default.jpg\"></a></div>",
        "id": 203087459,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1594118338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> The objects of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{A}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span></span> are meant to represent specific actions of data services on objects (with the morphisms being \"updates\" of these). Each object / attribute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{A}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span></span> has an underlying object / entity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span> and an underlying data service <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">V(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span>, though these are not at all uniquely determined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. </p>\n<p>In fact a single pair <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo separator=\"true\">,</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">E, V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span> could appear as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">V(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span> for several different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. Consider for example an entity \"Book\" with a value \"String\" - we could have attributes / objects of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> associating String to Book in various different ways, e.g. sending a book to its author, its title, its dedication, etc.</p>\n<p>Hopefully this clarifies things a bit.</p>",
        "id": 203100205,
        "sender_full_name": "John Nolan",
        "timestamp": 1594127841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318931\">@John Nolan</span> Thanks.  So would it be equivalent to express the definition as a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{A}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span></span> to the category whose objects are data-service-coactions in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span></span>?</p>",
        "id": 203119357,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1594136312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> I think so - at least if you define the morphisms in your codomain properly. <br>\nI didn't really touch on this in the talk, but the \"morphisms of data services\" we use are not the typical \"homomorphisms\" you'd be tempted to define but rather are arbitrary morphisms between the underlying objects. <br>\nIn math: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">D</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">a</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>D</mi><mo separator=\"true\">,</mo><msup><mi>D</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo separator=\"true\">,</mo><msup><mi>D</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Data}(\\mathcal{C})(D, D') = \\mathcal{C}(D, D')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">D</span><span class=\"mord mathsf\">a</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\">a</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br>\nThis is because physical processes typically affect attributes in a way that fails to respect filtering / copying / deleting.</p>",
        "id": 203138803,
        "sender_full_name": "John Nolan",
        "timestamp": 1594145400
    }
]