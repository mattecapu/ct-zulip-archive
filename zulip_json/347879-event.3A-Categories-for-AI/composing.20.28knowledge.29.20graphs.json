[
    {
        "content": "<p>When thinking about compositionality of graphs (e.g. recent Stanford Learning Workshop <a href=\"https://www.youtube.com/watch?v=GYW286H3SKw&amp;t=24580s\">https://www.youtube.com/watch?v=GYW286H3SKw&amp;t=24580s</a>), especially the compositionality of two or more individual knowledge graphs, is the Topos Category as suggested in this 2018 paper <a href=\"https://ieeexplore.ieee.org/document/8609634\">https://ieeexplore.ieee.org/document/8609634</a> still the way?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"GYW286H3SKw\" href=\"https://www.youtube.com/watch?v=GYW286H3SKw&amp;t=24580s\"><img src=\"https://uploads.zulipusercontent.net/c062a0693aeb997b8000097bb3d675326953a34c/68747470733a2f2f692e7974696d672e636f6d2f76692f4759573238364833534b772f64656661756c742e6a7067\"></a></div>",
        "id": 303280700,
        "sender_full_name": "Barton Rhodes",
        "timestamp": 1665415691
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/7Z2oYpuTzCOfJlu-pye10bt4/image.png\">image.png</a>  for context about knowledge graphs, would appreciate any pointer to the right way of thinking about composing these</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/7Z2oYpuTzCOfJlu-pye10bt4/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/7Z2oYpuTzCOfJlu-pye10bt4/image.png\"></a></div>",
        "id": 303280790,
        "sender_full_name": "Barton Rhodes",
        "timestamp": 1665415731
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"553302\">@Barton Rhodes</span>, pardon the pedantry, I moved this convo to a different topic so we can keep the other one for questions about Bruno's lecture.</p>",
        "id": 303284761,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1665417081
    },
    {
        "content": "<p>wow, topics are a game-changer</p>",
        "id": 303286265,
        "sender_full_name": "Barton Rhodes",
        "timestamp": 1665417655
    },
    {
        "content": "<p>Here for the pedantry! :)</p>",
        "id": 303286566,
        "sender_full_name": "Barton Rhodes",
        "timestamp": 1665417734
    },
    {
        "content": "<p>I'll have to take a look at the resources you linked before giving a more informed answer. But I know David Spivak studied knowledge graphs in the form of <a href=\"https://math.mit.edu/~dspivak/informatics/olog.pdf\">Ologs</a></p>",
        "id": 303288347,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1665418340
    },
    {
        "content": "<p>Re your question, I'm not very familiar with literature of categorical knowledge but the paper you cite seems to have rediscovered Spivak's work on Ologs and in general of 'categorical database theory'. The idea is the same: the ER schema of your databse/knowledge graph becomes a category, whose objects are entities and morphisms are freely generated by the relationships (so you have the relationships you started from, identities, and all possible composites thereof). Call this category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">K</mi></mrow><annotation encoding=\"application/x-tex\">\\cal K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span></span></span></span></span>. Then you look at functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>:</mo><mrow><mi mathvariant=\"script\">K</mi><mo>→</mo><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow></mrow><annotation encoding=\"application/x-tex\">P:\\cal K \\to \\bf Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Set</span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\bf Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Set</span></span></span></span></span> is the category of sets and functions. These are called 'copresheaves' in pure category theory, but nevermind the name. The point is giving such a functor amounts to describing a databse instance for the schema you started with. Given an entity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>, you get a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span> which you think of as the rows of the table corresponding to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>. If you have a relationship <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi>e</mi><mo>→</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\phi : e \\to e&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, then you get a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>P</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(\\phi):P(e) \\to P(e&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, sending a given row in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span> to the corresponding row in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span>. For instance, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> might be the entity 'employees' and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> the entity 'managers'. The N:1 relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi>e</mi><mo>→</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\phi : e \\to e&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> might then be 'isManagedBy'. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(\\phi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mclose\">)</span></span></span></span> gets a row in the employees table <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span> and send it to the row corresponding to its manager, living in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(e&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (for instance by looking up a foreign key).</p>\n<p>This is the basics. As it happens in ACT, once you manage to have a fairly good description of something in categorical language, you can start to it with all kinds of constructions and see what happens (or viceversa: you start to see which things you need to model correspond to abstraclty). You can peek at the rest in Chapter 3 of <a href=\"https://math.mit.edu/~dspivak/teaching/sp18/7Sketches.pdf\">*Seven sketches*</a>!</p>",
        "id": 303288532,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1665418424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276875\">Bruno Gavranovic</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/composing.20.28knowledge.29.20graphs/near/303288347\">said</a>:</p>\n<blockquote>\n<p>I'll have to take a look at the resources you linked before giving a more informed answer. But I know David Spivak studied knowledge graphs in the form of <a href=\"https://math.mit.edu/~dspivak/informatics/olog.pdf\">Ologs</a></p>\n</blockquote>\n<p>:P you've beaten me to it!</p>",
        "id": 303288669,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1665418478
    },
    {
        "content": "<p>I think I'd look at it differently.  It sounds like we have a much simpler schema: we have an Entity table with no columns, a Relation table with no columns, and an Edge table with two Entity columns and one Relation column.  So a knowledge graph as defined above is a copresheaf on this quiver: <a href=\"/user_uploads/21317/QpXQNeuuiigjjw6_8zEk3Gaa/Screen-Shot-2022-10-10-at-17.39.16.png\">Screen-Shot-2022-10-10-at-17.39.16.png</a>.  Then if we want a monoidal structure on copresheaves we can specify one on the quiver and use something like Day convolution. (I think there are further technicalities, as you probably want to specify a composition law on R; I would use enriched categories for this)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/QpXQNeuuiigjjw6_8zEk3Gaa/Screen-Shot-2022-10-10-at-17.39.16.png\" title=\"Screen-Shot-2022-10-10-at-17.39.16.png\"><img src=\"/user_uploads/21317/QpXQNeuuiigjjw6_8zEk3Gaa/Screen-Shot-2022-10-10-at-17.39.16.png\"></a></div>",
        "id": 303295626,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1665421316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"553308\">@Andrew Dudzik</span> did you want to answer to <a class=\"stream-topic\" data-stream-id=\"229156\" href=\"/#narrow/stream/229156-practice.3A-applied-ct/topic/Instance.20functors.20for.20monoidal.20categories\">#practice: applied ct &gt; Instance functors for monoidal categories</a> ?</p>",
        "id": 303326493,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1665436550
    },
    {
        "content": "<p>Table with no columns ? Newbie here doesn’t know what to do with that.</p>",
        "id": 303586925,
        "sender_full_name": "lawrence rowland",
        "timestamp": 1665565645
    },
    {
        "content": "<p>You can model that with an empty schema - i.e. a category with no objects or morphisms. Then any functor out of it is vacuously defined.</p>",
        "id": 303638788,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1665584945
    },
    {
        "content": "<p>I think a table with no columns should have a schema with one object &amp; no nonidentity arrows. The table can still hold (indistinguishable) elements.</p>",
        "id": 303745925,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1665624663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/composing.20.28knowledge.29.20graphs/near/303326493\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"553308\">Andrew Dudzik</span> did you want to answer to <a class=\"stream-topic\" data-stream-id=\"229156\" href=\"/#narrow/stream/229156-practice.3A-applied-ct/topic/Instance.20functors.20for.20monoidal.20categories\">#practice: applied ct &gt; Instance functors for monoidal categories</a> ?</p>\n</blockquote>\n<p>Does seem related but I can't work out what's being asked in that thread.</p>",
        "id": 303771438,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1665646058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"552001\">lawrence rowland</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/composing.20.28knowledge.29.20graphs/near/303586925\">said</a>:</p>\n<blockquote>\n<p>Table with no columns ? Newbie here doesn’t know what to do with that.</p>\n</blockquote>\n<p>I meant no non-identity columns.  In this description of knowledge graphs, both nodes and relations are just sets with no properties, while edges have references to other things.</p>",
        "id": 303771922,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1665646274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278008\">Spencer Breiner</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/composing.20.28knowledge.29.20graphs/near/303745925\">said</a>:</p>\n<blockquote>\n<p>I think a table with no columns should have a schema with one object &amp; no nonidentity arrows. The table can still hold (indistinguishable) elements.</p>\n</blockquote>\n<p>Right - I suppose it's useful to make distinction between an empty table and a table with no columns (but existing data in the table) <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 303838447,
        "sender_full_name": "Bruno Gavranović",
        "timestamp": 1665669644
    }
]