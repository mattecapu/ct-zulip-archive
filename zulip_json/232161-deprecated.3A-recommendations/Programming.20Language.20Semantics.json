[
    {
        "content": "<p>I'm looking out for an intro to programming language semantics appropriate for a first/second year grad student, specifically something that covers algebraic or categorical semantics. I've heard that automata have a semantics-type role in programming language theory; is this true? If so, I'd like to know more!</p>",
        "id": 193710946,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1586694215
    },
    {
        "content": "<p>If you'd like a reading partner, I might join in. I am doing a research internship in semantics (probabilistic and non-deterministic systems with Matteo Mio) this summer, so I will have a lot of paper to read already, but I could spend some time discussing other readings with you :) How much semantics have you done already? I have course notes on parts of Principles of Model Checking by  Baier, C. and Katoen, J.-P which I found to be a good intro to semantics while mainly on the logical side (no category or algebra), it uses automata a bit.</p>",
        "id": 193712506,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1586696851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284005\">Ralph Sarkis</span> I am quite new to formal computer science, but I do have a background in model theory and topos theory (I'm not sure how much this helps, yet). I have also spent the last few months with automata, proof theory, and modal logic, so I feel pretty ready to give it a go. I will check out your reference (thank you!). I sincerely would love a reading partner.</p>",
        "id": 193714325,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1586700003
    },
    {
        "content": "<p>Programming languages is a very broad area, and likewise there are all sorts of different semanticses. What kind of programming languages/models are you interested in? In any case, I guess simply typed lambda calculus and its semantics in Cartesian closed categories (or just Set) is a good place to start. Not sure of any particular reference, though.</p>",
        "id": 193714983,
        "sender_full_name": "James Wood",
        "timestamp": 1586701116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281583\">@James Wood</span> I've actually spent quite a bit of time with Lambek and Scott's book, so I think the λ-calculus story (and the CHL-correspondance) isn't quite what I'm after. I had something more coalgebraic in mind, and more geared to \"abstract machines\", if that makes any sense. To be honest, I'm not sure exactly what I'm looking for (which is why I started this, I guess)! That being said, I imagine I'll have to learn about the μ-calculus at some point, so I also welcome suggestions in that direction.</p>",
        "id": 193757911,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1586771352
    },
    {
        "content": "<p>Another recommendation: While not strictly semantics, <a href=\"https://dl.acm.org/doi/10.1145/2490818\" title=\"https://dl.acm.org/doi/10.1145/2490818\">this paper</a> has been one of my favorites for a while. It uses the coalgberaic representation of automata to prove correctness of the Brzozowski's algorithm to minimize an automata. It is very basic, but they describe many different machines and the references probably have more stuff to look at in this direction.</p>\n<p>(You might have read it already as Alexandra Silva is a co-author; at least three other authors are in this community :)</p>",
        "id": 193763419,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1586777258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284005\">@Ralph Sarkis</span>  Oh, yeah! Embarrassingly, I haven't read this paper yet, though I should probably make that a priority sooner than later. This is certainly the direction I'm going for.</p>",
        "id": 193767053,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1586780864
    },
    {
        "content": "<p>The classic more rigorous texts for programming language semantics for early graduate students are Mitchell's \"Foundations for Programming Languages\" and Reynolds' \"Theories of Programming Languages\". There's also \"Advanced Topics in Types and Programming Languages.\" None of these hit the categorical stuff at the level you'd want, I think, but they do give an overview of the field. Rutten (one of the authors of the paper above) is one of the go-to references on coalgebraic stuff.</p>\n<p>For something that scratches your itch directly, you may want to look at Joyal, Nielson, Winskel's \"Bisimulation from Open Maps\" and then work backwards and forward from there: <a href=\"https://www.brics.dk/RS/94/7/BRICS-RS-94-7.pdf\" title=\"https://www.brics.dk/RS/94/7/BRICS-RS-94-7.pdf\">https://www.brics.dk/RS/94/7/BRICS-RS-94-7.pdf</a></p>",
        "id": 193782698,
        "sender_full_name": "Gershom",
        "timestamp": 1586791350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> Thank you for all of the references! It's nice to see Joyal's name again, haha. I will have to take a look at the open maps paper.</p>",
        "id": 193786100,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1586793256
    },
    {
        "content": "<blockquote>\n<p>Brzozowski's algorithm to minimize an automaton</p>\n</blockquote>\n<p>What does it mean to \"minimize\" an automaton.  I can guess... and I could look it up... but I'll ask anyway.</p>",
        "id": 193792859,
        "sender_full_name": "John Baez",
        "timestamp": 1586796867
    },
    {
        "content": "<p>Find an automaton that does the same work, but with the fewest possible states.</p>",
        "id": 193793166,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586797077
    },
    {
        "content": "<p>'Does the same work' is rather coalgebraic.</p>\n<p>Maybe that's still to vague, though. Decides the same language is the work. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193793253,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586797114
    },
    {
        "content": "<p>A bit handwavy here, but it seems pretty clear to me that Deterministic Finite Automata are in some sense a reflective subcategory of Nondeterministic Finite Automata, and there's a a lovely contraction operator called \"determinization\" that preserves \"meaning\".  What makes Brzozowski’s algorithm so beautiful is that there's an involution operator \"reverse\" on NFA that doesn't stay within the DFA subcategory, and the chain reverse -&gt; determinize -&gt; reverse -&gt; determinize somehow pulls you into an even tighter reflective subcategory, which is \"minimal DFA\". I've had the rutten, silva et. al paper on my \"to read\" list for a little time now, because I want to see if how they analyze it can be fitted into my handwavy intuition above. (Additionally it seems to me that \"determinize\" should really end up being some variant of the yoneda lemma, if one examines what the algorithm does, and I'd like to understand just that portion alone more categorically).</p>",
        "id": 193828637,
        "sender_full_name": "Gershom",
        "timestamp": 1586816283
    },
    {
        "content": "<p>All this sounds pretty interesting.  Trying to find the automaton with the fewest states that decides a given language sounds like a horrendously tricky problem that's not likely to have a good answer or support an interesting theory - sort of like finding the minimal presentation of a group.  But it sounds like there is something good to say about this!</p>",
        "id": 193829284,
        "sender_full_name": "John Baez",
        "timestamp": 1586816643
    },
    {
        "content": "<p>man, i dont know that much about automata :/</p>",
        "id": 193833927,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586819884
    },
    {
        "content": "<p>i should fix that someday...</p>",
        "id": 193833932,
        "sender_full_name": "sarahzrf",
        "timestamp": 1586819894
    },
    {
        "content": "<p>This is definitely true in general, except that for some reason, there are algorithms for this for regular languages! Given that, and how incredibly useful such an algorithm is, it's worth trying to see if there is some general pattern. For Finite Automata, minimizing involves computing the largest possible equivalence class of a set of states, which feels nicely algebraic in nature.</p>",
        "id": 194224913,
        "sender_full_name": "Cody Roux",
        "timestamp": 1586983520
    },
    {
        "content": "<p>I mean for finite automata, minimizing can be done by the Brzozowski algorithm I sketched above (the handwavey bit being I didn't specify the categories which make the above \"reflective\" characterization of it work, but the algorithm itself is a classic solid result), which is even more ridiculously algebraic, and which relates to the manes stuff about observability and reachability as duals as in the paper above-above.</p>",
        "id": 194237327,
        "sender_full_name": "Gershom",
        "timestamp": 1586990372
    },
    {
        "content": "<p>I actually just finished reading the <em>Duality in Brzozowski's Minimization Algorithm</em> paper, and it seems pretty general! It works for finite automata of many different flavours. I think the algorithm is a little different than <span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> stated it, though: For deterministic finite automata, accepting a specific language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span>, there's a dual adjunction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>A</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo>⊢</mo><mi>D</mi><msup><mi>A</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo stretchy=\"false\">(</mo><mi>r</mi><mi>e</mi><mi>v</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">DA(L) \\vdash DA^{op}(rev(L))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">L</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">L</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> which swaps reachability maps for observability maps, and injective maps for surjective maps (the functor at play is the contravariant powerset functor). So, the algorithm is</p>\n<ol>\n<li>push the automaton across the dual adjunction,</li>\n<li>take the reachable component,</li>\n<li>push the new, reachable automaton across the adjunction,</li>\n<li>take the reachable component.</li>\n</ol>\n<p>After step 1, we have a DFA on our hands that accepts the reversed language. Since the dual adjunction swaps reachability and observability, step 3 produces an observable automaton accepting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>v</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>e</mi><mi>v</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">rev(rev(L)) = L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">L</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span>, so taking the reachable component (step 4) produces a minimal automaton for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span>. For other flavours of automaton, step 1 needs to be replaced by a determinization process that reverses the language. Is this what you were talking about <span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> ?</p>",
        "id": 194288272,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1587035862
    },
    {
        "content": "<p>I was simply describing the classic algorithm, not the paper's treatment of it. The classic algorithm as far as I know is the four steps I describe.  I have no doubt the paper generalizes it in the way you describe.  As the paper states in the abstract, it gives not only a new proof of correctness, but a new presentation in terms of  reachability and observability.</p>",
        "id": 194326562,
        "sender_full_name": "Gershom",
        "timestamp": 1587052528
    },
    {
        "content": "<p>Here is another interesting categorical approach to minimization I just came across: <a href=\"https://arxiv.org/abs/1712.07121v3\" title=\"https://arxiv.org/abs/1712.07121v3\">https://arxiv.org/abs/1712.07121v3</a></p>",
        "id": 194853315,
        "sender_full_name": "Gershom",
        "timestamp": 1587499030
    },
    {
        "content": "<p>In fact, the factorization given in that  paper gives reflective subcategories of the form I was after!</p>",
        "id": 194868499,
        "sender_full_name": "Gershom",
        "timestamp": 1587507235
    },
    {
        "content": "<p>Oh, nice! Sorry I didn't see this earlier. I will have to check this out.</p>",
        "id": 195545695,
        "sender_full_name": "Todd Schmid (he/they)",
        "timestamp": 1588070707
    }
]