[
    {
        "content": "<p>I know a reasonable amount of linear algebra (for finite spaces at least, with not-necessarily-Hermitian matrices), and I'd like to see how that knowledge relates to category theoretical concepts in Vect or FinVect. This is partly as a nice way to get a feel more of a feel for category-theoretical reasoning in general, and partly because I'm working on something that seems like it ought to end up as a category quite similar to Vect.</p>\n<p>Does anyone know a kind of \"gentle introduction to Vect\" type of resource, showing how linear algebra concepts relate to category theoretic ones in that category? Or failing that, maybe an introductory text on category theory that assumes a linear algebra background and has lots of nice examples? Either way, huge bonus points if it uses string diagrams.</p>\n<p>I'm currently confused about quite basic questions like \"how do you think about scalars?\" and \"what should I really be imagining when I see wires bending around in Vect?\", but ultimately it would be nice also to understand how to get at concepts like trace, determinant, eigenvectors etc. from a category theoretic perspective as well.</p>",
        "id": 193886396,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1586865991
    },
    {
        "content": "<p>I think this is pretty good <a href=\"http://www.cs.ox.ac.uk/people/jamie.vicary/IntroductionToCategoricalQuantumMechanics.pdf\" title=\"http://www.cs.ox.ac.uk/people/jamie.vicary/IntroductionToCategoricalQuantumMechanics.pdf\">http://www.cs.ox.ac.uk/people/jamie.vicary/IntroductionToCategoricalQuantumMechanics.pdf</a></p>",
        "id": 193903320,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1586873660
    },
    {
        "content": "<p>It is pretty good, and I'm enjoying going through it, but there isn't very much about Vect in here, it's all Hilb. This is maybe not a massive issue - I guess the differences should mostly be clear - but in general I rarely work in Hilbert spaces and often work with non-symmetric matrices, so I'm still on the lookout for a good introduction to linear algebra in Vect specifically.</p>",
        "id": 194221852,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1586981908
    },
    {
        "content": "<p>I bet they're talking about FinHilb rather than Hilb - that is, the category of finite-dimensonal Hilbert spaces and linear maps.</p>",
        "id": 194222654,
        "sender_full_name": "John Baez",
        "timestamp": 1586982358
    },
    {
        "content": "<p>FinHilb is equivalent as a category to FinVect - that is, the category of finite-dimensional complex vector spaces and linear maps.</p>",
        "id": 194222748,
        "sender_full_name": "John Baez",
        "timestamp": 1586982389
    },
    {
        "content": "<p>The main thing FinHilb has that FinVect doesn't is the \"dagger structure\".   So if you avoid using that (and its ilk) you might as well be in FinVect.</p>",
        "id": 194222829,
        "sender_full_name": "John Baez",
        "timestamp": 1586982433
    },
    {
        "content": "<p>That's useful to know!</p>",
        "id": 194223076,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1586982566
    },
    {
        "content": "<p>Though when it comes to eigendecomposition it should be a bit different, shouldn't it? (This book doesn't seem to cover eigenvectors, but it's one thing I'd like to understand from this perspective.) (Anyway I'll press on and ask specific questions when the need arises.)</p>",
        "id": 194224234,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1586983172
    },
    {
        "content": "<p>Yes, it's all finite dimensional</p>",
        "id": 194224492,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586983313
    },
    {
        "content": "<p>Infinite dimensional hilbert spaces are a mess, mainly because it's not true anymore that you have a 1-1 correspondence between choices of bases and frobenius structures.</p>",
        "id": 194224576,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586983341
    },
    {
        "content": "<p>Concretely, in Hilb the co-unit of a frobenius structure may not exist, since it's defined by using a sum that may be divergent</p>",
        "id": 194224626,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586983370
    },
    {
        "content": "<p>We tried to circumvent this problem by considering Hilb* instead, that is, the category of non-standard Hilbert spaces. In this category there isn't a real difference between infinite and finite dimensional spaces: counits are divergent but \"divergent\" is just a non-standard natural number, which is nothing special in this framework. So you can pretty much do what you could do in finite dimensional Hilbert spaces.</p>",
        "id": 194224818,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586983468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276071\">Nathaniel Virgo</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194224234\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194224234\">said</a>:</p>\n<blockquote>\n<p>Though when it comes to eigendecomposition it should be a bit different, shouldn't it? (This book doesn't seem to cover eigenvectors, but it's one thing I'd like to understand from this perspective.) </p>\n</blockquote>\n<p>As far as eigenvectors go, a difference between FinHilb and FinVect is that only in FinHilb can we discuss the dagger <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo>†</mo></msup><mo>:</mo><mi>K</mi><mo>→</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">A^\\dagger : K \\to H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">†</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> of a linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>:</mo><mi>H</mi><mo>→</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">A: H \\to K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> so only in FinHilb can we can talk about \"self-adjoint\" and \"unitary\" operators.  You can then show any self-adjoint or unitary operator has an orthonormal basis of eigenvectors... where the eigenvalues are real or of length 1, respectively.  </p>\n<p>In categorical quantum mechanics we capture the concept of an orthonormal basis using the concept of <a href=\"https://arxiv.org/abs/0810.0812\" title=\"https://arxiv.org/abs/0810.0812\">commutative dagger-Frobenius algebra</a>, which is a concept that makes sense in any symmetric monoidal dagger-category.</p>\n<p>But note, all these difference between FinHilb and FinVect arise because the former has a dagger structure: without that, the concepts of \"self-adjoint\" and \"unitary\" make no sense.</p>",
        "id": 194228692,
        "sender_full_name": "John Baez",
        "timestamp": 1586985391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194222829\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194222829\">said</a>:</p>\n<blockquote>\n<p>The main thing FinHilb has that FinVect doesn't is the \"dagger structure\".   So if you avoid using that (and its ilk) you might as well be in FinVect.</p>\n</blockquote>\n<p>Perhaps this should be put more sharply? Since there is an equivalence between FinVect and FinHilb, the dagger structure on FinHilb could be transported across any such equivalence to a dagger structure on FinVect. </p>\n<p>Might one say that the real issue is the essential nonuniqueness of such equivalences, so that there's no preferred (or canonical) way of putting a dagger structure on FinVect? Indeed, unless I'm confused, we should be able to \"twist\" a self-equivalence (like the identity functor on FinVect) by an automorphism on the ground field, like conjugation.</p>",
        "id": 194230664,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1586986417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277611\">Todd Trimble</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194230664\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194230664\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194222829\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194222829\">said</a>:</p>\n<blockquote>\n<p>The main thing FinHilb has that FinVect doesn't is the \"dagger structure\".   So if you avoid using that (and its ilk) you might as well be in FinVect.</p>\n</blockquote>\n<p>Perhaps this should be put more sharply? Since there is an equivalence between FinVect and FinHilb, the dagger structure on FinHilb could be transported across any such equivalence to a dagger structure on FinVect. </p>\n<p>Might one say that the real issue is the essential nonuniqueness of such equivalences, so that there's no preferred (or canonical) way of putting a dagger structure on FinVect? Indeed, unless I'm confused, we should be able to \"twist\" a self-equivalence (like the identity functor on FinVect) by an automorphism on the ground field, like conjugation.</p>\n</blockquote>\n<p>This is true. Basically every time you have a semiring with an involution then the category S-Mat of free finite dimensional S-modules is dagger compact</p>",
        "id": 194231672,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586986971
    },
    {
        "content": "<p>So if you work in complex FDVect you can just use the involution of the complex numbers to get your dagger (basically you are really working in C-Mat). This is not really a problem from the CQM perspective.</p>",
        "id": 194231754,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586987037
    },
    {
        "content": "<p>Todd wrote:</p>\n<blockquote>\n<p>Since there is an equivalence between FinVect and FinHilb, the dagger structure on FinHilb could be transported across any such equivalence to a dagger structure on FinVect. </p>\n</blockquote>\n<p>Umm, I'm always nervous about statements like this...</p>",
        "id": 194236630,
        "sender_full_name": "John Baez",
        "timestamp": 1586989910
    },
    {
        "content": "<p>Just to point out a subtlety hiding in what Fabrizio said: if someone hands you FinVect (the category of finite-dimensional complex vector spaces and linear maps) and reminds you that C has an involution, that's <em>not</em> enough to canonically determine a dagger structure on FinVect.</p>",
        "id": 194236783,
        "sender_full_name": "John Baez",
        "timestamp": 1586990003
    },
    {
        "content": "<p>On the other hand if someone hands you FinVect and arbitrarily chooses a basis for every finite-dimensional complex vector space, that <em>is</em> enough to canonically determine a dagger structure on FinVect.</p>",
        "id": 194236975,
        "sender_full_name": "John Baez",
        "timestamp": 1586990129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194236975\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194236975\">said</a>:</p>\n<blockquote>\n<p>On the other hand if someone hands you FinVect and arbitrarily chooses a basis for every finite-dimensional complex vector space, that <em>is</em> enough to canonically determine a dagger structure on FinVect.</p>\n</blockquote>\n<p>Yes, this is why I wrote \"Basically you are working in C-Mat\". What you say it is true, you need the involution <em>and</em> a basis. But you can always pick one, and C-Mat and C-FDVect are equivalent. To my knowledge, this is not considered harmful nor a dangerous thing to do in standard CQM practice.</p>",
        "id": 194237349,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586990393
    },
    {
        "content": "<p>Basically the difference between Hilbert spaces and vector spaces doesn't seem to be a big problem in the finite dimensional cases. Mainly because their notion of basis coincides. But in the infinite dimensional case you can use the extra topological structure of Hilbert spaces to define a countable basis even in situations where the basis of the underlying vector space is uncountable (simply put you can trade a formal sum for a series). This is the point where things start breaking up and the reason why one has to be super-extra-careful in doing  CQM in Hilb</p>",
        "id": 194237675,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586990627
    },
    {
        "content": "<p>Right... that \"basically\" is the lurking danger I was talking about.   C-Mat and C-FinVect are equivalent, but not isomorphic, etc.</p>\n<p>All the people I have admired since childhood try to avoid basis-dependent constructions in quantum mechanics, and you certainly don't need a choice of basis to define the dagger of an operator, you just need an inner product, so I prefer to talk about the dagger structure in FinHilb without <em>first</em> choosing a basis for every finite-dimensional vector space.</p>",
        "id": 194237993,
        "sender_full_name": "John Baez",
        "timestamp": 1586990814
    },
    {
        "content": "<p>That makes sense. I guess our crowd was at ease with the C-Mat thing because many people in the group work on actively implementing this stuff. So in a way or another they'll need to pick a basis at some point :P</p>",
        "id": 194238334,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586991022
    },
    {
        "content": "<p>Yes, those annoyingly practical people who actually multiply matrices - I've heard of them. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194238409,
        "sender_full_name": "John Baez",
        "timestamp": 1586991101
    },
    {
        "content": "<p>Unfortunately it's more the annoying computers that require the people to do so... In any case I hate calculations too, and increadibly enough, even if I do math for a living I still have a _hard_ time in getting the right result while performing even simple arithmetic calculations T_T</p>",
        "id": 194238651,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1586991284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194236630\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194236630\">said</a>:</p>\n<blockquote>\n<p>Todd wrote:</p>\n<blockquote>\n<p>Since there is an equivalence between FinVect and FinHilb, the dagger structure on FinHilb could be transported across any such equivalence to a dagger structure on FinVect. </p>\n</blockquote>\n<p>Umm, I'm always nervous about statements like this...</p>\n</blockquote>\n<p>Oh, I see the problem: you want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>†</mo></mrow><annotation encoding=\"application/x-tex\">\\dagger</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">†</span></span></span></span> to be the identity on objects, etc. It's that \"evilness\" (I suppose that word is safe around here, isn't it?) that gets in the way of such a straightforward transport. </p>\n<p>I still wonder if the problem is that insurmountable... but I'd have to think about it.</p>",
        "id": 194240489,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1586992613
    },
    {
        "content": "<p>Mike Shulman has a comment on the nLab page about the evilness of dagger structures, which I still haven't taken the time to understand.</p>",
        "id": 194240770,
        "sender_full_name": "John Baez",
        "timestamp": 1586992867
    },
    {
        "content": "<blockquote>\n<p>Actually, I believe that a †-structure on a category can be transported along an equivalence of categories!  [etc.]</p>\n</blockquote>\n<p><a href=\"https://ncatlab.org/nlab/show/principle+of+equivalence#daggers\" title=\"https://ncatlab.org/nlab/show/principle+of+equivalence#daggers\">https://ncatlab.org/nlab/show/principle+of+equivalence#daggers</a></p>",
        "id": 194240917,
        "sender_full_name": "John Baez",
        "timestamp": 1586993027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194240770\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194240770\">said</a>:</p>\n<blockquote>\n<p>Mike Shulman has a comment on the nLab page about the evilness of dagger structures, which I still haven't taken the time to understand.</p>\n</blockquote>\n<p>I mean, the first stupid idea that comes to mind is simply to use a global axiom of choice (in whatever suitable set theory, maybe Morse-Kelley or something) to choose a basis for every object in FinVect, and do the obvious thing. I'm sure others have thought about this, but I'm not sure what could go wrong here. </p>\n<p>Edit: Just glanced at Mike's comment. Without having worked through details, I half-believe it (and if it works, it would be a more elegant way to go).</p>",
        "id": 194241255,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1586993383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277611\">Todd Trimble</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194241255\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194241255\">said</a>:</p>\n<blockquote>\n<p>I mean, the first stupid idea that comes to mind is simply to use a global axiom of choice (in whatever suitable set theory, maybe Morse-Kelley or something) to choose a basis for every object in FinVect, and do the obvious thing. I'm sure others have thought about this, but I'm not sure what could go wrong here. </p>\n</blockquote>\n<p>If you do that, you thus give every finite-dimensional vector space a Hilbert space structure, so you give FinVect a dagger structure.  But if this is what you're doing, you might as well just give every finite-dimensional vector space an inner product!</p>",
        "id": 194242328,
        "sender_full_name": "John Baez",
        "timestamp": 1586994401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194242328\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194242328\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277611\">Todd Trimble</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194241255\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194241255\">said</a>:</p>\n<blockquote>\n<p>I mean, the first stupid idea that comes to mind is simply to use a global axiom of choice (in whatever suitable set theory, maybe Morse-Kelley or something) to choose a basis for every object in FinVect, and do the obvious thing. I'm sure others have thought about this, but I'm not sure what could go wrong here. </p>\n</blockquote>\n<p>If you do that you give every finite-dimensional vector space a Hilbert space structure so you give FinVect a dagger structure.  But if this is what you're doing, you might as well just give every finite-dimensional vector space an inner product!</p>\n</blockquote>\n<p>Well, yeah! So? </p>\n<p>There seems to be a pretty good discussion over at <a href=\"https://mathoverflow.net/a/220111/2926\" title=\"https://mathoverflow.net/a/220111/2926\">MathOverflow</a>, where it seems to be universally accepted that you can put a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>†</mo></mrow><annotation encoding=\"application/x-tex\">\\dagger</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">†</span></span></span></span> structure on FinVect, but that there's still a live question about whether the evilness of the notion can be overcome. The answer by Peter LeFanu Lumsdaine (linked above) is too long to give here, but where a key phrase \"so strict dagger structure is non-evil as a structure on “cats with a distinguished all-objects subgroupoid” \" appears.</p>",
        "id": 194242900,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1586994872
    },
    {
        "content": "<blockquote>\n<p>where it seems to be universally accepted that you can put a † structure on FinVect</p>\n</blockquote>\n<p>It darn well <em>better</em> be universally accepted - you just explained how to do it by picking a basis for it, and I just explained that it's enough to pick an inner product.</p>",
        "id": 194243282,
        "sender_full_name": "John Baez",
        "timestamp": 1586995153
    },
    {
        "content": "<blockquote>\n<p>Well, yeah! So? </p>\n</blockquote>\n<p>That's a hard question to answer.  But if we're gonna make FinVect become a dagger-category like FinHilb, it seems the most \"honest\" way is to make every finite-dimensional vector space into a Hilbert space.</p>",
        "id": 194243524,
        "sender_full_name": "John Baez",
        "timestamp": 1586995285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194243282\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194243282\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>where it seems to be universally accepted that you can put a † structure on FinVect</p>\n</blockquote>\n<p>It darn well <em>better</em> be universally accepted - you just explained how to do it by picking a basis for it, and I just explained that it's enough to pick an inner product.</p>\n</blockquote>\n<p>Yes, that was my thought too where I said \"do the obvious thing\", which meant \"make that an orthonormal basis\".</p>\n<p>Of course, I see now that the same point had been made above, more than once. </p>\n<p>But while I'm yapping away, I'll riff on my automorphism comment above. If you start with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> as a one-object category enriched in Ab, then any self-equivalence on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> (which is the same as an automorphism on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>) automatically extends to a self-equivalence on its (enriched) Cauchy completion, which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>t</mi><mi mathvariant=\"double-struck\">C</mi></msub></mrow><annotation encoding=\"application/x-tex\">Mat_{\\mathbb{C}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">C</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Conversely, that's where every self-equivalence on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>t</mi><mi mathvariant=\"double-struck\">C</mi></msub></mrow><annotation encoding=\"application/x-tex\">Mat_{\\mathbb{C}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">C</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> must come from.</p>",
        "id": 194243593,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1586995342
    },
    {
        "content": "<p>Hi, sorry for another dumb question, but it seems worth having some intuition for this early on: are the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> versions of these things much different from the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> ones? The things I work on tend to involve real-valued asymmetric matrices, so I'm interested to know how much of the theory of those has been worked out.</p>\n<p>E.g. could one state and prove the Perron-Frobenius theorem using categorical / string diagram language, or the result that an eigenvalue of a real matrix is either real or part of a complex pair? And where could I go to read about that kind of thing?</p>\n<p>(Not that I need these things right now, I'm just curious how much of it has been done.)</p>",
        "id": 194407119,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1587110938
    },
    {
        "content": "<p>The main difference between RFDVect e CFDVect is that in the first case the dagger structure is trivial, since every real number is its own adjoint. All the string-diagrammatic reasoning you can do (spider fusion etc) still holds.</p>",
        "id": 194415780,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587116049
    },
    {
        "content": "<p>\"[...]or the result that an eigenvalue of a real matrix is either real or part of a complex pair?\" This seems difficult to me. The thing is that I wouldn't know how to get the complex numbers in a setting like this</p>",
        "id": 194415846,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1587116098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276071\">Nathaniel Virgo</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194407119\" title=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194407119\">said</a>:</p>\n<blockquote>\n<p>E.g. could one state and prove the Perron-Frobenius theorem using categorical / string diagram language, or the result that an eigenvalue of a real matrix is either real or part of a complex pair? And where could I go to read about that kind of thing?</p>\n</blockquote>\n<p>I've never seen anyone try to state or prove the Perron-Frobenius theorem using categories or string diagrams.  I think of this as a result that crucially uses the real numbers and the concept of positivity.  You could try to prove it for any \"real closed field\" or more generally any field with a concept of positive elements as Fong and I defined it... I'm more sanguine about the first than the second here... but anyway: you've taken two concepts (string diagrams and Perron-Frobenius) that I like but have never tried to blend, and you're trying to blend them!</p>",
        "id": 194522740,
        "sender_full_name": "John Baez",
        "timestamp": 1587179059
    },
    {
        "content": "<p>On dagger structures on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">F</mi><mi mathvariant=\"bold\">V</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">c</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{FVect}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">F</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">V</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">c</span><span class=\"mord mathbf\">t</span></span></span></span></span>: as noted above, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">F</mi><mi mathvariant=\"bold\">V</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">c</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{FVect}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">F</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">V</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">c</span><span class=\"mord mathbf\">t</span></span></span></span></span> can be equipped with a dagger structure (using global AC) - the problem is that this can't be done in a way that makes the forgetful functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">F</mi><mi mathvariant=\"bold\">H</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">l</mi><mi mathvariant=\"bold\">b</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"bold\">F</mi><mi mathvariant=\"bold\">V</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">c</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{FHilb}\\to \\mathbf{FVect}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">F</span><span class=\"mord mathbf\">H</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">l</span><span class=\"mord mathbf\">b</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">F</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">V</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">c</span><span class=\"mord mathbf\">t</span></span></span></span></span> into a dagger functor. The argument I learned from Selinger goes as follows: equip the same vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span> with two different inner products, and consider the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>↦</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v\\mapsto v</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span> between them in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">F</mi><mi mathvariant=\"bold\">H</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">l</mi><mi mathvariant=\"bold\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{FHilb}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">F</span><span class=\"mord mathbf\">H</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">l</span><span class=\"mord mathbf\">b</span></span></span></span></span>. This is by construction not unitary, but applying the forgetful functor to it results in the identity on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, which is unitary for every dagger structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">F</mi><mi mathvariant=\"bold\">V</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">c</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{FVect}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">F</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">V</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">c</span><span class=\"mord mathbf\">t</span></span></span></span></span>.</p>",
        "id": 194972202,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1587579996
    },
    {
        "content": "<p>That's a nice \"no-go theorem\".</p>",
        "id": 194972316,
        "sender_full_name": "John Baez",
        "timestamp": 1587580065
    },
    {
        "content": "<p>This doesn't mean that the task of promoting equivalences into dagger equivalences is hopeless, as there's positive results in that direction. In general, one can promote an equivalence between (the underlying category of) a dagger category and a category into a dagger equivalence assuming that the structure iso on the dagger side is unitary and the other one maps to a unitary iso in already existing dagger category (and this is clearly necessary). In case of an adjoint equivalence, it is enough to check that the structure iso on the dagger side is already unitary. So in a sense, the problem is with the forgetful functor: there's no way to choose an inverse for it such that the composite is unitarily isomorphic to id on FHilb. One could also replace the forgetful functor (also using AC, so not in a canonical/explicit manner) with a naturally isomorphic one and get a full dagger equivalence between FHilb and FVect, but there's something messy/non-explicit going on either way.</p>",
        "id": 194973287,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1587580503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194224626\">said</a>:</p>\n<blockquote>\n<p>Concretely, in Hilb the co-unit of a frobenius structure may not exist, since it's defined by using a sum that may be divergent</p>\n</blockquote>\n<p>I'm really curious about the problem(s) with lifting CQM to infinite dimensions. Is this the main problem? Perhaps another potential problem: loops in the string diagrams can be divergent. The co-multiplication (\"broadcasting\") map of a Frobenius algebra looks like it would be bounded, but what about the multiplication map and what about the unit? And what about cups and caps in general: is Hilb even closed? I'm pretty sure its not compact closed, but is there any chance it is *-autonomous?</p>",
        "id": 201638364,
        "sender_full_name": "Chris Barrett",
        "timestamp": 1592848122
    },
    {
        "content": "<p>I doubt Hilb is *-autonomous.   What would the dualizing object be, if not the unit for the tensor product?</p>",
        "id": 201639799,
        "sender_full_name": "John Baez",
        "timestamp": 1592848836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277010\">Chris Barrett</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/201638364\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/194224626\">said</a>:</p>\n<blockquote>\n<p>Concretely, in Hilb the co-unit of a frobenius structure may not exist, since it's defined by using a sum that may be divergent</p>\n</blockquote>\n<p>I'm really curious about the problem(s) with lifting CQM to infinite dimensions. Is this the main problem? Perhaps another potential problem: loops in the string diagrams can be divergent. The co-multiplication (\"broadcasting\") map of a Frobenius algebra looks like it would be bounded, but what about the multiplication map and what about the unit? And what about cups and caps in general: is Hilb even closed? I'm pretty sure its not compact closed, but is there any chance it is *-autonomous?</p>\n</blockquote>\n<p>Some people coming from the CQM crowd have made attempts to extend the \\dag-compact closed structure of FHilb to a larger category; however Hilb itself is not compact closed.<br>\nBecause of this, there is kind of a cottage industry of finding toy models.</p>\n<p>There are *-autonomous categories, that \"feel kind of like Hilb\" .  For example in finiteness modules one has \"infinite dimensional matrices\" with some specific finiteness condition. And in another direction one also has Chu construction (where the chosen object is the tensor unit) which gives you a way to talk about adjoints (kind of).</p>\n<p>On the other hand people have also tried to use nonstandard analysis instead of *-autonomous categories to tackle this problem, but none of these approaches are as elegant as plain old FHilb.</p>",
        "id": 201642896,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1592850373
    },
    {
        "content": "<p>I do agree. It's not really that all these things do not work, it's more that they feel somehow \"ugly\" for some reason</p>",
        "id": 201645842,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1592851883
    },
    {
        "content": "<p>We started the non-standard analysis stuff because we really didn't like the *-autonomous categories solution. We ended up having something that still didn't look slick and polished like we wanted to</p>",
        "id": 201645959,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1592851942
    },
    {
        "content": "<p>Stefano Gogioso told me that he's still working on it tho, so never say never <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 201645986,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1592851958
    },
    {
        "content": "<p>Thanks for the responses. Is Hilb closed, and are the multiplication and unit morphisms bounded? Sorry for the basic questions, but my CT knowledge is far better than my functional analysis. </p>\n<p>One of the reasons I'm asking is because I'm interested in lifting CQM to a logical setting, i.e. generalizing to *-autonomous categories. It seems in this setting one avoids some of the problems I listed in my original post. For example, cut-elimination guarantees no cycles and so no need to worry about divergence from this cause. I suspected this might be useful for the problem of infinite dimensional CQM, however if Hilb is not *-autonomous, then maybe not. If Hilb is closed, there might still be the possibility of an intuitionistic approach to the \"problem\". </p>\n<p><span class=\"user-mention\" data-user-id=\"276438\">@Fabrizio Genovese</span>, out of interest, why didn't you like this approach?</p>",
        "id": 201646567,
        "sender_full_name": "Chris Barrett",
        "timestamp": 1592852238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277010\">Chris Barrett</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/201646567\">said</a>:</p>\n<blockquote>\n<p>Thanks for the responses. Is Hilb closed, and are the multiplication and unit morphisms bounded? Sorry for the basic questions, but my CT knowledge is far better than my functional analysis. </p>\n<p>One of the reasons I'm asking is because I'm interested in lifting CQM to a logical setting, i.e. generalizing to *-autonomous categories. It seems in this setting one avoids some of the problems I listed in my original post. For example, cut-elimination guarantees no cycles and so no need to worry about divergence from this cause. I suspected this might be useful for the problem of infinite dimensional CQM, however if Hilb is not *-autonomous, then maybe not. If Hilb is closed, there might still be the possibility of an intuitionistic approach to the \"problem\". </p>\n<p><span class=\"user-mention silent\" data-user-id=\"276438\">Fabrizio Genovese</span>, out of interest, why didn't you like this approach?</p>\n</blockquote>\n<p>The biggest problem with doing CQM stuff in *-autonomous categories is that asking that asking for a dagger structure forces the tensor to be par, so there is not always a way to ask if a morphism is an isometry/unitary.</p>",
        "id": 201647206,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1592852537
    },
    {
        "content": "<p>In <a href=\"https://arxiv.org/abs/1809.00275\">https://arxiv.org/abs/1809.00275</a> they suggest that the correct way to generalize the dagger is to drop the requirement of identity-on-objects and take it to be more like the (-)* duality of *-autonomous categories, i.e. to switch tesnor and parr. No collapse necessary in this case</p>",
        "id": 201647363,
        "sender_full_name": "Chris Barrett",
        "timestamp": 1592852624
    },
    {
        "content": "<p>If I'm not wrong unit morphisms weren't a problem, counit could be divergent instead. In any case there isn't a real reason why I didn't like it. I guess I just wanted to stay as far away from functional analysis as I could, and nonstandard analysis allowed us to treat everything like it was finite dimensional</p>",
        "id": 201647468,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1592852670
    },
    {
        "content": "<p>Oh hang on, it turns out you're an author on that paper... which presumably means I must have read it wrong!</p>",
        "id": 201647469,
        "sender_full_name": "Chris Barrett",
        "timestamp": 1592852670
    },
    {
        "content": "<p>It just seemed the right way to go if you prefer algebra over everything else <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 201647516,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1592852707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277010\">Chris Barrett</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/201647469\">said</a>:</p>\n<blockquote>\n<p>Oh hang on, it turns out you're an author on that paper... which presumably means I must have read it wrong!</p>\n</blockquote>\n<p>The thing is that if you just have an involution F which is not the identity on all of the objects then you cant always compose F(f);f and f;F(f).  You can't have both 1) tensor not be par and 2) that the involution is the identity on objects at the same time.</p>",
        "id": 201648971,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1592853554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277010\">Chris Barrett</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/201646567\">said</a>:</p>\n<blockquote>\n<p>Thanks for the responses. Is Hilb closed, and are the multiplication and unit morphisms bounded? </p>\n</blockquote>\n<p>When we talk about Hilb we usually <em>insist</em> that the morphisms are bounded linear operators, because it's tricky to compose unbounded ones: in practice those are always partially defined, at best densely defined.</p>\n<p>So for me Hilb means complex Hilbert spaces and bounded linear operators.</p>\n<p>I don't know if Hilb is monoidal closed with respect to the usual tensor product of Hilbert spaces.   I strongly doubt it.  I've never heard anyone say it is, and people would love for something like that to be true.</p>\n<p>Given Hilbert spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">H'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> how do we get a Hilbert space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>H</mi><mo separator=\"true\">,</mo><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[H,H']</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, a candidate for the internal hom?  The space of <em>all</em> bounded linear maps from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">H'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is not a Hilbert space (except in the finite-dimensional case).  So, we usually look at all bounded linear maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>:</mo><mi>H</mi><mo>→</mo><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">T: H \\to H'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> such that </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><msup><mi>T</mi><mo>†</mo></msup><mi>T</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathrm{tr}(T^\\dagger T) \\lt \\infty </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991079999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"mord mathrm\">r</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">†</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span></p>\n<p>These are called <strong>Hilbert-Schmidt</strong> maps and they form a Hilbert space with </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">⟩</mo><mo>=</mo><mrow><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mo>†</mo></msup><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\langle S, T \\rangle = \\mathrm{tr}(S^\\dagger T) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991079999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"mord mathrm\">r</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">†</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>But the identity on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> is not a Hilbert-Schmidt map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">H'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, so if we try to make Hilbert monoidal closed with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>H</mi><mo separator=\"true\">,</mo><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[H,H']</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> being the space of Hilbert-Schmidt maps from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">H'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, I don't think that will work.</p>",
        "id": 201649303,
        "sender_full_name": "John Baez",
        "timestamp": 1592853742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277391\">@Cole Comfort</span> Right, I see. So you can drop the id-on-objects requirement, but that means that the usual way you'd define an isometry as dag(f);f = id doesn't work (is not well-typed), thus we can't (at least, in the naive way) talk about things we need to talk about to do QM.</p>",
        "id": 201649539,
        "sender_full_name": "Chris Barrett",
        "timestamp": 1592853880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> Thanks, that's really helpful!</p>",
        "id": 201649961,
        "sender_full_name": "Chris Barrett",
        "timestamp": 1592854156
    },
    {
        "content": "<p>Hilbert spaces and bounded linear maps is enriched over Banach spaces and bounded linear maps (and if you take this pov, the underlying category of Hilb is then given by Hilbert spaces and non-expansive linear maps). The category of Banach spaces and bounded linear maps is monoidal closed (+ complete and cocomplete), but alas it doesn't quite solve the problem for Hilb.</p>",
        "id": 201759262,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1592934798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277285\">Martti Karvonen</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/201759262\">said</a>:</p>\n<blockquote>\n<p>Hilbert spaces and bounded linear maps is enriched over Banach spaces and bounded linear maps (and if you take this pov, the underlying category of Hilb is then given by Hilbert spaces and non-expansive linear maps). The category of Banach spaces and bounded linear maps is monoidal closed (+ complete and cocomplete), but alas it doesn't quite solve the problem for Hilb.</p>\n</blockquote>\n<p>So in particular Chu(Ban,I) is a *-autonomous category.</p>",
        "id": 201812581,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1592975964
    },
    {
        "content": "<p>I'm reviving this thread to ask a question. I was thinking about the fact that the free vector space on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> is not dualizable (a.k.a. compact), and I realised I didn't know how to prove this without choice. Is it consistent with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">Z</mi><mi mathvariant=\"sans-serif\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\sf{ZF }</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">Z</span><span class=\"mord mathsf\">F</span></span></span></span></span></span> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">V</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">c</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Vect}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">V</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">c</span><span class=\"mord mathbf\">t</span></span></span></span></span> is compact closed?</p>",
        "id": 205609784,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1596211939
    },
    {
        "content": "<p>I'm worried that this might be super obvious.</p>",
        "id": 205609807,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1596211965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276945\">Oscar Cunningham</span> <a href=\"#narrow/stream/232161-learning.3A-recommendations/topic/Linear.20algebra.20in.20Vect/near/205609784\">said</a>:</p>\n<blockquote>\n<p>I'm reviving this thread to ask a question. I was thinking about the fact that the free vector space on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> is not dualizable (a.k.a. compact), and I realised I didn't know how to prove this without choice. Is it consistent with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">Z</mi><mi mathvariant=\"sans-serif\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\sf{ZF }</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">Z</span><span class=\"mord mathsf\">F</span></span></span></span></span></span> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">V</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">c</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Vect}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">V</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">c</span><span class=\"mord mathbf\">t</span></span></span></span></span> is compact closed?</p>\n</blockquote>\n<p>Vect isn't compact closed, it is just monoidal closed</p>",
        "id": 205610502,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1596212323
    },
    {
        "content": "<p>Yeah, but why?</p>",
        "id": 205613966,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1596214281
    },
    {
        "content": "<p>Oh, I see the question now</p>",
        "id": 205614101,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1596214357
    },
    {
        "content": "<p>Where are you currently using choice? It seems to me that, writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> for the free vector space functor,  an iso (which doesn't require choice) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi mathvariant=\"double-struck\">N</mi><mo>≅</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">1+\\mathbb{N}\\cong\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> gives an iso <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(1)\\oplus F(\\mathbb{N})\\cong F(\\mathbb{N})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">)</span></span></span></span>, and I don't see where Lemma 3.64 in the  Heunen-Vicary textbook uses choice either. This lemma states some properties of dimension as defined in terms of traces, and in particular implies that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(\\mathbb{N})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">)</span></span></span></span> was dualizable, its dimension would be a scalar <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> satisfying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x=x+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, which is impossible. This doesn't rule out  the possibility that some messy vector space without a basis might have a dual, but seems to say that all of Vect can't be compact closed even if you omit choice.</p>",
        "id": 205615129,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1596214904
    },
    {
        "content": "<p>Ah yes, that works. Thank you!</p>",
        "id": 205616609,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1596215758
    },
    {
        "content": "<p>I had been trying to show that it wasn't isomorphic to its double dual. Considering the (internal) dimension is much easier.</p>",
        "id": 205616713,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1596215796
    },
    {
        "content": "<p>Yeah afaik dual spaces (and double dual spaces) can behave very weirdly without AC.</p>",
        "id": 205618451,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1596216814
    },
    {
        "content": "<p>Long time since I visited here; only just saw this question. </p>\n<p>Suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is a vector space with a monoidal dual, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊣</mo><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">V \\dashv V^\\ast</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> (treating a monoidal category as a bicategory). Then both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(V, -)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup><mo>⊗</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">V^\\ast \\otimes -</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.772026em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> are right adjoint to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊗</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">V \\otimes -</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span>, hence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>≅</mo><msup><mi>V</mi><mo>∗</mo></msup><mo>⊗</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(V, -) \\cong V^\\ast \\otimes -</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.772026em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(V, -)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> therefore preserves colimits. In particular it preserves the colimit over the directed system of finite-dimensional subspaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mi>α</mi></msub><mo>⊆</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V_\\alpha \\subseteq V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and inclusions between them. In other words, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(V, V)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> is the directed colimit of the system of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><msub><mi>V</mi><mi>α</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(V, V_\\alpha)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, and therefore the identity element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mn>1</mn><mi>V</mi></msub><mo>∈</mo><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1_V \\in \\hom(V, V)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> is in the image of some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>∈</mo><mi>hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><msub><mi>V</mi><mi>α</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi \\in \\hom(V, V_\\alpha)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. That is to say, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mn>1</mn><mi>V</mi></msub></mrow><annotation encoding=\"application/x-tex\">1_V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>→</mo><msub><mi>V</mi><mi>α</mi></msub><mo>⊆</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V \\to V_\\alpha \\subseteq V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> for some finite-dimensional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">V_\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is finite-dimensional.</p>",
        "id": 206939006,
        "sender_full_name": "Todd Trimble",
        "timestamp": 1597417711
    }
]