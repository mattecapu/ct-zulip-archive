[
    {
        "content": "<p>I am reaching part 4 of the <a href=\"https://www.youtube.com/watch?v=kPfyHwibgzs&amp;list=PLhgq-BqyZ7i6IjU82EDzCqgERKjjIPlmh&amp;index=4\">Polynomial Functors Course:  Dynamics of Polynomials II</a> and trying to also keep up with the book by <span class=\"user-mention\" data-user-id=\"276049\">@David Spivak</span>  and <span class=\"user-mention\" data-user-id=\"343715\">@Nelson Niu</span> . Poly as a dynamical system seems to have many of the properties needed for actor systems.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"kPfyHwibgzs\" href=\"https://www.youtube.com/watch?v=kPfyHwibgzs&amp;list=PLhgq-BqyZ7i6IjU82EDzCqgERKjjIPlmh&amp;index=4\"><img src=\"https://uploads.zulipusercontent.net/ef661cce0cf262dcc373c7b6ec0f3d76ebbf759f/68747470733a2f2f692e7974696d672e636f6d2f76692f6b50667948776962677a732f64656661756c742e6a7067\"></a></div>",
        "id": 248774826,
        "sender_full_name": "Henry Story",
        "timestamp": 1628435088
    },
    {
        "content": "<p>Course 3 and 4 make the case for Poly being very good for dynamical systems. The end of chapter 2 shows how something like a supervision hierarchy can work.<br>\nThis made me wonder if this could not be just the right kind of mathematics for actor systems like <a href=\"https://doc.akka.io/docs/akka/current/typed/index.html\">Akka</a>.</p>",
        "id": 248775543,
        "sender_full_name": "Henry Story",
        "timestamp": 1628436140
    },
    {
        "content": "<p>Some interesting features of Actors:</p>\n<ul>\n<li>Actors interact by receiving and sending messages (this is how we are meant to think of poly)</li>\n<li>Actors contain state </li>\n<li>Actors can change behavior (as it seems polys can) </li>\n<li>Actors have a supervision hierarchy , as poly seems to be able to do: <a href=\"/user_uploads/21317/_GiPlRCgNRX72SMTR27KOL_A/Screen-Shot-2021-08-08-at-18.16.33.png\">monoid supervision hierarchy</a><div class=\"message_inline_image\"><a href=\"/user_uploads/21317/_GiPlRCgNRX72SMTR27KOL_A/Screen-Shot-2021-08-08-at-18.16.33.png\" title=\"monoid supervision hierarchy\"><img src=\"/user_uploads/21317/_GiPlRCgNRX72SMTR27KOL_A/Screen-Shot-2021-08-08-at-18.16.33.png\"></a></div></li>\n</ul>",
        "id": 248777714,
        "sender_full_name": "Henry Story",
        "timestamp": 1628439610
    },
    {
        "content": "<p>Carl Hewitt who invented the actor model wrote up a history in 2010 of actor systems  <a href=\"https://twitter.com/bblfish/status/1358103100104572930\">https://twitter.com/bblfish/status/1358103100104572930</a> .</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1358103100104572930\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>Really great overview of the history of computing and the emergence of the Actor model by Carl Hewitt. \"Actor Model of Computation: Scalable Robust Information Systems\"\n<a href=\"https://t.co/zRcLRboJwS\">https://arxiv.org/abs/1008.1459</a>\n( <a href=\"https://twitter.com/ThePatHayes\">@ThePatHayes</a> and <a href=\"https://twitter.com/v_sassone\">@v_sassone</a>'s works are cited)\n\"The Actor Model integrated:\" <a href=\"https://t.co/HM1UgmLWNL\">https://twitter.com/bblfish/status/1358103100104572930/photo/1</a></p><span>- The‚Äâüêü‚Äç‚Äç‚ÄâBabelFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/HM1UgmLWNL\"><img src=\"https://uploads.zulipusercontent.net/f4e77d124215aa7d39b2d147ddd3d0d493683891/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45746a79383665575941494f454c552e706e673a7468756d62\"></a></div></div></div>",
        "id": 248777888,
        "sender_full_name": "Henry Story",
        "timestamp": 1628439930
    },
    {
        "content": "<p>I had found some very interesting links between Session types and actors as in here <a href=\"https://twitter.com/bblfish/status/1358462175174664192\">https://twitter.com/bblfish/status/1358462175174664192</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1358462175174664192\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>The EffPi plugin to the #Scala3 compiler connects to mCRL2 toolset which can verify Async Protocols  for being deadlock-free, reactive, responsive, ... mCRL2 offers \"tools for linearisation, simulation, state-space exploration...\" <a href=\"https://t.co/iTZrP34HaG\">https://mcrl2.org/web/user_manual/index.html</a> <a href=\"https://t.co/FKJ4s4Q8wG\">https://twitter.com/bblfish/status/1358462175174664192/photo/1</a></p><span>- The‚Äâüêü‚Äç‚Äç‚ÄâBabelFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/FKJ4s4Q8wG\"><img src=\"https://uploads.zulipusercontent.net/adc8b00ff804548ef4ff09e56a46932d08c23f46/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45746f34765053585941455347646c2e6a70673a736d616c6c\"></a></div></div></div>",
        "id": 248778032,
        "sender_full_name": "Henry Story",
        "timestamp": 1628440183
    },
    {
        "content": "<p>Anyway, perhaps others are deeper into Poly that me, and have some insight on whether Actors could be an interesting application area?</p>",
        "id": 248778158,
        "sender_full_name": "Henry Story",
        "timestamp": 1628440325
    },
    {
        "content": "<p>Poly is a model for distributed systems. Actors are also a (much more basic) model for distributed systems. I don‚Äôt think ‚ÄúPoly can be applied to actors‚Äù. That‚Äôs like saying Turing Machines can be applied to lambda calculus!</p>",
        "id": 248800380,
        "sender_full_name": "Nick Smith",
        "timestamp": 1628475589
    },
    {
        "content": "<p>Poly is also more broadly applicable. For one thing, it seems equally adept at modelling relational databases. What is the connection between databases and dynamical systems? Both can be seen as graphs, to start. One is a data graph, the other is a state graph.</p>",
        "id": 248800705,
        "sender_full_name": "Nick Smith",
        "timestamp": 1628476023
    },
    {
        "content": "<p>Mh, it looks like Poly could be useful for modelling the web then <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/web.20cats/near/248809788\">as I argue here</a>.</p>",
        "id": 248810346,
        "sender_full_name": "Henry Story",
        "timestamp": 1628490383
    },
    {
        "content": "<p>Btw, we find very similar wiring diagrams for streams in Akka. But I guess such diagrams are due to symmetric monoidal categories rather than to Poly. <br>\n<a href=\"https://twitter.com/bblfish/status/1397967139886227459\">https://twitter.com/bblfish/status/1397967139886227459</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1397967139886227459\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>From the diagrams in the #Akka stream  documentation it is quite clear that these must be Symmetric Monoidal Categories. \nI wonder if they were designed as such? #Scala\n<a href=\"https://t.co/ovskyYGS9v\">https://doc.akka.io/docs/akka/current/stream/stream-composition.html</a> <a href=\"https://t.co/e2Xe6X58zB\">https://twitter.com/bblfish/status/1397967139886227459/photo/1</a></p><span>- The‚Äâüêü‚Äç‚Äç‚ÄâBabelFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/e2Xe6X58zB\"><img src=\"https://uploads.zulipusercontent.net/1d645eb00c83506bbd78fdc60fe92ddf94e0421c/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45326154625f5257454151644a59392e6a70673a6d656469756d\"></a></div></div></div>",
        "id": 248898220,
        "sender_full_name": "Henry Story",
        "timestamp": 1628538584
    }
]