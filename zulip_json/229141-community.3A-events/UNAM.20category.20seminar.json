[
    {
        "content": "<p>UNAM, the National Autonomous University of Mexico is having an online category theory seminar on Wednesdays at 18:00 UTC (11 am Pacific Time).    The talks will appear in streaming video, and they will be recorded.  (See below for where.)</p>",
        "id": 212127149,
        "sender_full_name": "John Baez",
        "timestamp": 1601671764
    },
    {
        "content": "<p>I don't have a full schedule of talks, but I'm giving the first talk, and my student <span class=\"user-mention\" data-user-id=\"275914\">@Joe Moeller</span> is giving the second.</p>",
        "id": 212127615,
        "sender_full_name": "John Baez",
        "timestamp": 1601672010
    },
    {
        "content": "<ul>\n<li><strong>Speaker:</strong> John Baez</li>\n<li><strong>Time:</strong> Wednesday October 7th, 18:00 UTC</li>\n<li><strong>Title:</strong> Fock space techniques for stochastic physics</li>\n<li><strong>Abstract:</strong> Some ideas from quantum theory are beginning to percolate back to classical probability theory. For example, the master equation for a chemical reaction network---also known as a stochastic Petri net---describes particle interactions in a stochastic rather than quantum way. If we look at this equation from the perspective of quantum theory, this formalism turns out to involve creation and annihilation operators, coherent states and other well-known ideas â€” but with a few big differences.</li>\n<li>Talk slides available here: <a href=\"https://math.ucr.edu/home/baez/networks_oxford/Fock_space.pdf\">https://math.ucr.edu/home/baez/networks_oxford/Fock_space.pdf</a></li>\n</ul>",
        "id": 212127781,
        "sender_full_name": "John Baez",
        "timestamp": 1601672100
    },
    {
        "content": "<ul>\n<li><strong>Speaker:</strong> Joe Moeller</li>\n<li><strong>Time:</strong> Wednesday October 14th, 18:00 UTC</li>\n<li><strong>Title:</strong> Network models</li>\n<li><strong>Abstract:</strong> Networks can be combined in various ways, such as overlaying one on top of another or setting two side by side. We introduce 'network models' to encode these ways of combining networks. Different network models describe different kinds of networks. We show that each network model gives rise to an operad, whose operations are ways of assembling a network of the given kind from smaller parts. Such operads, and their algebras, can serve as tools for designing networks. Technically, a network model is a lax symmetric monoidal functor from the free symmetric monoidal category on some set to Cat, and the construction of the corresponding operad proceeds via a symmetric monoidal version of the Grothendieck construction.</li>\n<li>You can see the paper this talk is based on, and further discussion, here: <br>\n<a href=\"https://johncarlosbaez.wordpress.com/2017/10/31/complex-adaptive-systems-part-6/\">https://johncarlosbaez.wordpress.com/2017/10/31/complex-adaptive-systems-part-6/</a></li>\n</ul>",
        "id": 212128047,
        "sender_full_name": "John Baez",
        "timestamp": 1601672268
    },
    {
        "content": "<p>Joe Moeller's talk \"Network Models\" will appear live on Wednesday October 14th, 18:00 UTC here:</p>\n<p><a href=\"https://www.youtube.com/Pa96YVgazQk\">https://www.youtube.com/Pa96YVgazQk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Pa96YVgazQk\" href=\"https://www.youtube.com/Pa96YVgazQk\"><img src=\"https://i.ytimg.com/vi/Pa96YVgazQk/default.jpg\"></a></div>",
        "id": 213105979,
        "sender_full_name": "John Baez",
        "timestamp": 1602556139
    },
    {
        "content": "<ul>\n<li><strong>Title:</strong> Network Models</li>\n<li><strong>Abstract:</strong> Networks can be combined in various ways, such as overlaying one on top of another or setting two side by side. We introduce 'network models' to encode these ways of combining networks. Different network models describe different kinds of networks. We show that each network model gives rise to an operad, whose operations are ways of assembling a network of the given kind from smaller parts. Such operads, and their algebras, can serve as tools for designing networks. Technically, a network model is a lax symmetric monoidal functor from the free symmetric monoidal category on some set to Cat, and the construction of the corresponding operad proceeds via a symmetric monoidal version of the Grothendieck construction.</li>\n<li>You can see the paper this talk is based on, and further discussion, here: <br>\n<a href=\"https://johncarlosbaez.wordpress.com/2017/10/31/complex-adaptive-systems-part-6/\">https://johncarlosbaez.wordpress.com/2017/10/31/complex-adaptive-systems-part-6/</a></li>\n</ul>",
        "id": 213106043,
        "sender_full_name": "John Baez",
        "timestamp": 1602556220
    },
    {
        "content": "<p>That link's broken - I think it should be <a href=\"https://johncarlosbaez.wordpress.com/2020/10/07/network-models/\">https://johncarlosbaez.wordpress.com/2020/10/07/network-models/</a></p>",
        "id": 213111634,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1602564204
    },
    {
        "content": "<p>Actually this one is better: </p>\n<p><a href=\"https://johncarlosbaez.wordpress.com/2017/10/31/complex-adaptive-systems-part-6/\">https://johncarlosbaez.wordpress.com/2017/10/31/complex-adaptive-systems-part-6/</a></p>",
        "id": 213112032,
        "sender_full_name": "John Baez",
        "timestamp": 1602564793
    },
    {
        "content": "<p>Thanks, though!  The link I originally gave was certainly broken.</p>",
        "id": 213112109,
        "sender_full_name": "John Baez",
        "timestamp": 1602564870
    },
    {
        "content": "<p>Here's the next talk at the UNAM category seminar:</p>\n<ul>\n<li><strong>Speaker:</strong> <a href=\"https://sites.google.com/view/jadeedenstarmaster/home\">Jade Master</a></li>\n<li><strong>Time:</strong> Wednesday October 21st at 18:00 UTC (11 am Pacific Time)</li>\n<li><strong>Title:</strong> Open Petri nets and their categories of processes</li>\n<li><strong>Abstract:</strong>  In this talk we will discuss Petri nets from a categorical perspective. A Petri net freely generates a symmetric monoidal category whose morphisms represent its executions. We will discuss how to make Petri nets 'open'---i.e., equip them with input and output boundaries where resources can flow in and out. Open Petri nets freely generate open symmetric monoidal categories: symmetric monoidal categories which can be glued together along a shared boundary. The mapping from open Petri nets to their open symmetric monoidal categories is functorial and this gives a compositional framework for reasoning about the executions of Petri nets.</li>\n</ul>",
        "id": 213340167,
        "sender_full_name": "John Baez",
        "timestamp": 1602704017
    },
    {
        "content": "<p>You can see the talk live, and also recorded later on, by going here and poking around:</p>\n<p><a href=\"https://www.youtube.com/channel/UCAt6kc74uY03ZGcNDb6VGAg\">https://www.youtube.com/channel/UCAt6kc74uY03ZGcNDb6VGAg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCAt6kc74uY03ZGcNDb6VGAg\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
        "id": 213340494,
        "sender_full_name": "John Baez",
        "timestamp": 1602704161
    },
    {
        "content": "<p>You can read more about this work here:</p>\n<ul>\n<li>\n<p>John Baez and Jade Master, <a href=\"https://johncarlosbaez.wordpress.com/2018/08/15/open-petri-nets-part-1\">Open Petri nets</a></p>\n</li>\n<li>\n<p>Jade Master, <a href=\"https://arxiv.org/abs/1904.09091]\">Generalized Petri nets</a></p>\n</li>\n</ul>\n<p>You can see Jade's slides for a related talk here:</p>\n<ul>\n<li><strong>Title:</strong> Open Petri nets</li>\n<li><strong>Slides:</strong> <a href=\"http://math.ucr/edu/home/baez/master_QPL2019.pdf\">http://math.ucr/edu/home/baez/master_QPL2019.pdf</a></li>\n<li><strong>Abstract:</strong> The reachability semantics for Petri nets can be studied using open Petri nets. For us an 'open' Petri net is one with certain places designated as inputs and outputs via a cospan of sets. We can compose open Petri nets by gluing the outputs of one to the inputs of another. Open Petri nets can be treated as morphisms of a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">O</mi><mi mathvariant=\"sans-serif\">p</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Open}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">O</span><span class=\"mord mathsf\">p</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span>, which becomes symmetric monoidal under disjoint union. However, since the composite of open Petri nets is defined only up to isomorphism, it is better to treat them as morphisms of a symmetric monoidal <em>double</em> category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">O</mi><mrow><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{O}\\mathbf{pen}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">O</span></span><span class=\"mord\"><span class=\"mord mathbf\">p</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span>.  Various choices of semantics for open Petri nets can be described using symmetric monoidal double functors out of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">O</mi><mrow><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{O}\\mathbf{pen}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">O</span></span><span class=\"mord\"><span class=\"mord mathbf\">p</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span>.  Here we describe the reachability semantics, which assigns to each open Petri net the relation saying which markings of the outputs can be obtained from a given marking of the inputs via a sequence of transitions. We show this semantics gives a symmetric monoidal lax double functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">O</mi><mrow><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{O}\\mathbf{pen}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">O</span></span><span class=\"mord\"><span class=\"mord mathbf\">p</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span> to the double category of relations. A key step in the proof is to treat Petri nets as presentations of symmetric monoidal categories; for this we use the work of Meseguer, Montanari, Sassone and others.</li>\n</ul>",
        "id": 213340958,
        "sender_full_name": "John Baez",
        "timestamp": 1602704401
    },
    {
        "content": "<p>When do the videos generally get posted? I missed <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> 's talk</p>",
        "id": 213864003,
        "sender_full_name": "Emily Pillmore",
        "timestamp": 1603154082
    },
    {
        "content": "<p>You didn't miss Jade Master's talk yet - it's on Wednesday October 21st.   But if you do, the UNAM videos get posted on YouTube, and Jade's will eventually appear here:</p>\n<p><a href=\"https://www.youtube.com/watch?v=evz0QgPjbGQ&amp;feature=youtu.be\">https://www.youtube.com/watch?v=evz0QgPjbGQ&amp;feature=youtu.be</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"evz0QgPjbGQ\" href=\"https://www.youtube.com/watch?v=evz0QgPjbGQ&amp;feature=youtu.be\"><img src=\"https://i.ytimg.com/vi/evz0QgPjbGQ/default.jpg\"></a></div>",
        "id": 213880260,
        "sender_full_name": "John Baez",
        "timestamp": 1603176518
    },
    {
        "content": "<p>Here's the talk information:</p>\n<ul>\n<li><strong>Speaker:</strong> <a href=\"https://sites.google.com/view/jadeedenstarmaster/home\">Jade Master</a></li>\n<li><strong>Time:</strong> Wednesday October 21st at 18:00 UTC (11 am Pacific Time)</li>\n<li><strong>Title:</strong> Open Petri nets and their categories of processes</li>\n<li><strong>Abstract:</strong>  In this talk we will discuss Petri nets from a categorical perspective. A Petri net freely generates a symmetric monoidal category whose morphisms represent its executions. We will discuss how to make Petri nets 'open'---i.e., equip them with input and output boundaries where resources can flow in and out. Open Petri nets freely generate open symmetric monoidal categories: symmetric monoidal categories which can be glued together along a shared boundary. The mapping from open Petri nets to their open symmetric monoidal categories is functorial and this gives a compositional framework for reasoning about the executions of Petri nets.</li>\n</ul>",
        "id": 213880499,
        "sender_full_name": "John Baez",
        "timestamp": 1603176733
    },
    {
        "content": "<p>You can read more about this work here:</p>\n<ul>\n<li>\n<p>John Baez and Jade Master, <a href=\"https://johncarlosbaez.wordpress.com/2018/08/15/open-petri-nets-part-1\">Open Petri nets</a></p>\n</li>\n<li>\n<p>Jade Master, <a href=\"https://arxiv.org/abs/1904.09091]\">Generalized Petri nets</a></p>\n</li>\n</ul>\n<p>You can see Jade's slides for a related talk here:</p>\n<ul>\n<li><strong>Title:</strong> Open Petri nets</li>\n<li><strong>Slides:</strong> <a href=\"http://math.ucr/edu/home/baez/master_QPL2019.pdf\">http://math.ucr/edu/home/baez/master_QPL2019.pdf</a></li>\n<li><strong>Abstract:</strong> The reachability semantics for Petri nets can be studied using open Petri nets. For us an 'open' Petri net is one with certain places designated as inputs and outputs via a cospan of sets. We can compose open Petri nets by gluing the outputs of one to the inputs of another. Open Petri nets can be treated as morphisms of a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"sans-serif\">O</mi><mi mathvariant=\"sans-serif\">p</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Open}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">O</span><span class=\"mord mathsf\">p</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span>, which becomes symmetric monoidal under disjoint union. However, since the composite of open Petri nets is defined only up to isomorphism, it is better to treat them as morphisms of a symmetric monoidal <em>double</em> category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">O</mi><mrow><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{O}\\mathbf{pen}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">O</span></span><span class=\"mord\"><span class=\"mord mathbf\">p</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span>.  Various choices of semantics for open Petri nets can be described using symmetric monoidal double functors out of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">O</mi><mrow><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{O}\\mathbf{pen}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">O</span></span><span class=\"mord\"><span class=\"mord mathbf\">p</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span>.  Here we describe the reachability semantics, which assigns to each open Petri net the relation saying which markings of the outputs can be obtained from a given marking of the inputs via a sequence of transitions. We show this semantics gives a symmetric monoidal lax double functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">O</mi><mrow><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">n</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">P</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">i</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{O}\\mathbf{pen}(\\mathsf{Petri})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">O</span></span><span class=\"mord\"><span class=\"mord mathbf\">p</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">n</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">P</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">r</span><span class=\"mord mathsf\">i</span></span><span class=\"mclose\">)</span></span></span></span> to the double category of relations. A key step in the proof is to treat Petri nets as presentations of symmetric monoidal categories; for this we use the work of Meseguer, Montanari, Sassone and others.</li>\n</ul>",
        "id": 213880529,
        "sender_full_name": "John Baez",
        "timestamp": 1603176770
    },
    {
        "content": "<p>I came to this topic to ask if these are posted somewhere, and the message right above says yes.  It would be nice if someone could post the link <span class=\"user-mention\" data-user-id=\"275989\">@Paolo Perrone</span> 's talk here once it has been uploaded to youtube.</p>",
        "id": 227676206,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1614202219
    },
    {
        "content": "<p>It looks like the UNAM category seminar talks eventually appear <a href=\"https://www.youtube.com/channel/UCAt6kc74uY03ZGcNDb6VGAg\">here on YouTube</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCAt6kc74uY03ZGcNDb6VGAg\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
        "id": 227676703,
        "sender_full_name": "John Baez",
        "timestamp": 1614202412
    },
    {
        "content": "<p>The most recent talk posted there is currently David Spivak's talk on February 17th.</p>",
        "id": 227676899,
        "sender_full_name": "John Baez",
        "timestamp": 1614202477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229141-general.3A-events/topic/UNAM.20category.20seminar/near/227676206\">said</a>:</p>\n<blockquote>\n<p>I came to this topic to ask if these are posted somewhere, and the message right above says yes.  It would be nice if someone could post the link <span class=\"user-mention silent\" data-user-id=\"275989\">Paolo Perrone</span> 's talk here once it has been uploaded to youtube.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"296322\">@Jacques Carette</span> Hi! The talk is here: <a href=\"https://www.youtube.com/watch?v=ynxfrlqr4I0\">https://www.youtube.com/watch?v=ynxfrlqr4I0</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ynxfrlqr4I0\" href=\"https://www.youtube.com/watch?v=ynxfrlqr4I0\"><img src=\"https://i.ytimg.com/vi/ynxfrlqr4I0/default.jpg\"></a></div>",
        "id": 227695362,
        "sender_full_name": "Paolo Perrone",
        "timestamp": 1614210496
    }
]