[
    {
        "content": "<p>I've added a bit recently to the nLab page <a href=\"https://ncatlab.org/nlab/show/polynomial%20functor\">[[polynomial functor]]</a>, namely connecting the naive notion of polynomial endofunctor (given by a literal polynomial), which makes sense in an extensive category with finite products (call these for now fp-extensive categories), and the grown-up version involving dependent product etc. This is so one can talk about the existence of W-types in fp-extensive categories, which makes perfect sense; for example people who work on arithmetic universes want W-types corresponding to indexed lists/free monoids.</p>\n<p>Now the one wrinkle is that everything works except that at one point one needs the dependent product along the copairing map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊔</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\sqcup A\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, which is the fibred product over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. Thus it seems one needs not just finite products, but finite limits, hence a lextensive category, to link the naive and the sophisticated notions of polynomials. However, it's enough to have a <em>partial</em> right adjoint functor, not the full dependent product, since the actual composite defining a polynomial functor in the general sense only needs the dependent product defined on projection maps (or more generally in the image of the pullback functor that's the first factor of the polynomial endofunctor). And then with this slight tweak, naive polynomial endofunctors really are polynomial endofunctors in the full generality where the former are definable.</p>\n<p>So I was wondering if people had any strong feelings or comments about this level of centipede mathematics.</p>",
        "id": 342686023,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1679098030
    },
    {
        "content": "<p>On the nLab at the moment, it only has the material on the <a href=\"https://ncatlab.org/nlab/show/polynomial%20functor#ExamplesOnLextensiveCats\">lextensive case</a>, but I plan to edit this to work more generally, hence raising a discussion here.</p>",
        "id": 342686190,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1679098114
    },
    {
        "content": "<p>I'm aware that for applications (for instance arithmetic universes) one needs the parametrised case, because of the lack of cartesian closedness, and this is something I will look at next, since it's about passing to slice categories, in which finite products are indeed fibred products, hence one might expect to need lextensivity after all. But, again, one is probably (I have yet to check) only needing products of things in the image of the pullback functor to the slice.</p>",
        "id": 342686426,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1679098252
    },
    {
        "content": "<p>I've never been wholly satisfied about discussions about parametrised list objects, or parametrised NNOs, since they have usually been defined in a very nuts-and-bolts way, which is good to see explicitly, but not usually in a high-level conceptual sense (like: it's a W-type, and remains initial among algebras after base change to an arbitrary object), and when I try to sort this out, I can't quite get things to match up.</p>",
        "id": 342686640,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1679098398
    },
    {
        "content": "<p>It seems to me that a good setting for this would be a notion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>-clan admitting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span></span></span></span>-type. \"Partial\" dependent product then fit in as in section 2.4 of Joyal's notes (<a href=\"https://arxiv.org/abs/1710.10238\">https://arxiv.org/abs/1710.10238</a>). The codiagonals are fibrations (as pullbacks of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">l</mi></mrow><mo>→</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Bool} \\to *</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Bool</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord\">∗</span></span></span></span>).<br>\n(I hope I didn't misunderstand your point)</p>",
        "id": 343348064,
        "sender_full_name": "El Mehdi Cherradi",
        "timestamp": 1679399639
    }
]