[
    {
        "content": "<p>I just started a blog! The <a href=\"https://oscarcunningham.com/57/monads-on-monoids/\" title=\"https://oscarcunningham.com/57/monads-on-monoids/\">first post</a> is about monads on monoids (seen as single object categories). It features a surprise appearance from the following integer sequence: 1, 1, 2, 1, 3, 2, 4, 1, 4, 3, ...</p>",
        "id": 194053438,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1586966590
    },
    {
        "content": "<p>Haha nice hook, you caught my interest. Where does your terminology \"modules\" as the objects of the Eilenberg-Moore category come from?</p>",
        "id": 194056151,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1586967796
    },
    {
        "content": "<p>If you view a monad as a monoid internal to the category of endofunctors, then it acts on the modules in the same way that a ring acts on its modules. See: <a href=\"https://ncatlab.org/nlab/show/module+over+a+monad\" title=\"https://ncatlab.org/nlab/show/module+over+a+monad\">https://ncatlab.org/nlab/show/module+over+a+monad</a>. I think 'algebra' is an earlier term, but people are trying to switch over to module because it makes this analogy more consistent. A module is something which is acted on, whereas an algebra is something that does some acting.</p>",
        "id": 194057285,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1586968278
    },
    {
        "content": "<p>Cool, thanks. This seems pretty consistent.<br>\n((People need to be careful when lifting terminology from ring theory, though; it's caused me a lot of trouble recently because \"flatness\" wrt tensoring of modules over a ring can be described as either preserving monos or equivalently as preserving finite limits. When generalising to tensors of actions of a monoid M, semigroup theorists chose the former as their naming convention (flat = tensoring preserves monos), but this isn't the same as preserving finite limits for these objects, so it clashes with \"flat = functor preserving finite limits\" in CT.))</p>",
        "id": 194058461,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1586968788
    },
    {
        "content": "<p>If anything this is abandoning the terminology from algebra: an algebra over a ring (or Lie algebra, etc.) is an algebra/module for a certain monad, but it's also a thing which also has its own notion of a module (module over an algebra, etc.). So this could get confusing.</p>",
        "id": 194059393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586969236
    },
    {
        "content": "<p>Well, both algebras and modules are modules/algebras of monads.</p>",
        "id": 194059546,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1586969305
    },
    {
        "content": "<p>What I mean is, as far as I know, the term \"algebra\" of a monad comes from algebras of operads, which are things like E_n-algebras, or Lie algebras, etc., and in that context you couldn't \"backport\" the term module since it would cause terrible confusion.</p>",
        "id": 194060122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586969577
    },
    {
        "content": "<p>Really interesting blog post! I like that there's already a hint of splitting a monad into an adjunction with the example of conjugation. Looking forward to the next one.</p>",
        "id": 194290288,
        "sender_full_name": "Robin Piedeleu",
        "timestamp": 1587037128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277342\">@Robin Piedeleu</span> Thanks!</p>",
        "id": 194329154,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1587053534
    },
    {
        "content": "<p>Next post: <a href=\"https://oscarcunningham.com/314/adjunctions-between-monoids/\" title=\"https://oscarcunningham.com/314/adjunctions-between-monoids/\">Adjunctions between Monads</a></p>",
        "id": 194329193,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1587053556
    },
    {
        "content": "<p>It turns out that we don't get the situation that we get with categories, where each monad can have many adjunctions that compose to give it. Each monad on a monoid corresponds to a unique adjunction between monoids!</p>",
        "id": 194329312,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1587053616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276945\">@Oscar Cunningham</span> quick question regarding the <a href=\"https://en.wikipedia.org/wiki/Closure_operator\" title=\"https://en.wikipedia.org/wiki/Closure_operator\">wikipedia article on closures</a>. In the section on partially ordered sets it says, that extensiveness, increasingness and idempotency  may be summarized as \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>c</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\leq cl(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>c</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">cl(x) \\leq cl(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>\". This looks pretty close to an adjunction and since every Galois connection gives rise to a closure operator I would expect an adjoint relation. However this would rather look like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>c</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\leq cl(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">cl(x) \\leq y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>\". Am I missing something?</p>",
        "id": 194451120,
        "sender_full_name": "Johannes Drever",
        "timestamp": 1587134789
    },
    {
        "content": "<p>not all monads are self-adjoint, that's all</p>",
        "id": 194452005,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135135
    },
    {
        "content": "<p>in fact, pretty few are</p>",
        "id": 194452018,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135141
    },
    {
        "content": "<p>if you want to get an adjunction, you can use the kleisli or eilenberg-moore categories of the monad—there are canonical ways of factoring the monad back into an adjunction through them</p>",
        "id": 194452311,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135253
    },
    {
        "content": "<p>if the monad is idempotent, then they coincide and the right adjoint is fully faithful, so you basically get a subcategory—an example of this is Ab ↪ Grp, with the monad of the abelianization adjunction</p>",
        "id": 194452619,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135371
    },
    {
        "content": "<p>and in fact every monad on a poset is idempotent, and you get something that's probably what you want :)</p>",
        "id": 194452712,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135407
    },
    {
        "content": "<p>it's quite simple, in fact—let me give you the explicit construction</p>",
        "id": 194452765,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135423
    },
    {
        "content": "<p>let P be a proset (preordered set), and say M : P → P is a monad on P (i.e., a closure operator)</p>",
        "id": 194453028,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135504
    },
    {
        "content": "<p>then define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>P</mi><mi>M</mi></msup><mo>≜</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mi>P</mi><mo>∣</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>x</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">P^M \\triangleq \\{x \\in P \\mid M(x) \\le x\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.99865em;vertical-align:-0.08198em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≜</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 194453254,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135589
    },
    {
        "content": "<p>it's straightforward to see that we also have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi>P</mi><mi>M</mi></msup><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>x</mi><mo>≃</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\in P^M \\iff x \\simeq M(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.865331em;vertical-align:-0.024em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> (i'm writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≃</mo></mrow><annotation encoding=\"application/x-tex\">\\simeq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mrel\">≃</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span></span></span> to denote the standard equivalence relation of \"mutually ≤\", but it <em>is</em> equality if the proset is actually a poset)</p>",
        "id": 194453555,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135697
    },
    {
        "content": "<p>so for example, if P is the power set of a topological space and M is topological closure, then P^M is the closed sets</p>",
        "id": 194453741,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135768
    },
    {
        "content": "<p>now, note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M(x) \\le M(M(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> is one of the laws of a closure operator, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><msup><mi>P</mi><mi>M</mi></msup></mrow><annotation encoding=\"application/x-tex\">M(x) \\in P^M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span></span></span></span> always</p>",
        "id": 194454050,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135873
    },
    {
        "content": "<p>hence we can restrict M's codomain and get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>:</mo><mi>P</mi><mo>→</mo><msup><mi>P</mi><mi>M</mi></msup></mrow><annotation encoding=\"application/x-tex\">L : P \\to P^M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 194454209,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135935
    },
    {
        "content": "<p>and <em>then</em> we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>⊣</mo><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">L \\dashv \\iota</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ι</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi><mo>:</mo><msup><mi>P</mi><mi>M</mi></msup><mo>→</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\iota : P^M \\to P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ι</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is just the inclusion</p>",
        "id": 194454269,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587135960
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi><mo>∘</mo><mi>L</mi><mo>=</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">\\iota \\circ L = M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ι</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, so this factors M back into an adjunction</p>",
        "id": 194454402,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587136011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275946\">@Johannes Drever</span> Yep, what sarahzrf said. Every closure operation arises from a Galois connection, but that Galois connection isn't necessarily <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">l</mi></mrow><mo>:</mo><mi>P</mi><mo>⇆</mo><mi>P</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">l</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cl}:P\\leftrightarrows P:\\mathrm{cl}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">l</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.86413em;vertical-align:-0.1808em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⇆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">l</span></span></span></span></span>, which is what we would need to get '<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">l</mi></mrow><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x\\leq\\mathrm{cl}(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">l</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">l</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cl}(x)\\leq y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">l</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>'.</p>",
        "id": 194458899,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1587137673
    },
    {
        "content": "<p>arises from probably more than one galois connection, even :)</p>",
        "id": 194459137,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587137773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276072\">@sarahzrf</span> thanks for the explanation and the construction. I think I have to study <a href=\"https://ncatlab.org/nlab/show/monadic+adjunction\" title=\"https://ncatlab.org/nlab/show/monadic+adjunction\">going back and forth between adjunctions and monads</a> a bit.</p>",
        "id": 194459510,
        "sender_full_name": "Johannes Drever",
        "timestamp": 1587137966
    },
    {
        "content": "<p>basically:</p>",
        "id": 194459570,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587137994
    },
    {
        "content": "<ul>\n<li>taking the monad of an adjunction is a lossy operation—many distinct adjunctions may give the same monad</li>\n</ul>",
        "id": 194459638,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138012
    },
    {
        "content": "<ul>\n<li>given a particular monad M : C → C, there is a whole <em>category</em> whose objects are the adjunctions that factor M (so in each of these adjunctions, the left adjoint has domain C, but its codomain is probably different for different adjunctions), and whose morphisms are functors between the codomains of the left adjoints that make certain diagrams commute</li>\n</ul>",
        "id": 194459839,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138118
    },
    {
        "content": "<ul>\n<li>you can always construct adjunctions factoring M thru the <em>kleisli category</em> of M and thru the <em>eilenberg-moore category</em> of M, and the kleisli adjunction will be the <em>initial object</em> of the aforementioned category, while the eilenberg-moore adjunction will be <em>terminal</em></li>\n</ul>",
        "id": 194460018,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138187
    },
    {
        "content": "<ul>\n<li>an adjunction is \"monadic\" if it is <em>terminal</em> in the category of adjunctions with the same monad—i.e., if it is isomorphic, as an adjunction, to the eilenberg-moore adjunction for its monad</li>\n</ul>",
        "id": 194460168,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138248
    },
    {
        "content": "<ul>\n<li>going between monads and adjunctions <em>is itself an adjunction</em>... or so i've heard <span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></li>\n</ul>",
        "id": 194460250,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Monads.20on.20Monoids/near/194460250\" title=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Monads.20on.20Monoids/near/194460250\">said</a>:</p>\n<blockquote>\n<ul>\n<li>going between monads and adjunctions <em>is itself an adjunction</em>... or so i've heard <span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></li>\n</ul>\n</blockquote>\n<p>Yes, it's also in the <a href=\"https://ncatlab.org/nlab/show/monad\" title=\"https://ncatlab.org/nlab/show/monad\">nLab like this</a>: </p>\n<blockquote>\n<p>Moreover, passing from adjunctions to monads and back to their monadic adjunctions constitutes itself an adjunction between adjunctions and monads, called the semantics-structure adjunction.</p>\n</blockquote>\n<p>That's truly amazing. So going from adjunctions to monads is a forgetful functor and going from monads to adjunctions is a free construction, right? <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 194460893,
        "sender_full_name": "Johannes Drever",
        "timestamp": 1587138585
    },
    {
        "content": "<p>i believe so</p>",
        "id": 194460967,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138602
    },
    {
        "content": "<p>well, actually it looks like the <em>left</em> adjoint is taking the monad of an adjunction :/</p>",
        "id": 194461155,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138671
    },
    {
        "content": "<p>so shrug</p>",
        "id": 194461238,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138716
    },
    {
        "content": "<p>not every adjunction easily fits super well into \"free\"/\"forgetful\"</p>",
        "id": 194461312,
        "sender_full_name": "sarahzrf",
        "timestamp": 1587138735
    },
    {
        "content": "<p>Good to know that \"free\" and \"forgetful\" only heuristics that don't always fit.</p>",
        "id": 194462330,
        "sender_full_name": "Johannes Drever",
        "timestamp": 1587139170
    },
    {
        "content": "<p>My guess would be that taking the monad of an adjunction is left adjoint to the Eilenberg-Moore construction <em>and</em> right adjoint to the Kleisli construction</p>",
        "id": 194463524,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1587139635
    },
    {
        "content": "<p>That was a nice tangent on the topic you did not want to talk about in the article <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 194464904,
        "sender_full_name": "Johannes Drever",
        "timestamp": 1587140318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276945\">Oscar Cunningham</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Monads.20on.20Monoids/near/194463524\" title=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Monads.20on.20Monoids/near/194463524\">said</a>:</p>\n<blockquote>\n<p>My guess would be that taking the monad of an adjunction is left adjoint to the Eilenberg-Moore construction <em>and</em> right adjoint to the Kleisli construction</p>\n</blockquote>\n<p>So in fact this does fit into the usual paradigm? The construction of the category of free algebras (Kleisli) is the \"free\" construction relative to the forgetful (adjunction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span> monad) functor; the Eilenberg-Moore category is the \"cofree\" thing? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 194473700,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1587144355
    },
    {
        "content": "<p>Sounds right!</p>",
        "id": 194479260,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1587146928
    },
    {
        "content": "<p>Yes, that's basically right.  I think it's reasonable to say that the Kleisli adjunction is the \"free adjunction generated by a monad\" -- the objects of the Kleisli category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> are \"all and only those that have to be there in an adjunction that generates the monad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>\", namely the free objects generated by objects of the base category, and similarly the morphisms between them are all and only those that have to be there.  Similarly, the EM-adjunction is the cofree adjunction generated by a monad.</p>",
        "id": 194487889,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1587151164
    }
]