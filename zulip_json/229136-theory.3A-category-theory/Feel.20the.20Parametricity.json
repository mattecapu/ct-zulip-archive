[
    {
        "content": "<p>Although I guess some people are now pushing for the idea that naturality is a pale immitation of parametricity, and the latter should be more widely applied. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 192884964,
        "sender_full_name": "Dan Doel",
        "timestamp": 1585967382
    },
    {
        "content": "<p>What's parametricity, how does it relate to naturality, and what else do I need to know about it?</p>",
        "id": 192903335,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1585999771
    },
    {
        "content": "<p>Well, I don't know how historical you want to get. The oldest idea, I think, is that when you give a definition with a type like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>→</mo><mi>a</mi><mo>→</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a → a → a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>, it is parametric if the definition is not necessary to be given by cases on what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> actually is. It must be a single, uniform definition that works for all choices of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>. However, this is a very syntactic description, which is somewhat undesirable, so the challenge was to give a more semantic characterization of what it means.</p>",
        "id": 192912471,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586013566
    },
    {
        "content": "<p>Apparently, this is <em>also</em> the oldest intuitive description of what it means for something to be \"natural,\" but the way it was fleshed out ended up different. Naturality obviously involved categories.</p>",
        "id": 192912540,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586013659
    },
    {
        "content": "<p>Parametricity instead uses relations. For type theory, this traditionally means that you can give types/terms an alternate semantics in relations. So, every type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> gives a relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>A</mi></msub><mo>:</mo><mi>A</mi><mo>↔</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">R_A : A \\leftrightarrow A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>, and every term <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">f : A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is related to itself by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>A</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. For types with quantifiers, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>A</mi><mi mathvariant=\"normal\">.</mi><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">∀ A. A → A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">A</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>, the relational interpretation is to quantify over relations between types, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>A</mi><mi>B</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mo>:</mo><mi>A</mi><mo>↔</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>:</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo>:</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi>R</mi><mi>x</mi><mi>y</mi><mo>→</mo><mi>R</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">∀ A B (R : A \\leftrightarrow B) (x : A) (y : B). R x y → R (f x) (f y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 192913304,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586014612
    },
    {
        "content": "<p>So, if you think of natural transformations as having these sort of quantified types, and the corresponding relations that we quantify over are required to be like 'structure respecting' relations, maybe that explains how this can fill a similar role to naturality.</p>",
        "id": 192913470,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586014809
    },
    {
        "content": "<p>However, the original serious investigations into parametricity were conducted with System F, where the quantifiers range over all types, including ones with quantifiers. This is very powerful, and lets you encode all sorts of structures with very few primitives (just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">∀</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">→</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span>). However, it is a different sort of impredicativity than is used in normal mathematics, and is incompatible with it. For instance, System F can define the booleans <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, and also define the fixed point of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mo>→</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">(- → 2) → 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>. So you can't interpret its types in classical set theory (because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">- → 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is the power set there, and there is no fixed point of the double power-set).</p>",
        "id": 192913667,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586015106
    },
    {
        "content": "<p>So, parametricity kind of got ignored in normal mathematics, because e.g. the title of the paper presenting the last message was \"Polymorphism is not Set Theoretic.\" That is, \"parametric polymorphism.\" However, I think parametricity is kind of irrelevant, the real problem is the mismatched sorts of impredicativity. But the two got conflated.</p>",
        "id": 192913843,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586015287
    },
    {
        "content": "<p>This is the paper laying this out in more detail, and suggesting how parametricity could apply to wider mathematics: <a href=\"https://www.cs.bham.ac.uk/~udr/papers/logical-relations-and-parametricity.pdf\" title=\"https://www.cs.bham.ac.uk/~udr/papers/logical-relations-and-parametricity.pdf\">https://www.cs.bham.ac.uk/~udr/papers/logical-relations-and-parametricity.pdf</a></p>",
        "id": 192913868,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586015333
    },
    {
        "content": "<p>It's been recognized for a long time that parametric definitions in type theory automatically satisfy naturality conditions of the straight forward category built out of its types and terms, but usually naturality is kind of assumed to be 'better' by people investigating category theory for type theory applications.</p>",
        "id": 192914752,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586016541
    },
    {
        "content": "<p>So, this is the first time I've seen it flipped around, that maybe parametricity is what should have been used more widely, and naturality is a bit weird.</p>",
        "id": 192914773,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586016600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277270\">Dan Doel</span> <a href=\"#narrow/stream/229136-category-theory/topic/Feel.20the.20Parametricity/near/192913470\" title=\"#narrow/stream/229136-category-theory/topic/Feel.20the.20Parametricity/near/192913470\">said</a>:</p>\n<blockquote>\n<p>So, if you think of natural transformations as having these sort of quantified types, and the corresponding relations that we quantify over are required to be like 'structure respecting' relations, maybe that explains how this can fill a similar role to naturality.</p>\n</blockquote>\n<p>This makes it sound like parametricity is \"naturality where the components are relations instead of just morphisms\", in which case I suppose it is more general as soon as you are working in a category with enough structure for relations to behave nicely.</p>",
        "id": 192916823,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1586019337
    },
    {
        "content": "<p>Maybe. But things are being restructured more fundamentally than that in the paper, I think.</p>",
        "id": 192917446,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586020124
    },
    {
        "content": "<p>They do eventually construct something that looks a lot like a framed bicategory, or double category or something, where you have morphisms and relations and ways to lift morphisms to relations.</p>",
        "id": 192917659,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586020428
    },
    {
        "content": "<p>Most treatments of parametricity are type-directed in a sense: given a type of a (polymorphic) function, you can state the theorem it should satisfy to be parametric. Can naturality conditions be expressed in a similar way?</p>",
        "id": 192917992,
        "sender_full_name": "Verity Scheel",
        "timestamp": 1586020914
    },
    {
        "content": "<p>The idea, I think, is that instead of objects and morphisms between them, you build objects with relations between them. Then the analogue of functors is required to carry a relational interpretation, and the analogue of naturality is also relation based.</p>",
        "id": 192918222,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586021226
    },
    {
        "content": "<p>One of the stated advantages of this is that the functor analogue does not have an inherent variance, so you don't need to handle that by duplicating variables and worrying about dinaturality and such.</p>",
        "id": 192918307,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586021354
    },
    {
        "content": "<p>Just like polymorphic types don't need their variables to have a particular variance.</p>",
        "id": 192918315,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586021389
    },
    {
        "content": "<p>I'm not sure how much of a concern that really is, because I've seen it suggested that almost every use of dinaturality can instead be turned into extranaturality, which is much less of a problem.</p>",
        "id": 192918401,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586021517
    },
    {
        "content": "<p>I think I'll come back to this later. However, I would be remiss not to mention Freyd's allegories when discussing relational contexts. They never took off, but as a formal framework for talking about \"categories like categories of relations\" they're pretty robust. Maybe some computer scientist will get around to checking them out at some point <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 192919342,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1586022827
    },
    {
        "content": "<p>Well, one thing I haven't mentioned from the paper yet is that the relations in question do not compose. So it's not the same thing as a category of relations.</p>",
        "id": 192919577,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586023118
    },
    {
        "content": "<p>I think they say the non-compositional nature is essential, too.</p>",
        "id": 192919610,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586023169
    },
    {
        "content": "<p>Or rather, there is no assumption that you can take the composite of two relations, like the composite of morphisms.</p>",
        "id": 192919708,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586023285
    },
    {
        "content": "<p>Only reflexivity.</p>",
        "id": 192919713,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586023291
    },
    {
        "content": "<p>Basically, I think you should not be thinking of the suggestion as considering categories of relations instead of all categories, but as considering all reflexive graphs, instead of just categories.</p>",
        "id": 192920437,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586024241
    },
    {
        "content": "<p>This paper and the subsequent paper by the same authors  seem quite rich in terms of putting everything in a modern setting. I don't claim to really understand what's going on yet though <a href=\"https://arxiv.org/abs/1701.06244\" title=\"https://arxiv.org/abs/1701.06244\">https://arxiv.org/abs/1701.06244</a></p>",
        "id": 193011389,
        "sender_full_name": "Gershom",
        "timestamp": 1586162654
    },
    {
        "content": "<p>I eventually understood this as the idea that one wants to look at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">End(-)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Aut(-)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> as being of a single variable rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mo>−</mo><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(-,-)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> which takes two, and I remember reading in a few places about how those things fail to be functorial; parametricity expresses the ways in which such constructions are universally defined. As someone who works with monoids a lot, this will eventually become interesting to me, but I'll leave it on the back burner for now. Thanks for the info!</p>",
        "id": 193018649,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1586167056
    },
    {
        "content": "<p>That's at least one aspect, yeah. They say that relations somehow capture abstraction (which is kind of what naturality is about) better than homomorphisms, but I'm not sure what the precise content of that is.</p>",
        "id": 193050454,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586183607
    },
    {
        "content": "<p>There's also stuff in that paper I hadn't seen before, like the idea of having the reflexive relation on a poset be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span>, so that the equivalent of functors must preserve that. I'm not sure what consequences that has.</p>",
        "id": 193050712,
        "sender_full_name": "Dan Doel",
        "timestamp": 1586183707
    }
]