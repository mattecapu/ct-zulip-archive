[
    {
        "content": "<p>I'm trying, vainly, to find a detailed, formal definition of \"product-preserving functor\", and I've come up empty handed.   I've got multiple guesses as to what it might mean -- and that's exactly the problem, I have more than one guess. [Yes, I'm trying to formalize morphisms of Lawvere theories.]</p>",
        "id": 202045269,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1593136490
    },
    {
        "content": "<p>The image of a finite product cone is a finite product cone. (I assume you mean all finite products since you mention Lawvere theories.)</p>",
        "id": 202050317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593143586
    },
    {
        "content": "<p>It doesn't count as \"detailed, formal\", but this is the definition:</p>\n<ul>\n<li><a href=\"https://ncatlab.org/nlab/show/product-preserving+functor\">Product-preserving functor</a>, nLab.</li>\n</ul>",
        "id": 202055935,
        "sender_full_name": "John Baez",
        "timestamp": 1593152001
    },
    {
        "content": "<p>If you want something that fills in all the details you might be more likely to find it in a definition of \"limit-preserving functor\", since a product is a limit.</p>",
        "id": 202056074,
        "sender_full_name": "John Baez",
        "timestamp": 1593152166
    },
    {
        "content": "<p>If I had a whiteboard and 15 minutes I could write down the definition very carefully.</p>",
        "id": 202056084,
        "sender_full_name": "John Baez",
        "timestamp": 1593152197
    },
    {
        "content": "<p>Note that if your categories come equipped with a choice of products, a product-preserving functor between them is typically not required to preserve that choice on the nose (and if it does, you would use a qualifier such as \"strict\" to indicate this)</p>",
        "id": 202064850,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1593160676
    },
    {
        "content": "<p>Yes, I mean all finite products. Now, having all finite products is induced by having a terminal object and all binary products (i.e. being cartesian): is there an essential difference? In which case preserving products would be the same as being a cartesian functor.</p>",
        "id": 202077846,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1593170414
    },
    {
        "content": "<p>There is no essential difference between having n-ary products for all natural numbers n, and having binary products and a terminal object. It's simply a choice of presentation.</p>",
        "id": 202078035,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1593170588
    },
    {
        "content": "<p>A functor that preserves finite products is called a \"cartesian\" functor - they are the same thing.</p>",
        "id": 202125134,
        "sender_full_name": "John Baez",
        "timestamp": 1593196093
    },
    {
        "content": "<p>If anyone talks about a category with <em>chosen</em> products, and functors preserving those <em>chosen</em> products, they are talking about something else - and something less useful in most mathematical applications.</p>",
        "id": 202125290,
        "sender_full_name": "John Baez",
        "timestamp": 1593196182
    },
    {
        "content": "<p>Is it only called that when the categories it maps between have all finite products (and are thus Cartesian)?</p>",
        "id": 202125300,
        "sender_full_name": "Dan Doel",
        "timestamp": 1593196189
    },
    {
        "content": "<p>If you talk about a functor preserving all finite products <em>that exist</em> between categories that don't have all finite products, it's your job to warn people, because this is not the main thing people talk about.</p>",
        "id": 202125458,
        "sender_full_name": "John Baez",
        "timestamp": 1593196259
    },
    {
        "content": "<p>It's like talking about a homomorphism between things that, umm, aren't quite groups because multiplication is partially defined.</p>",
        "id": 202125499,
        "sender_full_name": "John Baez",
        "timestamp": 1593196285
    },
    {
        "content": "<p>I guess that case is irrelevant for Lawvere theories.</p>",
        "id": 202125515,
        "sender_full_name": "Dan Doel",
        "timestamp": 1593196296
    },
    {
        "content": "<p>So anyway: yes, if someone says \"cartesian functor\" I'm gonna assume they mean between cartesian categories.</p>",
        "id": 202125589,
        "sender_full_name": "John Baez",
        "timestamp": 1593196328
    },
    {
        "content": "<p>To be honest, I've never heard it used any other way.</p>",
        "id": 202125671,
        "sender_full_name": "John Baez",
        "timestamp": 1593196378
    },
    {
        "content": "<p>Right, I wouldn't expect it.</p>",
        "id": 202125752,
        "sender_full_name": "Dan Doel",
        "timestamp": 1593196422
    },
    {
        "content": "<p>I think people usually say things like \"preserves finite products that exist\" if not all finite products exist, too. But I suppose someone might not do that (though it would be poor communication).</p>",
        "id": 202125882,
        "sender_full_name": "Dan Doel",
        "timestamp": 1593196478
    },
    {
        "content": "<p>Note however that some people use \"cartesian functor\" to mean a functor which preserves all finite limits. Personally, I rarely encounter either usage.</p>",
        "id": 202127153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593197179
    },
    {
        "content": "<p>After you say \"finite-product-preserving functor\" 10 times in a paper you start wanting to say \"cartesian functor\" instead, so I think Christian and I did that in our paper on enriched Lawvere theories.  Of course we defined this term.</p>",
        "id": 202127555,
        "sender_full_name": "John Baez",
        "timestamp": 1593197405
    },
    {
        "content": "<p>Johnstone does a reasonable job in the Elephant of pushing through the tension between \"cartesian functor\" (which he defines to mean functor preserving finite limits) and \"cartesian/cartesian-closed categories\" (where cartesian refers just to finite products).</p>",
        "id": 202133852,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1593200680
    },
    {
        "content": "<p>There's another perfectly standard term for \"preserving finite limits\", namely \"right exact\", so I see no need to sully \"cartesian\" with this extra meaning.   And if \"right exact\" is too long, there's even a standard abbreviation, namely \"rex\".</p>",
        "id": 202134245,
        "sender_full_name": "John Baez",
        "timestamp": 1593200925
    },
    {
        "content": "<p>In my paper with Kenny Courser on structured cospans, we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">R</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Rex}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">R</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">x</span></span></span></span></span> to mean the category of categories with finite limits and right exact functors.</p>",
        "id": 202134326,
        "sender_full_name": "John Baez",
        "timestamp": 1593200972
    },
    {
        "content": "<p>Of course this leads to lots of fun dinosaur jokes too.</p>",
        "id": 202134426,
        "sender_full_name": "John Baez",
        "timestamp": 1593201007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Product-preserving.20Functor/near/202134426\">said</a>:</p>\n<blockquote>\n<p>Of course this leads to lots of fun dinosaur jokes too.</p>\n</blockquote>\n<p>Surely the leading motivation for describing finitely complete structures.</p>",
        "id": 202134575,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1593201081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Product-preserving.20Functor/near/202134245\">said</a>:</p>\n<blockquote>\n<p>There's another perfectly standard term for \"preserving finite limits\", namely \"right exact\"</p>\n</blockquote>\n<p>How did I make it this far and not know this?!? I thought exact functors were something mysterious from algebraic topology</p>",
        "id": 202134958,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1593201272
    },
    {
        "content": "<p>They are - and so are \"categories\".</p>",
        "id": 202135011,
        "sender_full_name": "John Baez",
        "timestamp": 1593201302
    },
    {
        "content": "<p>Left exact = preserving finite colimits<br>\nRight exact = preserving finite limits<br>\nExact = preserving finite limits and colimits</p>",
        "id": 202135069,
        "sender_full_name": "John Baez",
        "timestamp": 1593201340
    },
    {
        "content": "<p>An exact functor between <em>abelian</em> categories is also equivalently one that preserves \"direct sums\" and \"short exact sequences\". That's probably more like how you saw defined.  But that's just an obscurantist approach.</p>",
        "id": 202135198,
        "sender_full_name": "John Baez",
        "timestamp": 1593201403
    },
    {
        "content": "<p>This is perfect! That's what I ended up implementing. Coming soon to your favourite agda-categories library near you. </p>\n<p>But wow, in everything I read, no one, I mean <strong>no one</strong> admitted that 'finite-product preserving' and 'cartesian' were the least bit related. [Including the nLab BTW.]</p>",
        "id": 202136575,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1593202061
    },
    {
        "content": "<p>Weird.</p>",
        "id": 202136713,
        "sender_full_name": "John Baez",
        "timestamp": 1593202139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Product-preserving.20Functor/near/202136575\">said</a>:</p>\n<blockquote>\n<p>This is perfect! That's what I ended up implementing. Coming soon to your favourite agda-categories library near you. </p>\n<p>But wow, in everything I read, no one, I mean <strong>no one</strong> admitted that 'finite-product preserving' and 'cartesian' were the least bit related. [Including the nLab BTW.]</p>\n</blockquote>\n<p>This is the <a href=\"https://ncatlab.org/nlab/show/cartesian+functor\">second bullet point</a> on the nLab page for \"cartesian functor\".</p>",
        "id": 202136906,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1593202267
    },
    {
        "content": "<p>Thanks!  Unlike <a href=\"https://ncatlab.org/nlab/show/product-preserving+functor\">https://ncatlab.org/nlab/show/product-preserving+functor</a>. Or <a href=\"https://ncatlab.org/nlab/show/categories+with+finite+products+are+cosifted\">https://ncatlab.org/nlab/show/categories+with+finite+products+are+cosifted</a>. Or the page on Lawvere theories.</p>",
        "id": 202137267,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1593202487
    },
    {
        "content": "<p>They should be updated :)</p>",
        "id": 202137390,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1593202551
    },
    {
        "content": "<p>Do it!</p>",
        "id": 202139613,
        "sender_full_name": "John Baez",
        "timestamp": 1593203798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Product-preserving.20Functor/near/202135069\">said</a>:</p>\n<blockquote>\n<p>Left exact = preserving finite colimits<br>\nRight exact = preserving finite limits<br>\nExact = preserving finite limits and colimits</p>\n</blockquote>\n<p>I think you have it backwards there.</p>",
        "id": 202146825,
        "sender_full_name": "Paolo Capriotti",
        "timestamp": 1593208333
    },
    {
        "content": "<p>This is why you should never name anything \"left/right X\"...</p>",
        "id": 202154559,
        "sender_full_name": "Rune Haugseng",
        "timestamp": 1593213660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277887\">Rune Haugseng</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/Product-preserving.20Functor/near/202154559\">said</a>:</p>\n<blockquote>\n<p>This is why you should never name anything \"left/right X\"...</p>\n</blockquote>\n<p>You can either ask for the preservations or left/right exact sequences (in the abelian case at least) or limits/colimits; so you will run into the same problem because there are just two dual notions.</p>",
        "id": 202163214,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1593224887
    },
    {
        "content": "<p>Yes, I said it backwards.  I have about a 51% chance of saying these things correctly in casual conversation, but when I get serious I can always figure it out.</p>\n<p>It's annoying that colimits are left adjoints and \"left exact\" means preserving finite <em>limits</em>.</p>",
        "id": 202169621,
        "sender_full_name": "John Baez",
        "timestamp": 1593236508
    },
    {
        "content": "<p>However, it's sorta cute that finite limits theories are so connected to syntax, which is sort of \"lexical\".</p>",
        "id": 202169725,
        "sender_full_name": "John Baez",
        "timestamp": 1593236649
    },
    {
        "content": "<p>One of my least favourite examples is how left hom-objects (in a monoidal category) are right Kan lifts.</p>",
        "id": 202187870,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1593267213
    },
    {
        "content": "<p>And right hom-objects are right Kan extensions.</p>",
        "id": 202187937,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1593267277
    }
]