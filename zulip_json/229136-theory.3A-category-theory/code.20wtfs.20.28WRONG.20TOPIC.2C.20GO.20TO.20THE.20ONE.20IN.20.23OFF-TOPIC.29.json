[
    {
        "content": "<p>oh yeah, mike's \\parr failing to render reminds me that i had to resort to putting a unicode â…‹ in one of my messages</p>",
        "id": 192400221,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585666427
    },
    {
        "content": "<p>is there any way to add cmll to the latex environment here?</p>",
        "id": 192400303,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585666447
    },
    {
        "content": "<p>oh sheesh i guess probably not <a href=\"https://github.com/zulip/zulip/blob/cfa62700809584003468a982605ef724204a5f21/zerver/lib/tex.py\" title=\"https://github.com/zulip/zulip/blob/cfa62700809584003468a982605ef724204a5f21/zerver/lib/tex.py\">https://github.com/zulip/zulip/blob/cfa62700809584003468a982605ef724204a5f21/zerver/lib/tex.py</a></p>",
        "id": 192401230,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585666883
    },
    {
        "content": "<p>maybe i'll open an issue on the github...</p>",
        "id": 192401263,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585666898
    },
    {
        "content": "<p>...AAAAAAAAAAAAAA <a href=\"https://github.com/zulip/zulip/blob/243d8ffc5154ac7d52697706c9c6ff3f19a7cc53/zerver/lib/bugdown/fenced_code.py#L366\" title=\"https://github.com/zulip/zulip/blob/243d8ffc5154ac7d52697706c9c6ff3f19a7cc53/zerver/lib/bugdown/fenced_code.py#L366\">https://github.com/zulip/zulip/blob/243d8ffc5154ac7d52697706c9c6ff3f19a7cc53/zerver/lib/bugdown/fenced_code.py#L366</a></p>",
        "id": 192401412,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585666959
    },
    {
        "content": "<p>what are they DOING <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 192401426,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585666965
    },
    {
        "content": "<p>why is it legal, in 2020, to write web apps used by tons of people, while still believing that html is a string</p>",
        "id": 192401762,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585667137
    },
    {
        "content": "<p>That's not even the worst offense in that file</p>",
        "id": 192402404,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585667415
    },
    {
        "content": "<p>There's no emoji for Zalgo, have to resort to Cthulhu instead <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 192402419,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1585667421
    },
    {
        "content": "<p>this is maybe continued off-topic but i kinda want to mention this slightly somewhere:</p>",
        "id": 192404107,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668042
    },
    {
        "content": "<p>one of the like invited/featured talks at POPL '20 was about secure programming languages</p>",
        "id": 192404306,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668121
    },
    {
        "content": "<p>and half or more of the talk was just talking about what existing languages do and stuff</p>",
        "id": 192404429,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668151
    },
    {
        "content": "<p>and half of <em>that</em> was just misinformed or dangerous!</p>",
        "id": 192404458,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668163
    },
    {
        "content": "<p>like it described PHP as \"having language support for sanitization\" and hence that being a secure language feature <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 192404514,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668184
    },
    {
        "content": "<p>or something along those lines</p>",
        "id": 192404519,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668187
    },
    {
        "content": "<p>and it brought up ruby's taint system, despite the fact that afaik nobody ever uses that</p>",
        "id": 192404549,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668200
    },
    {
        "content": "<p>/offtopic</p>",
        "id": 192404622,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668234
    },
    {
        "content": "<p>actually no one more thing:</p>",
        "id": 192404706,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668260
    },
    {
        "content": "<p>never even mentioned templating <em>once</em></p>",
        "id": 192404717,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668265
    },
    {
        "content": "<p>iirc</p>",
        "id": 192404744,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668276
    },
    {
        "content": "<p>Let's take this to <a class=\"stream\" data-stream-id=\"229451\" href=\"/#narrow/stream/229451-off-topic\">#off-topic</a> ?</p>",
        "id": 192404854,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585668328
    },
    {
        "content": "<p>ok can i now move this topic to another stream, or</p>",
        "id": 192405230,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668475
    },
    {
        "content": "<p>I thought that was impossible?</p>",
        "id": 192405342,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585668515
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 192405366,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668524
    },
    {
        "content": "<p>well, better it clutters the ct stream than it clutters the ct stream &amp; the bi heyting algebra topic, i suppose</p>",
        "id": 192405443,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668564
    },
    {
        "content": "<p>Yeah</p>",
        "id": 192405498,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585668591
    },
    {
        "content": "<p>Anyways, have I said that <br>\nAHHHHHHHH</p>",
        "id": 192405557,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585668603
    },
    {
        "content": "<p>All  of this vaguely reminds me of the Perl talk</p>",
        "id": 192405718,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585668676
    },
    {
        "content": "<p>let's actually move this to <a class=\"stream\" data-stream-id=\"229451\" href=\"/#narrow/stream/229451-off-topic\">#off-topic</a> though</p>",
        "id": 192405754,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668693
    },
    {
        "content": "<p>i'll open a new topic there</p>",
        "id": 192405766,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585668698
    },
    {
        "content": "<p>Ok</p>",
        "id": 192405776,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585668702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192404458\" title=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192404458\">said</a>:</p>\n<blockquote>\n<p>and half of <em>that</em> was just misinformed or dangerous!</p>\n</blockquote>\n<p>Huh, really? Lemme get my hands on that presentation and get back to you. Being a (practical) security/formal guy in-betweener I have a feeling this presentation will trigger me. </p>\n<p>Also, what's up with that zulip code? Why do the devs ignore so many layers of abstraction?</p>",
        "id": 192424719,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585676797
    },
    {
        "content": "<p>You'd almost think Zulip was a commercial product...</p>",
        "id": 192425261,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585677005
    },
    {
        "content": "<p>Believe it or not it's the commercial, closed-source software that suffer the most in terms of bad code.</p>",
        "id": 192425817,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585677245
    },
    {
        "content": "<p>That's essentially what I was alluding to :P</p>",
        "id": 192425986,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585677335
    },
    {
        "content": "<p>Gotcha my man! You see zulip is a commercial product so it was hard to tell if the sarcasm was directed to \"Zulip\" or to \"commercial products\".</p>",
        "id": 192426361,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585677489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275900\">Stelios Tsampas</span> <a href=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192424719\" title=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192424719\">said</a>:</p>\n<blockquote>\n<p>Huh, really? Lemme get my hands on that presentation and get back to you. Being a (practical) security/formal guy in-betweener I have a feeling this presentation will trigger me. </p>\n</blockquote>\n<p>can you please not use \"trigger\" flippantly :\\</p>",
        "id": 192426382,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585677498
    },
    {
        "content": "<p>Wait, Zulip is commercial? I was not aware of that</p>",
        "id": 192426408,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585677514
    },
    {
        "content": "<p>Lemme google \"flippantly\" first.</p>",
        "id": 192426418,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585677521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275922\">Ben Steffan</span> <a href=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192426408\" title=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192426408\">said</a>:</p>\n<blockquote>\n<p>Wait, Zulip is commercial? I was not aware of that</p>\n</blockquote>\n<p>Yes, they do offer commercial services.</p>",
        "id": 192426492,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585677565
    },
    {
        "content": "<p>Ah well, I guess it makes sense then</p>",
        "id": 192426537,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585677584
    },
    {
        "content": "<p>anyway here's the talk <a href=\"https://www.youtube.com/watch?v=dhoP-dyIr54\" title=\"https://www.youtube.com/watch?v=dhoP-dyIr54\">https://www.youtube.com/watch?v=dhoP-dyIr54</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"dhoP-dyIr54\" href=\"https://www.youtube.com/watch?v=dhoP-dyIr54\" title=\"https://www.youtube.com/watch?v=dhoP-dyIr54\"><img src=\"https://i.ytimg.com/vi/dhoP-dyIr54/default.jpg\"></a></div>",
        "id": 192426538,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585677584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192426382\" title=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192426382\">said</a>:</p>\n<blockquote>\n<p>can you please not use \"trigger\" flippantly :\\</p>\n</blockquote>\n<p>Hahah, sure! I deserved that :D.</p>",
        "id": 192426729,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585677663
    },
    {
        "content": "<p>Okay, two minutes into the talk and I'm already annoyed, cool</p>",
        "id": 192426880,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585677724
    },
    {
        "content": "<p>oh? i didnt think there was too much objectionable that early</p>",
        "id": 192428006,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678244
    },
    {
        "content": "<p>it's nothing too new at that point but not particularly <em>annoying</em></p>",
        "id": 192428034,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678257
    },
    {
        "content": "<p>...I forgot what I was annoyed about</p>",
        "id": 192428251,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678354
    },
    {
        "content": "<p>i guess it does get a bit \"cmon, just get to the point\" when shes like 10 minutes in and going over stuff that's super boilerplate still</p>",
        "id": 192428435,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678434
    },
    {
        "content": "<p>Yeah, that's definitely annoying</p>",
        "id": 192428500,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678451
    },
    {
        "content": "<p>the presentation seriously felt to me like</p>",
        "id": 192428546,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678477
    },
    {
        "content": "<p>\"ok web dev 103 class, time to learn about security\"</p>",
        "id": 192428590,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678497
    },
    {
        "content": "<p>for a lot of it</p>",
        "id": 192428600,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678501
    },
    {
        "content": "<p>\\&gt;.&gt;</p>",
        "id": 192428603,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678502
    },
    {
        "content": "<p>Ah, I think I was already annoyed about the motivation at the start. Like, the numbers she presented just don't seem that high to me?</p>",
        "id": 192428612,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678506
    },
    {
        "content": "<p>i mean, wasnt she talking about holes in pieces of software, not just particular intrusions</p>",
        "id": 192428705,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678548
    },
    {
        "content": "<p>5 new exploits per day, over _all_ the software that is registered with that particular exploit database? That doesn't seem so much tbh</p>",
        "id": 192428713,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678556
    },
    {
        "content": "<p>actually yeah taht does sound kinda low</p>",
        "id": 192428773,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678571
    },
    {
        "content": "<p>Perhaps my sense of scale if off here</p>",
        "id": 192428790,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678578
    },
    {
        "content": "<p>btw on that topic <a href=\"https://fishinabarrel.github.io/\" title=\"https://fishinabarrel.github.io/\">https://fishinabarrel.github.io/</a></p>",
        "id": 192428813,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678595
    },
    {
        "content": "<p>s t o p u s i n g C</p>",
        "id": 192428926,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678654
    },
    {
        "content": "<p>I guess I'm also a bit sour about the fact that this is essentially a corporate presentation where every slide has an oracle logo on it</p>",
        "id": 192428969,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678682
    },
    {
        "content": "<p>lol</p>",
        "id": 192429025,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678694
    },
    {
        "content": "<p>welcome to conference land ðŸ¤ª</p>",
        "id": 192429044,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678708
    },
    {
        "content": "<p>???</p>",
        "id": 192429084,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678723
    },
    {
        "content": "<p>That's not the norm for any software conference I know about</p>",
        "id": 192429105,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678737
    },
    {
        "content": "<p>well ok maybe not on the talks</p>",
        "id": 192429123,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678745
    },
    {
        "content": "<p>there were for sure logos on the bags n stuff tho</p>",
        "id": 192429145,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678754
    },
    {
        "content": "<p>I mean sure lots of people give talks on behalf of company X, but usually they say it once in the beginning and that's it?</p>",
        "id": 192429188,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678776
    },
    {
        "content": "<p>yeah</p>",
        "id": 192429203,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678780
    },
    {
        "content": "<p>Ah yeah, I guess that's normal</p>",
        "id": 192429214,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678785
    },
    {
        "content": "<p>fair enough, that's a different thing</p>",
        "id": 192429215,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678785
    },
    {
        "content": "<p>welcome to PL, your options are:</p>\n<ul>\n<li>try to get a professor position lol</li>\n<li>defense contractor</li>\n<li>cryptocurrency</li>\n<li>finance</li>\n<li>surveillance capitalism</li>\n</ul>",
        "id": 192429417,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678870
    },
    {
        "content": "<p>Love how PHP gets the bonus of \"Injection prevention\" as a library feature but the other languages don't?</p>",
        "id": 192429514,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678915
    },
    {
        "content": "<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 192429582,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678932
    },
    {
        "content": "<p>I'm sure that Java also has that as a library feature but ok</p>",
        "id": 192429591,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678935
    },
    {
        "content": "<p>...and all the other languages too probs</p>",
        "id": 192429609,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585678945
    },
    {
        "content": "<p>not to mention that escaping things <strong><em>is the wrong approach</em></strong></p>",
        "id": 192429619,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678950
    },
    {
        "content": "<p>\"sanitization\" is the wrong way to think about things</p>",
        "id": 192429679,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585678981
    },
    {
        "content": "<p><em>first class support</em> my favourite buzzword!</p>",
        "id": 192429720,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679000
    },
    {
        "content": "<p>cmon now first-class support can be a real thing</p>",
        "id": 192429750,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679017
    },
    {
        "content": "<p>anyway though the fact that PHP encourages you to just <em>pass query strings and interpolate your parameters in</em></p>",
        "id": 192429835,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679050
    },
    {
        "content": "<p>first class support has no defined meaning in my book</p>",
        "id": 192429844,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679054
    },
    {
        "content": "<p>when every time ive ever used sql from another language, the interface has let you pass the parameters as separate arguments and it does the interpolation <em>for</em> you</p>",
        "id": 192429870,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679071
    },
    {
        "content": "<p>means that php is <strong><em>more dangerous</em></strong></p>",
        "id": 192429883,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679079
    },
    {
        "content": "<p>because it puts the escaping obligation on <strong><em>you</em></strong></p>",
        "id": 192429889,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679085
    },
    {
        "content": "<p>aaaaaaaaaaa</p>",
        "id": 192429906,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679095
    },
    {
        "content": "<p>anyway here's a palate cleanser <a href=\"https://www.youtube.com/watch?v=BDnbxBmwNyQ\" title=\"https://www.youtube.com/watch?v=BDnbxBmwNyQ\">https://www.youtube.com/watch?v=BDnbxBmwNyQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"BDnbxBmwNyQ\" href=\"https://www.youtube.com/watch?v=BDnbxBmwNyQ\" title=\"https://www.youtube.com/watch?v=BDnbxBmwNyQ\"><img src=\"https://i.ytimg.com/vi/BDnbxBmwNyQ/default.jpg\"></a></div>",
        "id": 192430337,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679292
    },
    {
        "content": "<p>...probably incomprehensible if you don't have a background in formal verification but</p>",
        "id": 192430394,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679321
    },
    {
        "content": "<p>one of the talks i enjoyed the most that i went to ^_^</p>",
        "id": 192430413,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679331
    },
    {
        "content": "<p>Love how the implication is that Java is slow mainly because of the gc</p>",
        "id": 192430548,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679399
    },
    {
        "content": "<p>is java even very slow</p>",
        "id": 192430784,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679480
    },
    {
        "content": "<p>It's fairly slow, from my perspective</p>",
        "id": 192430810,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679496
    },
    {
        "content": "<p>But my perspective is also \"compared to C++\", so</p>",
        "id": 192430831,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679507
    },
    {
        "content": "<p>really though i was under the impression that gc pauses <em>were</em> the primary limiting factor in most applications where java wouldnt be applicable</p>",
        "id": 192430836,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679511
    },
    {
        "content": "<p>ewww</p>",
        "id": 192430845,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679515
    },
    {
        "content": "<p>stop using c++</p>",
        "id": 192430858,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679520
    },
    {
        "content": "<p>I'm not using C++ lol</p>",
        "id": 192430906,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679529
    },
    {
        "content": "<p>then why is your perspective compared to it</p>",
        "id": 192430954,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679544
    },
    {
        "content": "<p>Because I used it for about 6 years</p>",
        "id": 192430985,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679563
    },
    {
        "content": "<p>It's by far the language I know the best, too</p>",
        "id": 192431001,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679573
    },
    {
        "content": "<p>im so sorry</p>",
        "id": 192431007,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679579
    },
    {
        "content": "<p>/shrug</p>",
        "id": 192431025,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679591
    },
    {
        "content": "<p>Well the upside is that it definitely taught me that software development is fucked</p>",
        "id": 192431085,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679621
    },
    {
        "content": "<p>haha yes</p>",
        "id": 192431102,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679627
    },
    {
        "content": "<p>...c++ is the only popular mainstream language ive deliberately avoided learning</p>",
        "id": 192431115,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679634
    },
    {
        "content": "<p>(php probably deserves it even more but i was younger and dumber when i learned php)</p>",
        "id": 192431220,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679666
    },
    {
        "content": "<p>Sad actually because you could have a lot of fun with C++</p>",
        "id": 192431282,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679696
    },
    {
        "content": "<p>It's probably the most cursed language that exists</p>",
        "id": 192431353,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679731
    },
    {
        "content": "<p>/me glances at malbolge</p>",
        "id": 192431364,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679740
    },
    {
        "content": "<p>lol malbolge is cute</p>",
        "id": 192431378,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679749
    },
    {
        "content": "<p>malbolge is what you get if you really try to be evil</p>",
        "id": 192431397,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679760
    },
    {
        "content": "<p>u know what ur right</p>",
        "id": 192431464,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679775
    },
    {
        "content": "<p>C++ is what you get when you get a bunch of people together and try to make something good</p>",
        "id": 192431466,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679776
    },
    {
        "content": "<p>(and also base it off of C)</p>",
        "id": 192431492,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679790
    },
    {
        "content": "<p>nah when i wanna have a lot of fun with a cursed language i just write some ruby</p>",
        "id": 192431513,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679801
    },
    {
        "content": "<p>or maybe C</p>",
        "id": 192431534,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679812
    },
    {
        "content": "<p>yikes</p>",
        "id": 192431545,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585679818
    },
    {
        "content": "<p>between ruby and C i think i ahve enough cursedness in my life</p>",
        "id": 192431546,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679818
    },
    {
        "content": "<p>i do not need those depths that c++ has</p>",
        "id": 192431562,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679824
    },
    {
        "content": "<p>coq gives me enough yaks to shave</p>",
        "id": 192431671,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585679882
    },
    {
        "content": "<p>actually fuck i wonder how cursed coq is compared to c++</p>",
        "id": 192432008,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680049
    },
    {
        "content": "<p>Pretty sure it's like a little child</p>",
        "id": 192432035,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680065
    },
    {
        "content": "<p>i mean i doubt it beats it but</p>",
        "id": 192432050,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680072
    },
    {
        "content": "<p>Like, C++ is seriously fucked</p>",
        "id": 192432053,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680073
    },
    {
        "content": "<p>it's pretty fucking cursed</p>",
        "id": 192432058,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680075
    },
    {
        "content": "<p>i just wonder whether it's, idk, to the 50% point</p>",
        "id": 192432076,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680088
    },
    {
        "content": "<p>dont worry, i have heard Things about c++</p>",
        "id": 192432118,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680111
    },
    {
        "content": "<p>i have a pretty decent sense of how cursed it is, i think</p>",
        "id": 192432190,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680129
    },
    {
        "content": "<p>here, look, do you know haskell?</p>",
        "id": 192432221,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680145
    },
    {
        "content": "<p>I dabble in Haskell</p>",
        "id": 192432420,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680243
    },
    {
        "content": "<p>ok, so you know about typeclasses</p>",
        "id": 192432441,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680251
    },
    {
        "content": "<p>coq has \"typeclasses\"</p>",
        "id": 192432449,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680255
    },
    {
        "content": "<p>Yep</p>",
        "id": 192432451,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680256
    },
    {
        "content": "<p>the way they work is</p>",
        "id": 192432472,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680268
    },
    {
        "content": "<p>OK, I am half-way in the presentation and indeed, it's been very, very simple so far. Two things in mind as to why this kind of content has made it in POPL: 1. Many of the more senior members of the audience should not know about that stuff and 2. Oracle is a silver sponsor.</p>",
        "id": 192432473,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585680269
    },
    {
        "content": "<p>uh</p>",
        "id": 192432476,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680271
    },
    {
        "content": "<p>so ordinarily coq has an implicit arguments mechanism for arguments like types, where if u mark an argument as implicit, instead of actually supplying it when you apply the function, it gets inserted implicitly by figuring out what it would have to be for the term to be well-typed</p>",
        "id": 192432580,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680343
    },
    {
        "content": "<p>for example</p>",
        "id": 192432581,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">.</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">id&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 192432665,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680373
    },
    {
        "content": "<p>the curlies indicate an implicit argument</p>",
        "id": 192432676,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680380
    },
    {
        "content": "<p>you'd write <code>id nat 3</code> or <code>id' 3</code></p>",
        "id": 192432692,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680387
    },
    {
        "content": "<p>the latter gets expanded to an application of <code>id'</code> to both <code>nat</code> and <code>3</code>, which is inferrable because the first arg has to be the type of the 2nd arg</p>",
        "id": 192432743,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680413
    },
    {
        "content": "<p>this makes polymorphic functions usable</p>",
        "id": 192432768,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680426
    },
    {
        "content": "<p>now:</p>",
        "id": 192432774,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680429
    },
    {
        "content": "<p>the way typeclasses work is</p>",
        "id": 192432780,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680435
    },
    {
        "content": "<p>if a particular qualified identifier is registered as \"being a typeclass\", then you can mark arguments whose type is an application of that identifier as being implicit <em>and inferred by the typeclass mechanism</em></p>",
        "id": 192432957,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680515
    },
    {
        "content": "<p>Apart from that, and I really have to try to \"pick\" the lessons from this presentation so far as it not rich in insights, this is a very good example on the gulf between academic \"security\" and security in the industry. Having worked in exploit. dev./vuln. research labs I can tell you, cognitive load is a thing. And no, people can't just stop using C and switch to dependently typed languages.</p>",
        "id": 192432976,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585680527
    },
    {
        "content": "<p>...even with type inference :/.</p>",
        "id": 192433016,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585680546
    },
    {
        "content": "<p>and the typeclass mechanism's inference? well, it's actually one of coq's proof search systems, repurposed</p>",
        "id": 192433057,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680580
    },
    {
        "content": "<p>coq has this proof search system based on having a \"hint database\" and it can try to prove a goal using the lemmas and other kinds of hint in the database</p>",
        "id": 192433166,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680619
    },
    {
        "content": "<p>and they repurposed it to automatically locate terms to fill in arguments</p>",
        "id": 192433202,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680638
    },
    {
        "content": "<p>(go on, I'll continue later, I'll try not to interrupt the flow).</p>",
        "id": 192433204,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585680639
    },
    {
        "content": "<p>as \"typeclass instance selection\"</p>",
        "id": 192433208,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680642
    },
    {
        "content": "<p>it's insane</p>",
        "id": 192433232,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680654
    },
    {
        "content": "<p>Is it?</p>",
        "id": 192433273,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680682
    },
    {
        "content": "<p>Why?</p>",
        "id": 192433280,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680685
    },
    {
        "content": "<p>well, it's sort of insane</p>",
        "id": 192433304,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680700
    },
    {
        "content": "<p>it's not insane insofar as it's <em>useful</em></p>",
        "id": 192433325,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680708
    },
    {
        "content": "<p>but it's fucking cursed</p>",
        "id": 192433330,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680710
    },
    {
        "content": "<p>like</p>",
        "id": 192433392,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680726
    },
    {
        "content": "<p>you get zero of the guarantees that a system like haskell's normally gives you</p>",
        "id": 192433423,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680745
    },
    {
        "content": "<p>haskell has all this stuff about coherence, where there's supposed to be at most one instance of a given signature</p>",
        "id": 192433473,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680770
    },
    {
        "content": "<p>and superclass constraints being smaller or whatever, so that instance search is decidable</p>",
        "id": 192433505,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680787
    },
    {
        "content": "<p>and you can mangle those guarantees with various ghc extensions if you want, but</p>",
        "id": 192433516,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680800
    },
    {
        "content": "<p>in coq, none of that is there to begin with</p>",
        "id": 192433527,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680805
    },
    {
        "content": "<p>you can have 10 different instances of <code>Ord nat</code> and which one gets picked depends on priority annotations or what order they were registered</p>",
        "id": 192433636,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680862
    },
    {
        "content": "<p>Oh, ok</p>",
        "id": 192433649,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680871
    },
    {
        "content": "<p>That's... horrible</p>",
        "id": 192433656,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680876
    },
    {
        "content": "<p>and typeclass instances are just proof search hints</p>",
        "id": 192433674,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680887
    },
    {
        "content": "<p>so if you fuck up, you can totally make a system of instances which leads to nonterminating proof search</p>",
        "id": 192433712,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680905
    },
    {
        "content": "<p>and trying to typecheck your term hangs because filling in the instance never finishes</p>",
        "id": 192433751,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192433712\" title=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192433712\">said</a>:</p>\n<blockquote>\n<p>so if you fuck up, you can totally make a system of instances which leads to nonterminating proof search</p>\n</blockquote>\n<p>Hah! Serves them right!</p>",
        "id": 192433759,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585680927
    },
    {
        "content": "<p>Ah, I mean, if that's the worst that can happen</p>",
        "id": 192433770,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680932
    },
    {
        "content": "<p>The metaprogramming mechanism of C++ is inherentely Turing complete, and type computations not terminating is, like, Monday</p>",
        "id": 192433847,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680963
    },
    {
        "content": "<p>oh sure</p>",
        "id": 192433874,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585680972
    },
    {
        "content": "<p>Okay, not strictly true because most compilers actually limit the depth of type level computations</p>",
        "id": 192433890,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585680981
    },
    {
        "content": "<p>other cursed things: you have full access to the instances hint database as an ordinary hint database, and coq's proof search tool supports hints of various kinds besides just lemmas for application</p>",
        "id": 192433954,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681018
    },
    {
        "content": "<p>so you can just</p>",
        "id": 192433969,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681025
    },
    {
        "content": "<p>extend the instance selection mechanism</p>",
        "id": 192434000,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681040
    },
    {
        "content": "<p>there's a thing called <code>Hint Extern</code> which lets you add an arbitrary tactic to apply to the goal if it matches a certain condition</p>",
        "id": 192434038,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681062
    },
    {
        "content": "<p>so you can add a <code>Hint Extern</code> to the instances database</p>",
        "id": 192434054,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681072
    },
    {
        "content": "<p>and then when coq tries to search for an instance for a particular class, it'll just, invoke your arbitrary tactic</p>",
        "id": 192434129,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681092
    },
    {
        "content": "<p>which can be any, yes, turing complete computation you like</p>",
        "id": 192434144,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681103
    },
    {
        "content": "<p>in ltac, the tactic language, which is itself absurdly cursed</p>",
        "id": 192434180,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681122
    },
    {
        "content": "<p>bbl</p>",
        "id": 192434236,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681154
    },
    {
        "content": "<p>oh god dammit this has been the topic in <a class=\"stream\" data-stream-id=\"229136\" href=\"/#narrow/stream/229136-category-theory\">#category theory</a> not the one in <a class=\"stream\" data-stream-id=\"229451\" href=\"/#narrow/stream/229451-off-topic\">#off-topic</a> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 192434285,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585681181
    },
    {
        "content": "<p>whoops</p>",
        "id": 192434326,
        "sender_full_name": "Ben Steffan",
        "timestamp": 1585681199
    },
    {
        "content": "<p>OK, I finished the presentation and here's my two cents.</p>\n<p>It is easy to bash this presentation. How can you present annotations or sanitization libraries as \"secure\" in front of that audience, people that dabble heavily in dependently typed programming and whatnot, and keep a straight face while doing so. Or show elementary content that's just not what you'd expect in POPL. I don't mean to insult the speaker btw: she is definitely skilled in the field she's in, which is more of the applied type, neither  theoretical nor hands-on exploitation.</p>\n<p>This presentation is a textbook example of the divide between security industry/research in applied security and security from the TCS/type-theoretic/functional perspective. Functional languages are undoubtedly intrinsically  more secure, but the old languages cannot go away. You can't give a crash-course in functional programming and expect people to be productive: functional programming is significantly harder to get into, not least because most beginner PL courses focuse on imperative languages. Also, progress in security is done slowly, causes as few perturbations as possible (otherwise it would seriously hurt productivity), it is heavily guided by the so-called \"security arms race\" and since there's always pressure for short-term gratification, most solutions are heuristics.</p>",
        "id": 192440656,
        "sender_full_name": "Stelios Tsampas",
        "timestamp": 1585684198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275900\">@Stelios Tsampas</span> i have a reply, but im gonna make it in the topic over in <a class=\"stream\" data-stream-id=\"229451\" href=\"/#narrow/stream/229451-off-topic\">#off-topic</a> , so u shd go check there</p>",
        "id": 192443841,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585685831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276072\">sarahzrf</span> <a href=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192431513\" title=\"#narrow/stream/229136-category-theory/topic/code.20wtfs/near/192431513\">said</a>:</p>\n<blockquote>\n<p>nah when i wanna have a lot of fun with a cursed language i just write some ruby</p>\n</blockquote>\n<p>what's cursed about ruby? i was a big ruby fan a few years back (but have never really revisited it with a \"formal\" eye)</p>",
        "id": 192477362,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1585708017
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># will this print 3 or 4?</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span>\n  <span class=\"mi\">3</span>\n<span class=\"k\">end</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"nb\">p</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 192477927,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585708930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># explain what the following program outputs.</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n  <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">p</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"p\">)</span>\n<span class=\"nb\">p</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 192478001,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585709044
    },
    {
        "content": "<p>first things to quickly occur to me, i could probably keep going at a steady pace for a while</p>",
        "id": 192478029,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585709095
    },
    {
        "content": "<p>i <em>enjoy</em> ruby, but in the same way that i enjoy, like, junk food</p>",
        "id": 192478098,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585709174
    },
    {
        "content": "<p>god DAMMIT this is the topic in <a class=\"stream\" data-stream-id=\"229136\" href=\"/#narrow/stream/229136-category-theory\">#category theory</a> again <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 192478121,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585709250
    },
    {
        "content": "<p>is there some way to lock it</p>",
        "id": 192478126,
        "sender_full_name": "sarahzrf",
        "timestamp": 1585709256
    }
]