[
    {
        "content": "<p>I've been looking for general formulations of the concept of \"coherence conditions\" which allow us to say, for a given proposed categorical structure, what the \"right\" coherence conditions should be.</p>\n<p>I do feel that I can usually write down the appropriate coherence conditions without trouble, based on my intuition. A good sanity check here is that one can derive an appropriate \"coherence theorem\"; the question is essentially, do we have a fairly general description of what the coherence theorem should state in the case of an arbitrary given structure.</p>\n<p>An example I've been thinking about is a biadjunction between bicategories. The important additional coherence condition here beyond the 1-categorical case is the so called \"Swallowtail identity\". I am not confident I can write down the correct coherence theorem here describing all diagrams that commute in the biadjunction.</p>\n<p>One cannot just say \"all diagrams commute\", of course. A basic example: let C be a category, c be an object and f : c -&gt; c. Then the coherence theorem for a category does not imply that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>f</mi><mo>=</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f\\circ f=f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>. So, not all diagrams commute.</p>\n<p>Perhaps the problem here is linearity, the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> occurs twice on the right. <del>Indeed if we restrict to linear terms in a 1-category, any two <em>linear</em> well-typed terms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>→</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\to b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> seem to be equal, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo>∘</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>∘</mo><mo stretchy=\"false\">(</mo><mi>h</mi><mo>∘</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo>∘</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mo>∘</mo><mi>h</mi><mo stretchy=\"false\">)</mo><mo>∘</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">(f\\circ g)\\circ (h\\circ k) = f\\circ (g\\circ h) \\circ k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>. (assuming that the identity morphism and other constants are nonlinear so we can use them as many times as we want.)</del></p>\n<p>However there are other problems beside linearity. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>:</mo><mi>a</mi><mo>→</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">t:a\\to a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is a monad in a 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> then there are two maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>⋅</mo><msub><mrow><mi mathvariant=\"normal\">id</mi><mo>⁡</mo></mrow><mi>t</mi></msub><mo separator=\"true\">,</mo><msub><mrow><mi mathvariant=\"normal\">id</mi><mo>⁡</mo></mrow><mi>t</mi></msub><mo>⋅</mo><mi>μ</mi><mo>:</mo><msup><mi>t</mi><mn>3</mn></msup><mo>→</mo><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mu\\cdot \\operatorname{id}_t, \\operatorname{id}_t\\cdot \\mu : t^3\\to t^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">id</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">id</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⋅</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> and these do not commute. One only has that all maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>t</mi><mi>k</mi></msup><mo>→</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t^k\\to t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> commute where $k$$ is arbitrary. \"Linearity\" appears here only indirectly in the requirement that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> must occur exactly once on the right hand side of the arrow, but not on the left.</p>\n<p>One trick I thought of to solve this is to treat the 2-category as a virtual double category instead of a 2-category. Then we cannot even state the condition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>⋅</mo><msub><mrow><mi mathvariant=\"normal\">id</mi><mo>⁡</mo></mrow><mi>t</mi></msub><mo>=</mo><msub><mrow><mi mathvariant=\"normal\">id</mi><mo>⁡</mo></mrow><mi>t</mi></msub><mo>⋅</mo><mi>μ</mi><mo>:</mo><msup><mi>t</mi><mn>3</mn></msup><mo>→</mo><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mu\\cdot \\operatorname{id}_t= \\operatorname{id}_t\\cdot \\mu : t^3\\to t^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">id</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">id</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⋅</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> as it is not well typed (all 2-cells in a virtual double category must have a single cell as their codomain.)</p>\n<p>But this trick makes us unable to state well known coherence conditions such as the pentagon identity or triangle identity for monoidal categories and bicategories, and it seems like an unsatisfying answer to the original question to rule out Mac Lane's coherence theorem as an example of coherence.</p>\n<p><del>So, my conclusion here is that, working in some appropriate linear dependent type theory, \"any two terms of the same type should be equal\" gives the right coherence conditions in some cases, but is insufficient in others.</del></p>",
        "id": 435273554,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1713993221
    },
    {
        "content": "<p>in type theory we call coherence conditions \"congruence rules\" <a href=\"https://ncatlab.org/nlab/show/congruence+rule\">https://ncatlab.org/nlab/show/congruence+rule</a> and they often arise when you want all your term formers to respect/be closed under all the other term formers.  Like, you have enough congruence rules when you can actually build a congruence relation out of terms.  There's also the notion of \"logical harmony\" <a href=\"https://en.wikipedia.org/wiki/Logical_harmony\">https://en.wikipedia.org/wiki/Logical_harmony</a></p>",
        "id": 435288444,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1714001670
    },
    {
        "content": "<p>I do not understand what you mean. It's not clear to me how coherence conditions in category theory are equivalent to congruence rules in the link you posted. Do you have a simple example of this correspondence?</p>",
        "id": 435289547,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1714002662
    },
    {
        "content": "<p>I'm trying to answer the question, 'where do coherences such as MacLane's pentagon identity come from'.  IMO, they come from deep analysis of what is being axiomatized.  For example, MacLane's pentagon identity isn't obviously related to the monoid axioms, but it is obviously related to the 'completion' of the monoid axioms into a convergent re-write system (it comes from analyzing 'critical pairs').  Similarly, many coherences come from closing specific equivalence relations on terms under congruence.  Here's a paper describing the former in detail   <a href=\"https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=3a0a21aa1c60381537370967bbc900166bd67ebf\">https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=3a0a21aa1c60381537370967bbc900166bd67ebf</a> .  \"From the viewpoint of term rewriting, what coherence axioms define is a congruence between proofs with respect to which any equational identity possesses a unique equivalence class of equational proofs (i.e. sequence of rewrites from left-hand to right-hand side)\" and \"research on coherence inevitably becomes research on word problems\"</p>",
        "id": 435292741,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1714005103
    },
    {
        "content": "<p>What a nice paper!</p>",
        "id": 435295339,
        "sender_full_name": "Brendan Murphy",
        "timestamp": 1714007321
    },
    {
        "content": "<p>It's incorrect that all linear terms in a category are equal. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>:</mo><mi>c</mi><mo>→</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">f,g : c\\to c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>f</mi><mo mathvariant=\"normal\">≠</mo><mi>f</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">gf\\neq fg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> in general. It would seem that the strongest thing we can say is that all definable functions <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><msub><mi>x</mi><mi>n</mi></msub></mrow></msub><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>×</mo><mo>…</mo><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_{x_0,x_1,\\dots x_n} Hom(x_0,x_1)\\times\\dots Hom(x_{n-1},x_n)\\to Hom(x_0,x_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"minner mtight\">…</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are equal.<br>\nLinearity might be a red herring here as it just so happens that the only functions so definable are linear in each coordinate.</p>",
        "id": 435307729,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1714017561
    },
    {
        "content": "<p>I would say that, in all generality, a statement of \"coherence\" is the statement that a certain object is contractible; usually a \"free\" (or cofibrant, when that makes sense) object.</p>\n<p>Thus it relies on a few choices:</p>\n<ul>\n<li>\n<p>what it means to be contractible — categorically this usually means that we are at least in a category with weak equivalences with a \"point\" object, typically the terminal object so that contractibility is the statement that the unique map to it is a weak equivalence;</p>\n</li>\n<li>\n<p>and, of course, what is the object that we want to be contractible.</p>\n</li>\n</ul>\n<p>Note that in many cases rather than \"this object is contractible\" it will be more natural to phrase coherence as \"this morphism is a weak equivalence\" but the latter can be turned into the former by passing to slice categories, similarly to how every statement that \"a cone is a limit cone\" can be turned into the statement that \"an object is terminal\"</p>",
        "id": 435320494,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714026435
    },
    {
        "content": "<p>The typical situation where we want coherence is when we are replacing \"equality\" by \"coherent equivalence\", in which case we are saying that the map that \"quotients\" the space of witnesses of equivalence down to a single point, which witnesses \"identity\", is contractible.</p>",
        "id": 435320937,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714026685
    },
    {
        "content": "<p>That this is related to convergence in rewrite systems is a consequence of the duality between higher-dim rewriting and homotopy, as studied e.g. in the theory of polygraphs. However \"convergent\" coherence is in general stronger than just coherence, as it asks for contractibility to be witnessed by a \"directed\" homotopy...</p>",
        "id": 435321277,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714026847
    },
    {
        "content": "<p>For example coherence for monoidal categories using only the pentagon &amp; triangle cannot be proved with a convergent higher-dim rewrite system, I think. You need three more cells for that, as there are, iirc, 5 critical pairs in the rewrite system determined by unitors and associators...</p>",
        "id": 435321808,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714027183
    },
    {
        "content": "<p>And indeed this was Mac Lane's original formulation, before Kelly was able to show that 3 of those could be constructed from the rest — but this proof uses essentially the fact that unitors and associators are isomorphisms and does not extend to, e.g. lax monoidal categories.</p>",
        "id": 435321985,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714027290
    },
    {
        "content": "<p>Actually I've changed my mind about one point that I've made: in practice, the fact that coherence statements of the form \"a certain morphism is a weak equivalence\" can be turned into statements of the form \"a certain object is contractible\" is not due to passing to <em>global</em> contractibility in a slice, but rather because being a weak equivalence can often be checked <em>locally</em> by proving that <em>all fibres are contractible</em>.</p>",
        "id": 435324441,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714028505
    },
    {
        "content": "<p>I think this is truer to the case e.g. of monoidal categories, where the statement that <em>the quotient functor from the free monoidal category to the free strict monoidal category on a set of objects</em> is proved by showing that the fibre over each object is a contractible groupoid...</p>",
        "id": 435324790,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714028614
    },
    {
        "content": "<p>A nonempty contractible groupoid furthermore. So an acyclic fibration. Small detail but I've been thinking lately about how this extra condition helps.</p>",
        "id": 435395086,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1714053109
    },
    {
        "content": "<p>For the record, I believe that the statement</p>\n<blockquote>\n<p>In type theory we call coherence conditions \"congruence rules\"</p>\n</blockquote>\n<p>is simply incorrect, if \"congruence rules\" are understood in the sense of the linked nlab page. In my opinion the linked nlab page is a red herring and is irrelevant to the conversation, perhaps a different notion of \"congruence rule\" was meant which does not concern definitional equality in dependent type theory.</p>\n<p>The notion of \"congruence\" that appears in the linked paper is used in the broad sense of a \"congruence relation\" which basically just means \"an equivalence relation compatible with relevant algebraic structure\".</p>",
        "id": 435645230,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1714159117
    },
    {
        "content": "<p>For the case of biadjunctions, the correct statement is that given a map which admits a right adjoint, the space ways of choosing the right adjoint, unit, counit and \"snake\" isomorphisms satistfying the swallowtail identities is contractible. This kind of statement can be made precise and proved. See e.g. <a href=\"https://emilyriehl.github.io/files/adjunctions.pdf\">https://emilyriehl.github.io/files/adjunctions.pdf</a> , <a href=\"https://doi.org/10.32408/compositionality-4-2\">https://doi.org/10.32408/compositionality-4-2</a> , <a href=\"https://arxiv.org/abs/2207.02935\">https://arxiv.org/abs/2207.02935</a></p>",
        "id": 502733164,
        "sender_full_name": "Manuel Araújo",
        "timestamp": 1740825049
    },
    {
        "content": "<p>Thanks, Manuel. I hadn't considered that perspective here and it's helpful.</p>",
        "id": 502820108,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1740889984
    }
]