[
    {
        "content": "<p>Monoidal double categories are pseudomonoids in pseudocategories in Cat, or, alternatively, pseudocategories in pseudomonoids in Cat.<br>\nA proof of this fact is that both are special kinds of degenerate triple categories (having only one 1-cells in one of the loose directions), and their equivalence is induced by exchanging loose directions.<br>\nDoes anyone have a better proof? Or better still, a reference I can cite?</p>",
        "id": 432520849,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712760285
    },
    {
        "content": "<p>(cc'ing <span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span> whom I expect to be able to help)</p>",
        "id": 432521120,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712760338
    },
    {
        "content": "<p>Someday there may be a better proof based on \"commutativity of internalization\".    This principle is well-established for structures definable by finite limits theories, like categories and monoids.   Using this principle, we instantly know that for any category K with finite limits, the category of</p>\n<p>monoids in (categories in K)</p>\n<p>is equivalent to the category of</p>\n<p>categories in (monoids in K)</p>\n<p>We'd really like an equivalence of <em>2-categories</em> here, because there happens to be a <em>2-category</em> of categories in any category with finite limits.   So there is more work to be done even at this level (if it hasn't been done already).</p>\n<p>But anyway, someone should categorify \"commutativity of internalization\" so that it applies to algebraic structures definable by '\"finite limits 2-theories\"', such as pseudocategories and pseudomonoids.</p>",
        "id": 432523755,
        "sender_full_name": "John Baez",
        "timestamp": 1712760966
    },
    {
        "content": "<p>I'm putting '\"finite limits 2-theories\"' in quotes because it needs to be clarified a bit: there are several things one might mean, and one wants to pick the right one(s) to handle the examples that come up.</p>",
        "id": 432524421,
        "sender_full_name": "John Baez",
        "timestamp": 1712761152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432520849\">said</a>:</p>\n<blockquote>\n<p>Monoidal double categories are pseudomonoids in pseudocategories in Cat, or, alternatively, pseudocategories in pseudomonoids in Cat.<br>\nA proof of this fact is that both are special kinds of degenerate triple categories (having only one 1-cells in one of the loose directions), and their equivalence is induced by exchanging loose directions.<br>\nDoes anyone have a better proof? Or better still, a reference I can cite?</p>\n</blockquote>\n<p>This isn't quite true – you need to be careful about strictness (as pointed out in Remark 2.12 of Shulman's <a href=\"https://arxiv.org/abs/1004.0993\">Constructing symmetric monoidal bicategories</a>). A monoidal double category is a pseudomonoid in the 2-category of double categories and pseudo double functors. Equivalently, it is a pseudocategory in the 2-category of monoidal categories and pseudo monoidal functors <em>such that</em> the source and target morphisms are strict monoidal.</p>",
        "id": 432539457,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712765567
    },
    {
        "content": "<blockquote>\n<p>Or better still, a reference I can cite?</p>\n</blockquote>\n<p>John Bourke, Joanna Ko and I have been working on a paper on this topic; we have a symmetry result for a class of two-dimensional limit sketches, which includes monoidal double categories as an example. (John gave a talk about it at the <a href=\"https://www.math.muni.cz/~bourkej/BAS.html\">Masaryk University Algebra Seminar</a>, but it doesn't appear the slides have been uploaded yet.) I am hopeful it will be ready before too long; I will send you a link when it is available.</p>",
        "id": 432540409,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712765831
    },
    {
        "content": "<p>That’ll be great to see, both for the specific result and more broadly to have a paper about 2-sketches finally in the literature!</p>",
        "id": 432553460,
        "sender_full_name": "Kevin Carlson (Arlin)",
        "timestamp": 1712770008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432539457\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432520849\">said</a>:</p>\n<blockquote>\n<p>Monoidal double categories are pseudomonoids in pseudocategories in Cat, or, alternatively, pseudocategories in pseudomonoids in Cat.<br>\nA proof of this fact is that both are special kinds of degenerate triple categories (having only one 1-cells in one of the loose directions), and their equivalence is induced by exchanging loose directions.<br>\nDoes anyone have a better proof? Or better still, a reference I can cite?</p>\n</blockquote>\n<p>This isn't quite true – you need to be careful about strictness (as pointed out in Remark 2.12 of Shulman's <a href=\"https://arxiv.org/abs/1004.0993\">Constructing symmetric monoidal bicategories</a>). A monoidal double category is a pseudomonoid in the 2-category of double categories and pseudo double functors. Equivalently, it is a pseudocategory in the 2-category of monoidal categories and pseudo monoidal functors <em>such that</em> the source and target morphisms are strict monoidal.</p>\n</blockquote>\n<p>Uhm I see, thanks for pointing it out!</p>",
        "id": 432643220,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712820472
    },
    {
        "content": "<p>This is a very interesting thing to me.<br>\nI previously stumbled upon the fact that we are usually quite cavalier about strictness in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">n</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bf Span(Cat)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Span</span><span class=\"mopen\">(</span><span class=\"mord mathbf\">Cat</span><span class=\"mclose\">)</span></span></span></span></span> because we can just get away with it there, but as soon as you work in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">n</mi><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"script\">K</mi><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\bf Span(\\cal K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Span</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span><span class=\"mclose\">)</span></span></span></span></span></span> for some other 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">K</mi></mrow><annotation encoding=\"application/x-tex\">\\cal K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span></span></span></span></span> then strict pullbacks might become a luxury you can't afford. In fact the 'biblically accurate' version of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">n</mi><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"script\">K</mi><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\bf Span(\\cal K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Span</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span><span class=\"mclose\">)</span></span></span></span></span></span>, described <a href=\"https://arxiv.org/abs/1112.0560\">here</a>, uses isocommas for compositions and maps of spans are maps between apexes with invertible fillers witnessing the commutativity of the two induced triangles.</p>\n<p>This introduces a discrepancy between 'weak double categories' and 'pseudocategories in Cat', where the latter is taken to mean pseudmonad in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">n</mi><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"script\">K</mi><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\bf Span(\\cal K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Span</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span><span class=\"mclose\">)</span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">K</mi><mo>=</mo><mrow><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\cal K=\\bf Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.01445em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Cat</span></span></span></span></span></span>; which amounts to the fact that the structural equations of weak double categories defining e.g. what a composable pair of loose arrows is, or what functoriality means, are weakened to mere isomorphisms.</p>\n<p>This highlights an hypocrisy in the traditional usage of equality and isomorphism: we strongly believe equality in a categry should be isomorphism, but then in the definition of weak double category we insist <em>we want strict equality</em>! This is not to point fingers (I wouldn't know to whom anyway), just to notice an interesting conceptual issue here.</p>\n<p>Anyway, the reason I'm bringing this up is that it seems that insisting on weak double categories introduces the hiccup <span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> pointed out. In fact, a pseudomonoid in pseudocategories would only satisfy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">∂</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>f</mi><mo>⊗</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><msub><mi mathvariant=\"normal\">∂</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><msub><mi mathvariant=\"normal\">∂</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\partial_i(f \\otimes g) \\cong \\partial_i(f)\\otimes\\partial_i(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>, which is what we get from a pseudocategory in pseudomonoids, though I admit I didn't check if the rest of the data &amp; coherence also matches up.</p>",
        "id": 432647595,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712822334
    },
    {
        "content": "<p>A possible way to get out of this is to work with isofibrant spans instead, meaning those spans which are two-sided isofibrations. Then a pseudomonad therein is an isofibrant double category, meaning isomorphisms can be traded freely between the tight and loose directions. It then seems one can produce an equivalent monoidal (in the strict sense) isofibrant double category for each monoidal (in the weak sense) double category</p>",
        "id": 432649455,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712822992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432647595\">said</a>:</p>\n<blockquote>\n<p>This highlights an hypocrisy in the traditional usage of equality and isomorphism: we strongly believe equality in a categry should be isomorphism, but then in the definition of weak double category we insist <em>we want strict equality</em>! This is not to point fingers (I wouldn't know to whom anyway), just to notice an interesting conceptual issue here.</p>\n</blockquote>\n<p>I think there's a common misconception in category theory (due to some extent to the nLab, which at some point in the past used rather incendiary language) that in category theory it is always true that one should work with the weakest notion of \"sameness\" as possible. However, the \"principle of equivalence\" really amounts to saying that when you work with objects of a category, you should only identify objects up to isomorphism, not equality – in other words, that properties of categories should be invariant under equivalence. What it <em>doesn't</em> say is that, when you give a definition, the definition should only make use of isomorphism rather than equality.</p>\n<p>Clearly, there are definitions for which we really do want to use equality rather than isomorphism. For instance, in a pseudofunctor, we want sources and targets to be preserved strictly, so that when we have two composable 1-cells in the domain, they are still composable in the codomain. The \"pseudo\" in \"pseudofunctor\" refers to the weak preservation of composition and identities, not source and target. There's a good heuristic to check whether one should expect certain data to be preserved strictly or not. If you present the structure in a metatheory that has a notion of type dependency, for instance a generalised algebraic theory, then the dependencies (a.k.a. display maps) should be preserved strictly, whereas the operations may be preserved only weakly. For instance, in the typical presentation of a category, you have a sort of morphisms, which is dependent on the source and target variables. Thus, these should be preserved strictly by homomorphisms.</p>",
        "id": 432651585,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712823766
    },
    {
        "content": "<p>In other words, I don't think there is anything wrong with the definitions of pseudocategory or monoidal double category: they capture the appropriate strictness for the examples we care about. However, the fact they they do involve differing levels of strictness needs we need to be a little more careful when we manipulate them.</p>",
        "id": 432651978,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712823917
    },
    {
        "content": "<p>I appreciate your argument on a practical level, but empirically and philosophically I have a hard time accepting it. Empirically, I observe that things work without hiccups when I work fully weakly and when you try to strictify it there's often some place where this strictification breaks or requires some clever workaround. Philosophically, when you say </p>\n<blockquote>\n<p>[W]hen you work with objects of a category, you should only identify objects up to isomorphism, not equality – in other words, that properties of categories should be invariant under equivalence. What it <em>doesn't</em> say is that, when you give a definition, the definition should only make use of isomorphism rather than equality.</p>\n</blockquote>\n<p>These seem in contradiction to me: when I define structure on top of categories, why is this in a privileged position to access strict equality rather than isomorphism only? In other words, 'properties of categories should be invariant under equivalence', why not structure?</p>",
        "id": 432663074,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712827609
    },
    {
        "content": "<p>From an empirical point of view, I would say these concepts are even easier to justify: they capture the examples we care about, and are convenient to work with, which makes them good definitions.</p>\n<p>From an abstract point of view, in these examples the structures we are defining (e.g. monoidal double categories) involve morphisms of structures (e.g. pseudo double functors). This is true generally in functorial semantics. Morphisms of structures are not completely weak. For instance, a pseudo functor preserves source and target strictly. You could argue that this is too strong, but I think you will have difficulty finding examples of notions of morphism that do not preserve source and target strictly.</p>",
        "id": 432669208,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712829592
    },
    {
        "content": "<p>People like Makkai have argued convincingly (to me) that source and target are fundamentally different than composition.  For example, there's a definition of category where we start with a collection of objects and then for each pair of objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x , y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{hom}(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>; after this we give composition and identities obeying equational laws.    In this approach the homsets are a \"dependent type\", and saying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f : \\mathrm{hom}(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> is a \"typing judgement\".  This is conceptually different than starting with an undifferentiated collection of all morphisms, defining functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">s,t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8095em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> from this to the collection of objects, and then asserting equations <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">s(f) = x, t(f) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>.  In the dependently typed approach it makes no sense to talk about a morphism without first knowing its source and target.   So, for example, it makes no sense to ask whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f = g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> unless we already know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f, g: \\mathrm{hom}(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> for some objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>.</p>\n<p>This explains why it's not evil - to use incendiary language <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span> - to demand that functors preserve the source and target of morphisms.</p>",
        "id": 432674800,
        "sender_full_name": "John Baez",
        "timestamp": 1712831624
    },
    {
        "content": "<p>It's a fun coincidence that <span class=\"user-mention\" data-user-id=\"277289\">@Jonas Frey</span> was talking about that dependently typed presentation at LIPN this morning.</p>",
        "id": 432676408,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1712832247
    },
    {
        "content": "<p>Makkai developed his theory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>-categories based on his system FOLDS: \"first-order logic with dependent sorts\".  This avoids \"evil\" in a very elegant way.</p>",
        "id": 432676881,
        "sender_full_name": "John Baez",
        "timestamp": 1712832414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432669208\">said</a>:</p>\n<blockquote>\n<p>From an empirical point of view, I would say these concepts are even easier to justify: they capture the examples we care about, and are convenient to work with, which makes them good definitions.</p>\n</blockquote>\n<p>Of course, I'm not arguing against that :) but we also observe that working up to the correct level of equivalence makes life easier from a technical standpoint, if messy. So I'm highlighting this... tension?</p>",
        "id": 432694241,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712838445
    },
    {
        "content": "<p>Actually I believe non-strictly consecutive morphisms are composed all the time in mathematical practice, since we rarely take care of precisely aligning boundaries of morphisms with e.g. structural morphisms we know to be coherent, and instead it is understood those morphisms are implicitly around. The very fact I'm asking this question is because I have some concrete construction that churns out double monoidal categories with possibly non-strictly monoidal source/target.</p>",
        "id": 432698209,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712839727
    },
    {
        "content": "<p>(eg. we are often happy to suppress the associators when composing morphisms in monoidal categories)</p>",
        "id": 432698531,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1712839810
    },
    {
        "content": "<p>To answer <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span>, the definition you bring up seems innocuous but it 'sneaks in' meta-level equality when one defines composition when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f: {\\rm hom}(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g:{\\rm hom}(y,z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>. This is a way to say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y=y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> with notation, but then in practice we know this level of strictness can be hard to maintain, hence the struggle for univalent foundations and <a href=\"http://strictlypositive.org/thesis.pdf\">heterogeneous equality</a>.</p>\n<p>But it seems that this is always the culprit with strictness, at some point we draw a line between 'object theory' and 'metatheory' and we tacitly assume metatheory has oracle-like properties (like LEM, decidable equality) whereas object theory has to be 'constructive' somehow (so e.g. you have to witness equality judgments). So this seems an issue on where we draw the line for categories, is it at the 0-level or at the 1-level?</p>",
        "id": 432700244,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712840291
    },
    {
        "content": "<p>I think it's more of an inevitable problem with syntax requiring repetition. For a full specification of the composition operation you would write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">b</mi></mrow><mo separator=\"true\">,</mo><mtext> </mtext><mi>g</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>⊢</mo><mi>g</mi><mo>∘</mo><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">h</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x, y, z: {\\rm ob}, \\,g:{\\rm hom}(y,z), \\, f: {\\rm hom}(x,y) \\vdash g \\circ f : {\\rm hom}(x,z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">ob</span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">hom</span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>, and as such we already have a repetition of the object variables even before the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is 'used' a second time in the type of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>: we 'name' <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x,y,z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> as terms of the type of objects and then 'use' those terms in the morphism type constructor. There are notions of linearity that prevent a variable from being used more than once (after it is named, that is), but if we wanted a weaker version where identical types are replaced with equivalent ones it would actually have the same amount of repetition, since we would need a further statement presenting the identity between the terms.</p>",
        "id": 432702505,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1712840955
    },
    {
        "content": "<p>I suppose this observation is related to notions of identity type etc.</p>",
        "id": 432702927,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1712841074
    },
    {
        "content": "<p>Yes, I agree with Morgan. You want to be able to duplicate variables without viewing that as identification of variables via a meta-level equality. It depends on your philosophy, but I would argue it is possible to refer to an object multiple times without having a notion of sameness of objects, other than the identity.</p>",
        "id": 432707096,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712842422
    },
    {
        "content": "<p>Having contraction in a type theory means you have invariance under some operation on a context; it does not require a meta-level equality.</p>",
        "id": 432707436,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712842513
    },
    {
        "content": "<p>I think if you distinguish identification of variables, and equality of terms, the apparent problem with strictness in the definition of functors, monoidal double categories, etc., goes away.</p>",
        "id": 432707688,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1712842583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432647595\">said</a>:</p>\n<blockquote>\n<p>This highlights an hypocrisy in the traditional usage of equality and isomorphism: we strongly believe equality in a categry should be isomorphism, but then in the definition of weak double category we insist <em>we want strict equality</em>!</p>\n</blockquote>\n<p>When I was a graduate student in Chicago back in the oughts, I met Bob Paré for the first time at a conference (I think it was the Mac Lane Memorial Conference), and this was the first question I asked him.  If memory serves, he answered by asking me what I thought.  I gave essentially the same two answers that have been given here: first, that many double categories are isofibrant and so we can strictify isomorphisms involving domains and codomains; and second, that we don't need to weaken when talking about \"structure\" (I didn't know the phrase \"dependent types\" back then, but I think this is essentially the same point).</p>",
        "id": 432730638,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1712848817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432663074\">said</a>:</p>\n<blockquote>\n<p>Philosophically, when you say </p>\n<blockquote>\n<p>[W]hen you work with objects of a category, you should only identify objects up to isomorphism, not equality – in other words, that properties of categories should be invariant under equivalence. What it <em>doesn't</em> say is that, when you give a definition, the definition should only make use of isomorphism rather than equality.</p>\n</blockquote>\n<p>These seem in contradiction to me: when I define structure on top of categories, why is this in a privileged position to access strict equality rather than isomorphism only? In other words, 'properties of categories should be invariant under equivalence', why not structure?</p>\n</blockquote>\n<p>Maybe this was answered already, but I think this is a misunderstanding.  I think what Nathanael was saying is that <em>talking</em> about equality in its statement doesn't mean a definition (be it property or structure) isn't invariant under equivalence.</p>",
        "id": 432735477,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1712850106
    },
    {
        "content": "<p>Rather, there are precise ways in which we <em>can</em> talk about equality -- namely, those that can be encoded using dependent types -- while <em>still</em> remaining invariant under equivalence.</p>",
        "id": 432735663,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1712850152
    },
    {
        "content": "<p>Another point that I think hasn't been made yet is that it's impossible to avoid at least the dependent-types kind of equality.  Suppose you weaken the composition operation so that when composing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f:x\\to y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">g:y&#x27;\\to z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> you only require <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to be isomorphic.  But that means you have an isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>:</mo><mi>y</mi><mo>≅</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">h:y \\cong y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7834em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> whose domain is <em>equal</em> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and whose target is <em>equal</em> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>!</p>",
        "id": 432735916,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1712850229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432735916\">said</a>:</p>\n<blockquote>\n<p>Another point that I think hasn't been made yet is that it's impossible to avoid at least the dependent-types kind of equality.  Suppose you weaken the composition operation so that when composing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f:x\\to y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">g:y&#x27;\\to z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> you only require <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to be isomorphic.  But that means you have an isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>:</mo><mi>y</mi><mo>≅</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">h:y \\cong y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7834em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> whose domain is <em>equal</em> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and whose target is <em>equal</em> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>!</p>\n</blockquote>\n<p>Yeah I think this is the most 'convincing' issue with weakening everything (<span class=\"user-mention\" data-user-id=\"277473\">@Morgan Rogers (he/him)</span> mentioned this earlier btw). I'm putting 'convincing' in quotes because I'm not arguing for dropping strictness in the definition of monoidal double category or double category, I'm just trying to grasp the nuances in the principle of equivalence.</p>",
        "id": 432737358,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712850647
    },
    {
        "content": "<p>Ok, sorry I missed it.</p>",
        "id": 432737473,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1712850675
    },
    {
        "content": "<p>No problem!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432735663\">said</a>:</p>\n<blockquote>\n<p>Rather, there are precise ways in which we <em>can</em> talk about equality -- namely, those that can be encoded using dependent types -- while <em>still</em> remaining invariant under equivalence.</p>\n</blockquote>\n<p>I think this perspective is the one that I like best. But then we shouldn't be using functors for things like source and target of a double category, which really should be thought as displaying maps, and instead have them being isofibrations.</p>",
        "id": 432738156,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712850893
    },
    {
        "content": "<p>If that's the case I'd say this vindicates my hunch that's there's a tension to be resolved, the resolution being adopting isofibrations for things that need to 'see' equality (better: display data invariant under equivalence)</p>",
        "id": 432738578,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1712851022
    },
    {
        "content": "<p>Dependent types FTW!</p>",
        "id": 432740091,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1712851409
    },
    {
        "content": "<p>I don't know if this is related or not, but I never know how to think of isomorphisms in double categories. Usually when two objects are isomorphic I think of them as the same thing, but what if they are, say, horizontally isomorphic, but not vertically isomorphic? Relatedly there doesn't appear to be one accepted notion of equivalence of double categories? I never know what to make of that. Things are bit simpler when you have companions and so there is a stronger and weaker version of isomorphism, but in general I don't really have any feeling for what is going on.</p>",
        "id": 432865068,
        "sender_full_name": "Graham Manuell",
        "timestamp": 1712913661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/channel/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432540409\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Or better still, a reference I can cite?</p>\n</blockquote>\n<p>John Bourke, Joanna Ko and I have been working on a paper on this topic; we have a symmetry result for a class of two-dimensional limit sketches, which includes monoidal double categories as an example. (John gave a talk about it at the <a href=\"https://www.math.muni.cz/~bourkej/BAS.html\">Masaryk University Algebra Seminar</a>, but it doesn't appear the slides have been uploaded yet.) I am hopeful it will be ready before too long; I will send you a link when it is available.</p>\n</blockquote>\n<p>The paper is now out: <a href=\"https://arxiv.org/abs/2412.07475\">Enhanced 2-categorical structures, two-dimensional limit sketches and the symmetry of internalisation</a>! (I've created a dedicated thread here: <a class=\"stream-topic\" data-stream-id=\"274877\" href=\"/#narrow/channel/274877-community.3A-our-work/topic/Enhanced.202-categorical.20structures\">#community: our work &gt; Enhanced 2-categorical structures</a>.)</p>",
        "id": 488167563,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1733943994
    },
    {
        "content": "<p>I'm sorry to be seeing this interesting conversation only now.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/channel/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432539457\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/432520849\">said</a>:</p>\n<blockquote>\n<p>Monoidal double categories are pseudomonoids in pseudocategories in Cat, or, alternatively, pseudocategories in pseudomonoids in Cat.<br>\nA proof of this fact is that both are special kinds of degenerate triple categories (having only one 1-cells in one of the loose directions), and their equivalence is induced by exchanging loose directions.<br>\nDoes anyone have a better proof? Or better still, a reference I can cite?</p>\n</blockquote>\n<p>This isn't quite true – you need to be careful about strictness (as pointed out in Remark 2.12 of Shulman's <a href=\"https://arxiv.org/abs/1004.0993\">Constructing symmetric monoidal bicategories</a>). A monoidal double category is a pseudomonoid in the 2-category of double categories and pseudo double functors. Equivalently, it is a pseudocategory in the 2-category of monoidal categories and pseudo monoidal functors <em>such that</em> the source and target morphisms are strict monoidal.</p>\n</blockquote>\n<p>A naïve question---shouldn't the two (2,1)-categories (with and without the strict monoidal condition on source and target morphisms) be bi-equivalent? This should follow from the tensor product of locally presentable (oo,1)-categories. Explicitly, <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">n</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><mo>≃</mo><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">n</mi><mo>⊗</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo>⊗</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>≃</mo><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo>⊗</mo><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">n</mi><mo>⊗</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>≃</mo><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">n</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mon(Cat(Cat))}\\simeq\\mathrm{Mon\\otimes Cat\\otimes Cat}\\simeq \\mathrm{Cat\\otimes Mon\\otimes Cat}\\simeq \\mathrm{Cat(Mon(Cat))}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Mon</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">Cat</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">Cat</span><span class=\"mclose\">))</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Mon</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Cat</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Cat</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Mon</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Cat</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">Mon</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">Cat</span><span class=\"mclose\">))</span></span></span></span></span><br>\nHere, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">n</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mon}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Mon</span></span></span></span></span> is the 1-category of monoids, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span> is the (2,1)-category of 1-categories.</p>\n<p>It's early-ish in the morning here in California, and I'm on my first cup of coffee, so it's very possible that there is some simple detail that I'm missing :D</p>",
        "id": 488869210,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1734104729
    },
    {
        "content": "<p>Doesn't that only work when <em>everything</em> is pseudo?  It doesn't tell you that you can strictify the source and target morphisms.</p>",
        "id": 488873009,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734105819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/channel/229136-theory.3A-category-theory/topic/Cat.28Mon.28Cat.29.29.20vs.20Mon.28Cat.28Cat.29.29/near/488873009\">said</a>:</p>\n<blockquote>\n<p>Doesn't that only work when <em>everything</em> is pseudo?  It doesn't tell you that you can strictify the source and target morphisms.</p>\n</blockquote>\n<p>You mean that the (2,1)-category of double categories and pseudo-double functors (as it's usually defined) is not bi-equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo>⊗</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Cat\\otimes Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Cat</span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span> is really the (2,1)-category of univalent pseudocategories (whose hom-spaces are 0-truncated) in 1-truncated spaces (but biequivalently, is the usual (2,1)-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span>?</p>",
        "id": 488876585,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1734106910
    },
    {
        "content": "<p>Yes -- at least, it's not obvious to me that it would be.</p>",
        "id": 488888686,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734111044
    },
    {
        "content": "<p>Hmm, that's a little worrisome (to me, since I've gotten used to thinking of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">D</mi><mi mathvariant=\"normal\">b</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{DblCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">DblCat</span></span></span></span></span> in the higher sense as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>⊗</mo><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Cat}\\otimes\\mathrm{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span>)...</p>",
        "id": 488893096,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1734112539
    },
    {
        "content": "<p>They do become equivalent if you restrict to isofibrant double categories.  So I regard this more as an indictment of non-isofibrant double categories.</p>",
        "id": 488893659,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734112748
    },
    {
        "content": "<p>Put differently, the thing that should be equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo>⊗</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat\\otimes Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Cat</span></span></span></span></span> is the (weak?) <em>model</em> category of ordinary double categories.  The morphisms of the latter should be strict double functors, and its cofibrant objects would be fattened up so as to represent pseudo double functors, but in addition its fibrant objects should be be the isofibrant ones.  (I don't remember offhand whether one of the known model structures on DblCat is exactly that.)</p>",
        "id": 488894738,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734113131
    },
    {
        "content": "<p>Although, hmm, now I'm second-guessing myself, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo>⊗</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat\\otimes Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathrm\">Cat</span></span></span></span></span> is symmetrical in the two copies of Cat, whereas what I described isn't.  Maybe the fibrant objects should be isofibrant in both directions, and the cofibrant objects should be fattened up in both directions to represent double functors that are pseudo in both directions?</p>",
        "id": 488895488,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1734113425
    },
    {
        "content": "<p>This is interesting! Perhaps there is a nice tribe/contextual category with Id-types whose category of models is this (weak?) model category. Food for thought :)</p>",
        "id": 488895863,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1734113587
    },
    {
        "content": "<p>I believe Example 8.18 of our paper essentially exhibits a counterexample (it is formulated slightly differently, in terms of pseudocategories and their morphisms in Cat, rather than tensor products, but the obstruction is the same). My impression is the same as Mike's, that this is really an illustration that non-isofibrant double categories are badly behaved generally (but also that, if one does want to consider all double categories, care is needed regarding strictness).</p>",
        "id": 488917100,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1734122536
    },
    {
        "content": "<p>Thanks for the pointer!</p>",
        "id": 488923804,
        "sender_full_name": "Chaitanya Leena Subramaniam",
        "timestamp": 1734125247
    }
]