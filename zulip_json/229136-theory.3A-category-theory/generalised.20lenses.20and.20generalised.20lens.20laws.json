[
    {
        "content": "<p>This is a vague question, I'm just wondering if anyone's thought about it or has any random insights.</p>\n<p>There is a notion of \"Generalised lenses\" or \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-lenses\" or \"Grothendieck lenses\", explained in David Spivak's <a href=\"https://arxiv.org/abs/1908.02202\">Generalized Lens Categories via Functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"script\">C</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">C</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathscr{C}^\\mathrm{op}\\to \\mathsf{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.1689em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Cat</span></span></span></span></span></a>. This gives a very general notion of lens, but often it's desirable to impose some extra 'laws' on the lenses it produces.</p>\n<p>Here are some examples:</p>\n<ul>\n<li>\n<p>in a Cartesian category, if we take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to be a particular functor that maps an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>-parametrised morphisms, then we obtain the usual category of lenses. However, depending on the application, it can be desirable to impose the traditional lens laws (PutGet, GetPut and PutPut) or some variation of them.</p>\n</li>\n<li>\n<p>In the paper linked above, Spivak obtains \"dependent lenses\" by taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to be a different functor. These dependent lenses are very closely related to polynomial functors, but, at least if I understood correctly, they're not <em>quite</em> the same. Polynomial functors are like dependent lenses that obey an additional law, given by the left-hand square in the diagram below, which is from David Spivak's <a href=\"https://arxiv.org/abs/2005.01894\">Poly: An abundant categorical setting for mode-dependent dynamics</a></p>\n</li>\n</ul>\n<p><a href=\"/user_uploads/21317/2fardnd7u7FqUALIaZvz9ENZ/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/2fardnd7u7FqUALIaZvz9ENZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/2fardnd7u7FqUALIaZvz9ENZ/image.png\"></a></div><p>(I don't think this law arises automatically from the construction in the generalized lenses paper, but I could be wrong and I'm happy to be corrected if so.)</p>\n<ul>\n<li>In <span class=\"user-mention\" data-user-id=\"277554\">@Toby Smithe</span>'s work, e.g. <a href=\"https://arxiv.org/pdf/2109.04461.pdf\">Compositional Active Inference I: Bayesian Lenses. Statistical Games.</a>, we can take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to be another functor to obtain a category of \"Bayesian lenses\". But it's sometimes useful to impose another law upon them to turn them into \"exact Bayesian lenses.\"</li>\n</ul>\n<p>I'm not 100% sure that all three of these \"laws\" are really the same kind of thing. But it seems striking and perhaps a bit unsatisfying that we can obtain lenses from a functor by performing this slick construction, but then having done that we often actually want a subcategory of the result, which has to be defined explicitly by adding these extra conditions. So I was wondering if there might be some deeper way to see where various kinds of laws we might want to impose come from. In other words, might there be some variation of the Grothendieck construction approach where not only the lenses but also their laws \"pop out\" of the construction in some way?</p>",
        "id": 252901977,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1631358622
    },
    {
        "content": "<p>Construction 1 and 2 are exactly the same, dependent lenses do not satisfy an extra law</p>",
        "id": 252908003,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1631365208
    },
    {
        "content": "<p>But you can add another example, similar to that of exact Bayesian lenses (and I suspect it's no coincidence): cartesian differential categories can be represented as subcategories of lenses, namely those lenses whose backward part is linear in a certain sense</p>",
        "id": 252908286,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1631365492
    },
    {
        "content": "<p>It was polynomial functors that I thought satisfied an extra law, rather than dependent lenses. Here's the description of dependent lenses from 'Generalised Lens Categories'</p>\n<p><a href=\"/user_uploads/21317/piOBGp_3ch7T5M8aL_B-aXXC/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/piOBGp_3ch7T5M8aL_B-aXXC/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/piOBGp_3ch7T5M8aL_B-aXXC/image.png\"></a></div><p>Polynomial functors fit this description but they also have to obey the extra law that this diagram commutes:</p>\n<p><a href=\"/user_uploads/21317/V6CfeN4LCKzch-si7V8Li1zU/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/V6CfeN4LCKzch-si7V8Li1zU/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/V6CfeN4LCKzch-si7V8Li1zU/image.png\"></a></div><p>This is because in the polynomial functor case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi mathvariant=\"normal\">♯</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^\\sharp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">♯</span></span></span></span></span></span></span></span></span></span></span> can be thought of as a collection of functions mapping each fibre of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>y</mi><mo>→</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">q\\colon y\\to d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> to a corresponding fibre of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>x</mi><mo>→</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">p\\colon x\\to c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. Without this extra condition they can map to any element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, not just the corresponding fibre of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>.</p>\n<p>Is it just that dependent lenses do also end up obeying this law as well? I haven't gone through all the details of deriving them from the Grothendieck construction yet, which is why I was a bit unsure about this example.</p>",
        "id": 252912526,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1631370050
    },
    {
        "content": "<p>First of all this is a beautiful example of the microcosm principle.  In Johnson, Rosebrugh and Wood's <a href=\"https://www.mta.ca/~rrosebru/articles/Lens2Cambridge.pdf\">Lenses, fibrations and universal translations</a> by  we learn that we can see split Grothendieck (op)fibrations as categorified lenses, and here we learn that they are also categories <em>of</em> generalized prelenses.</p>\n<p>Secondly, I have been thinking a lot about laws for \"outlaw lenses\" lately.  This thinking is still in a state of flux, but it seems to be closely tied to what I am calling \"secant categories\".  For a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>, the secant category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">S\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> has</p>\n<ul>\n<li>as objects: pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A,\\mathcal{A})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathcal\">A</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> an object of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{A}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">A</span></span></span></span> an \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-colored monoid\" -- an internal category whose object of objects must be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</li>\n<li>as morphisms: pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, \\mathcal{F})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a function and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span> is a cofunctor with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> as its action on objects.</li>\n</ul>\n<p>There is an obvious functor back to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> that should be a fibration.</p>\n<p>The normal lens laws for \"very well-behaved lenses\" or what I usually just call \"lenses\" come from the objects in this category that look like indiscrete categories and represent the notion of \"an update is total replacement\".  There are a lot of other objects in this category though and they each give a notion of lens that respects the identity and composition in that object.</p>\n<p>(I don't have the full list of references to hand, but if anyone ends up doing archaeology on this post, the notion of \"secant category\" was inspired by both tangent categories and the notion of \"change structure\" in the functional programming literature seen at, e.g. <a href=\"https://bentnib.org/posts/2015-04-23-incremental-lambda-calculus-and-parametricity.html\">https://bentnib.org/posts/2015-04-23-incremental-lambda-calculus-and-parametricity.html</a> )</p>\n<p>(EDIT: It also occurs to me that I have heard something tangentially about someone claiming cofunctors as generalized lenses; it would be surprising if this didn't turn out to be the same insight as that.)</p>",
        "id": 252925636,
        "sender_full_name": "James Deikun",
        "timestamp": 1631383524
    },
    {
        "content": "<p>To relate it back, I think these laws will follow naturally when we see what the \"update data\" in the lens is being used for in each of these examples.</p>",
        "id": 252925726,
        "sender_full_name": "James Deikun",
        "timestamp": 1631383624
    },
    {
        "content": "<p>It seems that indeed Bryce Clarke (also on this server; not sure if I should ping or not) put these pieces together before I did:</p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/2009.06835\">Clarke, Bryce. \"Internal lenses as functors and cofunctors.\" arXiv preprint arXiv:2009.06835 (2020).</a></li>\n</ul>\n<p>I can't seem to figure out the purpose of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in Definition 19 (top of Section 4, the key definition of an internal lens), though; without it an internal lens reduces to merely a cofunctor, which seems neater.</p>",
        "id": 252933051,
        "sender_full_name": "James Deikun",
        "timestamp": 1631391967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276071\">Nathaniel Virgo</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/generalised.20lenses.20and.20generalised.20lens.20laws/near/252912526\">said</a>:</p>\n<blockquote>\n<p>It was polynomial functors that I thought satisfied an extra law, rather than dependent lenses. Here's the description of dependent lenses from 'Generalised Lens Categories'</p>\n<p><a href=\"/user_uploads/21317/piOBGp_3ch7T5M8aL_B-aXXC/image.png\">image.png</a> </p>\n<p>Polynomial functors fit this description but they also have to obey the extra law that this diagram commutes:</p>\n<p><a href=\"/user_uploads/21317/V6CfeN4LCKzch-si7V8Li1zU/image.png\">image.png</a> </p>\n<p>This is because in the polynomial functor case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi mathvariant=\"normal\">♯</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^\\sharp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">♯</span></span></span></span></span></span></span></span></span></span></span> can be thought of as a collection of functions mapping each fibre of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>y</mi><mo>→</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">q\\colon y\\to d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> to a corresponding fibre of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>x</mi><mo>→</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">p\\colon x\\to c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. Without this extra condition they can map to any element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, not just the corresponding fibre of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>.</p>\n<p>Is it just that dependent lenses do also end up obeying this law as well? I haven't gone through all the details of deriving them from the Grothendieck construction yet, which is why I was a bit unsure about this example.</p>\n</blockquote>\n<p>Yeah I'm pretty sure that's also satisfied by dependent lenses. The excerpt you mention doesn't state the commutativity condition again, but that's implied by their definition as a Grothendieck construction.</p>",
        "id": 253010291,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1631478849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438995\">James Deikun</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/generalised.20lenses.20and.20generalised.20lens.20laws/near/252925636\">said</a>:</p>\n<blockquote>\n<p>First of all this is a beautiful example of the microcosm principle.  In Johnson, Rosebrugh and Wood's <a href=\"https://www.mta.ca/~rrosebru/articles/Lens2Cambridge.pdf\">Lenses, fibrations and universal translations</a> by  we learn that we can see split Grothendieck (op)fibrations as categorified lenses, and here we learn that they are also categories <em>of</em> generalized prelenses.</p>\n</blockquote>\n<p>This is very cool indeed!</p>",
        "id": 253010309,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1631478883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438995\">James Deikun</span> <a href=\"#narrow/stream/229136-theory.3A-category.20theory/topic/generalised.20lenses.20and.20generalised.20lens.20laws/near/252933051\">said</a>:</p>\n<blockquote>\n<p>It seems that indeed Bryce Clarke (also on this server; not sure if I should ping or not) put these pieces together before I did:</p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/2009.06835\">Clarke, Bryce. \"Internal lenses as functors and cofunctors.\" arXiv preprint arXiv:2009.06835 (2020).</a></li>\n</ul>\n<p>I can't seem to figure out the purpose of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in Definition 19 (top of Section 4, the key definition of an internal lens), though; without it an internal lens reduces to merely a cofunctor, which seems neater.</p>\n</blockquote>\n<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> tells us that every morphism in the source category determines a morphism in the view category (rather than just on objects / states). This axiom really allows us to understand the Put action as a <em>lift</em> of morphisms. While there is lots one can do with cofunctors, (delta) lenses generally have much nicer properties (lots of research has been done in this direction, but there is still plenty to do!).</p>",
        "id": 253339441,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1631661985
    },
    {
        "content": "<p>Choosing between cofunctors and delta lenses really comes down to what level of generality you need. Both have a (forwards) assignment on objects. Cofunctors have a backwards lifting on morphisms, and delta lenses also have a forwards assignment on morphisms. It's worth mentioning that there are many nice relationships between delta lenses and cofunctors too; for example, in a <a href=\"https://arxiv.org/abs/2108.00390\">recent paper</a> I show it is possible to construct a cofree delta lens from every cofunctor.</p>",
        "id": 253339821,
        "sender_full_name": "Bryce Clarke",
        "timestamp": 1631662261
    },
    {
        "content": "<p>Hm, there is certainly a use for being able to lower updates to the view as well as lifting them from it; but on the other hand cofunctors are much nicer objects in other ways as well, and for the project of bringing lawfulness to \"bimorphic lenses\" I'm not at all sure lowering updates is always possible over there.  Having worked on FRP and incremental database views I can see how nice delta lenses would be in those particular applications though ...</p>",
        "id": 253341500,
        "sender_full_name": "James Deikun",
        "timestamp": 1631663364
    },
    {
        "content": "<p>One way to think about this that I'd just like to throw out there is: vectors push forward, forms pull back.  If you think of a type as a space, then if your 'delta' is a vector the appropriate map is a functor, if it is a form your appropriate map is a cofunctor.  If your type is a Riemannian space with an identification between vectors and forms via the metric, then wouldn't the appropriate map be something like a delta lens?  This suggests there could be space for all three of these things in the world.  (Though for functors there was never much danger ...)</p>",
        "id": 253345917,
        "sender_full_name": "James Deikun",
        "timestamp": 1631666587
    },
    {
        "content": "<p>This seems as good a place to ask as any:</p>\n<p>I'm looking for a citation to back up the assertion that \"morphisms of polynomial functors are lenses\". Is there a usual one?</p>",
        "id": 278297136,
        "sender_full_name": "Chad Nester",
        "timestamp": 1649421293
    },
    {
        "content": "<p>The equivalence of categories between [polynomials, natural transformations] and [containers, morphisms of containers] appears first in whatever is the first paper on containers. Then you look at the definition of morphisms of containers and say \"well, duh, it's the same as a lens\"</p>",
        "id": 278299897,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1649422717
    },
    {
        "content": "<p>Hmm okay. Thanks.</p>",
        "id": 278306009,
        "sender_full_name": "Chad Nester",
        "timestamp": 1649425603
    },
    {
        "content": "<p>I might just shuffle this into an \"among other things\".</p>",
        "id": 278306059,
        "sender_full_name": "Chad Nester",
        "timestamp": 1649425622
    },
    {
        "content": "<p>I do have to read more about containers though :)</p>",
        "id": 278306164,
        "sender_full_name": "Chad Nester",
        "timestamp": 1649425672
    }
]