[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277473\">Morgan Rogers (he/him)</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Constant.20dependent.20function/near/341404838\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> Mike explicitly says what the monad does, what are you asking for exactly?</p>\n</blockquote>\n<p>well, the monad which maps sets to their image on the terminal object is indeed idempotent. calling it (-1)-truncation is an excellent idea when we want to confuse the enemy. </p>\n<p>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span> is the base topos generated by 1, as it tends to be, then the (-1)-truncation monad has the number 2 as the category of algebras. how do we model irrelevant types in the number 2?</p>\n<p>even for a general topos, the category of algebras of the (-1)-truncation monad is a lattice. still a bit degenerate for a type theory.</p>\n<p>i am sure i am missing something and i am not sure that it is worth anyone's effort to enlighten me. but i don't want to pretend that i understand when i don't.</p>",
        "id": 345007221,
        "sender_full_name": "dusko",
        "timestamp": 1679968286
    },
    {
        "content": "<p>I can't tell what if anything you're missing, Dusko, so I'll just throw this out there: do you know about (-1)- groupoids?  Sets are 0-groupoids, groupoids are 1- groupoids, and we can go on up from there, but James Dolan noticed that truth values are (-1)-groupoids.</p>",
        "id": 345009826,
        "sender_full_name": "John Baez",
        "timestamp": 1679969887
    },
    {
        "content": "<p>Given an n-groupoid and m &lt; n we can m-truncate it and get an m-groupoid.</p>",
        "id": 345009934,
        "sender_full_name": "John Baez",
        "timestamp": 1679969995
    },
    {
        "content": "<p>(-1)-truncation is a special case of this: if we (-1)-truncate it we get a truth value saying whether it's occupied.</p>",
        "id": 345010062,
        "sender_full_name": "John Baez",
        "timestamp": 1679970083
    },
    {
        "content": "<p>I'm phrasing this all very \"classically\", in terms of set theory, but these days the cool kids would say it all using homotopy type theory, and talk about m-truncating a type.</p>",
        "id": 345010229,
        "sender_full_name": "John Baez",
        "timestamp": 1679970200
    },
    {
        "content": "<p>that is obviously a very nice observation. i think makkai also thought of propositions as the level -1... </p>\n<p>but capturing observations by introducing new terminology is a questionable communication strategy. if i start calling a cow a horn-horse only because i started using it to pull a cart, the neighbors will let me talk to myself. the truth values have been called propositions for a 1000 years solid, and with modifications for another 1000. it is nice to start a taxonomy from them. but if we tell someone: \"hey, category theorists call propositions (-1)-groupoids\" --- they will let us talk to ourselves.</p>\n<p>or a student joins zulip and wants to learn category theory. exercises: prove that in a cartesian category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\cal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span></span> an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a subobject of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is and only if the diagonal (or a projection) on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is an isomorphism. prove that the fixpoints of a functor mapping every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X\\to 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> form a sublattice <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo>↪</mo><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega\\hookrightarrow{\\cal C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span></span></span> such that every subobject <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>↪</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">A\\hookrightarrow X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is in the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><msub><mo>∐</mo><mi>X</mi></msub><msub><mi>α</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">A=\\coprod_X \\alpha_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">Ω</mi><mi>X</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\alpha\\in\\Omega^X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span></span></span></span></span></span></span>. most students will come back with at least a reasonable workout.</p>\n<p>now let us call the subobjects of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> the (-1)-truncations. most of the students i know will get stuck, think that they are not smart enough for category theory, and go do something else.</p>",
        "id": 345018275,
        "sender_full_name": "dusko",
        "timestamp": 1679975647
    },
    {
        "content": "<p>... and if the cool kids don't want to do the basic exercises with products but just to do homotopy type theory --- are they managing to compute some topological invariants that voevodsky would have hoped or to find invariants of some algorithms as the inabitants of the identity type, as martin-loef would have hoped? if they are not, then we have replaced mathematics with coolness. i totally honestly hope that my impression  that they are not is based on me being in the corner and not paying attention.</p>",
        "id": 345019105,
        "sender_full_name": "dusko",
        "timestamp": 1679976255
    },
    {
        "content": "<p>sure, here's a paper on using univalence to compute fundamental groups of circles <a href=\"https://www.cs.cmu.edu/~drl/pubs/ls13pi1s1/ls13pi1s1.pdf\">https://www.cs.cmu.edu/~drl/pubs/ls13pi1s1/ls13pi1s1.pdf</a></p>",
        "id": 345022195,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1679978423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Constant.20dependent.20function/near/345018275\">said</a>:</p>\n<blockquote>\n<p>that is obviously a very nice observation. i think makkai also thought of propositions as the level -1... </p>\n</blockquote>\n<p>That's interesting.  He might have had this idea independently, but I think of James Dolan and Toby Bartels as introducing it and Mike Shulman and I as popularizing it in our paper <a href=\"https://arxiv.org/abs/math/0608420\">Lectures n-Categories and Cohomology</a> back in 2006.   In the section \"The power of negative thinking\" we wrote:</p>\n<blockquote>\n<p>After James Dolan and JB came up with the periodic table, JB showed it to Chris Isham, who does quantum gravity at Imperial College. I was incredibly happy with it, but he said: “That’s obviously not right — you didn’t start the chart at the right place. First there should be a column with just one interesting row, then a column with two, and then one with three.”  I thought he was crazy, but it kept nagging me. It’s sort of weird to start counting at three, after all. But there are no (−1)-categories or (−2)-categories! Are there?</p>\n</blockquote>\n<blockquote>\n<p>It turns out there are! Eventually Toby Bartels and James Dolan figured out what they are. And they realized that Isham was right.</p>\n</blockquote>",
        "id": 345032863,
        "sender_full_name": "John Baez",
        "timestamp": 1679983258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294557\">@dusko</span> wrote:</p>\n<blockquote>\n<p>but capturing observations by introducing new terminology is a questionable communication strategy.</p>\n</blockquote>\n<p>No wonder people don't like math.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 345033132,
        "sender_full_name": "John Baez",
        "timestamp": 1679983377
    },
    {
        "content": "<p>oh i don't think makkai would worry about the priority. this was in like 1994. he was walking around talking about the hierarchy of equalities. and equipping them with structures which he i think ended up calling anafunctors, because they came after profunctors and in cell division you have prophasis, anaphasis... it is no wonder that he would come with the same structure, since you are all talking about the same elephant of nature. but everyone is telling a different story.</p>",
        "id": 345033669,
        "sender_full_name": "dusko",
        "timestamp": 1679983544
    },
    {
        "content": "<p>Right.</p>",
        "id": 345033814,
        "sender_full_name": "John Baez",
        "timestamp": 1679983580
    },
    {
        "content": "<blockquote>\n<p>the truth values have been called propositions for a 1000 years solid, and with modifications for another 1000. it is nice to start a taxonomy from them. but if we tell someone: \"hey, category theorists call propositions (-1)-groupoids\" --- they will let us talk to ourselves.</p>\n</blockquote>\n<p>I actually don't think anyone runs around calling propositions (-1)-groupoids.  What's happening is that homotopy type theorists - not category theorists <em>per se</em> - like to talk about truncation.   Like on the Homotopy Type Theory blog there's an article <a href=\"https://homotopytypetheory.org/2012/09/16/truncations-and-truncated-higher-inductive-types/\">Truncations and truncated higher inductive types</a> by Guillaume Brunerie where he writes stuff like this:</p>\n<blockquote>\n<p>Truncations are very useful in homotopy theory, and are also useful for foundations of mathematics, especially for n=-1,0:</p>\n<ul>\n<li>\n<p>The (-1)-truncation is also known as isinhab: given a type A it returns a proposition isinhab A which is true if and only if A is inhabited (by “proposition” and “set” I will always mean “h-proposition” and “h-set”). This has already been considered by Vladimir Voevodsky here, where isinhab A is defined using impredicative quantification and resizing rules, and this is also present in the Coq HoTT library here where isinhab is defined using higher inductive types.</p>\n</li>\n<li>\n<p>The 0-truncation of a space is the set of its connected components. This allows us, among other things, to build initial algebras by generators and relations and to build quotients of sets by (prop valued) equivalence relations.</p>\n</li>\n</ul>\n<p>The aim of this post is to explain how to define n-truncations for every n using higher inductive types </p>\n</blockquote>",
        "id": 345033982,
        "sender_full_name": "John Baez",
        "timestamp": 1679983660
    },
    {
        "content": "<p>i hope someone would go on and prove makkai's stone duality for predicate logic. that is an extremely fundamental result, but written in his language, it was understood by like 4 people. i thought i understood it when he talked about it, but never managed to calculate an actual representation out of it. marek zawadovski i think did.</p>",
        "id": 345034006,
        "sender_full_name": "dusko",
        "timestamp": 1679983674
    },
    {
        "content": "<p>Hmm, I don't know about that.</p>",
        "id": 345034258,
        "sender_full_name": "John Baez",
        "timestamp": 1679983757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/Constant.20dependent.20function/near/345033982\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>the truth values have been called propositions for a 1000 years solid, and with modifications for another 1000. it is nice to start a taxonomy from them. but if we tell someone: \"hey, category theorists call propositions (-1)-groupoids\" --- they will let us talk to ourselves.</p>\n</blockquote>\n<p>I actually don't think anyone runs around calling propositions (-1)-groupoids.  What's happening is that homotopy type theorists - not category theorists <em>per se</em> - like to talk about truncation.   Like on the Homotopy Type Theory blog there's an article <a href=\"https://homotopytypetheory.org/2012/09/16/truncations-and-truncated-higher-inductive-types/\">Truncations and truncated higher inductive types</a> by Guillaume Brunerie where he writes stuff like this:</p>\n<blockquote>\n<p>Truncations are very useful in homotopy theory, and are also useful for foundations of mathematics, especially for n=-1,0:</p>\n<ul>\n<li>\n<p>The (-1)-truncation is also known as isinhab: given a type A it returns a proposition isinhab A which is true if and only if A is inhabited (by “proposition” and “set” I will always mean “h-proposition” and “h-set”). This has already been considered by Vladimir Voevodsky here, where isinhab A is defined using impredicative quantification and resizing rules, and this is also present in the Coq HoTT library here where isinhab is defined using higher inductive types.</p>\n</li>\n<li>\n<p>The 0-truncation of a space is the set of its connected components. This allows us, among other things, to build initial algebras by generators and relations and to build quotients of sets by (prop valued) equivalence relations.</p>\n</li>\n</ul>\n<p>The aim of this post is to explain how to define n-truncations for every n using higher inductive types <br>\n</p>\n</blockquote>\n</blockquote>\n<p>thank you. i need to think about this.</p>\n<p>i was thinking the other day what the kleinian program of understanding geometry that we cannot comprehend (and noether's version...) --- what all that will look like if we manage to teach GPTs to do actual math... they might be able to make us see what we are not normally wired to see (just like paper makes us able to multiply numbers that don't fit into our memory)...</p>",
        "id": 345035932,
        "sender_full_name": "dusko",
        "timestamp": 1679984393
    },
    {
        "content": "<p>22 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"229136\" href=\"/#narrow/stream/229136-theory.3A-category-theory/topic/Constant.20dependent.20function\">#theory: category theory &gt; Constant dependent function</a> by <span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span>.</p>",
        "id": 345126514,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680008762
    },
    {
        "content": "<p>(Sorry for the slicing but it felt the conversation went a bit OT)</p>",
        "id": 345126780,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1680008822
    }
]