[
    {
        "content": "<p>Hi Everyone,</p>\n<p>What are books to start with to learn string diagrams?</p>\n<p>Thanks</p>",
        "id": 404648516,
        "sender_full_name": "Abderrahim Adrabi",
        "timestamp": 1701182092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636904\">Abderrahim Adrabi</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/404648516\">said</a>:</p>\n<blockquote>\n<p>Hi Everyone,</p>\n<p>What are books to start with to learn string diagrams?</p>\n<p>Thanks</p>\n</blockquote>\n<p><a href=\"https://www.amazon.com/dp/1009317865/\">https://www.amazon.com/dp/1009317865/</a></p>",
        "id": 404652289,
        "sender_full_name": "JR",
        "timestamp": 1701183197
    },
    {
        "content": "<p>It's not a book, but <a href=\"https://arxiv.org/abs/0908.3347\">Peter Selinger's survey</a> seems to me like a good place to start.</p>",
        "id": 404653918,
        "sender_full_name": "Damiano Mazza",
        "timestamp": 1701183658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276839\">Damiano Mazza</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/404653918\">said</a>:</p>\n<blockquote>\n<p>It's not a book, but <a href=\"https://arxiv.org/abs/0908.3347\">Peter Selinger's survey</a> seems to me like a good place to start.</p>\n</blockquote>\n<p>Thank you</p>",
        "id": 404681344,
        "sender_full_name": "Abderrahim Adrabi",
        "timestamp": 1701191827
    },
    {
        "content": "<p>It's not a book, but <a href=\"https://youtube.com/playlist?list=PL50ABC4792BD0A086&amp;si=-NmwQnuw3HzKTDgu\">the Catsters videos</a> is the place I started at.</p>",
        "id": 404683926,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1701192793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658891\">JR</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/404652289\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"636904\">Abderrahim Adrabi</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/404648516\">said</a>:</p>\n<blockquote>\n<p>Hi Everyone,</p>\n<p>What are books to start with to learn string diagrams?</p>\n<p>Thanks</p>\n</blockquote>\n<p><a href=\"https://www.amazon.com/dp/1009317865/\">https://www.amazon.com/dp/1009317865/</a></p>\n</blockquote>\n<p>I didn't know about this book! Weirldy enough they don't even talk about monoidal categories which I thought were the origin of string diagrams and the main structure they are useful for <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 404688390,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1701194501
    },
    {
        "content": "<p>Like in Picturing Quantum Processes, they seem to think that talking about monoidal categories would be scary and that drawings are a good way to make people think that category theory is cool. That's not a bad idea after all. Maybe the pictures are more important than were they come from, I don't know. Except the marketing argument, they are somehow part of our physical world. But still, I like monoidal categories.</p>",
        "id": 404689202,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1701194764
    },
    {
        "content": "<p>The pictures in that book <em>don't</em> come from monoidal categories, but from the 2-category of categories. Monoidal categories are the special case where there's only one object, or only one color of region in terms of the string diagrams.</p>",
        "id": 404691601,
        "sender_full_name": "Kevin Arlin",
        "timestamp": 1701195799
    },
    {
        "content": "<p>Okay, thanks for the explanation :)</p>",
        "id": 404716503,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1701204986
    },
    {
        "content": "<p>It really depends what you want to learn about string diagrams for. String diagrams for Cat (the kind you see in Hinze and Marsden's book) have a different flavour to to string diagrams for monoidal categories (the sort you see in Selinger's survey paper). You can mostly divide the resources into these two categories:</p>\n<p><strong> String diagrams for categories and functors: </strong></p>\n<ul>\n<li><a href=\"https://www.amazon.com/dp/1009317865/\">Introducing String Diagrams: The Art of Category Theory</a></li>\n<li>One of the authors of this book has some lecture notes on the same topic on <a href=\"https://stringdiagram.com/teaching/\">his website</a></li>\n<li><a href=\"https://youtube.com/playlist?list=PL50ABC4792BD0A086\">The catster's videos</a></li>\n<li>A bit more advanced: David Jaz Myers has a <a href=\"https://arxiv.org/abs/1612.02762\">paper on string diagrams for double categories</a> that generalises this perspective to allow you to talk about profunctors too</li>\n</ul>\n<p><strong> String diagrams for monoidal categories: </strong></p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/2305.08768\">An introduction to string diagrams for computer scientists</a></li>\n<li><a href=\"https://arxiv.org/abs/0908.3347\">A survey of graphical languages for monoidal categories</a></li>\n</ul>\n<p><strong> More specialised topics that heavily use string diagrams for monoidal categories:</strong></p>\n<ul>\n<li><a href=\"https://www.cambridge.org/core/books/picturing-quantum-processes/1119568B3101F3A685BE832FEEC53E52\">Picturing quantum processes</a></li>\n<li><a href=\"https://www.amazon.co.uk/Categories-Quantum-Theory-Introduction-Mathematics/dp/0198739613\">Categories for Quantum Theory: An Introduction</a></li>\n<li><a href=\"https://www.amazon.co.uk/Programs-Diagrams-Categorical-Computability-Applications/dp/3031348265\">Programs as Diagrams</a></li>\n</ul>",
        "id": 404729066,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1701209833
    },
    {
        "content": "<p>And they are also employed on this YouTube-channel: <a href=\"https://youtube.com/@MathProofsable\">https://youtube.com/@MathProofsable</a></p>",
        "id": 424106333,
        "sender_full_name": "Heiko Braun",
        "timestamp": 1709240056
    },
    {
        "content": "<p>I know this thread is old but I'm surprised nobody have mentioned \"The geometry of tensor calculus\" by Joyal and Street, 1991.  This is the rigorous work that goes into defining what string diagrams really are and proving that they behave as they should.</p>",
        "id": 427799278,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1710877341
    },
    {
        "content": "<p>Did someone formalize that paper in a proof assistant already?</p>",
        "id": 427800839,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1710877983
    },
    {
        "content": "<p>I think it's controversial  whether that paper has the right idea of what string diagrams \"really are\". It supposes that a string diagram is \"really\" a subset of the plane, whereas if you consider that a string diagram is \"really\" just the combinatorial connectivity data, then plausibly all this hard work about recumbent homotopies becomes unnecessary.</p>",
        "id": 427814667,
        "sender_full_name": "Kevin Carlson (aka Arlin)",
        "timestamp": 1710883698
    },
    {
        "content": "<p>Oh, I am also more used to the connectivity/hypergraph <a href=\"https://dl.acm.org/doi/abs/10.1145/2933575.2935316\">point of view</a>, but I thought the Joyal and Street paper was the more mainstream one.</p>",
        "id": 427816385,
        "sender_full_name": "Ralph Sarkis",
        "timestamp": 1710884509
    },
    {
        "content": "<p>Well, all I can say is I've never seen a single later paper mention recumbent homotopies or admit that it's in the slightest concerned with the specific embedding of a string diagram in the plane.</p>",
        "id": 427819058,
        "sender_full_name": "Kevin Carlson (aka Arlin)",
        "timestamp": 1710885863
    },
    {
        "content": "<p>Plenty of people cite Joyal and Street to justify the correctness of reasoning with string diagrams, but it has always struck me as rather missing the point, since it seems far more reasonable to consider string diagrams (like pasting diagrams) as combinatorial structures rather than topological ones.</p>",
        "id": 427826231,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1710889907
    },
    {
        "content": "<p>Kate Ponto and I used Joyal-Street-like topological methods to justify our cylindrical string diagrams for shadows in <a href=\"http://www.arxiv.org/abs/0910.1306\">Shadows and traces in bicategories</a>, and David Jaz Myers did the same for string diagrams for double categories in <a href=\"https://arxiv.org/abs/1612.02762\">String Diagrams For Double Categories and Equipments</a>.</p>",
        "id": 427844083,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710902646
    },
    {
        "content": "<p>Arguably this view is what the <a href=\"https://ncatlab.org/nlab/show/tangle%20hypothesis\">[[tangle hypothesis]]</a> is about.</p>",
        "id": 427844189,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710902726
    },
    {
        "content": "<p>I admit I haven't done much reading on other ways to justify string diagrams.  But while it makes sense to me to think of a string diagram for a <em>symmetric</em> monoidal category as a purely combinatorial object that doesn't really even need to be embedded anywhere, it's not immediately clear to me how to use purely combinatorial data to describe something like a <em>planar</em> string diagram for non-symmetric monoidal categories, which is the sort of thing that Kate and I and David Jaz were concerned with.  It's probably possible, but my guess would have been that the result would be further removed from what we actually write down.  But maybe someone can set me straight?</p>",
        "id": 427845622,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710903743
    },
    {
        "content": "<p>I agree that the idea of string diagrams as smoothly embedded in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> was fundamental to a lot of advances in knot theory, and led to generalizations such as the <a href=\"https://ncatlab.org/nlab/show/tangle%20hypothesis\">[[tangle hypothesis]]</a> and <a href=\"https://ncatlab.org/nlab/show/cobordism%20hypothesis\">[[cobordism hypothesis]]</a>.  So it's certainly a powerful viewpoint in topology, nicely extending the already strong connection between homotopy theory and higher groupoids.  But maybe the topological stance can be, or even should be, avoided by people who don't care about topology.  I don't know.</p>",
        "id": 427854316,
        "sender_full_name": "John Baez",
        "timestamp": 1710910635
    },
    {
        "content": "<p>It would be interesting to see how (or whether) the \"purely combinatorial\" stance works for various entries in the periodic table.  Mike raised the question of monoidal categories.  Then there are braided monoidal categories.  And what about purely combinatorial surface diagrams for monoidal 2-categories, braided monoidal 2-categories, sylleptic monoidal 2-categories and symmetric monoidal categories?</p>",
        "id": 427854796,
        "sender_full_name": "John Baez",
        "timestamp": 1710910942
    },
    {
        "content": "<p>I once thought about a purely combinatorial approach to string diagrams for symmetric monoidal categories where (summarizing roughly) you got a morphism in a symmetric monoidal category from a graph with:</p>\n<ul>\n<li>all the edges labeled by objects </li>\n<li>specified \"input\" vertices with just one edge going out, </li>\n<li>specified \"output\" vertices with just one edge going in, </li>\n</ul>\n<p>and</p>\n<ul>\n<li>each other vertex labeled by a morphism from the tensor product of the objects labeling its incoming edges to the tensor product of the objects labeling its outgoing edges. </li>\n</ul>\n<p>But I quickly realized this would only work - we'd only get a well-defined morphism in a simple way from this data - if the category were not just symmetric monoidal but actually <em>commutative</em> monoidal, meaning a commutative monoid in Cat.  This makes the associator, unitors and also the symmetry <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow></msub><mo>:</mo><mi>x</mi><mo>⊗</mo><mi>y</mi><mo>→</mo><mi>y</mi><mo>⊗</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">S_{x,y} : x \\otimes y \\to y \\otimes x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> be identity morphisms.</p>",
        "id": 427855431,
        "sender_full_name": "John Baez",
        "timestamp": 1710911427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span> and I formalized this idea in our paper <a href=\"https://arxiv.org/abs/1808.05415\">Open Petri nets</a>.  </p>\n<p>So, my point is that the \"purely combinatorial\" approach to string diagrams becomes really nice and easy for commutative monoidal categories.  Otherwise you have to be a bit careful about the symmetry.</p>",
        "id": 427855603,
        "sender_full_name": "John Baez",
        "timestamp": 1710911591
    },
    {
        "content": "<p>I have personally been very active on the combinatorics of <em>pasting</em> diagrams, and one could take the point of view that “string diagrams are Poincaré duals of pasting diagrams” so if one theory is combinatorialisable, then the other is. <br>\nBut while this may have a core of truth, there are certainly very non-trivial aspects of the duality, in terms e.g. of topological moves or aspects that are “obvious” only on one side and not the other, and how to identify them and transport them along the duality.</p>\n<p>On the other hand, <span class=\"user-mention\" data-user-id=\"284627\">@Christoph Dorn</span>  and Christopher Douglas have put a lot of effort into the development of <a href=\"https://ncatlab.org/nlab/show/framed%20combinatorial%20topology\">[[framed combinatorial topology]]</a>, which includes as a special case a theory of “manifold diagrams” which are a higher-dimensional extension of Joyal-Street string diagrams, and yet are “fully combinatorialisable” in a precise sense, so they would definitely have a lot to say about this question.</p>",
        "id": 427888508,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710928359
    },
    {
        "content": "<p>My rough point of view on the question of “justification” is that Joyal-Street is basically never necessary to “justify” practical uses of string diagrams for computations in e.g. a symmetric monoidal category, since individual string diagrams can always be turned into (combinatorial) pasting diagrams in such a way that the usual pasting theorems for 2-categories “justify” them, and then individual steps of the computation tend to only use “topological moves” that can be easily decomposed into e.g. a small number of Reidemeister moves, which are individually sound/“justified” by the axioms of symmetric monoidal categories.</p>",
        "id": 427889946,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710928850
    },
    {
        "content": "<p>However Joyal-Street-type approaches are, of course, interesting in their own right for things like the already-cited tangle hypothesis and cobordism hypothesis, and can certainly also be useful when one is trying to make a statement about <em>all</em> valid string diagrams within a certain context, as opposed to justifying an individual string diagram.</p>",
        "id": 427890267,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710928956
    },
    {
        "content": "<p>The latter, I assume, was the use case for the “topological” methods  in Ponto-Shulman or Myers, as mentioned above.</p>",
        "id": 427890606,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710929065
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 427924033,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1710940241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427889946\">said</a>:</p>\n<blockquote>\n<p>My rough point of view on the question of “justification” is that Joyal-Street is basically never necessary to “justify” practical uses of string diagrams for computations in e.g. a symmetric monoidal category, since individual string diagrams can always be turned into (combinatorial) pasting diagrams in such a way that the usual pasting theorems for 2-categories “justify” them, and then individual steps of the computation tend to only use “topological moves” that can be easily decomposed into e.g. a small number of Reidemeister moves, which are individually sound/“justified” by the axioms of symmetric monoidal categories.</p>\n</blockquote>\n<p>This feels to me like saying that it isn't necessary to prove by induction that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>+</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m+n=n+m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> for all natural numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, since for any individual natural numbers like 2 and 3 the statement can be justified by computing both sides to the same result.</p>\n<p>Not exactly the same, but similar.  Isn't the point of mathematics that we can prove general theorems about all possible situations and then just apply them, rather than checking each instance separately whenever we want to use it?</p>",
        "id": 427974960,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710953741
    },
    {
        "content": "<p>Put differently: if whenever I use a string diagram I have to worry about whether all the manipulations I used can be justified in terms of the axioms of whatever kind of monoidal category I'm using, then what have I really gained from using string diagrams?</p>",
        "id": 427975154,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710953791
    },
    {
        "content": "<p>I never said that it is not \"necessary\" to prove results such as this. My point is slightly different. Sometimes you read statements such as \"string diagrams were only put on a rigorous footing after Joyal-Street\", or something to this effect. I think statements such as this can have a chilling effect on the use of string diagrams in contexts where a general result such as Joyal-Street is not available. To return your analogy, this would be like thinking that every use of the commutative property of addition of natural numbers was \"not rigorous\" until the first time the property was proven axiomatically using mathematical induction, which is nonsense.</p>",
        "id": 427992604,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710959352
    },
    {
        "content": "<p>If someone uses the fact that 254+923 = 923+254 without having proven that addition is commutative in general, <em>and without computing them both to 1177</em> to verify the equality, I would regard that as not rigorous.</p>",
        "id": 427993464,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710959667
    },
    {
        "content": "<p>The typical string-diagrammatic equation is more akin to 2+3 = 3+2 than to 254+923 = 923+254...</p>",
        "id": 427994597,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710960098
    },
    {
        "content": "<p>And if a notation is being used widely but has not been formally justified, I would say the solution is to formally justify it, not tell people that it's not necessary to justify it.</p>",
        "id": 427994692,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710960125
    },
    {
        "content": "<p>I wouldn't be surprised if some early axioms for natural numbers postulated commutativity of addition instead of proving it by mathematical induction.   That would still be rigorous, just not quite as good.  </p>\n<p>Even if you wanted to, it's actually a lot harder to frame a precise axiom saying \"string diagrams work in cases where they should work\".</p>",
        "id": 427994784,
        "sender_full_name": "John Baez",
        "timestamp": 1710960179
    },
    {
        "content": "<p>Personal note: in <a href=\"http://www.tac.mta.ca/tac/volumes/26/23/26-23abs.html\">Duality and traces for indexed monoidal categories</a> Kate and I used a string diagram calculus that we did not justify.  About this we wrote</p>\n<blockquote>\n<p>A proper proof of validity for these string diagrams would make this precise, but we do not have space to give such a proof here. Thus, properly speaking our string diagrams are only an informal guide to the necessary calculations.</p>\n</blockquote>",
        "id": 427995040,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710960279
    },
    {
        "content": "<p>Many branches of engineering and science have their own diagrams, which are extremely important but rarely made rigorous.   I've been going around turning some of them into rigorous math.  I hadn't expected it when I started, but one of the main advantages of doing this is that it lets people do interesting things with the them using software.  For string diagrams we see this happening in <a href=\"https://ncatlab.org/nlab/show/homotopy.io\">homotopy.io</a> and other systems.</p>",
        "id": 427995561,
        "sender_full_name": "John Baez",
        "timestamp": 1710960497
    },
    {
        "content": "<p>Just if it needs to be clarified again, I am nowhere making a claim as strong as “Joyal-Street is not necessary” :) of course it's better to have it than not to have it!<br>\nI feel like I'm making quite an uncontroversial point, which perhaps is receiving a controversial reading, which is not the one that I intended.<br>\nPerhaps this is a better way of phrasing it: it is perfectly fine to use special instances of a conjecture that we are able to justify as being individually true, even if the conjecture has not been proven in general.</p>",
        "id": 427995608,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710960523
    },
    {
        "content": "<p>I always tell my students that rigor is not a binary quality but a sliding scale, and the proper level of rigor depends on the audience you are writing for.  I agree that in many or most cases arising in practice, an audience who is familiar with the relevant sort of monoidal category and string diagram can be trusted to \"compile them out\" in their head.  That's less true for students and newcomers to the field, of course, which is one reason for making things precise.  Implementing them in a computer is another, as is catching possible mistakes.</p>",
        "id": 427996388,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710960829
    },
    {
        "content": "<p>Amar, would you agree with the comments made by Kevin and Nathanael earlier in this thread, which are the ones I was initially responding to?</p>",
        "id": 427996639,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710960930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427855431\">said</a>:</p>\n<blockquote>\n<p>I once thought about a purely combinatorial approach to string diagrams for symmetric monoidal categories where (summarizing roughly) you got a morphism in a symmetric monoidal category from a graph with:</p>\n<ul>\n<li>all the edges labeled by objects </li>\n<li>specified \"input\" vertices with just one edge going out, </li>\n<li>specified \"output\" vertices with just one edge going in, </li>\n</ul>\n<p>and</p>\n<ul>\n<li>each other vertex labeled by a morphism from the tensor product of the objects labeling its incoming edges to the tensor product of the objects labeling its outgoing edges. </li>\n</ul>\n<p>But I quickly realized this would only work - we'd only get a well-defined morphism in a simple way from this data - if the category were not just symmetric monoidal but actually <em>commutative</em> monoidal</p>\n</blockquote>\n<p>I don't understand this.  It seems to me that as long as you also specify an ordering of the input vertices and of the output vertices, and likewise for the incoming and outgoing edges of every other vertex, you ought to get a well-defined morphism in any symmetric monoidal category by just inserting symmetries in the necessary places.  As long as the category is symmetric and not just braided, once the orderings are specified there should be a unique symmetry to put in each place.  Am  I missing something?</p>",
        "id": 427996975,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710961076
    },
    {
        "content": "<p>On the other hand, I think there is also a certain social bias about what is deemed to “need justification” in mathematical practice. <br>\nFor example, Joyal-Street is, to the letter, a statement that morphisms in certain monoidal categories are in bijection with isomorphism classes of certain continuous functions (etc etc). This is informally read as justification that certain squiggles drawn on paper are “rigorous”, because the squiggles are perceived as being “closer” to the latter mathematical objects than the former. Yet I bet for any human it is easier to translate the squiggles into algebraic expressions to be evaluated in a monoidal category, than to translate them into some expression for a continuous function with codomain the real plane...</p>",
        "id": 427997091,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710961108
    },
    {
        "content": "<p>I don't think it's unreasonable to rely more on our intuition for continuity than on our intuition for monoidal categories, since most of us have decades of experience with continuity of objects in the real world but only an abstract understanding of monoidal categories.</p>",
        "id": 427997428,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710961237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427996975\">said</a>:</p>\n<blockquote>\n<p>It seems to me that as long as you also specify an ordering of the input vertices and of the output vertices,</p>\n</blockquote>\n<p>That's exactly what I was not doing!</p>",
        "id": 427997751,
        "sender_full_name": "John Baez",
        "timestamp": 1710961351
    },
    {
        "content": "<p>Hmm, ok now I see that you said at the end that \"Otherwise you have to be a bit careful about the symmetry.\"</p>",
        "id": 427997956,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710961436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427996639\">said</a>:</p>\n<blockquote>\n<p>Amar, would you agree with the comments made by Kevin and Nathanael earlier in this thread, which are the ones I was initially responding to?</p>\n</blockquote>\n<p>As I tried to say in my first reply, I do not quite agree with the statement that diagrams are “more” combinatorial than topological, or something to that effect. I do think that they are “both” topological and combinatorial, and that this is one of those dualities where each side is enlightening in its own way.</p>",
        "id": 427998071,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710961481
    },
    {
        "content": "<p>I still haven't seen any purely combinatorial definition of string diagrams in a non-symmetric monoidal category.</p>",
        "id": 427998215,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710961535
    },
    {
        "content": "<p>Were you saying that the Dorn-Douglas approach realizes this?  I thought they were working with topological objects equipped with additional framing/stratification structure.</p>",
        "id": 427998443,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710961623
    },
    {
        "content": "<p>Well, I can formally justify every string diagram in <a href=\"https://arxiv.org/abs/2101.10361\">https://arxiv.org/abs/2101.10361</a> as representing a morphism from a certain combinatorial diagram shape into the nerve of a 2-category or a Gray-category (they are different nerves). But these string diagrams have non-trivial “weak units” that need to be managed so it may not meet all your requirements.</p>",
        "id": 427999011,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710961841
    },
    {
        "content": "<p>I mean, can you define <em>in general</em> what a string diagram is, and what its meaning in such a category is?</p>",
        "id": 427999093,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710961884
    },
    {
        "content": "<p>Yes, the theory of diagrammatic sets that I have been developing has been (among other things) about giving a combinatorial, general definition of diagrams in weak higher categories in arbitrary dimension.</p>",
        "id": 427999376,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710961999
    },
    {
        "content": "<p>Can you specialize that to give an explicit combinatorial description of string diagrams for non-symmetric monoidal 1-categories?</p>",
        "id": 427999699,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710962149
    },
    {
        "content": "<p>I think of these mainly as pasting diagrams but one can dualise (and I often do). But on the “string/manifold”-diagrammatic level I think that one may also want some additional “trivialisation of units” with “units becoming 'empty space'”, which this approach does not meet (somewhat “by construction”).</p>",
        "id": 427999702,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710962150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427999699\">said</a>:</p>\n<blockquote>\n<p>Can you specialize that to give an explicit combinatorial description of string diagrams for non-symmetric monoidal 1-categories?</p>\n</blockquote>\n<p>Yes, again with the “weak units” caveat.</p>",
        "id": 427999965,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710962273
    },
    {
        "content": "<p>Have you written it out somewhere?</p>",
        "id": 428000795,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1710962540
    },
    {
        "content": "<p>related prior discussion: <a href=\"#narrow/stream/229199-learning.3A-questions/topic/Rigorous.20string.20diagrams/near/203538376\">https://categorytheory.zulipchat.com/#narrow/stream/229199-learning.3A-questions/topic/Rigorous.20string.20diagrams/near/203538376</a></p>",
        "id": 428006679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1710964864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/428000795\">said</a>:</p>\n<blockquote>\n<p>Have you written it out somewhere?</p>\n</blockquote>\n<p>Well, in the paper I linked above,</p>\n<ul>\n<li>diagrams in a diagrammatic set are defined and discussed in §1.19--§1.21</li>\n<li>the “diagrammatic nerve of a pro” is defined in Section 4.1<br>\nComment 4.7 is relevant to the present discussion, as it explains how the string diagrams in the paper correspond to diagrams in the diagrammatic nerve of a pro.</li>\n</ul>\n<p>Some of the combinatorial background in the paper is a bit outdated re: my current understanding of things. Next month I'll put a book-length exposition of related matters on the arxiv, then hopefully at some point I'll revisit this paper.</p>",
        "id": 428010967,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1710966735
    },
    {
        "content": "<p>The intuition given when introducing string diagrams is typically along the lines of \"string diagrams are the Poincaré dual of pasting diagrams\". It seems to me that it is usually reasonable to take this as a definition of the notion of string diagram: then the validity of operations in string diagrams follows from their validity in pasting diagrams, with the advantage that the string diagrammatic calculus makes certain operations more visually intuitive.</p>",
        "id": 428018716,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1710970198
    },
    {
        "content": "<p>If I recall correctly, when I spoke to <span class=\"user-mention\" data-user-id=\"277446\">@David Jaz</span>  at CT, he said that if he were to write his paper on string diagrams for double categories today, he would present them from an operadic rather than topological perspective. Perhaps he can comment on his perspective.</p>",
        "id": 428019234,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1710970427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427888508\">said</a>:</p>\n<blockquote>\n<p>On the other hand, <span class=\"user-mention silent\" data-user-id=\"284627\">Christoph Dorn</span>  and Christopher Douglas have put a lot of effort into the development of <a href=\"https://ncatlab.org/nlab/show/framed%20combinatorial%20topology\">[[framed combinatorial topology]]</a>, which includes as a special case a theory of “manifold diagrams” which are a higher-dimensional extension of Joyal-Street string diagrams, and yet are “fully combinatorialisable” in a precise sense, so they would definitely have a lot to say about this question.</p>\n</blockquote>\n<p>Thanks for the mention Amar! The framework of framed combinatorial topology, in particular notions of framed maps and stratified bundles, certainly makes definitions of manifold diagrams very simple. It also makes the Poincare duality with cellular diagrams straight-forward, see section 2.4 <a href=\"https://arxiv.org/abs/2208.13758\">here</a>. However, the relation to practical definitions of higher categories is still conjectural. <span class=\"user-mention\" data-user-id=\"351586\">@Lukas Heidemann</span>  is working on finally elucidating this relation, so hopefully we will have \"more rigor\" soon (:</p>",
        "id": 428063266,
        "sender_full_name": "Christoph Dorn",
        "timestamp": 1711001531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427998443\">said</a>:</p>\n<blockquote>\n<p>Were you saying that the Dorn-Douglas approach realizes this?  I thought they were working with topological objects equipped with additional framing/stratification structure.</p>\n</blockquote>\n<p>As Amar mentions, the approach also yields a purely combinatorial perspective on manifold diagrams. <a href=\"https://cxdorn.github.io/assets/pdfs/zero-to-mdhc.pdf\">Here's</a> a super short exposition of the relevant definitions (sections 3 and B)</p>",
        "id": 428063389,
        "sender_full_name": "Christoph Dorn",
        "timestamp": 1711001668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/427997956\">said</a>:</p>\n<blockquote>\n<p>Hmm, ok now I see that you said at the end that \"Otherwise you have to be a bit careful about the symmetry.\"</p>\n</blockquote>\n<p>Hi all, basically my PhD project is thinking about what \"being a bit careful about the symmetry\" means. Some of it is published <a href=\"https://arxiv.org/abs/2210.08914\">here</a>: it contains a fairly concrete definition of graphs embedded on surfaces. The idea is that if you define string diagrams (for SMC) as a specific kind of graph, then string diagrams for non-symmetric MC are a specific kind of graph <em>embedding</em>.<br>\n(I'm also working on a library for graph embeddings in Agda with the aim to implement diagrammatic reasoning for these kind of string diagrams.)</p>",
        "id": 428109021,
        "sender_full_name": "Malin Altenmüller",
        "timestamp": 1711021469
    },
    {
        "content": "<p>Thanks for all the references!  I'll believe you now that it's possible to give a purely combinatorial description of string diagrams.  I was hoping that someone had written out explicitly what these descriptions give <em>in the case of ordinary monoidal categories</em> without making the reader do the specialization to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> in their head, and I didn't see that in my cursory perusal of the references, but it's possible that I missed it.</p>",
        "id": 428160943,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711036004
    },
    {
        "content": "<p>It would definitely be nice to see the case of good old monoidal categories spelled out.  I'm suspecting that each vertex needs to be equipped with a cyclic ordering of the strings going into (or out of) it - topologists know well that graphs on oriented surfaces naturally come with this data - but this data by itself not enough to force the surface to be genus zero.</p>",
        "id": 428161570,
        "sender_full_name": "John Baez",
        "timestamp": 1711036196
    },
    {
        "content": "<p>I have to say that personally, talking about continuous embeddings of a topological graph in a plane is still more intuitive, and feels more closely connected to the pictures we draw, than any of these combinatorial gadgets.  The combinatorial gadgets feel like an <em>equivalent characterization</em> of the diagrams rather than an actual description of them.  When I draw a string diagram on a sheet of paper, I'm not thinking about (for instance) the cyclic ordering of the edges around each vertex, and I'm certainly not thinking about whatever consistency condition on these orderings is necessary to ensure that they actually do describe an embedding in a plane; I just directly draw an embedding in a plane.</p>",
        "id": 428161684,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711036218
    },
    {
        "content": "<p>That's how I feel too, but it's interesting that Amar spoke of the difficulty of translating your drawing into a <em>formula</em> for the embedding.</p>",
        "id": 428161932,
        "sender_full_name": "John Baez",
        "timestamp": 1711036288
    },
    {
        "content": "<p>Of course you could fight back by arguing that the <em>formula</em> is yet another attempt to syntactically encode what's really a geometrical object.</p>",
        "id": 428162132,
        "sender_full_name": "John Baez",
        "timestamp": 1711036336
    },
    {
        "content": "<p>I like that.</p>",
        "id": 428162202,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711036357
    },
    {
        "content": "<p>Another way to say the way I feel is: the work has to go somewhere.  If the definition of a string diagram isn't topological, then somewhere, someone has to explain how we get from the actual pictures we draw to whatever that definition is.</p>",
        "id": 428178154,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711040823
    },
    {
        "content": "<p>As I <a href=\"https://golem.ph.utexas.edu/category/2010/07/what_is_a_theory.html#c033982\">said</a> when talking about different notions of theory:</p>\n<blockquote>\n<p>It often seems to me that people (especially category theorists) have a tendency to say that because As can all be interpreted as Bs in some way, there is no need for the notion of A. But if we didn’t have the notion of A, then we wouldn’t be able to talk about how all As are interpreted as Bs! And if even if we only care about Bs in the end, if As occur in nature, then surely that only makes the process by which As are interpreted as Bs <em>more</em> important, since we have to perform it on any A we encounter in order to make it into the B we really care about.</p>\n</blockquote>",
        "id": 428178419,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711040903
    },
    {
        "content": "<p>Well, the <a href=\"https://rewalt.readthedocs.io/en/latest/notebooks/stringdiagrams.html\">string diagrams in rewalt</a> are algorithmically generated from data structures that encode the \"combinatorial diagrams\" from my reference, so that exhibits quite a concrete connection between the combinatorics and the geometry :)</p>",
        "id": 428190823,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711045151
    },
    {
        "content": "<p>That's good for one direction, but the more nontrivial one is starting with the geometry and generating the combinatorics, which is what Joyal-Street is about.</p>",
        "id": 428199434,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711048385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/428178154\">said</a>:</p>\n<blockquote>\n<p>Another way to say the way I feel is: the work has to go somewhere.  If the definition of a string diagram isn't topological, then somewhere, someone has to explain how we get from the actual pictures we draw to whatever that definition is.</p>\n</blockquote>\n<p>This feels to me similar to the relationship between concrete syntax, in terms of strings of symbols, and abstract syntax, in terms of structured trees. To give the complete picture, one really wants a precise treatment of both. However, I think it is really the abstract syntax that is the object of interest, and the concrete syntax is more of an implementation detail. With respect to string diagrams, the combinatorial description is like the abstract syntax, and the graphical depiction like the concrete syntax.</p>",
        "id": 428211739,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711052937
    },
    {
        "content": "<p>I see the point, but I don't entirely agree, because of the point I made above about how I think.  I would argue that when I read ordinary linear syntax like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mi>x</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">f(x^2+1)-x/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/2</span></span></span></span>, I effectively parse it mentally into what is essentially equivalent to an abstract syntax tree.  I think about parentheses as grouping, I understand order of operations, etc.  But when I look at a string diagram, I don't mentally think about cyclic orderings on the edges adjacent to each vertex or any of the other data that's necessary to make the combinatorial description precise: I think about it as a topological object.</p>",
        "id": 428259168,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711081808
    },
    {
        "content": "<p>I suppose it depends on the kind of string diagrams you consider, but for string diagrams for monoidal categories/2-categories, it's not necessary to consider any cyclic order on the edges: one has a list of inputs at the top, and a list of outputs at the bottom. (And similarly for double categories.) So one can read it just as one would a pasting diagram.</p>",
        "id": 428265342,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711087053
    },
    {
        "content": "<p>But a formal combinatorial definition of a string diagram requires some information such as cyclic orderings in order to ensure that the diagram is \"planar\".</p>",
        "id": 428266167,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711087684
    },
    {
        "content": "<p>I can't say for every combinatorial definition, but the one I've been using is an “oriented incidence poset” which also records the relation between 1-cells and 0-cells i.e. the bounded regions in the string diagram -- so essentially the combinatorial data contains the information “this edge bounds this planar region from the left and this planar region from the right” -- which I think is not so far from the information that we are processing when looking at the pictures, i.e. we are looking at the nodes in relation to the incident edges, and the edges in relation to the surrounding regions of the plane.</p>",
        "id": 428271612,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711091441
    },
    {
        "content": "<p>In any case, I think “cyclic orderings” are, already in the name, a case of a combinatorial notion which appeals to our geometric intuition for an easier understanding: it's asking us to picture the ordering as placing elements on a circle.</p>",
        "id": 428271986,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711091651
    },
    {
        "content": "<p>When I look at a planar string diagram in a monoidal category (as opposed to a bicategory or double category), I don't think about the regions into which the strings divide the plane at all.</p>",
        "id": 428272287,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711091866
    },
    {
        "content": "<p>But I am also sensing that this conversation is passing (perhaps has already passed) the point of usefulness...</p>",
        "id": 428272355,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711091889
    },
    {
        "content": "<p>So I think it's a case of lines being blurred in general, I don't think one can separate the combinatorial from the topological side, nor it is right to treat one as the “real” thing -- so I don't particularly agree with the abstract vs concrete syntax perspective, either</p>",
        "id": 428272486,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711091981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/428272287\">said</a>:</p>\n<blockquote>\n<p>When I look at a planar string diagram in a monoidal category (as opposed to a bicategory or double category), I don't think about the regions into which the strings divide the plane at all.</p>\n</blockquote>\n<p>I think you are when making a judgment of “planarity”, but yes, probably pointless to argue about what is in somebody else's mind :)</p>",
        "id": 428272664,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711092076
    },
    {
        "content": "<p>When you think “I am drawing an embedding into the plane”, what you are doing is “making sure than my lines don't cross into a different bounded region of the plane”.</p>",
        "id": 428272951,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711092239
    },
    {
        "content": "<p>I.e. you are thinking of the edges as “boundaries” and not just topological intervals or something</p>",
        "id": 428273082,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711092295
    },
    {
        "content": "<p>I would say I'm just \"making sure that my lines don't cross\" period.</p>",
        "id": 428273339,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711092432
    },
    {
        "content": "<p>The way I'm thinking about string diagrams is by taking the dual, and encoding the data of the corresponding pasting diagram, for which no cyclic ordering is necessary. But probably this is sufficiently vague that it's not a satisfying response. I do think it would be helpful to write out a precise definition of string diagram in this manner. One more thing to add to the  list...</p>",
        "id": 428283821,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711097265
    },
    {
        "content": "<p>A diagram drawn on some paper has nothing to do with 'string diagrams' defined either combinatorially or by using the real numbers topologically, except as far as mathematicians think that those definitions are a good model for what is drawn on the paper. We have a good intuition that the real numbers correctly model the physical space that we imagine when we look at the diagram on the paper. So we therefore think that we can prove something about the paper diagrams by reducing the combinatorial definitions to the definitions via real numbers. <br>\nBut  I think that most mathematicians have spent a lot of time getting used to the real numbers, and convincing ourselves that they are a good model for physical space. If we spent equally long getting used to the combinatorial definitions of string diagrams we would probably also be convinced that they gave a good model of physical space. And then we wouldn't see any need to 'prove' that string diagrams work by reference to the real numbers.</p>",
        "id": 428328425,
        "sender_full_name": "Oscar Cunningham",
        "timestamp": 1711113594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/428265342\">said</a>:</p>\n<blockquote>\n<p>I suppose it depends on the kind of string diagrams you consider, but for string diagrams for monoidal categories/2-categories, it's not necessary to consider any cyclic order on the edges: one has a list of inputs at the top, and a list of outputs at the bottom. </p>\n</blockquote>\n<p>For me string diagrams for monoidal categories are most useful for monoidal categories where each object has a left and a right dual.   The reason is that then these diagrams have a meaning that is diffeomorphism invariant.  That is, you can apply any diffeomorphism of the rectangle the diagram is drawn on, and as long as it's the identity on the boundary, the meaning of the diagram is preserved!   (We can weaken that \"identity on the boundary\" condition, too, but never mind.)  </p>\n<p>For this kind of string diagram, while the whole diagram has a well-defined top and bottom, the vertices inside do not.  More precisely, the concept of a string coming into the vertex \"at the top\" or \"at the bottom\" is not invariant under the diffeomorphisms mentioned.   But there's still a well-defined cyclic ordering of the edges incident to each vertex.</p>\n<p>This is pretty standard knowledge among topologists who use string diagrams.  There's a nice theory of graphs where for each vertex there's a cyclic ordering of the edges incident to that vertex.  They are called 'fat graphs' or '<a href=\"https://en.wikipedia.org/wiki/Ribbon_graph\">ribbon graphs</a>'.  (The Wikipedia article gives a topological definition, but there are also combinatorial definitions.)</p>",
        "id": 428380126,
        "sender_full_name": "John Baez",
        "timestamp": 1711129049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276945\">@Oscar Cunningham</span> Perhaps.  I'll believe it when I see it.</p>",
        "id": 428388903,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711132393
    },
    {
        "content": "<p>It's not too hard to explain what planar string diagrams are in plain language. Once you understand them, it's unambiguous what manipulations are allowed. At least in that sense, a calculus of string diagrams can be used as a foundation in its own right. (Just like a foundational logical system is described in plain language rather than formalized in terms of anything else.)</p>\n<p>In general this is how it goes for any kind of calculus you are using as a foundation: if you want, you can formalize it within some other meta framework designed to describe things like it. (You have to do this if you want to prove anything about it or formally make connections to other math.) Joyal and Street formalized string diagrams in our existing framework for topology. Combinatorial formalizations seem simpler to me, so I personally would like to see them more. I think I am agreeing with you <span class=\"user-mention\" data-user-id=\"276945\">@Oscar Cunningham</span>.</p>",
        "id": 429118108,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711229752
    },
    {
        "content": "<p>One additional thing for this discussion: I often use topological intuitions about string diagrams (i.e. intuitions about lines on a page) not just as a formal tool for reasoning about existing structures but as a guide to intuition about what a good definition should look like. Because of this, I often wonder whether the relationship between the algebraic/combinatorial picture and the topological one is deeper than just one being a convenient syntax for the other.</p>\n<p>Surely there must be some underlying <em>reason</em> why the good algebraic definitions are so often the ones that let you draw nice continuous pictures where all the transformations are local and all the structures that correspond to the same picture are canonically equivalent. I dream of a world where we understand this better, so that we can start with some kind of topologically-flavoured description of a structure and derive the algebraic definition from that instead of the other way around. (I have no idea if this is actually possible.)</p>",
        "id": 429175763,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1711271772
    },
    {
        "content": "<p>Nathaniel's question sounds like one of the permanent threads in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-category theory, which is the tension and interaction between combinatorial/algebraic definitions and topological ones, the ur-example being that an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoid can be modeled as either a topological space or as a Kan complex (or, on the third hand, as a type in homotopy type theory.) Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoids are initial among appropriately-structured <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-categories, you can interpret any of these presentations of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-groupoids in many different places, much as with string diagrams. I wonder whether it's reasonable to consider the relationship between \"objects of a (say cocomplete) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-category\" and \"topological spaces\" as analogous to the relationship between \"objects of a (say symmetric) monoidal category\" and \"certain subspaces of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.\"</p>",
        "id": 429713686,
        "sender_full_name": "Kevin Carlson (aka Arlin)",
        "timestamp": 1711477054
    },
    {
        "content": "<p>I want to second <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>'s perspective --- I would be happy to see a combinatorial description of string diagrams but regardless of how reasonable it sounds in theory, I haven't seen it yet!  Earlier in the thread there were some very general constructions cited with the claim that they specialize to string diagrams for monoidal categories, but I don't have the time to do the specialization myself; it would be great if the advocates of this approach would write out the combinatorial description in the case of monoidal categories I would really like to see it! thanks</p>\n<p>otherwise, the Joyal-Street description is a bird in the hand...</p>",
        "id": 429728409,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711482667
    },
    {
        "content": "<p>The reason why I am not particularly interested in giving this independent description is that my motivation for developing such descriptions is to have a notion of diagram that is interpretable, as-is, not only in a monoidal category or more generally 2-category, but also, say, in a weak (infty, n)-category.<br>\nBut there are some special things about dimension 2 which simply do not generalise, so the specialisation of the more general construction to dim 2 will contain data that is unnecessary <em>in that special case</em>. So if one is really uninterested in anything but planar monoidal category, I wouldn't recommend it! The whole point of it is the generalisability.</p>",
        "id": 429730896,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711483618
    },
    {
        "content": "<p>It seems like a waste of effort to write down a specialisation that is not as good as something that has been designed <em>for that specific purpose, and nothing else</em>.</p>",
        "id": 429731115,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711483701
    },
    {
        "content": "<p>On the other hand, people use string diagrams for monoidal categories far more than for weak (infinity,n)-categories, and they're easier to understand, so about 10 times as many people would read and cite a paper on string diagrams for monoidal categories, if it's well done.</p>",
        "id": 429732109,
        "sender_full_name": "John Baez",
        "timestamp": 1711484106
    },
    {
        "content": "<p>Only true for now <span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> ! If Amar's work takes off and makes weak (infinity,n)-categories manageable to work with, we might find ourselves using them more and more ;)</p>",
        "id": 429732395,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1711484221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> I guess I see this situation as having developed a constructive proof of a statement, valid — say — in every topos, and being asked to write down its specialisation to a Boolean topos where an easy classical proof already exists.</p>\n<p>Many more people use classical logic than intuitionistic, but those same people will be unimpressed by the result!</p>",
        "id": 429732581,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711484288
    },
    {
        "content": "<p>My combinatorial 2-dim diagrams need a bunch of bookkeeping of weak units, which is wasted effort in strict 2-categories or monoidal categories, and only pays off in higher dimensions...</p>",
        "id": 429733234,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711484545
    },
    {
        "content": "<p>whoa I'd love to see a kind of string diagram that works natively in a general weak monoidal category where I don't have to always ask myself why it's okay to assume that a weak monoidal category is really strict...</p>\n<p>maybe I'm misunderstanding the stakes of \"bookkeeping of weak units\"</p>",
        "id": 429737819,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711486270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277473\">Morgan Rogers (he/him)</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429732395\">said</a>:</p>\n<blockquote>\n<p>Only true for now <span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> ! If Amar's work takes off and makes weak (infinity,n)-categories manageable to work with, we might find ourselves using them more and more ;)</p>\n</blockquote>\n<p>I'm not saying his project is a bad idea, by any means!  It's just that now there are lots of programmers, scientists, and non-category-theorist mathematicians interested in using string diagrams for monoidal 1-categories.  The fraction of these who will take the trouble to learn about (infinity,n)-categories will be negligible - until the revolution comes, of course.   So if Amar's framework can be specialized to monoidal 1-categories, someone should write a paper based on his, clearly stating the key theorems in the monoidal 1-category case, in a way that all these people can understand.    That paper is the one all these people will read and cite.</p>",
        "id": 429738083,
        "sender_full_name": "John Baez",
        "timestamp": 1711486374
    },
    {
        "content": "<p>Also: if you could specialize it not just to monoidal categories, but to all the categories in Selinger's survey and give combinatorial descriptions that make Joyal-Street style theorems fall out much more easily I would be very interested to read that</p>",
        "id": 429738221,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711486441
    },
    {
        "content": "<p>Yeah, go ahead and do twenty times as much work!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 429738678,
        "sender_full_name": "John Baez",
        "timestamp": 1711486616
    },
    {
        "content": "<p>I was trying to suggest a way to help a lot of people and get a lot of credit for doing what might not be a huge amount of work.</p>",
        "id": 429738772,
        "sender_full_name": "John Baez",
        "timestamp": 1711486655
    },
    {
        "content": "<p>Also: The claim that a bunch of people seemed to be making in this thread is that conventional string diagrams (as in Selinger's survey, or David Jaz's paper, etc.) are described better combinatorially than geometrically.  I challenge anybody to back up this claim with an explicit combinatorial description.  If the real claim was that this other kind of string diagram, for (infinity, n)-categories, is better described combinatorially, then I don't see why there should have been any disagreement in this thread.  It is perfectly consistent that two different kinds of string diagrams would have different natural descriptions</p>",
        "id": 429738971,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711486730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429738971\">said</a>:</p>\n<blockquote>\n<p>Also: The claim that a bunch of people seemed to be making in this thread is that conventional string diagrams (as in Selinger's survey, or David Jaz's paper, etc.) are described better combinatorially than geometrically.  I challenge anybody to back up this claim with an explicit combinatorial description.</p>\n</blockquote>\n<p>I haven't followed this whole thread, so maybe I'm missing some context, but are you really claiming that people haven't proposed combinatorial descriptions? Here are a few:</p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/1307.6894\">https://arxiv.org/abs/1307.6894</a></li>\n<li><a href=\"https://arxiv.org/abs/1408.1598\">https://arxiv.org/abs/1408.1598</a></li>\n<li><a href=\"https://arxiv.org/abs/2101.12046\">https://arxiv.org/abs/2101.12046</a></li>\n</ul>\n<p>And these are just some involving my colleage David Spivak (and in one case also me). More people have worked on this stuff and proposed other approaches.</p>",
        "id": 429747048,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1711490509
    },
    {
        "content": "<p>This stuff is very concrete and definite. We've implemented versions of it and use it regularly! Other groups have done similarly.</p>",
        "id": 429747331,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1711490642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429737819\">said</a>:</p>\n<blockquote>\n<p>whoa I'd love to see a kind of string diagram that works natively in a general weak monoidal category where I don't have to always ask myself why it's okay to assume that a weak monoidal category is really strict...</p>\n</blockquote>\n<p>String diagrams do work natively in a weak monoidal category. This is maybe not so well-known. I don't know of a paper that spells this out completely, but <span class=\"user-mention\" data-user-id=\"276363\">@Amar Hadzihasanovic</span> and I have both considered writing something.</p>\n<p>The kind of compositional structure that string diagrams most naturally describe is a \"(colored) pro\" -- it's like a multicategory, except the arrows can have multiple outputs as well as multiple inputs. Pros are essentially algebraic (just like categories or multicategories). I could spell out an essentially algebraic definition if someone wanted.</p>\n<p>(A pro can equivalently be characterized as a strict monoidal category whose underlying monoid of objects is free. But let's prefer to think of a pro as a basic gadget in its own right. The reason being, we'll actually define monoidal categories in terms of pros. It's not a circular definition; you can define a pro without referring to monoidal categories.)</p>\n<p>A pro is called \"representable\" if every list of objects (or equivalently, every pair of objects as well as the empty list) is isomorphic to a single object.</p>\n<p>Theorem: The category of (weak) monoidal categories and (strong) monoidal functors is equivalent to the category of representable pros (in which the maps are just homomorphisms of pros, given by the essentially algebraic definition). Among other things, this theorem tells you that string diagrams work natively in a weak monoidal category.</p>\n<p>(I think <span class=\"user-mention\" data-user-id=\"276363\">@Amar Hadzihasanovic</span> also posted this same thing recently somewhere else on this Zulip, but it seems relevant here also and I want to spread the word wherever possible.)</p>\n<p>You might look at this and be unimpressed, because you already knew that every monoidal category is equivalent to a strict one (and a pro is supposedly just some special kind of strict monoidal category). What's interesting is that \"representable pro\" is a good <em>definition</em> of \"monoidal category\". It's another way of presenting the same information as the usual definition. (Whenever I want to think about monoidal categories and monoidal functors I am secretly thinking about representable pros, because it's so much easier.) On the other hand, \"strict monoidal category\" is not a good definition of \"monoidal category\"; the category of monoidal categories is not equivalent to the category of strict monoidal categories and strict functors.</p>\n<p>You can also see <a href=\"https://arxiv.org/pdf/2201.11738.pdf\">String diagrams for non-strict monoidal categories</a>. I don't think they talk about pros, but I think it is basically the same story.</p>",
        "id": 429748437,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711491202
    },
    {
        "content": "<blockquote>\n<p>String diagrams do work natively in a weak monoidal category. This is maybe not so well-known. I don't know of a paper that spells this out completely, but @Amar Hadzihasanovic and I have both considered writing something.</p>\n</blockquote>\n<p>I think this is folk-lore.  I have found it not as well-known as one might expect.  There are papers which get at this point, including the one you have cited.  As well as the work of Cockett and Seely on linearly distributive categories.  There is also the work on Kelly-Maclane graphs from even earlier.</p>",
        "id": 429750219,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1711492279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429748437\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429737819\">said</a>:</p>\n<blockquote>\n<p>whoa I'd love to see a kind of string diagram that works natively in a general weak monoidal category where I don't have to always ask myself why it's okay to assume that a weak monoidal category is really strict...</p>\n</blockquote>\n<p>[...]<br>\nYou can also see <a href=\"https://arxiv.org/pdf/2201.11738.pdf\">String diagrams for non-strict monoidal categories</a>. I don't think they talk about pros, but I think it is basically the same story.</p>\n</blockquote>\n<p>I've actually looked at this paper.  It boils down to \"interpret the string diagram in the strictification of M and then use the equivalence between M and the strictification of M\" which makes sense.  The issue is that the functor from the strictification of M to M is really complicated and has a ton of case analysis and lots of little lemmas to prove.  I could work through it all but it would take a while.  I could just choose to believe it but then I look at a string diagram and I don't even know what morphism in a (weak) monoidal category it's talking about...how do I parenthesize? where do I interpolate units and associators? etc. Maybe this is just a me problem</p>",
        "id": 429752775,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711493928
    },
    {
        "content": "<blockquote>\n<p>On the other hand, \"strict monoidal category\" is not a good definition of \"monoidal category\"; the category of monoidal categories is not equivalent to the category of strict monoidal categories and strict functors.</p>\n</blockquote>\n<p><span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> This is frightening.  Really shows that there is something substantial being pushed under the rug when people think it's okay to just assume everything is strict and not worry about it.  I want to learn how this works for sure</p>",
        "id": 429752949,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711494009
    },
    {
        "content": "<p>Every weak monoidal category is equivalent to a strict one using <em>strong</em> monoidal functors, so you could argue that the problem is not strict monoidal categories but strict monoidal functors.  (I will not so argue.)  Every weak monoidal category is also equivalent to a skeletal one by means of strong monoidal functors - but not to a strict and skeletal one!  This was worked out very nicely by <a href=\"https://arxiv.org/abs/2308.05119\">Sinh</a> in the case of 2-groups.</p>",
        "id": 429754867,
        "sender_full_name": "John Baez",
        "timestamp": 1711495107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429752775\">said</a>:</p>\n<blockquote>\n<p>I could just choose to believe it but then I look at a string diagram and I don't even know what morphism in a (weak) monoidal category it's talking about...how do I parenthesize? where do I interpolate units and associators? etc. Maybe this is just a me problem</p>\n</blockquote>\n<p>When we think of a monoidal category as a representable pro (and use string diagrams for it), all the parenthesization is explicit. For example, here is a picture of an associator component:<br>\n<a href=\"/user_uploads/21317/WhuMe9e8obuY46SJK4b51WxQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/WhuMe9e8obuY46SJK4b51WxQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/WhuMe9e8obuY46SJK4b51WxQ/image.png\"></a></div><p>That's what the \"representable\" condition is about: every pair of objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is isomorphic in the pro to a single object, i.e., their tensor product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A \\otimes B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>. (These isomorphisms and their inverses are labelled \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span>\" and \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo>⊗</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\otimes^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>\" in the attached picture.) Similarly, the empty list is isomorphic to a single object i.e., the monoidal unit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>.</p>\n<p>Functoriality of tensor product, naturality of associator and unitors, pentagon, and triangle all fall out once we pick any particular parenthesization isomorphisms in the pro.</p>",
        "id": 429754960,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711495178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429754867\">said</a>:</p>\n<blockquote>\n<p>you could argue that the problem is not strict monoidal categories but strict monoidal functors.  </p>\n</blockquote>\n<p>Indeed, <a href=\"https://arxiv.org/abs/2303.16740\">this paper</a> proves (in theorem 5.7) that when you quotient monoidal functors by natural isomorphism, the strictification adjunction becomes an equivalence.</p>",
        "id": 429755919,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1711495730
    },
    {
        "content": "<p>I find it very hard to wrap my head around why this doesn't imply a 2-equivalence between them however</p>",
        "id": 429756266,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1711495930
    },
    {
        "content": "<p>If two 2-categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A,B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> have equivalent quotient-by-isomorphism-of-1-cells categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mo>∗</mo></msub><mi>A</mi><mo separator=\"true\">,</mo><msub><mi>τ</mi><mo>∗</mo></msub><mi>B</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">\\tau_*A,\\tau_*B,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span></span></span></span> that doesn't imply that the underlying categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_0,B_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are equivalent (which is perhaps obvious) but also doesn't imply that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A,B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are equivalent, which you're suggesting feels less obvious, Dylan. I'd consider the edge case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A,B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> have just one object and one morphism (so they're doubly-delooped abelian groups.)</p>",
        "id": 429757236,
        "sender_full_name": "Kevin Carlson (aka Arlin)",
        "timestamp": 1711496583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609515\">Kevin Carlson (aka Arlin)</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429757236\">said</a>:</p>\n<blockquote>\n<p>If two 2-categories $A,B$ have equivalent quotient-by-isomorphism-of-1-cells categories $\\tau_<em>A,\\tau_</em>B,$ that doesn't imply that the underlying categories $A_0,B_0$ are equivalent (which is perhaps obvious) but also doesn't imply that $A,B$ are equivalent, which you're suggesting feels less obvious, Dylan. I'd consider the edge case that $A,B$ have just one object and one morphism (so they're doubly-delooped abelian groups.)</p>\n</blockquote>\n<p>Yeah, I maybe phrased that last sentence too strongly. I certainly didn't mean that it suggests they should be equivalent, I know 2-equivalence and equivalence of the associated 1-categories are different things. I just meant that it seems to suggest the barrier to MonCat and StrMonCat being 2-equivalent is quite subtle, and I personally struggle to form any intuition for what fails in the 2-dimensional case that doesn't in the truncated case</p>",
        "id": 429758168,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1711497213
    },
    {
        "content": "<p>Sure, so, the truncation of a 2-functor being an equivalence just says that the 2-functor itself is locally essentially surjective, right? So since the strictification 2-functor is presumably locally faithful, the problem has to be that it's not locally full. And it doesn't seem too shocking that not every monoidal transformation between strictifications of strong monoidal functors comes from a monoidal transformation between the original functors.</p>",
        "id": 429760000,
        "sender_full_name": "Kevin Carlson (aka Arlin)",
        "timestamp": 1711498584
    },
    {
        "content": "<p>If we take morphisms in StrMonCat to be strong monoidal functors rather than strict monoidal functors, I don't see why it wouldn't be 2-equivalent to MonCat.  In fact, it is a full 2-subcategory so it gives equivalences of hom-categories, and it is essentially surjective since strictification is a thing.</p>",
        "id": 429769416,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711504811
    },
    {
        "content": "<p>I realize now that you said \"strict functors\" -- it is not so surprising to me that StrMonCat would be inequivalent to MonCat if we only admit strict monoidal functors</p>",
        "id": 429769636,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711504911
    },
    {
        "content": "<p>Actually it is still somewhat surprising.  This means that given strict monoidal categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, the inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>StrictMonoidalFunctor</mtext><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>⊆</mo><mtext>StrongMonoidalFunctor</mtext><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{StrictMonoidalFunctor}(M,N)\\subseteq\\text{StrongMonoidalFunctor}(M,N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">StrictMonoidalFunctor</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">StrongMonoidalFunctor</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> is not an equivalence.  It is clearly fully faithful, so apparently it is not essentially surjective??  So there is some strong monoidal functor between strict monoidal categories which is not isomorphic to a strict monoidal functor?  It would be great to see a simple example of this.</p>",
        "id": 429770049,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711505243
    },
    {
        "content": "<p>Some misc. conjectures and facts. Anyone know how to answer these?</p>\n<ul>\n<li><strong>Conjecture:</strong> The 1-category of monoidal categories and (strong) monoidal functors is not equivalent to the 1-category of strict monoidal categories and (strong) monoidal functors.<ul>\n<li><span class=\"user-mention\" data-user-id=\"275920\">@John Baez</span> tells us there is a skeletal monoidal category that is not (strong) monoidally equivalent to any strict skeletal one. It follows that there are isomorphism classes in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>MonCat</mtext><mtext>strong</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\text{MonCat}_\\text{strong}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">MonCat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">strong</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> not in the image of the inclusion from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>StrMonCat</mtext><mtext>strong</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\text{StrMonCat}_\\text{strong}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">StrMonCat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">strong</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. (This shows the inclusion is not an equivalence, but it doesn't rule out there being some other weird equivalence.)</li>\n</ul>\n</li>\n<li><strong>Fact:</strong> The 2-category of monoidal categories and (strong) monoidal functors is equivalent to the 2-category of strict monoidal categories and (strong) monoidal functors.<ul>\n<li>As <span class=\"user-mention\" data-user-id=\"280784\">@Joshua Meyers</span> said, we know this because every monoidal category is (strong) monoidally equivalent to a strict one.</li>\n</ul>\n</li>\n<li><strong>Fact:</strong> The 1-category of monoidal categories and (strong) monoidal functors is not equivalent to the 1-category of strict monoidal categories and strict monoidal functors.<ul>\n<li>The former does not have an initial object whereas the latter does.</li>\n</ul>\n</li>\n<li><strong>Conjecture:</strong> The 2-category of monoidal categories and (strong) monoidal functors is not equivalent to the 2-category of strict monoidal categories and strict monoidal functors.<ul>\n<li><span class=\"user-mention\" data-user-id=\"280784\">@Joshua Meyers</span>  Here's an example of a (strong) monoidal functor between strict monoidal categories not isomorphic to a strict monoidal functor. (This shows the inclusion is not an equivalence, but it doesn't rule out there being some other weird equivalence.)<br>\nConsider the discrete strict monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> whose monoid of objects is the Booleans. Also consider the following strict monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>: its underlying monoid of objects is the naturals, and all objects &gt; 0 have a unique morphism between them. There are no other nonidentity morphisms.<br>\nThere is a unique strict monoidal functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, but there are other (strong) monoidal functors (equivalences, all isomorphic to each other) that are not isomorphic to it.</li>\n</ul>\n</li>\n</ul>",
        "id": 429771919,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711506943
    },
    {
        "content": "<p>Nice example! I think I remember that strong monoidal functors from a group (as a discrete monoidal category) to an abelian group (as a monoidal category with one object) are group cohomology, even though there’s always just one strict monoidal functor.</p>",
        "id": 429772605,
        "sender_full_name": "Kevin Carlson (aka Arlin)",
        "timestamp": 1711507482
    },
    {
        "content": "<p>That must be the second cohomology <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^2(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>, since the laxator takes two objects of your first monoidal category and produces a morphism in your second monoidal category.</p>",
        "id": 429773167,
        "sender_full_name": "John Baez",
        "timestamp": 1711507922
    },
    {
        "content": "<p>That must be related to <a href=\"https://arxiv.org/abs/2308.05119\">Sinh's discovery</a> that equivalence classes of monoidal categories with </p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> as their group of objects (with the group operation as tensor product), </li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> as the group of endomorphisms of the unit object (all automorphisms),</li>\n<li>a chosen action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> by \"whiskering conjugation\"</li>\n</ul>\n<p>are classified by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>3</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^3(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>, the third cohomology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> with coefficients in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.  Here we get the element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>3</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^3(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> from the associator.  If this element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>3</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^3(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> is nonzero, the monoidal category we get is not equivalent to one that's both strict and skeletal!</p>",
        "id": 429773295,
        "sender_full_name": "John Baez",
        "timestamp": 1711508009
    },
    {
        "content": "<p>It's worth noting that </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mo>≅</mo><msup><mi>H</mi><mn>3</mn></msup><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mo>≅</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">H^2(\\mathbb{Z}_2, \\mathbb{Z}_2) \\cong H^3(\\mathbb{Z}_2, \\mathbb{Z}_2) \\cong \\mathbb{Z}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>so you can get nontrivial examples just taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mi>A</mi><mo>=</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">G = A = \\mathbb{Z}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> - nice and small.</p>",
        "id": 429773580,
        "sender_full_name": "John Baez",
        "timestamp": 1711508212
    },
    {
        "content": "<p>Those are great facts and conjectures, <span class=\"user-mention\" data-user-id=\"546041\">@Aaron David Fairbanks</span>.  I hope you put the facts on the nLab so I don't have to!   It's good to get all these things sorted out and publicized.</p>",
        "id": 429773720,
        "sender_full_name": "John Baez",
        "timestamp": 1711508336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429752775\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429748437\">said</a>:</p>\n<blockquote>\n<p>[...]<br>\nYou can also see <a href=\"https://arxiv.org/pdf/2201.11738.pdf\">String diagrams for non-strict monoidal categories</a>. I don't think they talk about pros, but I think it is basically the same story.</p>\n</blockquote>\n<p>I've actually looked at this paper.  It boils down to \"interpret the string diagram in the strictification of M and then use the equivalence between M and the strictification of M\" which makes sense. </p>\n</blockquote>\n<p>No, it does not boil down to that. That's the point that Aaron was making. If you think that that's the content of the paper, you need to read it more carefully. The equivalence between non-strict monoidal categories and representable pros is related to, but independent of strictification.</p>",
        "id": 429790034,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711519404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429790034\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429752775\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429748437\">said</a>:</p>\n<blockquote>\n<p>[...]<br>\nYou can also see <a href=\"https://arxiv.org/pdf/2201.11738.pdf\">String diagrams for non-strict monoidal categories</a>. I don't think they talk about pros, but I think it is basically the same story.</p>\n</blockquote>\n<p>I've actually looked at this paper.  It boils down to \"interpret the string diagram in the strictification of M and then use the equivalence between M and the strictification of M\" which makes sense. </p>\n</blockquote>\n<p>No, it does not boil down to that. That's the point that Aaron was making. If you think that that's the content of the paper, you need to read it more carefully. The equivalence between non-strict monoidal categories and representable pros is related to, but independent of strictification.</p>\n</blockquote>\n<p>How does it not boil down to that?</p>",
        "id": 429811060,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711529981
    },
    {
        "content": "<p>The objects of the representable pro associated with a monoidal category are the objects of the monoidal category.<br>\nThe objects of the strictification are, roughly, lists of objects of the monoidal category. They are not the same thing!</p>",
        "id": 429811723,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711530154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429811723\">said</a>:</p>\n<blockquote>\n<p>The objects of the representable pro associated with a monoidal category are the objects of the monoidal category.<br>\nThe objects of the strictification are, roughly, lists of objects of the monoidal category. They are not the same thing!</p>\n</blockquote>\n<p>The paper I was claiming boils down to that doesn't mention pros though...</p>",
        "id": 429811903,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711530220
    },
    {
        "content": "<p>Yes, I believe the authors were not aware of the folklore that Cole mentioned nor the “appropriate” terminology, it was an independent rediscovery. But the content is essentially the same.</p>\n<p>The thing that you need to appreciate is that there is an <em>actual equivalence of 1-categories</em> between the category of \"representable coloured pros with a choice of 'tensoring' and 'unit' isomorphisms (what they call 'adapters')\", with colour-preserving morphisms, and the category of monoidal categories and strong monoidal functors; whereas strictification of monoidal categories, as mentioned by Aaron, is definitely <em>not</em> an equivalence of 1-categories.</p>",
        "id": 429813281,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711530741
    },
    {
        "content": "<p>For what it's worth, I think that paper is a bit of a mess, and makes many unfortunate choices such as calling one side of this equivalence \"strictification\", even if it's not actually the strictification of a monoidal category ... unless you hit it with a bunch more functors, which is what the authors are doing under the hood</p>",
        "id": 429813835,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711530937
    },
    {
        "content": "<p>Huh?  I'm not seeing any of this in the paper.  They don't seem to even raise the question of whether the category of strict structures of some sort is 2-equivalent to MonCat.  And why is their strictification not really a strictification?</p>",
        "id": 429814083,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711531014
    },
    {
        "content": "<p>Ok, looking at the paper I have to apologise to you, my recollection of it was warped -- I thought that the authors had realised the fact that I mention, but it does look like they didn't</p>",
        "id": 429815364,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711531475
    },
    {
        "content": "<p>I will try to make the point more precise. There is a (non-commutative) diagram of functors that looks like this:<br>\n<a href=\"/user_uploads/21317/deH8SrsQHDfPkbMOulDdsTw6/Screenshot-from-2024-03-27-11-27-23.png\">Screenshot-from-2024-03-27-11-27-23.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/deH8SrsQHDfPkbMOulDdsTw6/Screenshot-from-2024-03-27-11-27-23.png\" title=\"Screenshot-from-2024-03-27-11-27-23.png\"><img src=\"/user_uploads/21317/deH8SrsQHDfPkbMOulDdsTw6/Screenshot-from-2024-03-27-11-27-23.png\"></a></div>",
        "id": 429816082,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711531726
    },
    {
        "content": "<p>At the top of it, there is an actual equivalence of categories between the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{MonCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">MonCat</span></span></span></span></span> of monoidal categories with strong monoidal functors and the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">o</mi></mrow><mtext mathvariant=\"italic\">rep</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Pro}_\\textit{rep}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9722em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Pro</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord textit mtight\">rep</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> of coloured pros that are \"representable\" and have a choice of \"adapter morphisms\", together with their morphisms as coloured pros.</p>",
        "id": 429816350,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711531817
    },
    {
        "content": "<p>Regarding string diagrams for non-strict monoidal categories, what's wrong with just using ordinary string diagrams in that case? After all, once you fix the bracketing for the domain and codomain, the meaning of the diagram is uniquely fixed. Of course this needs the coherence theorem, but it's not like I need to replace the category in question with its strictification in order to interpret the diagram there.</p>",
        "id": 429816409,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1711531840
    },
    {
        "content": "<p>The \"strictification construction\" that the authors describe in the paper we are discussing actually lands in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">o</mi></mrow><mtext mathvariant=\"italic\">rep</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Pro}_\\textit{rep}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9722em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Pro</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord textit mtight\">rep</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. So if the authors were aware of this (folklore) result, they could have described this as an equivalence. This by itself completely justifies the use of string diagrams for non-strict monoidal categories.</p>",
        "id": 429816678,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711531928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277285\">Martti Karvonen</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429816409\">said</a>:</p>\n<blockquote>\n<p>Regarding string diagrams for non-strict monoidal categories, what's wrong with just using ordinary string diagrams in that case? After all, once you fix the bracketing for the domain and codomain, the meaning of the diagram is uniquely fixed. Of course this needs the coherence theorem, but it's not like I need to replace the category in question with its strictification in order to interpret the diagram there.</p>\n</blockquote>\n<p>It's not so simple.  Suppose we fix the bracketing of the domain as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\otimes B)\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and the first morphism in the string diagram has domain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">B\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?  You will need to interpose unitors and associators possibly many times</p>",
        "id": 429816950,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711532036
    },
    {
        "content": "<p>But instead, they interpret it as an endofunctor on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{MonCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">MonCat</span></span></span></span></span>, by composing it with the sequence of functors around the square that I drew, which in turn</p>\n<ul>\n<li>forget the \"adapters\" and include the representable coloured pro into the category of (generic) coloured pros,</li>\n<li>interpret a pro as a strict monoidal category with freely generated set of objects,</li>\n<li>include the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">t</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{StrMonCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">StrMonCat</span></span></span></span></span> of strict monoidal categories and strict functors as a subcategory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{MonCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">MonCat</span></span></span></span></span>.</li>\n</ul>",
        "id": 429817104,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711532080
    },
    {
        "content": "<p>All of these functors are faithful, so you are not losing any information, and if you do this “round trip”, you do actually get the Mac Lane strictification of a monoidal category.</p>",
        "id": 429817287,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711532138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429816950\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277285\">Martti Karvonen</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429816409\">said</a>:</p>\n<blockquote>\n<p>Regarding string diagrams for non-strict monoidal categories, what's wrong with just using ordinary string diagrams in that case? After all, once you fix the bracketing for the domain and codomain, the meaning of the diagram is uniquely fixed. Of course this needs the coherence theorem, but it's not like I need to replace the category in question with its strictification in order to interpret the diagram there.</p>\n</blockquote>\n<p>It's not so simple.  Suppose we fix the bracketing of the domain as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\otimes B)\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and the first morphism in the string diagram has domain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">B\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?  You will need to interpose unitors and associators possibly many times</p>\n</blockquote>\n<p>Sure, but whatever choices you need to  make to get the morphism to type-check result in a unique composite (by coherence).</p>",
        "id": 429817459,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1711532186
    },
    {
        "content": "<p>But “taking this round trip” also adds a lot of garbage which is irrelevant to the question of string diagrams in non-strict monoidal categories (this is the reason why I think the paper is a bit of a mess).</p>",
        "id": 429817470,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711532191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277285\">@Martti Karvonen</span> Yes, the point that you are making is precisely the informal content of the equivalence between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{MonCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">MonCat</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">o</mi></mrow><mtext mathvariant=\"italic\">rep</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Pro}_\\textit{rep}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9722em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Pro</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord textit mtight\">rep</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 429817711,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711532275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277285\">Martti Karvonen</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429817459\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429816950\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277285\">Martti Karvonen</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429816409\">said</a>:</p>\n<blockquote>\n<p>Regarding string diagrams for non-strict monoidal categories, what's wrong with just using ordinary string diagrams in that case? After all, once you fix the bracketing for the domain and codomain, the meaning of the diagram is uniquely fixed. Of course this needs the coherence theorem, but it's not like I need to replace the category in question with its strictification in order to interpret the diagram there.</p>\n</blockquote>\n<p>It's not so simple.  Suppose we fix the bracketing of the domain as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\otimes B)\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and the first morphism in the string diagram has domain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">B\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?  You will need to interpose unitors and associators possibly many times</p>\n</blockquote>\n<p>Sure, but whatever choices you need to  make to get the morphism to type-check result in a unique composite (by coherence).</p>\n</blockquote>\n<p>How do you do this rigorously?  That is the question we are discussing</p>",
        "id": 429817870,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711532329
    },
    {
        "content": "<p>Again, <em>it so happens</em> that you have another way to “embed” the latter as a subcategory of the former, and this gives you the strictification. But this is irrelevant to the interpretation of string diagrams.</p>",
        "id": 429817962,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711532357
    },
    {
        "content": "<p>Now, to be fair, the authors also profess another aim in the paper, which is to reprove coherence in a different way -- and indeed, to prove that the functor landing in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">o</mi></mrow><mtext mathvariant=\"italic\">rep</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Pro}_\\textit{rep}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9722em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Pro</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord textit mtight\">rep</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is an equivalence, you do need coherence.<br>\nBut that also has nothing to do by itself with string diagrams in non-strict contexts, so it should probably not be the main technical content of a paper named that way.</p>",
        "id": 429819364,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711532813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429771919\">said</a>:</p>\n<blockquote>\n<p>Some misc. conjectures and facts. Anyone know how to answer these?</p>\n<ul>\n<li><strong>Conjecture:</strong> The 1-category of monoidal categories and (strong) monoidal functors is not equivalent to the 1-category of strict monoidal categories and (strong) monoidal functors.<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> tells us there is a skeletal monoidal category that is not (strong) monoidally equivalent to any strict skeletal one. It follows that there are isomorphism classes in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>MonCat</mtext><mtext>strong</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\text{MonCat}_\\text{strong}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">MonCat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">strong</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> not in the image of the inclusion from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>StrMonCat</mtext><mtext>strong</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\text{StrMonCat}_\\text{strong}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">StrMonCat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">strong</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. (This shows the inclusion is not an equivalence, but it doesn't rule out there being some other weird equivalence.)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>How does Baez's example show that the inclusion is not an equivalence?  I'm not sure how you're doing the step you introduce with \"It follows\".</p>\n<blockquote>\n<ul>\n<li><strong>Fact:</strong> The 2-category of monoidal categories and (strong) monoidal functors is equivalent to the 2-category of strict monoidal categories and (strong) monoidal functors.<ul>\n<li>As <span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> said, we know this because every monoidal category is (strong) monoidally equivalent to a strict one.</li>\n</ul>\n</li>\n<li><strong>Fact:</strong> The 1-category of monoidal categories and (strong) monoidal functors is not equivalent to the 1-category of strict monoidal categories and strict monoidal functors.<ul>\n<li>The former does not have an initial object whereas the latter does.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>To elaborate on this, suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> was an initial object in the 1-category of monoidal categories and strong monoidal functors.  Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> be the strict monoidal category whose underlying monoid of objects is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> and where each pair of objects have a unique morphism between them.  Then every constant functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is strong monoidal.</p>\n<p>This also shows that the 1-category of strict monoidal categories and strong monoidal functors is not equivalent to the 1-category of strict monoidal categories and strict monoidal functors.</p>\n<blockquote>\n<ul>\n<li><strong>Conjecture:</strong> The 2-category of monoidal categories and (strong) monoidal functors is not equivalent to the 2-category of strict monoidal categories and strict monoidal functors.<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span>  Here's an example of a (strong) monoidal functor between strict monoidal categories not isomorphic to a strict monoidal functor. (This shows the inclusion is not an equivalence, but it doesn't rule out there being some other weird equivalence.)<br>\nConsider the discrete strict monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> whose monoid of objects is the Booleans. Also consider the following strict monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>: its underlying monoid of objects is the naturals, and all objects &gt; 0 have a unique morphism between them. There are no other nonidentity morphisms.<br>\nThere is a unique strict monoidal functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, but there are other (strong) monoidal functors (equivalences, all isomorphic to each other) that are not isomorphic to it.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>Nice example!</p>",
        "id": 429821789,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711533515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276363\">@Amar Hadzihasanovic</span>  how do you define a pro? how do you define representable? how do you define coloured?  Or where can I find these definitions?</p>",
        "id": 429822497,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711533719
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/274877-community.3A-our-work/topic/John.20Baez/near/422191083\">this recent thread</a> :)</p>",
        "id": 429823095,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711533878
    },
    {
        "content": "<p>(Actually that's about props vs symmetric monoidal cats, but just forget about symmetries.)</p>",
        "id": 429823249,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711533918
    },
    {
        "content": "<p>One way of describing a coloured pro is as a strict monoidal category whose objects form a free monoid on a set of \"colours\" (with the monoidal product on objects being the multiplication in the free monoid), and a morphism of coloured pros sends \"colours\" to \"colours\".<br>\nYou can also (conceptually preferable) see them as independent compositional gadgets similar to operads/multicategories or properads.</p>",
        "id": 429823739,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711534057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429771919\">said</a>:</p>\n<blockquote>\n<p>Some misc. conjectures and facts. Anyone know how to answer these?</p>\n<ul>\n<li><strong>Conjecture:</strong> The 1-category of monoidal categories and (strong) monoidal functors is not equivalent to the 1-category of strict monoidal categories and (strong) monoidal functors.<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> tells us there is a skeletal monoidal category that is not (strong) monoidally equivalent to any strict skeletal one. It follows that there are isomorphism classes in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>MonCat</mtext><mtext>strong</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\text{MonCat}_\\text{strong}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">MonCat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">strong</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> not in the image of the inclusion from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>StrMonCat</mtext><mtext>strong</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\text{StrMonCat}_\\text{strong}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">StrMonCat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">strong</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. (This shows the inclusion is not an equivalence, but it doesn't rule out there being some other weird equivalence.)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>One way to show this is by showing that idempotents split in the 1-category of monoidal categories and strong monoidal functors but not when you restrict to strict monoidal categories, see section 6.2. of <a href=\"https://arxiv.org/abs/2003.06375\">this paper</a>  by John Bourke.</p>",
        "id": 429823975,
        "sender_full_name": "Martti Karvonen",
        "timestamp": 1711534116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429813835\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, I think that paper is a bit of a mess, and makes many unfortunate choices such as calling one side of this equivalence \"strictification\", even if it's not actually the strictification of a monoidal category ... unless you hit it with a bunch more functors, which is what the authors are doing under the hood</p>\n</blockquote>\n<p>What do you mean it is not the strictification?  There is no canonical choice of strictification, which is the point of the coherence theorem in my view.  In my reading, they have just produced a particular strictification, and have essentially reproven a version of the coherence theorem.</p>",
        "id": 429850427,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1711543319
    },
    {
        "content": "<p>I think that the exposition of string diagrams for non-strict monoidal/symmetric monoidal categories in the literature is quite lacking.  And it is a shame that no one is allowed to publish this kind of folklore, because I believe it would be quite a useful resource to some people.</p>",
        "id": 429850941,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1711543496
    },
    {
        "content": "<p>Is it really the case that no one is allowed to publish it?  What about TAC Expositions?  Or at least the arxiv...</p>",
        "id": 429851093,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711543548
    },
    {
        "content": "<p>I think I have come across at least 3 different groups which have rediscovered this fact, which shows that people think this knowledge is important, and that it is unknown to them.</p>",
        "id": 429851110,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1711543555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429851093\">said</a>:</p>\n<blockquote>\n<p>Is it really the case that no one is allowed to publish it?  What about TAC Expositions?  Or at least the arxiv...</p>\n</blockquote>\n<p>I wasn't aware of TAC expositions.  That would be a great venue.  Maybe if I find a permanent job then I will try to write something for there.</p>",
        "id": 429851281,
        "sender_full_name": "Cole Comfort",
        "timestamp": 1711543608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277391\">Cole Comfort</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429851110\">said</a>:</p>\n<blockquote>\n<p>I think I have come across at least 3 different groups which have rediscovered this fact, which shows that people think this knowledge is important, and that it is unknown to them.</p>\n</blockquote>\n<p>But this doesn't imply that they would be unable to publish it?</p>",
        "id": 429854265,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711544607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277391\">Cole Comfort</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429850941\">said</a>:</p>\n<blockquote>\n<p>I think that the exposition of string diagrams for non-strict monoidal/symmetric monoidal categories in the literature is quite lacking. </p>\n</blockquote>\n<p>I admit I am still a little perplexed by even the term \"string diagrams for non-strict monoidal categories\", because my impression was that the entire point of string diagrams was that they could be used to reason about arbitrary monoidal categories. The authors of \"String diagrams for non-strict monoidal categories\" seem to agree with this. However, they claim it is still useful to be explicit about the non-strictness for examples, but I did not find their examples supported this claim. An alternative proof of the coherence theorem is one application, but it seems to me that, after one has proven the coherence theorem that way, one is justified in never using the more explicit notion of string diagram again. What am I missing?</p>",
        "id": 429855141,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711544901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277391\">Cole Comfort</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429850427\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429813835\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, I think that paper is a bit of a mess, and makes many unfortunate choices such as calling one side of this equivalence \"strictification\", even if it's not actually the strictification of a monoidal category ... unless you hit it with a bunch more functors, which is what the authors are doing under the hood</p>\n</blockquote>\n<p>What do you mean it is not the strictification?  There is no canonical choice of strictification, which is the point of the coherence theorem in my view.  In my reading, they have just produced a particular strictification, and have essentially reproven a version of the coherence theorem.</p>\n</blockquote>\n<p>Perhaps the point of contention here is that the terms \"strictification\" and \"coherence\" are often used interchangeably, but they are technically different (but related) results? The correctness of string diagrams relies on coherence, rather than on strictification.</p>",
        "id": 429855502,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711545009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429821789\">said</a>:</p>\n<blockquote>\n<p>How does Baez's example show that the inclusion is not an equivalence?  I'm not sure how you're doing the step you introduce with \"It follows\".<br>\n</p>\n</blockquote>\n<p>A monoidal isomorphism induces an isomorphism of underlying 1-categories, so it preserves skeletal-ness. So Baez's example tells us there are skeletal monoidal categories not monoidally isomorphic to any strict ones.</p>",
        "id": 429874596,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711550203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277285\">Martti Karvonen</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429823975\">said</a>:</p>\n<blockquote>\n<p>One way to show this is by showing that idempotents split in the 1-category of monoidal categories and strong monoidal functors but not when you restrict to strict monoidal categories, see section 6.2. of <a href=\"https://arxiv.org/abs/2003.06375\">this paper</a>  by John Bourke.</p>\n</blockquote>\n<p>Great, thanks! I'll check it out.</p>",
        "id": 429875312,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711550352
    },
    {
        "content": "<p>What draws me to these \"string diagrams for non-strict monoidal categories\" personally is they help me think about monoidal functors. Think of the string diagram calculus as an essentally algebraic structure itself (this is what a colored pro is) and use that as a definition of monoidal category. Then monoidal functors turn out to be the straightforward homomorphisms: mapping the string diagrams and equalities underlying one monoidal category into the string diagrams and equalities underlying another monoidal category.</p>\n<p>This is the only way I have been able to keep up with the conversation and give examples -- otherwise thinking about monoidal functors would make my brain hurt.</p>",
        "id": 429882629,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711552065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429855141\">said</a>:</p>\n<blockquote>\n<p>However, they claim it is still useful to be explicit about the non-strictness for examples, but I did not find their examples supported this claim.</p>\n</blockquote>\n<p>If you only knew the coherence theorem, but you didn't know about \"string diagrams for non-strict monoidal categories\" (particularly the equivalence of the 1-categories described above), then it would help you think about the morphisms in an individual monoidal category, but it wouldn't help you think about monoidal functors.</p>",
        "id": 429885570,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711552878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277391\">Cole Comfort</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429850427\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429813835\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, I think that paper is a bit of a mess, and makes many unfortunate choices such as calling one side of this equivalence \"strictification\", even if it's not actually the strictification of a monoidal category ... unless you hit it with a bunch more functors, which is what the authors are doing under the hood</p>\n</blockquote>\n<p>What do you mean it is not the strictification?  There is no canonical choice of strictification, which is the point of the coherence theorem in my view.  In my reading, they have just produced a particular strictification, and have essentially reproven a version of the coherence theorem.</p>\n</blockquote>\n<p>I mean that in turn to justify string diagrams in non-strict monoidal categories, they are implicitly treating the construction as landing in coloured pros, and not in strict monoidal categories, because in the category of coloured pros the \"string diagrams\" are colour-preserving functors, hence the wires are only allowed to be labelled with the objects of the original monoidal category.</p>",
        "id": 429888829,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711553752
    },
    {
        "content": "<p>If they actually were considering the strictification, then the valid string diagrams could also have wires labelled by lists of objects.</p>",
        "id": 429889009,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711553797
    },
    {
        "content": "<p>So it's like they're doing the correct construction of a representable pro, then adding a bunch of what is \"garbage\" for their stated purposes, and then ignoring the \"garbage\" they have just added.</p>",
        "id": 429889385,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711553893
    },
    {
        "content": "<p>By the way, a completely analogous thing works for bicategories too, and I would guess there are analogous things that work for many other kinds of compositional structures. Theorem 2.3 in <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>'s paper <a href=\"https://arxiv.org/abs/1911.00818\">A practical type theory for symmetric monoidal categories</a> is the analogous theorem for symmetric monoidal categories (that they are equivalent to representable colored proPs), and this is the only place I've seen one of these results explicitly stated.</p>",
        "id": 429898814,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711556343
    },
    {
        "content": "<p>I was away for a few days and didn't manage to read every word that was said recently, so my apologies if this was already said.  But perhaps part of the confusion about pros is that one of the simplest definitions of a pro is as a strict monoidal category whose objects are a free monoid.  So in that sense, on passing from an ordinary monoidal category to the equivalent pro one is \"strictifying\".  Now one generally speaks of the \"objects of the pro\" as being not the objects of the strict monoidal category that it \"is\", but rather the <em>generators</em> of the free monoid of objects, and in that sense the set of objects is preserved when passing from a monoidal category to a pro.  But I think there's also a sense in which the content of this equivalence is the same as the content of the strictification theorem.</p>",
        "id": 429956432,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711576799
    },
    {
        "content": "<p>Also:<br>\n<span class=\"user-mention silent\" data-user-id=\"378472\">Dylan Braithwaite</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429755919\">said</a>:</p>\n<blockquote>\n<p>Indeed, <a href=\"https://arxiv.org/abs/2303.16740\">this paper</a> proves (in theorem 5.7) that when you quotient monoidal functors by natural isomorphism, the strictification adjunction becomes an equivalence.</p>\n</blockquote>\n<p>I don't think I believe that.  The proof ends by claiming that since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">P</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>:</mo><msup><mi mathvariant=\"script\">D</mi><mrow><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">r</mi></mrow></msup><mo>→</mo><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Par} : \\mathcal{D}^{\\mathrm{str}} \\to \\mathcal{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Par</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">str</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> is a strict equivalence of categories, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"script\">D</mi><mrow><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">r</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}^{\\mathrm{str}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">str</span></span></span></span></span></span></span></span></span></span></span></span></span> are isomorphic in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mrow><mi mathvariant=\"sans-serif\">s</mi><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">r</mi><mi mathvariant=\"sans-serif\">M</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">C</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">h \\mathsf{strMonCat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord\"><span class=\"mord mathsf\">strMonCat</span></span></span></span></span>.  But I don't think that follows; Par can be a strict monoidal functor that is an equivalence of categories without having an inverse equivalence that is also a strict monoidal functor, which is what would be required for the conclusion.</p>",
        "id": 429956698,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711576905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275965\">Evan Patterson</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429747048\">said</a>:</p>\n<blockquote>\n<p>I haven't followed this whole thread, so maybe I'm missing some context, but are you really claiming that people haven't proposed combinatorial descriptions? Here are a few:</p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/1307.6894\">https://arxiv.org/abs/1307.6894</a></li>\n<li><a href=\"https://arxiv.org/abs/1408.1598\">https://arxiv.org/abs/1408.1598</a></li>\n<li><a href=\"https://arxiv.org/abs/2101.12046\">https://arxiv.org/abs/2101.12046</a></li>\n</ul>\n<p>And these are just some involving my colleage David Spivak (and in one case also me). More people have worked on this stuff and proposed other approaches.</p>\n</blockquote>\n<p>Neat papers and diagrams. I think the people in this thread were interested to see combinatorial models of non-symmetric monoidal categories in particular, but it looks like the ones linked are symmetric. My understanding is the operad of wiring diagrams in the second paper could be described as \"the operad for traced props (on a fixed color set)\" and the operad of wiring diagrams in the third paper could be described as \"the operad for <a href=\"https://ncatlab.org/nlab/show/PROP\">props</a> (on a fixed color set)\". Is that right?</p>",
        "id": 429963008,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711580399
    },
    {
        "content": "<p>That's right. All these papers are about the symmetric case. Sorry for missing the point!</p>",
        "id": 429963336,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1711580518
    },
    {
        "content": "<blockquote>\n<p>I think the people in this thread were interested to see combinatorial models of non-symmetric monoidal categories in particular</p>\n</blockquote>\n<p>That isn't my impression. String diagrams for symmetric monoidal categories are more complicated than those for nonsymmetric monoidal categories, so it seems to me that that's even better.</p>",
        "id": 429967866,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711583393
    },
    {
        "content": "<p>I think that string diagrams for SMCs are more <em>useful</em> than those for non-symmetric monoidal categories, just because the former seem to show up much more frequently in applications. But it's interesting that it seems easier to define graph-like combinatorial diagrams in the symmetric case, even though the structure is more complicated algebraically.</p>",
        "id": 429968216,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1711583600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429967866\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think the people in this thread were interested to see combinatorial models of non-symmetric monoidal categories in particular</p>\n</blockquote>\n<p>That isn't my impression. String diagrams for symmetric monoidal categories are more complicated than those for nonsymmetric monoidal categories, so it seems to me that that's even better.</p>\n</blockquote>\n<p>I would say that string diagrams for symmetric monoidal categories are <em>simpler</em> than those for nonsymmetric monoidal categories, because you don't have to worry about embedding them in a plane but they can just be abstract graphs or manifolds.  That was my point a while ago: I think the combinatorial definitions of nonsymmetric string diagrams are more complicated and further from intuition than the topological ones that can literally talk about \"embedding in a plane\".</p>",
        "id": 429986738,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711595885
    },
    {
        "content": "<p>that is a very nice observation, mike shulman. i sensed that difference but didn't quite manage to articulate it, and probably didn't even understand it.</p>\n<p>but it is an interesting phenomenon objectively. the most natural version of string diagrams, the genuine poincare dual of the cell diagrams, the string diagrams for 2 categories, are <em>not</em> the most natural ones to manipulate. some things are easier to solve without them than with them. the string diagrams for the symmetric monoidal case are much easier, and i think almost always make things easier.</p>\n<p>maybe the genuinely geometric string diagrams require chasing in a different medium? maybe with the help of some future intelligent interfaces, we will be able to chase string diagrams (face diagrams: 0-cells are the faces) in space.</p>",
        "id": 430024860,
        "sender_full_name": "dusko",
        "timestamp": 1711617396
    },
    {
        "content": "<p>I don't disagree about the primacy of “topological intuition”, but I guess I do disagree with what sort of mathematical object more closely adheres to the cognitive process behind “topological intuition”. As I tried to suggest, when I look at a string diagram and form a judgement about whether that diagram is a “embedded into a plane”, I believe that my brain is filtering out all the “point-set topological” stuff. I am not looking at what an edge is doing in any particular point, I am simply cataloguing elements of the picture as 0-dimensional, 1-dimensional, or 2-dimensional; and then I am going through a sequence of discrete checks, of the form “Are these two adjacent edges bounding a single region of space”? (Not so explicitly formed, but that is their essential content). So all the data that my brain is actually taking into account is</p>\n<ul>\n<li>dimensionality,</li>\n<li>incidence relations between faces/edges/vertices,</li>\n<li>direction unless we have self-dual objects or something like that</li>\n</ul>\n<p>and that is exactly the information which would be stored into a combinatorial description of a planar string diagram.</p>",
        "id": 430032341,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711620027
    },
    {
        "content": "<p>I find that there's a certain amount of \"begging the question\" in these claims that an enormous equivalence class of continuous embeddings into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> gets to be \"closer to intuition\"; as if, this \"gets\" to be identified with a nice little picture in your head; whereas when you say \"combinatorial description\", you think of some table, or some Hasse diagram, or something dry and unreadable like that. But then the former is \"closer to intuition\" only because you are <em>declaring</em> it to be somehow <em>equivalent</em> to your intuition.</p>",
        "id": 430033951,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711620565
    },
    {
        "content": "<p>ok so can you give or cite a definition of a combinatorial description of a planar string diagram?</p>",
        "id": 430049993,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711626683
    },
    {
        "content": "<p>(I think people think different things about what's close to intuition because people develop their intuitions in completely different ways and have completely different things in their heads.)</p>",
        "id": 430052637,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1711627418
    },
    {
        "content": "<p>Yeah, we had this argument several times already in this thread and didn't get anywhere.  I believe that my brain is not thinking about any of the extra data you have to impose on a planar diagram to make it combinatorial, and in partircular not thinking about any \"2-dimensional\" aspects of the picture, just about the fact that it is <em>drawn on paper</em>.  There's no sense in which I'm thinking about an \"enormous equivalence class\", just about a single representative of it.  And I'm surprised that you and others claim to find it complicated to intuit the connection between physical space and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, which has been a staple of mathematical intuition and modeling for centuries.  (Yes, of course, philosophers argue about it, but philosophers argue about everything.)</p>",
        "id": 430080228,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711636161
    },
    {
        "content": "<p>Well none of the proponents of a combinatorial definition of planar string diagram have yet actually exhibited one, they have just advocated for it <em>in theory</em>.  I want to see how you would actually do it before I evaluate the approach.</p>",
        "id": 430083880,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711637061
    },
    {
        "content": "<p>Reasoning about geometry synthetically in terms of points, lines, faces and their incidence relation predates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> by a couple of millennia, so I don't think it should be difficult to believe that one's \"topological intuition\" can be structured along the former ideas rather than the latter.</p>",
        "id": 430085020,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711637344
    },
    {
        "content": "<p>Yeah it's not difficult to believe, I just want to see how it works in practice.</p>",
        "id": 430085360,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711637421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280784\">@Joshua Meyers</span> I have linked a paper of mine that uses combinatorial planar string diagrams. This was not deemed satisfactory because the definition is \"just\" a special instance of a general higher-dimensional definition, and I was invited to write down its specialisation to 2 dimensions. Since there seems to be a lot of demand, I guess I should do it, after I am finished with other priorities.</p>",
        "id": 430085618,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711637490
    },
    {
        "content": "<p>This discussion reminds me of Daniel Kahneman's book \"Thinking fast and slow\".  From what I remember, I quite liked the idea that \"intuition\" is the accumulation of practice, and the result of a long process that make a thing easy/fast/effortless to recall.</p>\n<p>I guess we invoke \"visual intuition\" because, most of us (although not everyone) have a lot of visual experience. And it could be seen as bad faith the fact that someone would refuse this common (although not universal) source of experience. Of course, mathematical practice (e.g. algebraic manipulations, proving things, but also traditions and schools.) is (obviously) another great source of mathematical experience, thus mathematical intuition. </p>\n<p>In short, I guess we cannot judge abstractly that \"X is more intuitive than Y\": it's more about practicing together.</p>\n<p>ps: Daniel Kahneman died yesterday. RIP.</p>",
        "id": 430086506,
        "sender_full_name": "Peva Blanchard",
        "timestamp": 1711637728
    },
    {
        "content": "<p>Suppose we write a computer program in which the user can draw string diagrams (which many people have done).  I think the most natural way of interacting with it is be like a vector graphics program: I can drop a node here and a node there, and then connect them with either a hand-drawn curve or perhaps a spline.  Nowhere do I think about regions or orderings or any other combinatorial data.  Of course this is a discretized version of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, but I think it's much closer to that model than to any combinatorial one.</p>",
        "id": 430096000,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711640064
    },
    {
        "content": "<p>For what it's worth, I think string diagrams, as people often use them, are far too flexible. People draw curved lines when straight lines will do (and correspond directly to the duals of the pasting diagrams), and this obscures the combinatorial perspective.</p>",
        "id": 430099927,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711640817
    },
    {
        "content": "<p>I think it's telling that you are saying a <em>vector</em> graphics program: that is, one in which \"lines\" and \"nodes\" will be stored as objects of a different class, with lines having endpoints that are associated to nodes.<br>\nBy contrast, using a <em>bitmap</em> graphics program, where a line is literally a \"continuous sequence of points\" would be a nightmare!<br>\nI think the first is much closer to what I think of as combinatorial, and the second to \"point-set\" topological.</p>",
        "id": 430100386,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711640899
    },
    {
        "content": "<p>I think string diagrams for monoidal categories should only involve curved lines in the presence of duals, for instance.</p>",
        "id": 430100405,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711640903
    },
    {
        "content": "<p>You often need curved lines to go around things and prevent collisions.  Perhaps in many cases this could be avoided by judiciously moving the nodes around but it isn't necessarily a trivial computational problem to move the nodes around in such a way that all lines can be straight</p>",
        "id": 430100649,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711640950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> That seems to me like you are noticing a mismatch between how people use string diagrams and your preferred combinatorial formalization.  I would say that means you should choose a different formalization, rather than complain that people should use them differently!  (-:</p>",
        "id": 430100689,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711640957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430100649\">said</a>:</p>\n<blockquote>\n<p>You often need curved lines to go around things and prevent collisions.  Perhaps in many cases this could be avoided by judiciously moving the nodes around but it isn't necessarily a trivial computational problem to move the nodes around in such a way that all lines can be straight</p>\n</blockquote>\n<p>You need to be more careful about nodes, yes, e.g. allowing them to be wide to accommodate multiple inputs/outputs, but it's very simple to do in practice.</p>",
        "id": 430101247,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711641048
    },
    {
        "content": "<p>Allowing nodes to be wide won't help with having to go around them!</p>",
        "id": 430101508,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711641101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430100689\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> That seems to me like you are noticing a mismatch between how people use string diagrams and your preferred combinatorial formalization.  I would say that means you should choose a different formalization, rather than complain that people should use them differently!  (-:</p>\n</blockquote>\n<p>Perhaps that really is the pertinent point, you're right.</p>",
        "id": 430101586,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711641115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276363\">@Amar Hadzihasanovic</span>, note that even in a vector graphics program the position of a node in the plane is a pair of numbers, a spline is specified by numbers indicating things like its starting and ending angles and its control points, and there is nothing representing regions or orderings.  If you call that \"combinatorial\" then okay, but it seems to me like you do need something Joyal-Street-like to show how to interpret them.</p>",
        "id": 430101689,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711641127
    },
    {
        "content": "<p>If you want to argue that Joyal and Street should have worked in algebraic geometry rather than differential geometry, I'll listen to that argument!</p>",
        "id": 430102009,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711641184
    },
    {
        "content": "<p>But it's still geometry, not what I would call combinatorial.</p>",
        "id": 430102065,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711641196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430101586\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430100689\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> That seems to me like you are noticing a mismatch between how people use string diagrams and your preferred combinatorial formalization.  I would say that means you should choose a different formalization, rather than complain that people should use them differently!  (-:</p>\n</blockquote>\n<p>Perhaps that really is the pertinent point, you're right.</p>\n</blockquote>\n<p>Although I think there are good reasons to use string diagrams in the way I would advocate, not just for reasons of formalisation. But perhaps that is a separate discussion.</p>",
        "id": 430102157,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711641214
    },
    {
        "content": "<p>On the other hand, I belive using string diagrams in this way addresses the formalisation problem, without introducing any problems in practice :)</p>",
        "id": 430103098,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711641371
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/combinatorial+map\">https://ncatlab.org/nlab/show/combinatorial+map</a> seems relevant</p>",
        "id": 430103505,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711641451
    },
    {
        "content": "<p>In the analogy to the interpretation of type-theoretic syntax, I would say that the combinatorial approaches are like intrinsically-well-typed inductive-inductive syntax; vector graphics are like untyped abstract syntax trees; and bitmap graphics are like strings of symbols.  Parsing and lexing strings of symbols into ASTs is nontrivial but largely a solved problem, and similarly for passing from bitmaps to vectors.  And interpreting well-typed syntax into a model is straightforward, but well-typed syntax is not what we write in practice.  The interesting gap is between vector graphics or ASTs and well-typed syntax or semantics.</p>",
        "id": 430104082,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711641555
    },
    {
        "content": "<p>FWIW even though I agree with Mike that geometry is just as valid a foundation as algebra, and need not be reduced to algebra, I still would like to see a combinatorial (algebraic) definition of string diagram because it would give insight into the general form of a morphism in a presentation of a pro</p>",
        "id": 430104624,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711641666
    },
    {
        "content": "<p>Something like in this paper? <a href=\"https://arxiv.org/pdf/2104.14686.pdf\">String Diagram Rewrite Theory II:\nRewriting with Symmetric Monoidal Structure</a></p>",
        "id": 430109510,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1711642836
    },
    {
        "content": "<p>We were more thinking about the not-necessarily-symmetric monoidal case</p>",
        "id": 430109794,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711642899
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 430109826,
        "sender_full_name": "Jean-Baptiste Vienney",
        "timestamp": 1711642913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> my understanding of \"combinatorial\" is, essentially, that the primitives are nodes, edges, and faces -- as \"atomic\" elements that have different type -- together with their (possibly oriented) incidence relations. For me this does not imply intrinsic well-typedness.<br>\nYou may say that in the monoidal case you do not need to have explicit faces, but you do in the general 2-categorical case, and I don't see a reason to treat them separately.</p>",
        "id": 430112389,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711643507
    },
    {
        "content": "<p>I think this is in line with how you interact with the diagrams in the hypothetical vector graphics program. You click on a node, it selects the node. You click on any point of an edge, it selects the entire edge. You click on a face, it selects the face, you can change its colour etc. You tweak their appearance/position, but the program modifies all the incident elements in order to keep the incidence relation stable.</p>",
        "id": 430114275,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711643884
    },
    {
        "content": "<p>No, I don't click on a \"face\".  There are no \"faces\".</p>",
        "id": 430114340,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711643905
    },
    {
        "content": "<p>All there are are nodes and edges.</p>",
        "id": 430114371,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711643912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430104082\">said</a>:</p>\n<blockquote>\n<p>but well-typed syntax is not what we write in practice</p>\n</blockquote>\n<p>I would have said that well-typed syntax is precisely what we write (e.g. in a paper). In a programming language, input is inherently just textual (at least in mainstream programming languages), so one must technically write strings of symbols instead, but if there was a convenient input method for well-typed syntax, I would view that as wholly preferable.</p>",
        "id": 430114452,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711643940
    },
    {
        "content": "<p>Sorry, I should have said <em>intrinsically</em> well-typed syntax is not what we write.  Even in a paper, the reader has to do the typechecking step.</p>",
        "id": 430114596,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711643988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430112389\">said</a>:</p>\n<blockquote>\n<p>You may say that in the monoidal case you do not need to have explicit faces, but you do in the general 2-categorical case, and I don't see a reason to treat them separately.</p>\n</blockquote>\n<p>I do.  Namely, the monoidal case is simpler, because you don't have to think about faces!  (-:</p>",
        "id": 430114857,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711644048
    },
    {
        "content": "<p>I think one of my takeaways from this discussion is that it would be useful to have more precise terminology to refer to the different perspectives on string diagrams (and graphical syntaxes more generally), just as for the different perpectives on type theory (and term syntaxes more generally).</p>",
        "id": 430117052,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711644451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430109794\">said</a>:</p>\n<blockquote>\n<p>We were more thinking about the not-necessarily-symmetric monoidal case</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"460603\">@Malin Altenmüller</span> mentioned earlier in the thread her work on <a href=\"https://arxiv.org/abs/2210.08914\">DPO rewriting for surface embedded graphs</a> which I believe is intended to build towards a model for rewriting with planar string diagrams.</p>\n<p>Doesn't this more-or-less give a combinatorial definition of the sort you're looking for?</p>",
        "id": 430118189,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1711644649
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/M8Ete-ZqFkDk0bfKFR7rtUJ7/828e6bce-cab5-4c07-9f80-2e91feba8826.png\">828e6bce-cab5-4c07-9f80-2e91feba8826.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/M8Ete-ZqFkDk0bfKFR7rtUJ7/828e6bce-cab5-4c07-9f80-2e91feba8826.png\" title=\"828e6bce-cab5-4c07-9f80-2e91feba8826.png\"><img src=\"/user_uploads/21317/M8Ete-ZqFkDk0bfKFR7rtUJ7/828e6bce-cab5-4c07-9f80-2e91feba8826.png\"></a></div><p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> This to me is as clearly \"4 regions of the plane\" as it is \"2 intersecting lines\". You are trying to suggest that it is possible for you to look at lines on paper (or the screen) in a way that neatly separates them from the regions of the plane that they bound. I simply do not think that this is how perception works!</p>",
        "id": 430119711,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711644923
    },
    {
        "content": "<p>There's plenty of optical illusions which make use precisely of the fact that \"negative space\" is as concrete to our senses as, well, its opposite :)</p>",
        "id": 430120308,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430099927\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, I think string diagrams, as people often use them, are far too flexible. People draw curved lines when straight lines will do (and correspond directly to the duals of the pasting diagrams), and this obscures the combinatorial perspective.</p>\n</blockquote>\n<p>For most people I know, the main point of string diagrams is not \"the combinatorial perspective\" - they are using these diagrams to think about algebraic structures like monads, quantum groups and such, and well-chosen curves can make it clearer what's going on algebraically. </p>\n<p>Somewhere <span class=\"user-mention\" data-user-id=\"623323\">@Niles Johnson</span> posted a series of pictures where he started with a poorly drawn (but technically correct) string diagrams and kept improving it.</p>",
        "id": 430120708,
        "sender_full_name": "John Baez",
        "timestamp": 1711645155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378472\">Dylan Braithwaite</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430118189\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430109794\">said</a>:</p>\n<blockquote>\n<p>We were more thinking about the not-necessarily-symmetric monoidal case</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"460603\">Malin Altenmüller</span> mentioned earlier in the thread her work on <a href=\"https://arxiv.org/abs/2210.08914\">DPO rewriting for surface embedded graphs</a> which I believe is intended to build towards a model for rewriting with planar string diagrams.</p>\n<p>Doesn't this more-or-less give a combinatorial definition of the sort you're looking for?</p>\n</blockquote>\n<p>Yes this looks promising, I'll look at it later</p>",
        "id": 430120982,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711645220
    },
    {
        "content": "<p>You may not conceptualise \"planarity\" as \"avoiding creating new faces\", and instead conceptualise it as \"avoiding intersecting lines\", but I don't believe it is possible to separate the two dual perspectives</p>",
        "id": 430121061,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430121061\">said</a>:</p>\n<blockquote>\n<p>You may not conceptualise \"planarity\" as \"avoiding creating new faces\", and instead conceptualise it as \"avoiding intersecting lines\", but I don't believe it is possible to separate the two dual perspectives</p>\n</blockquote>\n<p>Drawing a new edge between two nodes creates exactly one new face, but it does not violate planarity unless it intersects a pre-existing edge, in which case it would create more than one new face.</p>",
        "id": 430121462,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711645334
    },
    {
        "content": "<p>But <em>even if there were no faces</em>, which is the case for symmetric monoidal diagrams, I still think that if you can only interact with edges \"as a whole\", and not with some subsets of their points, that's combinatorial and not point-set topological!</p>",
        "id": 430122005,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430121462\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430121061\">said</a>:</p>\n<blockquote>\n<p>You may not conceptualise \"planarity\" as \"avoiding creating new faces\", and instead conceptualise it as \"avoiding intersecting lines\", but I don't believe it is possible to separate the two dual perspectives</p>\n</blockquote>\n<p>Drawing a new edge between two nodes creates exactly one new face, but it does not violate planarity unless it intersects a pre-existing edge, in which case it would create more than one new face.</p>\n</blockquote>\n<p>I'm talking of planarity of the <em>embedding</em> of some fixed graph, no talk of adding/removing edges.</p>",
        "id": 430122358,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645525
    },
    {
        "content": "<p>then \"creating new faces\" doesn't make sense as there are no faces at all before you embed the graph</p>",
        "id": 430122620,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711645589
    },
    {
        "content": "<p>Creating new faces <em>besides the ones you want to create</em> -- is this better?</p>",
        "id": 430123170,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645730
    },
    {
        "content": "<p>I'm imagining this in the context of our hypothetical diagram-drawing program.</p>",
        "id": 430123511,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645815
    },
    {
        "content": "<p>Oh sorry I see, I should have added the specification \"besides the intended ones\" in the original sentence.</p>",
        "id": 430124076,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711645948
    },
    {
        "content": "<p>(After all you can also plausibly \"intersect lines\" if you want to create a new node at the intersection :) )</p>",
        "id": 430124306,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711646012
    },
    {
        "content": "<p>it's also hard to say which faces are intended since there are often many non-equivalent planar embeddings of the same graph, which would result in different faces</p>",
        "id": 430124332,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711646021
    },
    {
        "content": "<p>Well, if anything this is another argument against planar string diagrams being a planar embedding of some disembodied graph. Actually you only picture the diagram in your mind as already embedded with all its faces.</p>",
        "id": 430125097,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711646192
    },
    {
        "content": "<p>right, it's either a graph equipped with a planar embedding, or it's a graph equipped with some yet-to-be-elucidated combinatorial structure (perhaps the one in the paper <span class=\"user-mention\" data-user-id=\"378472\">@Dylan Braithwaite</span> linked to, I didn't look at it yet)</p>",
        "id": 430125447,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711646246
    },
    {
        "content": "<p>My point is that the 2d faces <em>are intrinsically part</em> of the structure of a planar string diagram.</p>",
        "id": 430125875,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711646346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430121061\">said</a>:</p>\n<blockquote>\n<p>You may not conceptualise \"planarity\" as \"avoiding creating new faces\", and instead conceptualise it as \"avoiding intersecting lines\", but I don't believe it is possible to separate the two dual perspectives</p>\n</blockquote>\n<p>I do.  Avoiding intersecting lines is as simple as asking whether two functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo><mo>→</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">[a,b] \\to \\mathbb{R}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> have disjoint images.  Asking anything about \"faces\" involves the Jordan curve theorem.</p>",
        "id": 430125938,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711646362
    },
    {
        "content": "<p>It is not \"a graph + something\"... it's a 2d object</p>",
        "id": 430126021,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711646385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430122005\">said</a>:</p>\n<blockquote>\n<p>But <em>even if there were no faces</em>, which is the case for symmetric monoidal diagrams, I still think that if you can only interact with edges \"as a whole\", and not with some subsets of their points, that's combinatorial and not point-set topological!</p>\n</blockquote>\n<p>If you want to call that \"combinatorial\" that's fine with me, but as I said, that means that some \"combinatorial\" definitions require some Joyal-Street-like argument to interpret.</p>",
        "id": 430126338,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711646458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430125938\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430121061\">said</a>:</p>\n<blockquote>\n<p>You may not conceptualise \"planarity\" as \"avoiding creating new faces\", and instead conceptualise it as \"avoiding intersecting lines\", but I don't believe it is possible to separate the two dual perspectives</p>\n</blockquote>\n<p>I do.  Avoiding intersecting lines is as simple as asking whether two functions $[a,b] \\to \\mathbb{R}^2$ have disjoint images.  Asking anything about \"faces\" involves the Jordan curve theorem.</p>\n</blockquote>\n<p>Euclid understood faces in 300BC. Next thing you are going to tell me that Pythagoras' theorem involves understanding sine and cosine functions.</p>",
        "id": 430127436,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711646723
    },
    {
        "content": "<p>I love Euclid but it does not meet modern standards of rigor.  E.g. in Book 1 Prop 1 he constructs an equilateral triangle on a line segment AB by first drawing a circle with center A and radius AB and a circle with center B and radius BA, then he says \"let C be the intersection of the two circles\".  Well how do we know the circles intersect????  He is clearly missing some stuff that would be needed today to discuss planarity</p>",
        "id": 430128089,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711646884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430117052\">said</a>:</p>\n<blockquote>\n<p>I think one of my takeaways from this discussion is that it would be useful to have more precise terminology to refer to the different perspectives on string diagrams (and graphical syntaxes more generally), just as for the different perpectives on type theory (and term syntaxes more generally).</p>\n</blockquote>\n<p>It doesn't seem to be standard, even in the ACT community, but the terminology that I picked up from David Spivak is</p>\n<ul>\n<li>string diagram = topological</li>\n<li>wiring diagram = combinatorial</li>\n</ul>",
        "id": 430129578,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1711647294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430127436\">said</a>:</p>\n<blockquote>\n<p>Euclid understood faces in 300BC. Next thing you are going to tell me that Pythagoras' theorem involves understanding sine and cosine functions.</p>\n</blockquote>\n<p>Yes, and one can argue about whether Euclid understood faces as well as he thought he did.  But that wasn't the question -- you said you don't believe it is possible to <em>separate</em> the dual perspectives, and I was arguing that it is <em>possible</em>, because as an example, in the context of modern point-set topology, one perspective is easy and the other is highly nontrivial.</p>",
        "id": 430132458,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1711648154
    },
    {
        "content": "<p>I meant it is not possible to separate them in our perception of the string diagram as a physical object; I think we perceive simultaneously the lines and the regions that they bound, with no chance of isolating the ones from the others. As in the cartesian plane example: the 4 quadrants are as immediately perceived as the 2 axes. </p>\n<p>I think this is relevant to the question of what is \"close to intuition\". The \"embedded graph\" creates a separation between a disembodied graph and its embedding into a plane that I do not think exists: when we approach drawing a string diagram, I'd say we picture it already with its placement in the plane, faces and all. We don't first think about a floating node with dangling edges, and only then about \"how I should place this node and its edges on the page\".</p>",
        "id": 430136519,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711649378
    },
    {
        "content": "<p>Which is why I advocate that a combinatorial planar string diagram should be, directly, a 2d object, made of nodes, edges, and faces.</p>\n<p>Anyway, even though there's a lot of disagreement, I should say that I am thankful for this discussion, because it's giving me a lot of questions that I will need to address if I write this note/paper on \"combinatorial string diagrams\".</p>",
        "id": 430137474,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711649675
    },
    {
        "content": "<p>(And also that, while here I am playing the \"combinatorics advocate\", as I tried to say at the beginning of the discussion I am not on the \"string diagrams are REALLY combinatorial\" side -- more on the \"the combinatorial side is really sort of inextricable from the topological side, and both are equally useful\")</p>",
        "id": 430138103,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1711649867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378472\">Dylan Braithwaite</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430118189\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430109794\">said</a>:</p>\n<blockquote>\n<p>We were more thinking about the not-necessarily-symmetric monoidal case</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"460603\">Malin Altenmüller</span> mentioned earlier in the thread her work on <a href=\"https://arxiv.org/abs/2210.08914\">DPO rewriting for surface embedded graphs</a> which I believe is intended to build towards a model for rewriting with planar string diagrams.</p>\n<p>Doesn't this more-or-less give a combinatorial definition of the sort you're looking for?</p>\n</blockquote>\n<p>BTW I skimmed this paper and it is definitely in the right direction!  However it does not culminate in a combinatorial model of planar string diagrams, but leaves it for future work, perhaps that <span class=\"user-mention\" data-user-id=\"276363\">@Amar Hadzihasanovic</span> will do.</p>",
        "id": 430193655,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1711680741
    },
    {
        "content": "<p>i am probably late to the train of this conversation but i'll say what i have been thinking. it's easy to ignore :)</p>\n<p>the conversation seems to have been whether combinatorial or topological view of string diagrams was more intuitive. but a different angle could be: math is not there to comply with our intuitions, but to expand them. if i intuitively understand a puzzle, i can solve it in my head. i need the physical puzzle to twiddle with it and move it because all those moves don't fit into my intuition. math is like that physical puzzle. it helps you solve things that you couldn't solve by intuition. sometimes you solve a puzzle and still don't know what exactly you've done. archimedes really needed the sand to draw his circles. if he could do it in his head, he wouldn't have been so annoyed with the soldiers and wouldn't have gotten killed. and of all people von neumann said: \"you don't understand math. you get used to it.\"</p>\n<p>to prove unintuitive things, people drew lots of pictures, then translated them into equations so they wrote lots of equations. the theory of invariants ran equations from page to page to page. <em>diagram chasing</em> packs lots of equations into a picture. you can manipulate your equations without drowning in a flood of letters. so cell diagrams help us capture things that are <em>beyond</em> our intuitions. cell diagrams reduce sequences of equations to \"discrete homotopies\". then you add 2-cells and they aren't even discrete anymore...</p>\n<p>but we don't chase string diagrams. we write sequences of equations between string diagrams. so that looks like a step back. what might be good about that? well, for monoidal categories string diagrams give us more insightful pictures of the \"arrows\" that we would otherwise chase. they liberate us from ever having to chase around the middle-two-interchange square since both ways around it are the same string diagram, just read in different ways. so they save us a step or two in every chase. so we revert to equations because we saved a couple?</p>\n<p>on a better look, well-designed equational steps with string diagrams are geometric transformations with significant invariants. the adjunction equations just transform a boundary: \"yanking\" of the string, or twisting it in a different way. the frobenius law is a geometric transformation similar to the kempe move from his \"proof\" of 4-color theorem: you take the H and put it on the side. (though we usually look at two different Hs, more like N and И. but it is still the kempe move.) </p>\n<p>i think we write the string diagram transformations as equations because the medium we use them does not support chasing string diagrams --- and NOT because string diagrams do not support chasing. eg, if you fix the outer faces of the frobenius law as sheets and draw the two sides of the equation on two foils glued along this shared external sheet, then the law is again a \"discrete homotopy\" step, albeit with a dimension more. OR you can add a 3-cell, and it is not discrete anymore.</p>\n<p>if people set their minds to it (and if they don't drown in melted ice) i am sure someone will come up with an interface for chasing string diagrams.</p>",
        "id": 430379671,
        "sender_full_name": "dusko",
        "timestamp": 1711796005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294557\">dusko</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430379671\">said</a>:</p>\n<blockquote>\n<p>if people set their minds to it (and if they don't drown in melted ice) i am sure someone will come up with an interface for chasing string diagrams.</p>\n</blockquote>\n<p>If I understand you correctly, <a href=\"https://homotopy.io/\">homotopy.io</a> is an example of this.</p>",
        "id": 430388185,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1711803616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430120708\">said</a>:</p>\n<blockquote>\n<p>Somewhere <span class=\"user-mention silent\" data-user-id=\"623323\">Niles Johnson</span> posted a series of pictures where he started with a poorly drawn (but technically correct) string diagrams and kept improving it.</p>\n</blockquote>\n<p>Ha ha, did I?! That sounds like something I would do, since I've often found them more confusing than they are clarifying.  Maybe that happened back before Twitter imploded, when Donald and I were trying to compare string diagrams with pasting diagrams in our 2-categories book.  </p>\n<p>Probably the only nontrivial contribution I could make to this discussion is to concur that many people want to use string diagrams to convey some fact or calculation, and sometimes they are the best way to do that. (And, maybe sometimes not, but that's off-topic here.)</p>",
        "id": 430415497,
        "sender_full_name": "Niles Johnson",
        "timestamp": 1711828049
    },
    {
        "content": "<p>Hmm, I thought you did it somewhere else.   But maybe it was someone else.  I think it was in a discussion of monads and their algebras.  The first string diagram had straight lines, and then whoever it was started curving them and explaining how this made the meaning clearer.</p>",
        "id": 430419113,
        "sender_full_name": "John Baez",
        "timestamp": 1711831708
    },
    {
        "content": "<p>Hmmm, no I think that must have been someone else.</p>",
        "id": 430419906,
        "sender_full_name": "Niles Johnson",
        "timestamp": 1711832572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430419113\">said</a>:</p>\n<blockquote>\n<p>Hmm, I thought you did it somewhere else.   But maybe it was someone else.  I think it was in a discussion of monads and their algebras.  The first string diagram had straight lines, and then whoever it was started curving them and explaining how this made the meaning clearer.</p>\n</blockquote>\n<p>I would be interested to see that.</p>",
        "id": 430420420,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711833145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430419113\">said</a>:</p>\n<blockquote>\n<p>Hmm, I thought you did it somewhere else.   But maybe it was someone else.  I think it was in a discussion of monads and their algebras.  The first string diagram had straight lines, and then whoever it was started curving them and explaining how this made the meaning clearer.</p>\n</blockquote>\n<p>Sounds like some material from Ralf Hinze and <span class=\"user-mention\" data-user-id=\"275973\">@Dan Marsden</span> 's book \"Introducing String Diagrams.\"</p>",
        "id": 430420454,
        "sender_full_name": "Samuel Steakley",
        "timestamp": 1711833197
    },
    {
        "content": "<p>Right, it was <span class=\"user-mention\" data-user-id=\"275973\">@Dan Marsden</span>!   <a href=\"https://mathstodon.xyz/@stringdiagram/111618128602603125\">Here is an example</a>.</p>",
        "id": 430423177,
        "sender_full_name": "John Baez",
        "timestamp": 1711836298
    },
    {
        "content": "<p>Dan doesn't actually say that the different versions convey information better/worse (or how they do, if they do). He just says:</p>\n<blockquote>\n<p>there's a lot of scope for artistic expression.</p>\n</blockquote>",
        "id": 430451622,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1711865743
    },
    {
        "content": "<p>Ralf and Dan make some stronger statements about better/worse design in <a href=\"https://www.cambridge.org/core/books/introducing-string-diagrams/36F8F1BCA0C61522283C2FED620EBC0D\">Introducing String Diagrams</a> (e.g. page 43).</p>",
        "id": 430455841,
        "sender_full_name": "Samuel Steakley",
        "timestamp": 1711869844
    },
    {
        "content": "<p>I've alway been interested in this point about drawing the diagrams to improve human intuition, which is why I manually lay out the tikz for each of my diagrams. An early remark in freely available work is in my preprint <a href=\"https://arxiv.org/pdf/1401.7220.pdf\">https://arxiv.org/pdf/1401.7220.pdf</a>, remark 4.19 on artistic values, in that case relating to distributive law axioms. (The diagrams are the opposite way up to my later work with Ralf).</p>",
        "id": 430461256,
        "sender_full_name": "Dan Marsden",
        "timestamp": 1711875378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/430451622\">said</a>:</p>\n<blockquote>\n<p>Dan doesn't actually say that the different versions convey information better/worse (or how they do, if they do). He just says:</p>\n<blockquote>\n<p>there's a lot of scope for artistic expression.</p>\n</blockquote>\n</blockquote>\n<p>Somewhere he did say that, I'm pretty sure.  What I just found seems like a very abbreviated version of what he actually said somewhere.</p>",
        "id": 430494427,
        "sender_full_name": "John Baez",
        "timestamp": 1711907085
    },
    {
        "content": "<p>In remark 4.19 he shows a diagram that he says is worse than some other one, but I seem to be remembering something else.</p>",
        "id": 430495196,
        "sender_full_name": "John Baez",
        "timestamp": 1711907789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429748437\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"280784\">Joshua Meyers</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429737819\">said</a>:</p>\n<blockquote>\n<p>whoa I'd love to see a kind of string diagram that works natively in a general weak monoidal category where I don't have to always ask myself why it's okay to assume that a weak monoidal category is really strict...</p>\n</blockquote>\n<p>String diagrams do work natively in a weak monoidal category. This is maybe not so well-known. I don't know of a paper that spells this out completely, but <span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> and I have both considered writing something.</p>\n<p>The kind of compositional structure that string diagrams most naturally describe is a \"(colored) pro\" -- it's like a multicategory, except the arrows can have multiple outputs as well as multiple inputs. Pros are essentially algebraic (just like categories or multicategories). I could spell out an essentially algebraic definition if someone wanted.</p>\n<p>(A pro can equivalently be characterized as a strict monoidal category whose underlying monoid of objects is free. But let's prefer to think of a pro as a basic gadget in its own right. The reason being, we'll actually define monoidal categories in terms of pros. It's not a circular definition; you can define a pro without referring to monoidal categories.)</p>\n<p>A pro is called \"representable\" if every list of objects (or equivalently, every pair of objects as well as the empty list) is isomorphic to a single object.</p>\n<p>Theorem: The category of (weak) monoidal categories and (strong) monoidal functors is equivalent to the category of representable pros (in which the maps are just homomorphisms of pros, given by the essentially algebraic definition). Among other things, this theorem tells you that string diagrams work natively in a weak monoidal category.</p>\n<p>(I think <span class=\"user-mention silent\" data-user-id=\"276363\">Amar Hadzihasanovic</span> also posted this same thing recently somewhere else on this Zulip, but it seems relevant here also and I want to spread the word wherever possible.)</p>\n<p>You might look at this and be unimpressed, because you already knew that every monoidal category is equivalent to a strict one (and a pro is supposedly just some special kind of strict monoidal category). What's interesting is that \"representable pro\" is a good <em>definition</em> of \"monoidal category\". It's another way of presenting the same information as the usual definition. (Whenever I want to think about monoidal categories and monoidal functors I am secretly thinking about representable pros, because it's so much easier.) On the other hand, \"strict monoidal category\" is not a good definition of \"monoidal category\"; the category of monoidal categories is not equivalent to the category of strict monoidal categories and strict functors.</p>\n<p>You can also see <a href=\"https://arxiv.org/pdf/2201.11738.pdf\">String diagrams for non-strict monoidal categories</a>. I don't think they talk about pros, but I think it is basically the same story.</p>\n</blockquote>\n<p>Can you please explain how to use \"representable pro\" as a good definition of \"monoidal category\", such that you can secretly think about representable pros instead whenever you have to think about monoidal categories?</p>",
        "id": 435426440,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1714062628
    },
    {
        "content": "<p>I get the general idea but I would like to see the details</p>",
        "id": 435459360,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1714075546
    },
    {
        "content": "<p>Hi, sure. I gave a talk about this earlier in the year. The fastest way for me to put together an explanation right now is to just share my script and slides from that talk.</p>\n<p><a href=\"https://docs.google.com/document/d/1o791NNK6xcIc_6Y8gbdWLxk64n2RE86rjRJBqqDaXJ4/edit?usp=sharing\">https://docs.google.com/document/d/1o791NNK6xcIc_6Y8gbdWLxk64n2RE86rjRJBqqDaXJ4/edit?usp=sharing</a></p>\n<p>But we'll see how effective this is. It's probably still not enough detail. Feel free to ask me to elaborate on anything specifically.</p>",
        "id": 435494501,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1714096656
    },
    {
        "content": "<p>I read through this, very nice.  My first thought is that the particular choice of isomorphisms should be included as part of the structure of a representable pro --- otherwise you risk using different isomorphisms different times and not having them cancel as is required for many of the arguments.  That said, it is surprising to me that there don't seem to be any coherence conditions required of the choice of isomorphisms, or any requirement that they be preserved by maps of representable pros.</p>",
        "id": 435602821,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1714143430
    },
    {
        "content": "<p>The choice of representing isomorphisms is unique up to a unique equivalence, so I think that the proper way to approach this is to impose a choice if one wants an <em>equivalence of categories</em>, but a choice is not actually needed if one wants a <em>biequivalence of 2-categories</em>...</p>",
        "id": 435605115,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714144119
    },
    {
        "content": "<p>Maps of representable pros respecting a given choice would correspond to <em>strict</em> monoidal functors.</p>",
        "id": 435605278,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714144181
    },
    {
        "content": "<p>My point is that this argument doesn't work without imposing a choice.  \"tensoring cancels with untensoring\" fails if you use two different tensoring morphisms<br>\n<a href=\"/user_uploads/21317/pX9zz095aqAWd7iYXjygqP1M/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/pX9zz095aqAWd7iYXjygqP1M/image.png\" title=\"image.png\"><img src=\"/user_uploads/21317/pX9zz095aqAWd7iYXjygqP1M/image.png\"></a></div>",
        "id": 435605869,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1714144355
    },
    {
        "content": "<p>Ah, sorry, yes: the \"untensoring\" morphisms do have to be the inverses of the \"tensoring\" ones.</p>",
        "id": 435606194,
        "sender_full_name": "Amar Hadzihasanovic",
        "timestamp": 1714144467
    },
    {
        "content": "<p>It's true that the direct translation process goes between <em>representable pros + chosen isomorphisms</em> on one hand and <em>monoidal categories</em> on the other hand. But also, monoidal functors between monoidal categories correspond to maps between their underlying pros <em>not</em> respecting the chosen isomorphisms.</p>",
        "id": 435606280,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1714144498
    },
    {
        "content": "<p>So the category of monoidal categories is equivalent to the category of representable pros <em>without</em> chosen tensor isomorphisms. (Or, if you prefer, it's the category of representable pros <em>with</em> chosen tensor isomorphisms but with maps <em>not</em> respecting them. These are equivalent categories.)</p>",
        "id": 435606697,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1714144634
    },
    {
        "content": "<p>Even more precisely, <em>strong</em> monoidal functors correspond to pro-maps not respecting the chosen isomorphisms, while <em>strict</em> monoidal functors correspond to pro-maps that do respect the chosen isomorphisms.</p>",
        "id": 435610792,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1714145969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"546041\">Aaron David Fairbanks</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/435494501\">said</a>:</p>\n<blockquote>\n<p>Hi, sure. I gave a talk about this earlier in the year. The fastest way for me to put together an explanation right now is to just share my script and slides from that talk.</p>\n<p><a href=\"https://docs.google.com/document/d/1o791NNK6xcIc_6Y8gbdWLxk64n2RE86rjRJBqqDaXJ4/edit?usp=sharing\">https://docs.google.com/document/d/1o791NNK6xcIc_6Y8gbdWLxk64n2RE86rjRJBqqDaXJ4/edit?usp=sharing</a></p>\n<p>But we'll see how effective this is. It's probably still not enough detail. Feel free to ask me to elaborate on anything specifically.</p>\n</blockquote>\n<p>Is the double category story at the end written down anywhere?</p>",
        "id": 435679031,
        "sender_full_name": "Nathaniel Virgo",
        "timestamp": 1714179818
    },
    {
        "content": "<p>No. <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> and I have an unfinished paper about this. It was also back in this Zulip thread from a long time ago: <a href=\"#narrow/stream/229199-learning.3A-questions/topic/representable.20props.20and.20pros/near/301511384\">https://categorytheory.zulipchat.com/#narrow/stream/229199-learning.3A-questions/topic/representable.20props.20and.20pros/near/301511384</a></p>",
        "id": 435680169,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1714180921
    },
    {
        "content": "<p>I am going to have more free time soon, so I'll try to finish some of these projects.</p>",
        "id": 435680618,
        "sender_full_name": "Aaron David Fairbanks",
        "timestamp": 1714181345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276092\">Nathanael Arkor</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429855141\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277391\">Cole Comfort</span> <a href=\"#narrow/stream/232160-learning.3A-reading-.26-references/topic/String.20diagrams/near/429850941\">said</a>:</p>\n<blockquote>\n<p>I think that the exposition of string diagrams for non-strict monoidal/symmetric monoidal categories in the literature is quite lacking. </p>\n</blockquote>\n<p>I admit I am still a little perplexed by even the term \"string diagrams for non-strict monoidal categories\", because my impression was that the entire point of string diagrams was that they could be used to reason about arbitrary monoidal categories. The authors of \"String diagrams for non-strict monoidal categories\" seem to agree with this. However, they claim it is still useful to be explicit about the non-strictness for examples, but I did not find their examples supported this claim. An alternative proof of the coherence theorem is one application, but it seems to me that, after one has proven the coherence theorem that way, one is justified in never using the more explicit notion of string diagram again. What am I missing?</p>\n</blockquote>\n<p>FWIW, I found this thread precisely because I was looking for string diagram formalisms in non-strictly associative settings. In my thesis I'm doing a lot of reasoning on equalities between morphisms in wild categories, which in many cases can be reasoned about as though they were bicategories, except that they crucially don't satisfy the same coherence/strictification result. It would still be nice to have some graphical formalism that eases the equational bureaucracy..</p>",
        "id": 460066247,
        "sender_full_name": "Josh Chen",
        "timestamp": 1723463376
    },
    {
        "content": "<p>What are \"wild categories\"?</p>",
        "id": 460089884,
        "sender_full_name": "John Baez",
        "timestamp": 1723471588
    },
    {
        "content": "<p>They're most immediately understood in a HoTT setting, where they're defined just like what the HoTT book precategories, except where precategories have <em>sets</em> of morphisms, wild categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> have arbitrary morphism <em>types</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mrow><mi mathvariant=\"normal\">T</mi><mi mathvariant=\"normal\">y</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi></mrow></mrow><annotation encoding=\"application/x-tex\">C(x,y) : \\mathrm{Type}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Type</span></span></span></span></span>.</p>\n<p>Losing the set truncatedness condition means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> no longer behaves as expected of a 1-category nor a nicely coherent <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-category, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is some \"wild\", or precoherent, version of an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-cat.</p>",
        "id": 460098325,
        "sender_full_name": "Josh Chen",
        "timestamp": 1723474368
    },
    {
        "content": "<p>Classically, I think they roughly correspond to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-restricted simplicial spaces (i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">Δ</mi><mrow><mo>≤</mo><mi>n</mi></mrow><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msubsup><mo>×</mo><msup><mi mathvariant=\"normal\">Δ</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup><mo>→</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\Delta_{\\le n}^{\\mathrm{op}} \\times \\Delta^{\\mathrm{op}} \\to \\mathrm{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1379em;vertical-align:-0.3556em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7823em;\"><span style=\"top:-2.4396em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.1809em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3556em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span></span></span></span>) with some appropriately restricted Segal condition, or maybe some kind of \"wild enrichment\" in Batanin-Leinster weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>-groupoids... I'm investigating them as a building block/stepping stone to do \"enough\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-category theory in book HoTT.</p>",
        "id": 460099777,
        "sender_full_name": "Josh Chen",
        "timestamp": 1723474817
    }
]