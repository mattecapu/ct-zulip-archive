[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276696\">@Ambroise</span> and I just released a preprint we've been (intermittently) working on for the last two years or so.<br>\nIt's called <a href=\"https://hal.archives-ouvertes.fr/hal-03633933\">A unified treatment of structural definitions on syntax for capture-avoiding substitution, context application, named substitution, partial differentiation, and so on</a>, in humble reference to Kelly's mythical paper.</p>\n<p>Rather than copy-pasting the abstract, let me explain the basic idea from a different point of view. As previously discussed here, one of the main categorical approaches to generating syntaxes from basic data is Fiore, Plotkin, and Turi (FPT)'s <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>-monoids: </p>\n<ul>\n<li>a signature is a <em>pointed strong</em> endofunctor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> on a nice monoidal category; </li>\n<li>each such functor has a category of models, called <em><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>-monoids</em>, which are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>-algebras equipped with compatible monoid structure;</li>\n<li>monoid structure models capture-avoiding substitution (it <em>is</em> substitution in examples);</li>\n<li>the main theorem is that the initial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(I+\\Sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Σ</span><span class=\"mclose\">)</span></span></span></span>-algebra is in fact (uniquely) an initial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>-monoid, which means that it freely comes with substitution.</li>\n</ul>\n<p>Our work widely generalises the approach, and at the same time attempts to clarify it.</p>\n<p>Let me explain the latter point first.<br>\nOne aspect that has always bugged me about FPT is the status of <em>pointed strengths</em>. Very roughly, they amount to assuming that certain objects already have part of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>-algebra structure in order for substitution to make sense, which seems rather arbitrary.</p>\n<p>In our work, we instead work with all objects, and consider the free  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(I+\\Sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Σ</span><span class=\"mclose\">)</span></span></span></span>-algebra structure on them. This makes the whole framework more straightforward, I think, albeit perhaps a bit more low-level.</p>\n<p>Finally, in what sense do we generalise FPT? Well, FPT merely deals with capture-avoiding substitution, which is in fact only one of the many auxiliary operations that operational semanticists define on syntax every day: we start investigating other auxiliary operations. We do not yet cover all of them, but we catch a fairly large class.</p>\n<p>We'd be very interested in hearing constructive comments! (Maybe I'll ping some of the local experts: <span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span>, <span class=\"user-mention\" data-user-id=\"297784\">@Jon Sterling</span>,  <span class=\"user-mention\" data-user-id=\"398565\">@Marcelo Fiore</span>, <span class=\"user-mention\" data-user-id=\"308397\">@Sam Staton</span>, <span class=\"user-mention\" data-user-id=\"276839\">@Damiano Mazza</span>, are you around?)</p>",
        "id": 278269962,
        "sender_full_name": "Tom Hirschowitz",
        "timestamp": 1649405576
    },
    {
        "content": "<p>Thanks for sharing, I'm excited to take some time to read your paper!</p>",
        "id": 278318209,
        "sender_full_name": "Jon Sterling",
        "timestamp": 1649430647
    },
    {
        "content": "<p>Thanks for pinging me – I'm looking forward to taking a look when I have some time!</p>",
        "id": 278677096,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1649761624
    }
]