[
    {
        "content": "<p>My paper \"The derivator of setoids\" is now on the arxiv: <a href=\"https://arxiv.org/abs/2105.08152\">https://arxiv.org/abs/2105.08152</a>.</p>\n<p>Here is the abstract:</p>\n<blockquote>\n<p>Without the axiom of choice, the free exact completion of the category of sets (i.e. the category of setoids) may not be complete or cocomplete. We will show that nevertheless, it can be enhanced to a derivator: the formal structure of categories of diagrams related by Kan extension functors. Moreover, this derivator is the free cocompletion of a point in a class of \"1-truncated derivators\" (which behave like a 1-category rather than a higher category).</p>\n<p>In classical mathematics, the free cocompletion of a point relative to all derivators is the homotopy theory of spaces. Thus, if there is a homotopy theory that can be shown to have this universal property constructively, its 1-truncation must contain not only sets, but also setoids. This suggests that either setoids are an unavoidable aspect of constructive homotopy theory, or more radical modifications to the notion of homotopy theory are needed. </p>\n</blockquote>",
        "id": 239358604,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621393748
    },
    {
        "content": "<p>This paper has a funny story.</p>",
        "id": 239358958,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621394080
    },
    {
        "content": "<p>One of the projects I'm \"supposed\" to be working on right now (and which I'm going to talk about at the topos institute next week -- yikes, I should write those slides) is giving an explicit description of the semantics of 1-truncated HoTT in (2,1)-toposes.  The point is partly pedagogical, but also preliminary to <em>another</em> project I'm supposed to be working on, of finally making sense of \"stack semantics\" as a first-order fragment of the internal 1-truncated HoTT of the (2,1)-topos of stacks over an elementary topos.</p>",
        "id": 239358961,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621394083
    },
    {
        "content": "<p>But as I was working on this (2,1)-topos semantics, everything seemed so explicit that I thought surely it must be possible to do in constructive mathematics, so I started trying to do it that way.  But then I started running into unexpected snags, and so of course instead of giving up and just doing it classically I felt the need to figure out what was going on.  (This isn't just stubbornness and curiosity -- elementary topos theory is itself so constructive that it would be disappointing if stack semantics, which is supposed to be an extension of the usual internal logic of a topos, required a classical metatheory.)</p>",
        "id": 239359122,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621394230
    },
    {
        "content": "<p>Some of the problems I was encountering seemed like they would go away if I worked with \"e-groupoids\" instead of ordinary groupoids.  Intuitively, an e-category is a \"category enriched over setoids\".  So I had setoids turning over in my head, trying to figure out if there was a good general way to work with e-groupoids and ordinary groupoids in parallel.</p>",
        "id": 239359235,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621394340
    },
    {
        "content": "<p>Then about 2 months ago my family was out camping at Joshua Tree National Park, and one night I couldn't sleep.  So I lay in my sleeping bag and thought about setoids, and probably about 3am it struck me that setoids must form a derivator.</p>",
        "id": 239359337,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621394421
    },
    {
        "content": "<p>Being able to put the words \"setoid\" and \"derivator\" in the same sentence was such an exciting thought that when we got home I had to work it out.  I'm quite happy with how it came out.  True, I still don't really understand what's up with setoids, but at least I have a clearer picture of what I don't understand.  And it hasn't really solved my problems with constructive (2,1)-toposes either; but at least I have a clearer idea of what the problems are, and some ideas about how to manage them.</p>",
        "id": 239359657,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621394722
    },
    {
        "content": "<p>You note that \"some weak form of the axiom of choice seems to be necessary to prove that the bicategoryof categories and anafunctors is cartesian closed\", but it's definitely true that an additional axiom <em>is</em> required, even if interpreting it as a Choice principle is not clear. Simon Henry asked about something relevant on MO for the purposes of his constructive version of model categories. There is an explicit model of ZF, given in the answers, where the hom-groupoid in Gpd_ana from disc(N) to B(Z/2) is not small. One can re-do this entirely in the topos world, too, of course, along the lines of my WISC paper (I had a student learn about topos theory using the topos where this works as an eventual target). It's a really nice and relatively simple example that I hope to write up the proof of one day. It's just not clear where it would go, since it's a tiny result, in the grand scheme of things.</p>",
        "id": 239369243,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621403375
    },
    {
        "content": "<p>Since Figures 1 and 3 describe a preorder of \"free relative cocompletions of a point\", it seems likely that these preorders relate in a strong sense to <a href=\"https://arxiv.org/abs/1706.09575\">preorders of KZ doctrines</a> on a 2-category, e.g. on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-truncated derivators, though perhaps one must also account for the weakness inherent in the homotopical structure. Do you think something precise can be said in this direction?</p>",
        "id": 239402420,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1621421739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span> Thanks!  I'll mention that in the paper.  I presume that in this model <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><msub><mi mathvariant=\"normal\">d</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Gpd_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Gp</span><span class=\"mord\"><span class=\"mord mathrm\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is also not complete, e.g. it has no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-fold power of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(\\mathbb{Z}/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 239434188,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621434640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276092\">@Nathanael Arkor</span> I don't quite see what you have in mind.  All the derivators in question are cocomplete in the same sense; the difference is in what kind of category they are.  What 2-category are you thinking of your lax-idempotent 2-monads living on?</p>",
        "id": 239434935,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621434875
    },
    {
        "content": "<p>The sort of statement I'm imagining is: \"A left derivator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi></mrow><annotation encoding=\"application/x-tex\">\\mathscr I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:0em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.19189em;\">I</span></span></span></span> is a relative cocompletion of a point if there exists a KZ doctrine <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi><mo>≃</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathscr I \\simeq T(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:0em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.19189em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.\". The 2-category in question could be the 2-category of left derivators, for instance. Then, since evaluation of KZ doctrines at 1 should preserve their order, Fig. 1 would describe the preorder of KZ doctrines.</p>",
        "id": 239436160,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1621435292
    },
    {
        "content": "<p>I guess it's possible that locality could be represented by a lax-idempotent 2-monad.  Maybe T-local left derivators are even a reflective subcategory?  I haven't really thought about it.</p>",
        "id": 239437073,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621435611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span>  Hmm, I haven't shown that. The topos is externally cocomplete, but it's likely that the universal property the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-fold power fails in the internal language.</p>\n<p>The topos in question is the category of continuous <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78055em;vertical-align:-0.09722em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.0593em;\">G</span></span></span></span>-sets, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78055em;vertical-align:-0.09722em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.0593em;\">G</span></span></span></span> the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">O</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">d</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Ord}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ord</span></span></span></span></span>-indexed product of copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span></span></span></span>, with the profinite topology. One might instead adapt the proof to the topos of <em>uniformly</em> continuous <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78055em;vertical-align:-0.09722em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.0593em;\">G</span></span></span></span>-sets, to get a non-cocomplete topos. I just thought of that now, so I'd have to double check.</p>",
        "id": 239515337,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621469767
    },
    {
        "content": "<p>I guess you mean for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">d</mi></mrow><mrow><mi>a</mi><mi>n</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Gpd}_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Gpd</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span></span></span></span> to be enriched over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">P</mi><mi mathvariant=\"normal\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{GPD}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">GPD</span></span></span></span></span>, the category of large groupoids... And clearly it's not a priori true that even if the power exists in the internal sense, it's going to be the same as in external sense. Although I'm a bit suspicious that I'm being thick and because of stack semantics magic, they will be the same.</p>",
        "id": 239516046,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621470320
    },
    {
        "content": "<p>I'm a bit confused about what the take-home lessons should be. I'd rather take “radical modifications to the notion of homotopy theory” than conclude that “setoids are an unavoidable aspect of constructive homotopy theory” (but to each their own).<br>\nHave I got it right if I summarize the situation as follows:</p>\n<ul>\n<li>When working in constructive set theory, we have to be very careful how we formalize category theory. We need to use ana-functors (and hence maybe WISC?) and ana-derivators. This is essentially because categories live at the level of 1-truncated mathematics, so dealing with them purely in 0-truncated mathematics is a pain. (BTW, it seems that the correct notion of morphisms in the exact completion should then be ana-functions, because then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Set}_{\\mathrm{ex}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> would be equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span></span></span></span> and we'd have fewer problems. But ana-functions don't appear in the paper.)</li>\n<li>When working in univalent foundations, everything should work without a hitch if we define derivators in the proper <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(2,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-categorial way, taking (univalent) categories as inputs. (Presumably (Der2) should be changed to concern the core inclusion?) Then the “bad” version of exact completion won't be a derivator, and all is well.</li>\n</ul>\n<p>It seems the exercise of going straight from 0-truncated mathematics to spaces is too big a jump; perhaps it would be better to separately study how to do 1-truncated (constructive) mathematics using constructive set theory, and as a separate step jump to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>?</p>\n<p>I think the final question in the paper, whether Type gives rise to a derivator that is the free cocompletion of a point, merits some investigation. (Even if it's a bit premature at the moment.) Why would this require AC and not just SC (Sets Cover)? It's not even clear to me that SC would be needed, though it might be needed to show that there is a combinatorial presentation of this derivator.</p>",
        "id": 239578991,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1621512463
    },
    {
        "content": "<p>Continuing my train of thought from before: I think that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">d</mi></mrow><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Gpd}_\\mathrm{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Gpd</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span></span></span></span> might fail to have the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-power of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}(\\mathbb{Z}/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">B</span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mclose\">)</span></span></span></span> as soon as countable choice fails in the underlying set theory! This is not working internally, though, just in a classical metatheory with a topos of (classical) sets where a counted product of countable sets can be empty. More precisely, if we have an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-indexed family of 2:1 surjections <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mi>n</mi></msub><mo>↠</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">Q_n \\twoheadrightarrow \\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">↠</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>, then it possible that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow></msub><msub><mi>Q</mi><mi>n</mi></msub><mo>≃</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\prod_{n\\in\\mathbb{N}} Q_n\\simeq \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18251299999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathbb mtight\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span>. In such a model of set theory I believe the power under discussion fails to exist.  But I should write out the details and send them to you, <span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> , to see if I'm missing something.</p>",
        "id": 239582025,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621513813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276422\">@David Michael Roberts</span> That would be very interesting to see!</p>",
        "id": 239602891,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621521600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278656\">Ulrik Buchholtz</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239578991\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused about what the take-home lessons should be. I'd rather take “radical modifications to the notion of homotopy theory” than conclude that “setoids are an unavoidable aspect of constructive homotopy theory” (but to each their own).</p>\n</blockquote>\n<p>For me I think it depends on the nature of the modifications.  I like HoTT, obviously.  It's less clear to me whether using anafunctors and WISC is sufficient to yield a well-behaved category theory in set-based constructive mathematics. <br>\n E.g. if as David suggests <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><msub><mi mathvariant=\"normal\">d</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Gpd_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Gp</span><span class=\"mord\"><span class=\"mord mathrm\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> can fail to have countable powers as soon as countable choice fails, that seems pretty bad to me.  For instance, I would like to be able to define stacks of groupoids, but defining the \"category of descent data\" (not to speak of the stackification) requires taking limits that would in general be infinite.</p>\n<p>However, in the paper I tried to stick as much as possible to facts rather than polemic, and let readers make their own decisions.  If you have suggestions for how to make it less confusing, I'd be happy to hear them.</p>\n<blockquote>\n<p>(BTW, it seems that the correct notion of morphisms in the exact completion should then be ana-functions, because then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Set}_{\\mathrm{ex}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> would be equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span></span></span></span> and we'd have fewer problems. But ana-functions don't appear in the paper.)</p>\n</blockquote>\n<p>Well, the exact (ex/lex) completion is determined by a universal property, so it is what it is.  Using ana-functions gives a different category, namely the ex/reg completion of Set, which is equivalent to Set because Set is already exact.  (By the way, one can imagine working in a foundational system where Set is regular but not exact, such as type theory with propositional truncation but not quotients; in that case one can argue that it's the ex/reg completion of Set that is the good category, just as in type theory without either one <em>has</em> to take the ex/lex completion to get an exact category.)</p>",
        "id": 239604765,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621522245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278656\">Ulrik Buchholtz</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239578991\">said</a>:</p>\n<blockquote>\n<ul>\n<li>When working in univalent foundations, everything should work without a hitch if we define derivators in the proper <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(2,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-categorial way, taking (univalent) categories as inputs. (Presumably (Der2) should be changed to concern the core inclusion?) Then the “bad” version of exact completion won't be a derivator, and all is well.</li>\n</ul>\n</blockquote>\n<p>Actually I <em>would</em> expect <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Set_{ex}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Se</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> to still be a derivator in this univalent sense.  In fact I would expect roughly the same proof as in set-based mathematics to show that it is a derivator taking all precategories as inputs.  In set-based mathematics we can't necessarily go from a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span>-indexed derivator to a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>-indexed derivator because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is a <em>non-reflective</em> localization of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span>, and so a derivator like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Set_{ex}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Se</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> that doesn't invert weak equivalences in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\rm Cat</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span></span></span></span></span> doesn't descend to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>.  But in the univalent world the 2-category of univalent categories is a reflective subcategory of that of precategories, so we can just <em>restrict</em> a precategory-indexed derivator to a univalent-category-indexed one.</p>\n<p>This is why I would conjecture that AC and not just SC is required to show that Type is the free cocompletion of a point: in addition to knowing that Type is built out of sets (or at most 1-types), we need to get rid of the exact completions that are still around.  I could be wrong in this, but it's my current best guess.</p>\n<p>Regarding the need for SC, I would expect that even in UF there's a set-based (or 1-type-based) construction of a derivator that is a free cocompletion of a point, and so if we want this to be equivalent to Type we need sets cover (or at least 1-types cover).</p>",
        "id": 239638601,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621535524
    },
    {
        "content": "<p>Quoting from the abstract:<br>\n<span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239358604\">said</a>:</p>\n<blockquote>\n<p>Without the axiom of choice, the free exact completion of the category of sets (i.e. the category of setoids) may not be complete or cocomplete.</p>\n</blockquote>\n<p>So it seems that what is meant by \"the\" category of setoids matters quite a bit. Because in \"pure\" MLTT, one can fully mechanize that <a href=\"https://agda.github.io/agda-categories/Categories.Category.Instance.Properties.Setoids.Complete.html\">Setoids is complete</a> and <a href=\"https://agda.github.io/agda-categories/Categories.Category.Instance.Properties.Setoids.Cocomplete.html\">cocomplete</a> .  No need for anything fancy at all.</p>",
        "id": 239770861,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1621611699
    },
    {
        "content": "<p>I think Mike is talking about the actual (not e-) category obtained by quotienting the Hom-setoids down to sets.</p>",
        "id": 239775754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1621613509
    },
    {
        "content": "<p>I think so too. Which reinforces my point: it matters quite a bit which version you're talking about. The e-category of setoids is fairly nice - though not as nice as the (classical) Set-category of Sets.</p>",
        "id": 239776288,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1621613738
    },
    {
        "content": "<p>Right!  That's why I said \"the category of setoids\", not \"the e-category of setoids\".  (-:  And why I put that only in a parenthetical, since \"the free exact completion of the category of sets\" is also unambiguous.</p>",
        "id": 239788364,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621619278
    },
    {
        "content": "<p>I find it really fascinating how delicate a lot of this is. Parts of category theory seems very robust (set-enriched 1-categories and E-categories mostly work the same, for hundreds of definitions and theorems), but their interplay is more subtle.</p>",
        "id": 239791436,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1621620699
    },
    {
        "content": "<p>I think part of that is due to how general and formal a lot of what we think of as \"category theory\" really is.  A huge amount of category theory can be done abstractly in a 2-category with very little additional extra structure.</p>",
        "id": 239796565,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621623173
    },
    {
        "content": "<p>It can also be viewed as an instance of the fact that most of category theory generalizes without a hitch to higher category theory, since an E-category can be regarded as a tricategory whose hom-bicategories are weakly discrete.</p>",
        "id": 239797090,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621623392
    },
    {
        "content": "<p>Is the E-category of setoids the exact completion of the (E-)category of sets, in the world of E-categories?</p>",
        "id": 239815903,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621632962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239604765\">said</a>:</p>\n<blockquote>\n<p>For me I think it depends on the nature of the modifications.  I like HoTT, obviously.  It's less clear to me whether using anafunctors and WISC is sufficient to yield a well-behaved category theory in set-based constructive mathematics.</p>\n</blockquote>\n<p>Maybe we can be more precise about the desiderata. I'd say that we want a development of category theory in a predicative constructive set-theory setting (maybe MLTT+UIP+FunExt+PropExt+QITs+WISC, or some form of CETCS), that is <em>adequate</em> wrt a “standard” interpretation of this theory in terms of 0-truncated objects in HoTT+SC+WISC, in a sense that would have to be made precise, but could include requirements that the basic notions of category theory are definable and mean the right things (as judged by the interpretation) and maybe that categories definable in HoTT be definable up to equivalence, and that the same (co)completeness properties obtain. (One could also imagine a semantic version of adequacy, e.g., in terms of 1-sheaves of categories in 1-localic Grothendieck toposes.)</p>\n<p>Maybe E-categories achieve this, I don't know. But maybe it's simply not possible, which would be evidence that category theory is properly 1-dimensional and cannot be adequately captured in 0-truncated mathematics, unless we're in a sufficiently classical setting.</p>\n<blockquote>\n<p>However, in the paper I tried to stick as much as possible to facts rather than polemic, and let readers make their own decisions.  If you have suggestions for how to make it less confusing, I'd be happy to hear them.</p>\n</blockquote>\n<p>I didn't yet read it all the way through (I started with the introduction and the conclusion), so it's possible that all confusions will be dispelled upon further reading. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<blockquote>\n<p>Well, the exact (ex/lex) completion is determined by a universal property, so it is what it is.  Using ana-functions gives a different category, namely the ex/reg completion of Set, which is equivalent to Set because Set is already exact.</p>\n</blockquote>\n<p>Right, but in this setting where Set is already exact (or just regular), the ex/lex completion is arguably an unnatural thing to look at, exactly because it forgets the regular structure, which is why it's non-idempotent and somewhat confusing to think about as a completion. (It's like taking the free group on the underlying set of a group.)</p>\n<p>BTW, you mention in Footnote 5 that it's unclear whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub><msub><mo stretchy=\"false\">)</mo><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">(\\mathrm{Set}_{\\mathrm{ex}})_{\\mathrm{ex}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Set</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> can be made into a derivator. I don't know what to expect, but if all the iterated ex/lex completions of Set are 1-truncated derivators, then again I'd be more inclined to say, so much the worse for derivators, than to conclude that iterated setoids are unavoidable.</p>",
        "id": 239866707,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1621683191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239797090\">said</a>:</p>\n<blockquote>\n<p>It can also be viewed as an instance of the fact that most of category theory generalizes without a hitch to higher category theory, since an E-category can be regarded as a tricategory whose hom-bicategories are weakly discrete.</p>\n</blockquote>\n<p>Whoah! What does weakly discrete mean here? Is this a foundation-neutral statement, i.e., if we formalize (3,3)-categories in HoTT and require that the hom-(2,2)-categories are weakly discrete, we get E-categories? Then shouldn't setoids also appear more naturally from higher category theory – if so, I might change my mind about them.</p>",
        "id": 239867228,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1621683784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239815903\">said</a>:</p>\n<blockquote>\n<p>Is the E-category of setoids the exact completion of the (E-)category of sets, in the world of E-categories?</p>\n</blockquote>\n<p>Hmm, I guess a proof (or disproof) in Agda wouldn't really help, would it. It wouldn't quite be about the same things. Though I do think I'll program up the exact completion construction. I can already tell there's going to be level issues.</p>",
        "id": 239872902,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1621690086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276777\">@Mike Shulman</span> I must (hopefully temporarily!) walk back my claim about being able to show the power by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> fails to exist. The approach that I had was not watertight, so I need to think a bit harder.</p>",
        "id": 239873031,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621690248
    },
    {
        "content": "<p>OK, so I believe I have fixed it, and I have to go all the way to the failure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">d</mi></mrow><mrow><mi>a</mi><mi>n</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Gpd}_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Gpd</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span></span></span></span> to be locally essentially small, not just failure of some type of Choice of small instances. It's a lot simpler than I thought, though of course I'm using the failure of a lot weaker choice principle (and proving that consistent is more work!). So I don't have the result if I assume WISC fails, which may not be quite what you want. But I can at least be more confident in my proof (certainly as the proof is much much simpler).</p>\n<p>In the first incorrect version, I had used some implicit assumption of choice for pairs, and then thought that later I needed the negation of countable choice for countable sets. But then I realised that the latter wasn't needed, only choice for pairs again, which I needed for the argument. This is why I really wanted to iron out the wrinkles!</p>",
        "id": 239876116,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621693368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239872902\">said</a>:</p>\n<blockquote>\n<p>Hmm, I guess a proof (or disproof) in Agda wouldn't really help, would it. It wouldn't quite be about the same things.</p>\n</blockquote>\n<p>Why not?</p>",
        "id": 239882359,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621698960
    },
    {
        "content": "<p>Another question: has anyone written down a construction of sheaves of setoids?  I suspect they would work better than sheaves of sets in predicative constructive mathematics -- sheafifying a presheaf of sets seems to require either impredicativity or WISC, but setoids should work without either.</p>",
        "id": 239882450,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621699050
    },
    {
        "content": "<p>Because the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span> (aka <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">T</mi><mi mathvariant=\"sans-serif\">y</mi><mi mathvariant=\"sans-serif\">p</mi><mi mathvariant=\"sans-serif\">e</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Type}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Type</span></span></span></span></span>) of Agda isn't really the same as the sets in the original question?</p>",
        "id": 239889319,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1621706334
    },
    {
        "content": "<p>But it could be.  It doesn't have any <em>more</em> properties than the latter.</p>",
        "id": 239896564,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621713665
    },
    {
        "content": "<p>That's true. It has less. One more thing to add to the pile of things to work out.</p>",
        "id": 239896901,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1621714019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276422\">David Michael Roberts</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239876116\">said</a>:</p>\n<blockquote>\n<p>OK, so I believe I have fixed it, and I have to go all the way to the failure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">d</mi></mrow><mrow><mi>a</mi><mi>n</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Gpd}_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Gpd</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span></span></span></span> to be locally essentially small, not just failure of some type of Choice of small instances.</p>\n</blockquote>\n<p>Okay, that makes sense.  I certainly expected limits in  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><msub><mi mathvariant=\"normal\">d</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Gpd_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Gp</span><span class=\"mord\"><span class=\"mord mathrm\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> to fail to exist in that model.  But that still leaves open the question of whether WISC or SVC suffices to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">p</mi><msub><mi mathvariant=\"normal\">d</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Gpd_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Gp</span><span class=\"mord\"><span class=\"mord mathrm\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is complete, right?</p>",
        "id": 239897544,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621714797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278656\">Ulrik Buchholtz</span> <a href=\"#narrow/stream/258900-practice.3A-our.20papers/topic/The.20derivator.20of.20setoids/near/239866707\">said</a>:</p>\n<blockquote>\n<p>Maybe we can be more precise about the desiderata.</p>\n</blockquote>\n<p>My current understanding is that E-categories work pretty well for just about everything \"intrinsic\".  The only problems with them that I've found so far are:</p>\n<ul>\n<li>\n<p>They don't support a very good \"strict category theory\".  For instance, there doesn't seem to be an analogue of the canonical model structure on Cat for E-categories, it's not clear how to interpret type theory in E-groupoids, and the traditional techniques of strict 2-category theory don't work for E-2-categories.  (There are probably model categories of a sort for E-categories, but they'll be significantly more complicated than the canonical model structure on Cat.)</p>\n</li>\n<li>\n<p>They don't play well when you want or need to use sets rather than setoids.  For instance, the category of 0-truncated objects in ECat is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Set_{ex}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Se</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ex</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, not Set.  (As a particular consequence, you lose any impredicativity that you started with in Set.)  And if you interpret them semantically in the type theory of a 1-topos, you don't get the \"correct\" notion of internal categories or indexed categories.</p>\n</li>\n</ul>",
        "id": 239898146,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621715452
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> does better on the second point, but also suffers from the first problem.  And of course it has the additional problem of not being locally small or complete.  WISC suffices for local smallness, but the situation for completeness seems to be currently unclear.</p>",
        "id": 239898405,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621715670
    },
    {
        "content": "<p>Finally, ordinary Cat does have a good strict category theory, and is complete and locally small.  But its category of 0-truncated objects is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">g</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Set_{reg}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Se</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\" style=\"margin-right:0.01389em;\">reg</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></span>, the reg/lex completion of Set.  And it fails to be exact in 2-categorical senses, e.g. not every 1-groupoid object in Gpd is effective, and finite (pseudo)limits don't commute with filtered (pseudo)colimits.</p>",
        "id": 239898502,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621715779
    },
    {
        "content": "<p>So my current feeling is that if WISC or something \"constructively acceptable\" like it implies that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is complete, then that's the closest we can come to a well-behaved category theory in constructive mathematics.  But if not, then maybe it's impossible.</p>",
        "id": 239898654,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621715967
    },
    {
        "content": "<blockquote>\n<p>in this setting where Set is already exact (or just regular), the ex/lex completion is arguably an unnatural thing to look at</p>\n</blockquote>\n<p>I mostly agree.  I was just saying that it does exist and is determined by a universal property, so we can't talk about \"changing the morphisms in the exact completion\" -- if we change the morphisms, it's not the (free) exact completion any more.</p>",
        "id": 239898760,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621716070
    },
    {
        "content": "<blockquote>\n<p>if all the iterated ex/lex completions of Set are 1-truncated derivators, then again I'd be more inclined to say, so much the worse for derivators, than to conclude that iterated setoids are unavoidable.</p>\n</blockquote>\n<p>Would you be satisfied with ana-derivators, if they exclude all those exact completions?</p>",
        "id": 239898854,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621716169
    },
    {
        "content": "<blockquote>\n<p>What does weakly discrete mean here?</p>\n</blockquote>\n<p>A bicategory is weakly discrete if it admits a weak biequivalence functor to a discrete bicategory.  This means that any two parallel 1-cells are related by a unique 2-cell and any 1-cell is an equivalence.</p>\n<blockquote>\n<p>Is this a foundation-neutral statement, i.e., if we formalize (3,3)-categories in HoTT and require that the hom-(2,2)-categories are weakly discrete, we get E-categories?</p>\n</blockquote>\n<p>It depends on how you formalize (3,3)-categories in HoTT.  A \"fully univalent\" 2-category that is weakly discrete is also strongly discrete, so a fully univalent 3-category with weakly discrete hom-2-categories is equivalent to an ordinary univalent 1-category.  But if you relax the univalence conditions, then you get E-categorical things.  In fact the E-dimension is closely related to the \"univalence\" direction in HoTT.  I learned this from Peter Lumsdaine's talk at the Palmgren memorial conference, and made some remarks about it at the very end of the paper.</p>\n<blockquote>\n<p>Then shouldn't setoids also appear more naturally from higher category theory – if so, I might change my mind about them.</p>\n</blockquote>\n<p>Are you saying you'd be more convinced by setoids coming from higher category theory than by setoids coming from homotopy theory?  Nowadays many people generally consider those two fields to be very closely related, if not identical...</p>",
        "id": 239899164,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621716540
    },
    {
        "content": "<p>Here are two things worthy of note:</p>\n<ol>\n<li>\n<p>If the localization functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi><mo>→</mo><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat \\to Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Cat</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> preserves infinite products, then the axiom of choice holds.  To see this, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> be a family of inhabited sets and consider the corresponding family <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">♯</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\sharp A_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">♯</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> of indiscrete groupoids.  Then the product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><mi mathvariant=\"normal\">♯</mi><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_i \\sharp A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">♯</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in Cat is the indiscrete groupoid <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">♯</mi><msub><mo>∏</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sharp \\prod_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mord\">♯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.  But since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is inhabited, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">♯</mi><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sharp A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">♯</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is equivalent to 1 in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, so the product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><mi mathvariant=\"normal\">♯</mi><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_i \\sharp A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">♯</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is also equivalent to 1.  Hence, if the localization functor preserves this product, there is an anafunctor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>→</mo><mi mathvariant=\"normal\">♯</mi><msub><mo>∏</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">1 \\to \\sharp \\prod_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mord\">♯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and hence an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.  Thus, if there is a \"constructive\" axiom ensuring that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is complete, its limits cannot be simply induced by those of Cat.</p>\n</li>\n<li>\n<p>In the internal language of a Grothendieck topos, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is complete.  This is because it is equivalent to the <em>reflective</em> sub-bicategory of Cat consisting of the small categories that are stacks for the intrinsic topology of the topos, and by an external argument every internal category has a stack completion that is again an internal category.</p>\n</li>\n</ol>\n<p>This suggests that instead of \"projective\" axioms like WISC, for completeness we should be looking at \"injective\" axioms.  One obvious such axiom is \"every small category has a small stack completion\".  I don't know if there is a less blatant one.</p>",
        "id": 239902914,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621720508
    },
    {
        "content": "<p>I wonder if the axiom of <a href=\"https://ncatlab.org/nlab/show/small+cardinality+selection+axiom\">small cardinality selection</a> implies that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi><mi mathvariant=\"normal\">a</mi><msub><mi mathvariant=\"normal\">t</mi><mrow><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\rm Cat_{ana}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ca</span><span class=\"mord\"><span class=\"mord mathrm\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">ana</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is complete.</p>",
        "id": 239958161,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1621783207
    }
]