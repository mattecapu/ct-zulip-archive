[
    {
        "content": "<p>Tomorrow will be the final meeting of this semester's Applied Category Theory Seminar. <span class=\"user-mention\" data-user-id=\"276733\">@Noson S. Yanofsky</span>  will give us a preview of his upcoming book \"Theoretical Computer Science for the Working Category Theorist\". As a member of the target audience, I'm especially excited!</p>\n<p>Speaker : Noson Yanofksy<br>\nDate : May 7 @ 2pm<br>\nTitle : Theoretical Computer Science for the Working Category Theorist<br>\nWhere : Zoom 929-1640-9872</p>\n<p>Abstract:<br>\nThis talk is a preview of a forthcoming book in the Applied Category Theory series of Cambridge University Press. The book uses basic category theory to describe all the central concepts and prove the main theorems of theoretical computer science. Category theory, which works with functions, processes, and structures, is uniquely qualified to present the fundamental results of theoretical computer science. We will meet some of the deepest ideas and theorems of modern computers and mathematics, e.g., Turing machines, unsolvable problems, the P=NP question, Kurt Gödel's incompleteness theorem, intractable problems, cryptographic protocols, Alan Turing's Halting problem, and much more. I will report on new things I learned about theoretical computer science and category theory while working on this project.</p>\n<p>as always, these details can be found at <a href=\"http://mdcats.github.io\" title=\"http://mdcats.github.io\">mdcats.github.io</a></p>",
        "id": 196664259,
        "sender_full_name": "Noah Chrein",
        "timestamp": 1588784247
    },
    {
        "content": "<p>I just watched this finally, very interesting!  (if you want to watch, <a href=\"https://www.youtube.com/watch?v=Y82xb_RF2fk\">here is the video</a>.)  This is very relevant to me right now, as this semester I am taking a course in the theory of computing as well as a reading course in category theory.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Y82xb_RF2fk\" href=\"https://www.youtube.com/watch?v=Y82xb_RF2fk\"><img src=\"https://i.ytimg.com/vi/Y82xb_RF2fk/default.jpg\"></a></div><p>Some thoughts/questions for now for <span class=\"user-mention\" data-user-id=\"276733\">@Noson S. Yanofsky</span> or whoever else wants to chime in:</p>\n<p>Turing machines (@14.53), as well as Register machines (@20.44) and circuits (@21.08) are said to form <em>bicategories</em>.  What are the 2-cells?</p>\n<p>Is there a way to give a general definition of \"computing machine\" which embraces Turing machines, Register machines, and circuits, in terms of the structures they must comprise and the functors to and from CompFunc and TotCompFunc they must partake in?</p>\n<p>@40.43 Functions are defined sending computable functions to a measure of their complexity.  It seems that you could also define more fundamental functions which send <em>algorithms</em> to a measure of their complexity; then the (time or space) complexity of a function could be defined as the minimum (time or space) complexity of any algorithm which implements the function.  The situation could occur (<em>a priori</em>, it probably does <em>a posteriori</em> but I don't know enough CS to say for sure) that, given a function, it is impossible to simultaneously minimize both time and space complexity when choosing algorithms which implement the function.  So by thinking in terms of the more fundamental functions, on algorithms, you can get a fuller picture of the relationship between time and space complexity.</p>\n<p>@57.55 Professor Yanofsky wonders what structure \"hard\" functions have in the context of cryptography, and are they closed under composition, etc.  I would say that \"easy\" functions are a subcategory of the category of all functions, and hard functions are just the complement of \"Easy\" in the category of functions, i.e. Hard <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span></span></span> Func <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> Easy.  So in particular, it doesn't seem to me that Hard is closed under composition, since I could imagine a Hard involution; then the composition of it with itself is the identity, which is clearly Easy.</p>\n<p>Great talk!  I'm really looking forward to the book coming out.</p>",
        "id": 207901716,
        "sender_full_name": "Joshua Meyers",
        "timestamp": 1598305814
    }
]